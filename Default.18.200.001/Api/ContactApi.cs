/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Acumatica.RESTClient.Client;
using Acumatica.DefaultEndpoint_18_200_001.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes the record by its session identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns></returns>
        void ContactDeleteById (Guid? id);

        /// <summary>
        /// Deletes the record by its session identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactDeleteByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes the record by the values of its key fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns></returns>
        void ContactDeleteByKeys (List<string> ids);

        /// <summary>
        /// Deletes the record by the values of its key fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactDeleteByKeysWithHttpInfo (List<string> ids);
        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Contact</returns>
        Contact ContactGetAdHocSchema ();

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> ContactGetAdHocSchemaWithHttpInfo ();
        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Contact</returns>
        Contact ContactGetById (Guid? id, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> ContactGetByIdWithHttpInfo (Guid? id, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Retrieves a record by the values of its key fields from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Contact</returns>
        Contact ContactGetByKeys (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> ContactGetByKeysWithHttpInfo (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>List&lt;Contact&gt;</returns>
        List<Contact> ContactGetList (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null);

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        ApiResponse<List<Contact>> ContactGetListWithHttpInfo (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkForContactDuplicates">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        void ContactInvokeActionCheckForContactDuplicates (CheckForContactDuplicates checkForContactDuplicates);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkForContactDuplicates">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactInvokeActionCheckForContactDuplicatesWithHttpInfo (CheckForContactDuplicates checkForContactDuplicates);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeContactAsDuplicate">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        void ContactInvokeActionCloseContactAsDuplicate (CloseContactAsDuplicate closeContactAsDuplicate);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeContactAsDuplicate">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactInvokeActionCloseContactAsDuplicateWithHttpInfo (CloseContactAsDuplicate closeContactAsDuplicate);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertContactToBusinessAccount">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        void ContactInvokeActionConvertContactToBusinessAccount (ConvertContactToBusinessAccount convertContactToBusinessAccount);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertContactToBusinessAccount">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactInvokeActionConvertContactToBusinessAccountWithHttpInfo (ConvertContactToBusinessAccount convertContactToBusinessAccount);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFromCompany">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        void ContactInvokeActionCopyFromCompany (CopyFromCompany copyFromCompany);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFromCompany">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactInvokeActionCopyFromCompanyWithHttpInfo (CopyFromCompany copyFromCompany);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markContactAsValidated">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        void ContactInvokeActionMarkContactAsValidated (MarkContactAsValidated markContactAsValidated);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markContactAsValidated">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactInvokeActionMarkContactAsValidatedWithHttpInfo (MarkContactAsValidated markContactAsValidated);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateContactAddress">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        void ContactInvokeActionValidateContactAddress (ValidateContactAddress validateContactAddress);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateContactAddress">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactInvokeActionValidateContactAddressWithHttpInfo (ValidateContactAddress validateContactAddress);
        /// <summary>
        /// Creates a record or updates an existing record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Contact</returns>
        Contact ContactPutEntity (Contact contact, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Creates a record or updates an existing record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> ContactPutEntityWithHttpInfo (Contact contact, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Attaches a file to a record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns></returns>
        void ContactPutFile (List<string> ids, string filename);

        /// <summary>
        /// Attaches a file to a record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContactPutFileWithHttpInfo (List<string> ids, string filename);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes the record by its session identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactDeleteByIdAsync (Guid? id);

        /// <summary>
        /// Deletes the record by its session identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactDeleteByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes the record by the values of its key fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactDeleteByKeysAsync (List<string> ids);

        /// <summary>
        /// Deletes the record by the values of its key fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactDeleteByKeysAsyncWithHttpInfo (List<string> ids);
        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> ContactGetAdHocSchemaAsync ();

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> ContactGetAdHocSchemaAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> ContactGetByIdAsync (Guid? id, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> ContactGetByIdAsyncWithHttpInfo (Guid? id, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Retrieves a record by the values of its key fields from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> ContactGetByKeysAsync (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> ContactGetByKeysAsyncWithHttpInfo (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        System.Threading.Tasks.Task<List<Contact>> ContactGetListAsync (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null);

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Contact>>> ContactGetListAsyncWithHttpInfo (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkForContactDuplicates">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactInvokeActionCheckForContactDuplicatesAsync (CheckForContactDuplicates checkForContactDuplicates);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkForContactDuplicates">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionCheckForContactDuplicatesAsyncWithHttpInfo (CheckForContactDuplicates checkForContactDuplicates);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeContactAsDuplicate">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactInvokeActionCloseContactAsDuplicateAsync (CloseContactAsDuplicate closeContactAsDuplicate);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeContactAsDuplicate">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionCloseContactAsDuplicateAsyncWithHttpInfo (CloseContactAsDuplicate closeContactAsDuplicate);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertContactToBusinessAccount">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactInvokeActionConvertContactToBusinessAccountAsync (ConvertContactToBusinessAccount convertContactToBusinessAccount);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertContactToBusinessAccount">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionConvertContactToBusinessAccountAsyncWithHttpInfo (ConvertContactToBusinessAccount convertContactToBusinessAccount);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFromCompany">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactInvokeActionCopyFromCompanyAsync (CopyFromCompany copyFromCompany);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFromCompany">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionCopyFromCompanyAsyncWithHttpInfo (CopyFromCompany copyFromCompany);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markContactAsValidated">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactInvokeActionMarkContactAsValidatedAsync (MarkContactAsValidated markContactAsValidated);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markContactAsValidated">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionMarkContactAsValidatedAsyncWithHttpInfo (MarkContactAsValidated markContactAsValidated);
        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateContactAddress">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactInvokeActionValidateContactAddressAsync (ValidateContactAddress validateContactAddress);

        /// <summary>
        /// Performs an action in the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateContactAddress">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionValidateContactAddressAsyncWithHttpInfo (ValidateContactAddress validateContactAddress);
        /// <summary>
        /// Creates a record or updates an existing record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> ContactPutEntityAsync (Contact contact, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Creates a record or updates an existing record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> ContactPutEntityAsyncWithHttpInfo (Contact contact, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Attaches a file to a record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContactPutFileAsync (List<string> ids, string filename);

        /// <summary>
        /// Attaches a file to a record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContactPutFileAsyncWithHttpInfo (List<string> ids, string filename);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactApi : IContactApi
    {
        private Acumatica.RESTClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactApi(String basePath)
        {
            this.Configuration = new Configuration(basePath);

            ExceptionFactory = Acumatica.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactApi"/> class
        /// </summary>
        /// <returns></returns>
        public ContactApi()
        {
            this.Configuration = Acumatica.RESTClient.Client.Configuration.Default;

            ExceptionFactory = Acumatica.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactApi(Acumatica.RESTClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Acumatica.RESTClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Acumatica.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Acumatica.RESTClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Acumatica.RESTClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes the record by its session identifier. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns></returns>
        public void ContactDeleteById (Guid? id)
        {
             ContactDeleteByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes the record by its session identifier. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactDeleteByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactApi->ContactDeleteById");

            var localVarPath = "/Contact/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the record by its session identifier. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactDeleteByIdAsync (Guid? id)
        {
             await ContactDeleteByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes the record by its session identifier. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactDeleteByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactApi->ContactDeleteById");

            var localVarPath = "/Contact/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the record by the values of its key fields. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns></returns>
        public void ContactDeleteByKeys (List<string> ids)
        {
             ContactDeleteByKeysWithHttpInfo(ids);
        }

        /// <summary>
        /// Deletes the record by the values of its key fields. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactDeleteByKeysWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContactApi->ContactDeleteByKeys");

            var localVarPath = "/Contact/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactDeleteByKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the record by the values of its key fields. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactDeleteByKeysAsync (List<string> ids)
        {
             await ContactDeleteByKeysAsyncWithHttpInfo(ids);

        }

        /// <summary>
        /// Deletes the record by the values of its key fields. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactDeleteByKeysAsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContactApi->ContactDeleteByKeys");

            var localVarPath = "/Contact/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactDeleteByKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Contact</returns>
        public Contact ContactGetAdHocSchema ()
        {
             ApiResponse<Contact> localVarResponse = ContactGetAdHocSchemaWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > ContactGetAdHocSchemaWithHttpInfo ()
        {

            var localVarPath = "/Contact/$adHocSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactGetAdHocSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> ContactGetAdHocSchemaAsync ()
        {
             ApiResponse<Contact> localVarResponse = await ContactGetAdHocSchemaAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> ContactGetAdHocSchemaAsyncWithHttpInfo ()
        {

            var localVarPath = "/Contact/$adHocSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactGetAdHocSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Contact</returns>
        public Contact ContactGetById (Guid? id, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<Contact> localVarResponse = ContactGetByIdWithHttpInfo(id, select, filter, expand, custom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > ContactGetByIdWithHttpInfo (Guid? id, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactApi->ContactGetById");

            var localVarPath = "/Contact/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> ContactGetByIdAsync (Guid? id, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<Contact> localVarResponse = await ContactGetByIdAsyncWithHttpInfo(id, select, filter, expand, custom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> ContactGetByIdAsyncWithHttpInfo (Guid? id, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactApi->ContactGetById");

            var localVarPath = "/Contact/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Contact</returns>
        public Contact ContactGetByKeys (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<Contact> localVarResponse = ContactGetByKeysWithHttpInfo(ids, select, filter, expand, custom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > ContactGetByKeysWithHttpInfo (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContactApi->ContactGetByKeys");

            var localVarPath = "/Contact/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactGetByKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> ContactGetByKeysAsync (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<Contact> localVarResponse = await ContactGetByKeysAsyncWithHttpInfo(ids, select, filter, expand, custom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> ContactGetByKeysAsyncWithHttpInfo (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContactApi->ContactGetByKeys");

            var localVarPath = "/Contact/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactGetByKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>List&lt;Contact&gt;</returns>
        public List<Contact> ContactGetList (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null)
        {
             ApiResponse<List<Contact>> localVarResponse = ContactGetListWithHttpInfo(select, filter, expand, custom, skip, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Contact&gt;</returns>
        public ApiResponse< List<Contact> > ContactGetListWithHttpInfo (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null)
        {

            var localVarPath = "/Contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contact>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contact>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contact>)));
        }

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>Task of List&lt;Contact&gt;</returns>
        public async System.Threading.Tasks.Task<List<Contact>> ContactGetListAsync (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null)
        {
             ApiResponse<List<Contact>> localVarResponse = await ContactGetListAsyncWithHttpInfo(select, filter, expand, custom, skip, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Contact&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Contact>>> ContactGetListAsyncWithHttpInfo (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null)
        {

            var localVarPath = "/Contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Contact>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Contact>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Contact>)));
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkForContactDuplicates">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        public void ContactInvokeActionCheckForContactDuplicates (CheckForContactDuplicates checkForContactDuplicates)
        {
             ContactInvokeActionCheckForContactDuplicatesWithHttpInfo(checkForContactDuplicates);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkForContactDuplicates">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactInvokeActionCheckForContactDuplicatesWithHttpInfo (CheckForContactDuplicates checkForContactDuplicates)
        {
            // verify the required parameter 'checkForContactDuplicates' is set
            if (checkForContactDuplicates == null)
                throw new ApiException(400, "Missing required parameter 'checkForContactDuplicates' when calling ContactApi->ContactInvokeActionCheckForContactDuplicates");

            var localVarPath = "/Contact/CheckForContactDuplicates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checkForContactDuplicates != null && checkForContactDuplicates.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkForContactDuplicates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkForContactDuplicates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionCheckForContactDuplicates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkForContactDuplicates">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactInvokeActionCheckForContactDuplicatesAsync (CheckForContactDuplicates checkForContactDuplicates)
        {
             await ContactInvokeActionCheckForContactDuplicatesAsyncWithHttpInfo(checkForContactDuplicates);

        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkForContactDuplicates">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionCheckForContactDuplicatesAsyncWithHttpInfo (CheckForContactDuplicates checkForContactDuplicates)
        {
            // verify the required parameter 'checkForContactDuplicates' is set
            if (checkForContactDuplicates == null)
                throw new ApiException(400, "Missing required parameter 'checkForContactDuplicates' when calling ContactApi->ContactInvokeActionCheckForContactDuplicates");

            var localVarPath = "/Contact/CheckForContactDuplicates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checkForContactDuplicates != null && checkForContactDuplicates.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkForContactDuplicates); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkForContactDuplicates; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionCheckForContactDuplicates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeContactAsDuplicate">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        public void ContactInvokeActionCloseContactAsDuplicate (CloseContactAsDuplicate closeContactAsDuplicate)
        {
             ContactInvokeActionCloseContactAsDuplicateWithHttpInfo(closeContactAsDuplicate);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeContactAsDuplicate">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactInvokeActionCloseContactAsDuplicateWithHttpInfo (CloseContactAsDuplicate closeContactAsDuplicate)
        {
            // verify the required parameter 'closeContactAsDuplicate' is set
            if (closeContactAsDuplicate == null)
                throw new ApiException(400, "Missing required parameter 'closeContactAsDuplicate' when calling ContactApi->ContactInvokeActionCloseContactAsDuplicate");

            var localVarPath = "/Contact/CloseContactAsDuplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeContactAsDuplicate != null && closeContactAsDuplicate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeContactAsDuplicate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeContactAsDuplicate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionCloseContactAsDuplicate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeContactAsDuplicate">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactInvokeActionCloseContactAsDuplicateAsync (CloseContactAsDuplicate closeContactAsDuplicate)
        {
             await ContactInvokeActionCloseContactAsDuplicateAsyncWithHttpInfo(closeContactAsDuplicate);

        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeContactAsDuplicate">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionCloseContactAsDuplicateAsyncWithHttpInfo (CloseContactAsDuplicate closeContactAsDuplicate)
        {
            // verify the required parameter 'closeContactAsDuplicate' is set
            if (closeContactAsDuplicate == null)
                throw new ApiException(400, "Missing required parameter 'closeContactAsDuplicate' when calling ContactApi->ContactInvokeActionCloseContactAsDuplicate");

            var localVarPath = "/Contact/CloseContactAsDuplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeContactAsDuplicate != null && closeContactAsDuplicate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeContactAsDuplicate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeContactAsDuplicate; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionCloseContactAsDuplicate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertContactToBusinessAccount">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        public void ContactInvokeActionConvertContactToBusinessAccount (ConvertContactToBusinessAccount convertContactToBusinessAccount)
        {
             ContactInvokeActionConvertContactToBusinessAccountWithHttpInfo(convertContactToBusinessAccount);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertContactToBusinessAccount">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactInvokeActionConvertContactToBusinessAccountWithHttpInfo (ConvertContactToBusinessAccount convertContactToBusinessAccount)
        {
            // verify the required parameter 'convertContactToBusinessAccount' is set
            if (convertContactToBusinessAccount == null)
                throw new ApiException(400, "Missing required parameter 'convertContactToBusinessAccount' when calling ContactApi->ContactInvokeActionConvertContactToBusinessAccount");

            var localVarPath = "/Contact/ConvertContactToBusinessAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertContactToBusinessAccount != null && convertContactToBusinessAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertContactToBusinessAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertContactToBusinessAccount; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionConvertContactToBusinessAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertContactToBusinessAccount">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactInvokeActionConvertContactToBusinessAccountAsync (ConvertContactToBusinessAccount convertContactToBusinessAccount)
        {
             await ContactInvokeActionConvertContactToBusinessAccountAsyncWithHttpInfo(convertContactToBusinessAccount);

        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertContactToBusinessAccount">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionConvertContactToBusinessAccountAsyncWithHttpInfo (ConvertContactToBusinessAccount convertContactToBusinessAccount)
        {
            // verify the required parameter 'convertContactToBusinessAccount' is set
            if (convertContactToBusinessAccount == null)
                throw new ApiException(400, "Missing required parameter 'convertContactToBusinessAccount' when calling ContactApi->ContactInvokeActionConvertContactToBusinessAccount");

            var localVarPath = "/Contact/ConvertContactToBusinessAccount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertContactToBusinessAccount != null && convertContactToBusinessAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertContactToBusinessAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertContactToBusinessAccount; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionConvertContactToBusinessAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFromCompany">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        public void ContactInvokeActionCopyFromCompany (CopyFromCompany copyFromCompany)
        {
             ContactInvokeActionCopyFromCompanyWithHttpInfo(copyFromCompany);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFromCompany">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactInvokeActionCopyFromCompanyWithHttpInfo (CopyFromCompany copyFromCompany)
        {
            // verify the required parameter 'copyFromCompany' is set
            if (copyFromCompany == null)
                throw new ApiException(400, "Missing required parameter 'copyFromCompany' when calling ContactApi->ContactInvokeActionCopyFromCompany");

            var localVarPath = "/Contact/CopyFromCompany";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyFromCompany != null && copyFromCompany.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyFromCompany); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyFromCompany; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionCopyFromCompany", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFromCompany">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactInvokeActionCopyFromCompanyAsync (CopyFromCompany copyFromCompany)
        {
             await ContactInvokeActionCopyFromCompanyAsyncWithHttpInfo(copyFromCompany);

        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyFromCompany">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionCopyFromCompanyAsyncWithHttpInfo (CopyFromCompany copyFromCompany)
        {
            // verify the required parameter 'copyFromCompany' is set
            if (copyFromCompany == null)
                throw new ApiException(400, "Missing required parameter 'copyFromCompany' when calling ContactApi->ContactInvokeActionCopyFromCompany");

            var localVarPath = "/Contact/CopyFromCompany";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (copyFromCompany != null && copyFromCompany.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(copyFromCompany); // http body (model) parameter
            }
            else
            {
                localVarPostBody = copyFromCompany; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionCopyFromCompany", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markContactAsValidated">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        public void ContactInvokeActionMarkContactAsValidated (MarkContactAsValidated markContactAsValidated)
        {
             ContactInvokeActionMarkContactAsValidatedWithHttpInfo(markContactAsValidated);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markContactAsValidated">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactInvokeActionMarkContactAsValidatedWithHttpInfo (MarkContactAsValidated markContactAsValidated)
        {
            // verify the required parameter 'markContactAsValidated' is set
            if (markContactAsValidated == null)
                throw new ApiException(400, "Missing required parameter 'markContactAsValidated' when calling ContactApi->ContactInvokeActionMarkContactAsValidated");

            var localVarPath = "/Contact/MarkContactAsValidated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markContactAsValidated != null && markContactAsValidated.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markContactAsValidated); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markContactAsValidated; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionMarkContactAsValidated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markContactAsValidated">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactInvokeActionMarkContactAsValidatedAsync (MarkContactAsValidated markContactAsValidated)
        {
             await ContactInvokeActionMarkContactAsValidatedAsyncWithHttpInfo(markContactAsValidated);

        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markContactAsValidated">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionMarkContactAsValidatedAsyncWithHttpInfo (MarkContactAsValidated markContactAsValidated)
        {
            // verify the required parameter 'markContactAsValidated' is set
            if (markContactAsValidated == null)
                throw new ApiException(400, "Missing required parameter 'markContactAsValidated' when calling ContactApi->ContactInvokeActionMarkContactAsValidated");

            var localVarPath = "/Contact/MarkContactAsValidated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markContactAsValidated != null && markContactAsValidated.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markContactAsValidated); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markContactAsValidated; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionMarkContactAsValidated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateContactAddress">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns></returns>
        public void ContactInvokeActionValidateContactAddress (ValidateContactAddress validateContactAddress)
        {
             ContactInvokeActionValidateContactAddressWithHttpInfo(validateContactAddress);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateContactAddress">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactInvokeActionValidateContactAddressWithHttpInfo (ValidateContactAddress validateContactAddress)
        {
            // verify the required parameter 'validateContactAddress' is set
            if (validateContactAddress == null)
                throw new ApiException(400, "Missing required parameter 'validateContactAddress' when calling ContactApi->ContactInvokeActionValidateContactAddress");

            var localVarPath = "/Contact/ValidateContactAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateContactAddress != null && validateContactAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validateContactAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateContactAddress; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionValidateContactAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateContactAddress">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactInvokeActionValidateContactAddressAsync (ValidateContactAddress validateContactAddress)
        {
             await ContactInvokeActionValidateContactAddressAsyncWithHttpInfo(validateContactAddress);

        }

        /// <summary>
        /// Performs an action in the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateContactAddress">The record to which the action should be applied and the parameters of the action.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactInvokeActionValidateContactAddressAsyncWithHttpInfo (ValidateContactAddress validateContactAddress)
        {
            // verify the required parameter 'validateContactAddress' is set
            if (validateContactAddress == null)
                throw new ApiException(400, "Missing required parameter 'validateContactAddress' when calling ContactApi->ContactInvokeActionValidateContactAddress");

            var localVarPath = "/Contact/ValidateContactAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (validateContactAddress != null && validateContactAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(validateContactAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = validateContactAddress; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactInvokeActionValidateContactAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a record or updates an existing record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Contact</returns>
        public Contact ContactPutEntity (Contact contact, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<Contact> localVarResponse = ContactPutEntityWithHttpInfo(contact, select, filter, expand, custom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a record or updates an existing record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > ContactPutEntityWithHttpInfo (Contact contact, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactApi->ContactPutEntity");

            var localVarPath = "/Contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactPutEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Creates a record or updates an existing record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> ContactPutEntityAsync (Contact contact, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<Contact> localVarResponse = await ContactPutEntityAsyncWithHttpInfo(contact, select, filter, expand, custom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a record or updates an existing record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contact">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> ContactPutEntityAsyncWithHttpInfo (Contact contact, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'contact' is set
            if (contact == null)
                throw new ApiException(400, "Missing required parameter 'contact' when calling ContactApi->ContactPutEntity");

            var localVarPath = "/Contact";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter
            if (contact != null && contact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contact); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contact; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactPutEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Attaches a file to a record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns></returns>
        public void ContactPutFile (List<string> ids, string filename)
        {
             ContactPutFileWithHttpInfo(ids, filename);
        }

        /// <summary>
        /// Attaches a file to a record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ContactPutFileWithHttpInfo (List<string> ids, string filename)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContactApi->ContactPutFile");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling ContactApi->ContactPutFile");

            var localVarPath = "/Contact/{ids}/files/{filename}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (filename != null) localVarPathParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactPutFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attaches a file to a record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContactPutFileAsync (List<string> ids, string filename)
        {
             await ContactPutFileAsyncWithHttpInfo(ids, filename);

        }

        /// <summary>
        /// Attaches a file to a record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ContactPutFileAsyncWithHttpInfo (List<string> ids, string filename)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ContactApi->ContactPutFile");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling ContactApi->ContactPutFile");

            var localVarPath = "/Contact/{ids}/files/{filename}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (filename != null) localVarPathParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContactPutFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
