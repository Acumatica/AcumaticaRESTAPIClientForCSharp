/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Acumatica.RESTClient.Client;
using Acumatica.DefaultEndpoint.Model;

namespace Acumatica.DefaultEndpoint.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorPricesInquiryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes the record by its session identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns></returns>
        void VendorPricesInquiryDeleteById (Guid? id);

        /// <summary>
        /// Deletes the record by its session identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VendorPricesInquiryDeleteByIdWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes the record by the values of its key fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns></returns>
        void VendorPricesInquiryDeleteByKeys (List<string> ids);

        /// <summary>
        /// Deletes the record by the values of its key fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VendorPricesInquiryDeleteByKeysWithHttpInfo (List<string> ids);
        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>VendorPricesInquiry</returns>
        VendorPricesInquiry VendorPricesInquiryGetAdHocSchema ();

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of VendorPricesInquiry</returns>
        ApiResponse<VendorPricesInquiry> VendorPricesInquiryGetAdHocSchemaWithHttpInfo ();
        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>VendorPricesInquiry</returns>
        VendorPricesInquiry VendorPricesInquiryGetById (Guid? id, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of VendorPricesInquiry</returns>
        ApiResponse<VendorPricesInquiry> VendorPricesInquiryGetByIdWithHttpInfo (Guid? id, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Retrieves a record by the values of its key fields from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>VendorPricesInquiry</returns>
        VendorPricesInquiry VendorPricesInquiryGetByKeys (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of VendorPricesInquiry</returns>
        ApiResponse<VendorPricesInquiry> VendorPricesInquiryGetByKeysWithHttpInfo (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>List&lt;VendorPricesInquiry&gt;</returns>
        List<VendorPricesInquiry> VendorPricesInquiryGetList (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null);

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of List&lt;VendorPricesInquiry&gt;</returns>
        ApiResponse<List<VendorPricesInquiry>> VendorPricesInquiryGetListWithHttpInfo (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null);
        /// <summary>
        /// Creates a record or updates an existing record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorPricesInquiry">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>VendorPricesInquiry</returns>
        VendorPricesInquiry VendorPricesInquiryPutEntity (VendorPricesInquiry vendorPricesInquiry, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Creates a record or updates an existing record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorPricesInquiry">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of VendorPricesInquiry</returns>
        ApiResponse<VendorPricesInquiry> VendorPricesInquiryPutEntityWithHttpInfo (VendorPricesInquiry vendorPricesInquiry, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Attaches a file to a record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns></returns>
        void VendorPricesInquiryPutFile (List<string> ids, string filename);

        /// <summary>
        /// Attaches a file to a record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VendorPricesInquiryPutFileWithHttpInfo (List<string> ids, string filename);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes the record by its session identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VendorPricesInquiryDeleteByIdAsync (Guid? id);

        /// <summary>
        /// Deletes the record by its session identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VendorPricesInquiryDeleteByIdAsyncWithHttpInfo (Guid? id);
        /// <summary>
        /// Deletes the record by the values of its key fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VendorPricesInquiryDeleteByKeysAsync (List<string> ids);

        /// <summary>
        /// Deletes the record by the values of its key fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VendorPricesInquiryDeleteByKeysAsyncWithHttpInfo (List<string> ids);
        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of VendorPricesInquiry</returns>
        System.Threading.Tasks.Task<VendorPricesInquiry> VendorPricesInquiryGetAdHocSchemaAsync ();

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (VendorPricesInquiry)</returns>
        System.Threading.Tasks.Task<ApiResponse<VendorPricesInquiry>> VendorPricesInquiryGetAdHocSchemaAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of VendorPricesInquiry</returns>
        System.Threading.Tasks.Task<VendorPricesInquiry> VendorPricesInquiryGetByIdAsync (Guid? id, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (VendorPricesInquiry)</returns>
        System.Threading.Tasks.Task<ApiResponse<VendorPricesInquiry>> VendorPricesInquiryGetByIdAsyncWithHttpInfo (Guid? id, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Retrieves a record by the values of its key fields from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of VendorPricesInquiry</returns>
        System.Threading.Tasks.Task<VendorPricesInquiry> VendorPricesInquiryGetByKeysAsync (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (VendorPricesInquiry)</returns>
        System.Threading.Tasks.Task<ApiResponse<VendorPricesInquiry>> VendorPricesInquiryGetByKeysAsyncWithHttpInfo (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>Task of List&lt;VendorPricesInquiry&gt;</returns>
        System.Threading.Tasks.Task<List<VendorPricesInquiry>> VendorPricesInquiryGetListAsync (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null);

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VendorPricesInquiry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VendorPricesInquiry>>> VendorPricesInquiryGetListAsyncWithHttpInfo (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null);
        /// <summary>
        /// Creates a record or updates an existing record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorPricesInquiry">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of VendorPricesInquiry</returns>
        System.Threading.Tasks.Task<VendorPricesInquiry> VendorPricesInquiryPutEntityAsync (VendorPricesInquiry vendorPricesInquiry, string select = null, string filter = null, string expand = null, string custom = null);

        /// <summary>
        /// Creates a record or updates an existing record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorPricesInquiry">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (VendorPricesInquiry)</returns>
        System.Threading.Tasks.Task<ApiResponse<VendorPricesInquiry>> VendorPricesInquiryPutEntityAsyncWithHttpInfo (VendorPricesInquiry vendorPricesInquiry, string select = null, string filter = null, string expand = null, string custom = null);
        /// <summary>
        /// Attaches a file to a record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VendorPricesInquiryPutFileAsync (List<string> ids, string filename);

        /// <summary>
        /// Attaches a file to a record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VendorPricesInquiryPutFileAsyncWithHttpInfo (List<string> ids, string filename);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VendorPricesInquiryApi : IVendorPricesInquiryApi
    {
        private Acumatica.RESTClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorPricesInquiryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VendorPricesInquiryApi(String basePath)
        {
            this.Configuration = new Configuration(basePath);

            ExceptionFactory = Acumatica.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorPricesInquiryApi"/> class
        /// </summary>
        /// <returns></returns>
        public VendorPricesInquiryApi()
        {
            this.Configuration = Acumatica.RESTClient.Client.Configuration.Default;

            ExceptionFactory = Acumatica.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorPricesInquiryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VendorPricesInquiryApi(Acumatica.RESTClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Acumatica.RESTClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Acumatica.RESTClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Acumatica.RESTClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Acumatica.RESTClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Deletes the record by its session identifier. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns></returns>
        public void VendorPricesInquiryDeleteById (Guid? id)
        {
             VendorPricesInquiryDeleteByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes the record by its session identifier. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VendorPricesInquiryDeleteByIdWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VendorPricesInquiryApi->VendorPricesInquiryDeleteById");

            var localVarPath = "/VendorPricesInquiry/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the record by its session identifier. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VendorPricesInquiryDeleteByIdAsync (Guid? id)
        {
             await VendorPricesInquiryDeleteByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes the record by its session identifier. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VendorPricesInquiryDeleteByIdAsyncWithHttpInfo (Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VendorPricesInquiryApi->VendorPricesInquiryDeleteById");

            var localVarPath = "/VendorPricesInquiry/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryDeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the record by the values of its key fields. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns></returns>
        public void VendorPricesInquiryDeleteByKeys (List<string> ids)
        {
             VendorPricesInquiryDeleteByKeysWithHttpInfo(ids);
        }

        /// <summary>
        /// Deletes the record by the values of its key fields. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VendorPricesInquiryDeleteByKeysWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling VendorPricesInquiryApi->VendorPricesInquiryDeleteByKeys");

            var localVarPath = "/VendorPricesInquiry/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryDeleteByKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the record by the values of its key fields. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VendorPricesInquiryDeleteByKeysAsync (List<string> ids)
        {
             await VendorPricesInquiryDeleteByKeysAsyncWithHttpInfo(ids);

        }

        /// <summary>
        /// Deletes the record by the values of its key fields. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VendorPricesInquiryDeleteByKeysAsyncWithHttpInfo (List<string> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling VendorPricesInquiryApi->VendorPricesInquiryDeleteByKeys");

            var localVarPath = "/VendorPricesInquiry/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryDeleteByKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>VendorPricesInquiry</returns>
        public VendorPricesInquiry VendorPricesInquiryGetAdHocSchema ()
        {
             ApiResponse<VendorPricesInquiry> localVarResponse = VendorPricesInquiryGetAdHocSchemaWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of VendorPricesInquiry</returns>
        public ApiResponse< VendorPricesInquiry > VendorPricesInquiryGetAdHocSchemaWithHttpInfo ()
        {

            var localVarPath = "/VendorPricesInquiry/$adHocSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryGetAdHocSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorPricesInquiry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorPricesInquiry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorPricesInquiry)));
        }

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of VendorPricesInquiry</returns>
        public async System.Threading.Tasks.Task<VendorPricesInquiry> VendorPricesInquiryGetAdHocSchemaAsync ()
        {
             ApiResponse<VendorPricesInquiry> localVarResponse = await VendorPricesInquiryGetAdHocSchemaAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the schema of custom fields of the entity from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (VendorPricesInquiry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VendorPricesInquiry>> VendorPricesInquiryGetAdHocSchemaAsyncWithHttpInfo ()
        {

            var localVarPath = "/VendorPricesInquiry/$adHocSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryGetAdHocSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorPricesInquiry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorPricesInquiry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorPricesInquiry)));
        }

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>VendorPricesInquiry</returns>
        public VendorPricesInquiry VendorPricesInquiryGetById (Guid? id, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<VendorPricesInquiry> localVarResponse = VendorPricesInquiryGetByIdWithHttpInfo(id, select, filter, expand, custom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of VendorPricesInquiry</returns>
        public ApiResponse< VendorPricesInquiry > VendorPricesInquiryGetByIdWithHttpInfo (Guid? id, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VendorPricesInquiryApi->VendorPricesInquiryGetById");

            var localVarPath = "/VendorPricesInquiry/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorPricesInquiry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorPricesInquiry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorPricesInquiry)));
        }

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of VendorPricesInquiry</returns>
        public async System.Threading.Tasks.Task<VendorPricesInquiry> VendorPricesInquiryGetByIdAsync (Guid? id, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<VendorPricesInquiry> localVarResponse = await VendorPricesInquiryGetByIdAsyncWithHttpInfo(id, select, filter, expand, custom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a record by the value of the session entity ID from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The session ID of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (VendorPricesInquiry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VendorPricesInquiry>> VendorPricesInquiryGetByIdAsyncWithHttpInfo (Guid? id, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VendorPricesInquiryApi->VendorPricesInquiryGetById");

            var localVarPath = "/VendorPricesInquiry/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryGetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorPricesInquiry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorPricesInquiry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorPricesInquiry)));
        }

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>VendorPricesInquiry</returns>
        public VendorPricesInquiry VendorPricesInquiryGetByKeys (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<VendorPricesInquiry> localVarResponse = VendorPricesInquiryGetByKeysWithHttpInfo(ids, select, filter, expand, custom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of VendorPricesInquiry</returns>
        public ApiResponse< VendorPricesInquiry > VendorPricesInquiryGetByKeysWithHttpInfo (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling VendorPricesInquiryApi->VendorPricesInquiryGetByKeys");

            var localVarPath = "/VendorPricesInquiry/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryGetByKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorPricesInquiry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorPricesInquiry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorPricesInquiry)));
        }

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of VendorPricesInquiry</returns>
        public async System.Threading.Tasks.Task<VendorPricesInquiry> VendorPricesInquiryGetByKeysAsync (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<VendorPricesInquiry> localVarResponse = await VendorPricesInquiryGetByKeysAsyncWithHttpInfo(ids, select, filter, expand, custom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a record by the values of its key fields from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (VendorPricesInquiry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VendorPricesInquiry>> VendorPricesInquiryGetByKeysAsyncWithHttpInfo (List<string> ids, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling VendorPricesInquiryApi->VendorPricesInquiryGetByKeys");

            var localVarPath = "/VendorPricesInquiry/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryGetByKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorPricesInquiry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorPricesInquiry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorPricesInquiry)));
        }

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>List&lt;VendorPricesInquiry&gt;</returns>
        public List<VendorPricesInquiry> VendorPricesInquiryGetList (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null)
        {
             ApiResponse<List<VendorPricesInquiry>> localVarResponse = VendorPricesInquiryGetListWithHttpInfo(select, filter, expand, custom, skip, top);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of List&lt;VendorPricesInquiry&gt;</returns>
        public ApiResponse< List<VendorPricesInquiry> > VendorPricesInquiryGetListWithHttpInfo (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null)
        {

            var localVarPath = "/VendorPricesInquiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VendorPricesInquiry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VendorPricesInquiry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VendorPricesInquiry>)));
        }

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>Task of List&lt;VendorPricesInquiry&gt;</returns>
        public async System.Threading.Tasks.Task<List<VendorPricesInquiry>> VendorPricesInquiryGetListAsync (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null)
        {
             ApiResponse<List<VendorPricesInquiry>> localVarResponse = await VendorPricesInquiryGetListAsyncWithHttpInfo(select, filter, expand, custom, skip, top);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves records that satisfy the specified conditions from the system. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <param name="skip">The number of records to be skipped from the list of returned records. (optional)</param>
        /// <param name="top">The number of records to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VendorPricesInquiry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VendorPricesInquiry>>> VendorPricesInquiryGetListAsyncWithHttpInfo (string select = null, string filter = null, string expand = null, string custom = null, int? skip = null, int? top = null)
        {

            var localVarPath = "/VendorPricesInquiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$skip", skip)); // query parameter
            if (top != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$top", top)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VendorPricesInquiry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VendorPricesInquiry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VendorPricesInquiry>)));
        }

        /// <summary>
        /// Creates a record or updates an existing record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorPricesInquiry">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>VendorPricesInquiry</returns>
        public VendorPricesInquiry VendorPricesInquiryPutEntity (VendorPricesInquiry vendorPricesInquiry, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<VendorPricesInquiry> localVarResponse = VendorPricesInquiryPutEntityWithHttpInfo(vendorPricesInquiry, select, filter, expand, custom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a record or updates an existing record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorPricesInquiry">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>ApiResponse of VendorPricesInquiry</returns>
        public ApiResponse< VendorPricesInquiry > VendorPricesInquiryPutEntityWithHttpInfo (VendorPricesInquiry vendorPricesInquiry, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'vendorPricesInquiry' is set
            if (vendorPricesInquiry == null)
                throw new ApiException(400, "Missing required parameter 'vendorPricesInquiry' when calling VendorPricesInquiryApi->VendorPricesInquiryPutEntity");

            var localVarPath = "/VendorPricesInquiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter
            if (vendorPricesInquiry != null && vendorPricesInquiry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vendorPricesInquiry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vendorPricesInquiry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryPutEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorPricesInquiry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorPricesInquiry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorPricesInquiry)));
        }

        /// <summary>
        /// Creates a record or updates an existing record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorPricesInquiry">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of VendorPricesInquiry</returns>
        public async System.Threading.Tasks.Task<VendorPricesInquiry> VendorPricesInquiryPutEntityAsync (VendorPricesInquiry vendorPricesInquiry, string select = null, string filter = null, string expand = null, string custom = null)
        {
             ApiResponse<VendorPricesInquiry> localVarResponse = await VendorPricesInquiryPutEntityAsyncWithHttpInfo(vendorPricesInquiry, select, filter, expand, custom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a record or updates an existing record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorPricesInquiry">The record to be passed to the system.</param>
        /// <param name="select">The fields of the entity to be returned from the system. (optional)</param>
        /// <param name="filter">The conditions that determine which records should be selected from the system. (optional)</param>
        /// <param name="expand">The linked and detail entities that should be expanded. (optional)</param>
        /// <param name="custom">The fields that are not defined in the contract of the endpoint to be returned from the system. (optional)</param>
        /// <returns>Task of ApiResponse (VendorPricesInquiry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VendorPricesInquiry>> VendorPricesInquiryPutEntityAsyncWithHttpInfo (VendorPricesInquiry vendorPricesInquiry, string select = null, string filter = null, string expand = null, string custom = null)
        {
            // verify the required parameter 'vendorPricesInquiry' is set
            if (vendorPricesInquiry == null)
                throw new ApiException(400, "Missing required parameter 'vendorPricesInquiry' when calling VendorPricesInquiryApi->VendorPricesInquiryPutEntity");

            var localVarPath = "/VendorPricesInquiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (select != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$select", select)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$expand", expand)); // query parameter
            if (custom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$custom", custom)); // query parameter
            if (vendorPricesInquiry != null && vendorPricesInquiry.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(vendorPricesInquiry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = vendorPricesInquiry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryPutEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VendorPricesInquiry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VendorPricesInquiry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VendorPricesInquiry)));
        }

        /// <summary>
        /// Attaches a file to a record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns></returns>
        public void VendorPricesInquiryPutFile (List<string> ids, string filename)
        {
             VendorPricesInquiryPutFileWithHttpInfo(ids, filename);
        }

        /// <summary>
        /// Attaches a file to a record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VendorPricesInquiryPutFileWithHttpInfo (List<string> ids, string filename)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling VendorPricesInquiryApi->VendorPricesInquiryPutFile");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling VendorPricesInquiryApi->VendorPricesInquiryPutFile");

            var localVarPath = "/VendorPricesInquiry/{ids}/files/{filename}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (filename != null) localVarPathParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryPutFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attaches a file to a record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VendorPricesInquiryPutFileAsync (List<string> ids, string filename)
        {
             await VendorPricesInquiryPutFileAsyncWithHttpInfo(ids, filename);

        }

        /// <summary>
        /// Attaches a file to a record. 
        /// </summary>
        /// <exception cref="Acumatica.RESTClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The values of the key fields of the record.</param>
        /// <param name="filename">The name of the file that you are going to attach with the extension.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VendorPricesInquiryPutFileAsyncWithHttpInfo (List<string> ids, string filename)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling VendorPricesInquiryApi->VendorPricesInquiryPutFile");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling VendorPricesInquiryApi->VendorPricesInquiryPutFile");

            var localVarPath = "/VendorPricesInquiry/{ids}/files/{filename}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (filename != null) localVarPathParams.Add("filename", this.Configuration.ApiClient.ParameterToString(filename)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VendorPricesInquiryPutFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
