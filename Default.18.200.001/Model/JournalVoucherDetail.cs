/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// JournalVoucherDetail
    /// </summary>
    [DataContract]
    public partial class JournalVoucherDetail : Entity,  IEquatable<JournalVoucherDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JournalVoucherDetail" /> class.
        /// </summary>
        /// <param name="aPDocumentsToApply">aPDocumentsToApply.</param>
        /// <param name="aRDocumentsToApply">aRDocumentsToApply.</param>
        /// <param name="batchModule">batchModule.</param>
        /// <param name="batchNbr">batchNbr.</param>
        /// <param name="cardAccountNbr">cardAccountNbr.</param>
        /// <param name="cardAccountNbrCardAccountNbr">cardAccountNbrCardAccountNbr.</param>
        /// <param name="cashDiscount">cashDiscount.</param>
        /// <param name="cashDiscountDate">cashDiscountDate.</param>
        /// <param name="creditAccount">creditAccount.</param>
        /// <param name="creditSubaccount">creditSubaccount.</param>
        /// <param name="debitAccount">debitAccount.</param>
        /// <param name="debitSubaccount">debitSubaccount.</param>
        /// <param name="docCreated">docCreated.</param>
        /// <param name="docTotal">docTotal.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="entryTypeID">entryTypeID.</param>
        /// <param name="externalRef">externalRef.</param>
        /// <param name="groupTransactionID">groupTransactionID.</param>
        /// <param name="includedTaxAmount">includedTaxAmount.</param>
        /// <param name="lineNbr">lineNbr.</param>
        /// <param name="location">location.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="project">project.</param>
        /// <param name="projectTask">projectTask.</param>
        /// <param name="referenceNbr">referenceNbr.</param>
        /// <param name="released">released.</param>
        /// <param name="split">split.</param>
        /// <param name="subtotalAmount">subtotalAmount.</param>
        /// <param name="taxAmount">taxAmount.</param>
        /// <param name="taxCategory">taxCategory.</param>
        /// <param name="taxZone">taxZone.</param>
        /// <param name="terms">terms.</param>
        /// <param name="totalAmount">totalAmount.</param>
        /// <param name="transactionCode">transactionCode.</param>
        /// <param name="transactionDate">transactionDate.</param>
        /// <param name="transactionDescription">transactionDescription.</param>
        /// <param name="vendorOrCustomer">vendorOrCustomer.</param>
        public JournalVoucherDetail(List<JournalVoucherDetailAPDocumentToApply> aPDocumentsToApply = default(List<JournalVoucherDetailAPDocumentToApply>), List<JournalVoucherDetailARDocumentToApply> aRDocumentsToApply = default(List<JournalVoucherDetailARDocumentToApply>), StringValue batchModule = default(StringValue), StringValue batchNbr = default(StringValue), IntValue cardAccountNbr = default(IntValue), StringValue cardAccountNbrCardAccountNbr = default(StringValue), DecimalValue cashDiscount = default(DecimalValue), DateTimeValue cashDiscountDate = default(DateTimeValue), StringValue creditAccount = default(StringValue), StringValue creditSubaccount = default(StringValue), StringValue debitAccount = default(StringValue), StringValue debitSubaccount = default(StringValue), BooleanValue docCreated = default(BooleanValue), DecimalValue docTotal = default(DecimalValue), DateTimeValue dueDate = default(DateTimeValue), StringValue entryTypeID = default(StringValue), StringValue externalRef = default(StringValue), IntValue groupTransactionID = default(IntValue), DecimalValue includedTaxAmount = default(DecimalValue), IntValue lineNbr = default(IntValue), StringValue location = default(StringValue), StringValue paymentMethod = default(StringValue), StringValue project = default(StringValue), StringValue projectTask = default(StringValue), StringValue referenceNbr = default(StringValue), BooleanValue released = default(BooleanValue), BooleanValue split = default(BooleanValue), DecimalValue subtotalAmount = default(DecimalValue), DecimalValue taxAmount = default(DecimalValue), StringValue taxCategory = default(StringValue), StringValue taxZone = default(StringValue), StringValue terms = default(StringValue), DecimalValue totalAmount = default(DecimalValue), StringValue transactionCode = default(StringValue), DateTimeValue transactionDate = default(DateTimeValue), StringValue transactionDescription = default(StringValue), StringValue vendorOrCustomer = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.APDocumentsToApply = aPDocumentsToApply;
            this.ARDocumentsToApply = aRDocumentsToApply;
            this.BatchModule = batchModule;
            this.BatchNbr = batchNbr;
            this.CardAccountNbr = cardAccountNbr;
            this.CardAccountNbrCardAccountNbr = cardAccountNbrCardAccountNbr;
            this.CashDiscount = cashDiscount;
            this.CashDiscountDate = cashDiscountDate;
            this.CreditAccount = creditAccount;
            this.CreditSubaccount = creditSubaccount;
            this.DebitAccount = debitAccount;
            this.DebitSubaccount = debitSubaccount;
            this.DocCreated = docCreated;
            this.DocTotal = docTotal;
            this.DueDate = dueDate;
            this.EntryTypeID = entryTypeID;
            this.ExternalRef = externalRef;
            this.GroupTransactionID = groupTransactionID;
            this.IncludedTaxAmount = includedTaxAmount;
            this.LineNbr = lineNbr;
            this.Location = location;
            this.PaymentMethod = paymentMethod;
            this.Project = project;
            this.ProjectTask = projectTask;
            this.ReferenceNbr = referenceNbr;
            this.Released = released;
            this.Split = split;
            this.SubtotalAmount = subtotalAmount;
            this.TaxAmount = taxAmount;
            this.TaxCategory = taxCategory;
            this.TaxZone = taxZone;
            this.Terms = terms;
            this.TotalAmount = totalAmount;
            this.TransactionCode = transactionCode;
            this.TransactionDate = transactionDate;
            this.TransactionDescription = transactionDescription;
            this.VendorOrCustomer = vendorOrCustomer;
        }
        
        /// <summary>
        /// Gets or Sets APDocumentsToApply
        /// </summary>
        [DataMember(Name="APDocumentsToApply", EmitDefaultValue=false)]
        public List<JournalVoucherDetailAPDocumentToApply> APDocumentsToApply { get; set; }

        /// <summary>
        /// Gets or Sets ARDocumentsToApply
        /// </summary>
        [DataMember(Name="ARDocumentsToApply", EmitDefaultValue=false)]
        public List<JournalVoucherDetailARDocumentToApply> ARDocumentsToApply { get; set; }

        /// <summary>
        /// Gets or Sets BatchModule
        /// </summary>
        [DataMember(Name="BatchModule", EmitDefaultValue=false)]
        public StringValue BatchModule { get; set; }

        /// <summary>
        /// Gets or Sets BatchNbr
        /// </summary>
        [DataMember(Name="BatchNbr", EmitDefaultValue=false)]
        public StringValue BatchNbr { get; set; }

        /// <summary>
        /// Gets or Sets CardAccountNbr
        /// </summary>
        [DataMember(Name="CardAccountNbr", EmitDefaultValue=false)]
        public IntValue CardAccountNbr { get; set; }

        /// <summary>
        /// Gets or Sets CardAccountNbrCardAccountNbr
        /// </summary>
        [DataMember(Name="CardAccountNbrCardAccountNbr", EmitDefaultValue=false)]
        public StringValue CardAccountNbrCardAccountNbr { get; set; }

        /// <summary>
        /// Gets or Sets CashDiscount
        /// </summary>
        [DataMember(Name="CashDiscount", EmitDefaultValue=false)]
        public DecimalValue CashDiscount { get; set; }

        /// <summary>
        /// Gets or Sets CashDiscountDate
        /// </summary>
        [DataMember(Name="CashDiscountDate", EmitDefaultValue=false)]
        public DateTimeValue CashDiscountDate { get; set; }

        /// <summary>
        /// Gets or Sets CreditAccount
        /// </summary>
        [DataMember(Name="CreditAccount", EmitDefaultValue=false)]
        public StringValue CreditAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditSubaccount
        /// </summary>
        [DataMember(Name="CreditSubaccount", EmitDefaultValue=false)]
        public StringValue CreditSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets DebitAccount
        /// </summary>
        [DataMember(Name="DebitAccount", EmitDefaultValue=false)]
        public StringValue DebitAccount { get; set; }

        /// <summary>
        /// Gets or Sets DebitSubaccount
        /// </summary>
        [DataMember(Name="DebitSubaccount", EmitDefaultValue=false)]
        public StringValue DebitSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets DocCreated
        /// </summary>
        [DataMember(Name="DocCreated", EmitDefaultValue=false)]
        public BooleanValue DocCreated { get; set; }

        /// <summary>
        /// Gets or Sets DocTotal
        /// </summary>
        [DataMember(Name="DocTotal", EmitDefaultValue=false)]
        public DecimalValue DocTotal { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="DueDate", EmitDefaultValue=false)]
        public DateTimeValue DueDate { get; set; }

        /// <summary>
        /// Gets or Sets EntryTypeID
        /// </summary>
        [DataMember(Name="EntryTypeID", EmitDefaultValue=false)]
        public StringValue EntryTypeID { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRef
        /// </summary>
        [DataMember(Name="ExternalRef", EmitDefaultValue=false)]
        public StringValue ExternalRef { get; set; }

        /// <summary>
        /// Gets or Sets GroupTransactionID
        /// </summary>
        [DataMember(Name="GroupTransactionID", EmitDefaultValue=false)]
        public IntValue GroupTransactionID { get; set; }

        /// <summary>
        /// Gets or Sets IncludedTaxAmount
        /// </summary>
        [DataMember(Name="IncludedTaxAmount", EmitDefaultValue=false)]
        public DecimalValue IncludedTaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets LineNbr
        /// </summary>
        [DataMember(Name="LineNbr", EmitDefaultValue=false)]
        public IntValue LineNbr { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public StringValue Location { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public StringValue PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="Project", EmitDefaultValue=false)]
        public StringValue Project { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTask
        /// </summary>
        [DataMember(Name="ProjectTask", EmitDefaultValue=false)]
        public StringValue ProjectTask { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNbr
        /// </summary>
        [DataMember(Name="ReferenceNbr", EmitDefaultValue=false)]
        public StringValue ReferenceNbr { get; set; }

        /// <summary>
        /// Gets or Sets Released
        /// </summary>
        [DataMember(Name="Released", EmitDefaultValue=false)]
        public BooleanValue Released { get; set; }

        /// <summary>
        /// Gets or Sets Split
        /// </summary>
        [DataMember(Name="Split", EmitDefaultValue=false)]
        public BooleanValue Split { get; set; }

        /// <summary>
        /// Gets or Sets SubtotalAmount
        /// </summary>
        [DataMember(Name="SubtotalAmount", EmitDefaultValue=false)]
        public DecimalValue SubtotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name="TaxAmount", EmitDefaultValue=false)]
        public DecimalValue TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategory
        /// </summary>
        [DataMember(Name="TaxCategory", EmitDefaultValue=false)]
        public StringValue TaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets TaxZone
        /// </summary>
        [DataMember(Name="TaxZone", EmitDefaultValue=false)]
        public StringValue TaxZone { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public StringValue Terms { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name="TotalAmount", EmitDefaultValue=false)]
        public DecimalValue TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCode
        /// </summary>
        [DataMember(Name="TransactionCode", EmitDefaultValue=false)]
        public StringValue TransactionCode { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDate
        /// </summary>
        [DataMember(Name="TransactionDate", EmitDefaultValue=false)]
        public DateTimeValue TransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDescription
        /// </summary>
        [DataMember(Name="TransactionDescription", EmitDefaultValue=false)]
        public StringValue TransactionDescription { get; set; }

        /// <summary>
        /// Gets or Sets VendorOrCustomer
        /// </summary>
        [DataMember(Name="VendorOrCustomer", EmitDefaultValue=false)]
        public StringValue VendorOrCustomer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JournalVoucherDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  APDocumentsToApply: ").Append(APDocumentsToApply).Append("\n");
            sb.Append("  ARDocumentsToApply: ").Append(ARDocumentsToApply).Append("\n");
            sb.Append("  BatchModule: ").Append(BatchModule).Append("\n");
            sb.Append("  BatchNbr: ").Append(BatchNbr).Append("\n");
            sb.Append("  CardAccountNbr: ").Append(CardAccountNbr).Append("\n");
            sb.Append("  CardAccountNbrCardAccountNbr: ").Append(CardAccountNbrCardAccountNbr).Append("\n");
            sb.Append("  CashDiscount: ").Append(CashDiscount).Append("\n");
            sb.Append("  CashDiscountDate: ").Append(CashDiscountDate).Append("\n");
            sb.Append("  CreditAccount: ").Append(CreditAccount).Append("\n");
            sb.Append("  CreditSubaccount: ").Append(CreditSubaccount).Append("\n");
            sb.Append("  DebitAccount: ").Append(DebitAccount).Append("\n");
            sb.Append("  DebitSubaccount: ").Append(DebitSubaccount).Append("\n");
            sb.Append("  DocCreated: ").Append(DocCreated).Append("\n");
            sb.Append("  DocTotal: ").Append(DocTotal).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  EntryTypeID: ").Append(EntryTypeID).Append("\n");
            sb.Append("  ExternalRef: ").Append(ExternalRef).Append("\n");
            sb.Append("  GroupTransactionID: ").Append(GroupTransactionID).Append("\n");
            sb.Append("  IncludedTaxAmount: ").Append(IncludedTaxAmount).Append("\n");
            sb.Append("  LineNbr: ").Append(LineNbr).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ProjectTask: ").Append(ProjectTask).Append("\n");
            sb.Append("  ReferenceNbr: ").Append(ReferenceNbr).Append("\n");
            sb.Append("  Released: ").Append(Released).Append("\n");
            sb.Append("  Split: ").Append(Split).Append("\n");
            sb.Append("  SubtotalAmount: ").Append(SubtotalAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  TaxZone: ").Append(TaxZone).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TransactionCode: ").Append(TransactionCode).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  TransactionDescription: ").Append(TransactionDescription).Append("\n");
            sb.Append("  VendorOrCustomer: ").Append(VendorOrCustomer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JournalVoucherDetail);
        }

        /// <summary>
        /// Returns true if JournalVoucherDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of JournalVoucherDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JournalVoucherDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.APDocumentsToApply == input.APDocumentsToApply ||
                    this.APDocumentsToApply != null &&
                    this.APDocumentsToApply.SequenceEqual(input.APDocumentsToApply)
                ) && base.Equals(input) && 
                (
                    this.ARDocumentsToApply == input.ARDocumentsToApply ||
                    this.ARDocumentsToApply != null &&
                    this.ARDocumentsToApply.SequenceEqual(input.ARDocumentsToApply)
                ) && base.Equals(input) && 
                (
                    this.BatchModule == input.BatchModule ||
                    (this.BatchModule != null &&
                    this.BatchModule.Equals(input.BatchModule))
                ) && base.Equals(input) && 
                (
                    this.BatchNbr == input.BatchNbr ||
                    (this.BatchNbr != null &&
                    this.BatchNbr.Equals(input.BatchNbr))
                ) && base.Equals(input) && 
                (
                    this.CardAccountNbr == input.CardAccountNbr ||
                    (this.CardAccountNbr != null &&
                    this.CardAccountNbr.Equals(input.CardAccountNbr))
                ) && base.Equals(input) && 
                (
                    this.CardAccountNbrCardAccountNbr == input.CardAccountNbrCardAccountNbr ||
                    (this.CardAccountNbrCardAccountNbr != null &&
                    this.CardAccountNbrCardAccountNbr.Equals(input.CardAccountNbrCardAccountNbr))
                ) && base.Equals(input) && 
                (
                    this.CashDiscount == input.CashDiscount ||
                    (this.CashDiscount != null &&
                    this.CashDiscount.Equals(input.CashDiscount))
                ) && base.Equals(input) && 
                (
                    this.CashDiscountDate == input.CashDiscountDate ||
                    (this.CashDiscountDate != null &&
                    this.CashDiscountDate.Equals(input.CashDiscountDate))
                ) && base.Equals(input) && 
                (
                    this.CreditAccount == input.CreditAccount ||
                    (this.CreditAccount != null &&
                    this.CreditAccount.Equals(input.CreditAccount))
                ) && base.Equals(input) && 
                (
                    this.CreditSubaccount == input.CreditSubaccount ||
                    (this.CreditSubaccount != null &&
                    this.CreditSubaccount.Equals(input.CreditSubaccount))
                ) && base.Equals(input) && 
                (
                    this.DebitAccount == input.DebitAccount ||
                    (this.DebitAccount != null &&
                    this.DebitAccount.Equals(input.DebitAccount))
                ) && base.Equals(input) && 
                (
                    this.DebitSubaccount == input.DebitSubaccount ||
                    (this.DebitSubaccount != null &&
                    this.DebitSubaccount.Equals(input.DebitSubaccount))
                ) && base.Equals(input) && 
                (
                    this.DocCreated == input.DocCreated ||
                    (this.DocCreated != null &&
                    this.DocCreated.Equals(input.DocCreated))
                ) && base.Equals(input) && 
                (
                    this.DocTotal == input.DocTotal ||
                    (this.DocTotal != null &&
                    this.DocTotal.Equals(input.DocTotal))
                ) && base.Equals(input) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && base.Equals(input) && 
                (
                    this.EntryTypeID == input.EntryTypeID ||
                    (this.EntryTypeID != null &&
                    this.EntryTypeID.Equals(input.EntryTypeID))
                ) && base.Equals(input) && 
                (
                    this.ExternalRef == input.ExternalRef ||
                    (this.ExternalRef != null &&
                    this.ExternalRef.Equals(input.ExternalRef))
                ) && base.Equals(input) && 
                (
                    this.GroupTransactionID == input.GroupTransactionID ||
                    (this.GroupTransactionID != null &&
                    this.GroupTransactionID.Equals(input.GroupTransactionID))
                ) && base.Equals(input) && 
                (
                    this.IncludedTaxAmount == input.IncludedTaxAmount ||
                    (this.IncludedTaxAmount != null &&
                    this.IncludedTaxAmount.Equals(input.IncludedTaxAmount))
                ) && base.Equals(input) && 
                (
                    this.LineNbr == input.LineNbr ||
                    (this.LineNbr != null &&
                    this.LineNbr.Equals(input.LineNbr))
                ) && base.Equals(input) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && base.Equals(input) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && base.Equals(input) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && base.Equals(input) && 
                (
                    this.ProjectTask == input.ProjectTask ||
                    (this.ProjectTask != null &&
                    this.ProjectTask.Equals(input.ProjectTask))
                ) && base.Equals(input) && 
                (
                    this.ReferenceNbr == input.ReferenceNbr ||
                    (this.ReferenceNbr != null &&
                    this.ReferenceNbr.Equals(input.ReferenceNbr))
                ) && base.Equals(input) && 
                (
                    this.Released == input.Released ||
                    (this.Released != null &&
                    this.Released.Equals(input.Released))
                ) && base.Equals(input) && 
                (
                    this.Split == input.Split ||
                    (this.Split != null &&
                    this.Split.Equals(input.Split))
                ) && base.Equals(input) && 
                (
                    this.SubtotalAmount == input.SubtotalAmount ||
                    (this.SubtotalAmount != null &&
                    this.SubtotalAmount.Equals(input.SubtotalAmount))
                ) && base.Equals(input) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) && base.Equals(input) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                ) && base.Equals(input) && 
                (
                    this.TaxZone == input.TaxZone ||
                    (this.TaxZone != null &&
                    this.TaxZone.Equals(input.TaxZone))
                ) && base.Equals(input) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && base.Equals(input) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && base.Equals(input) && 
                (
                    this.TransactionCode == input.TransactionCode ||
                    (this.TransactionCode != null &&
                    this.TransactionCode.Equals(input.TransactionCode))
                ) && base.Equals(input) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && base.Equals(input) && 
                (
                    this.TransactionDescription == input.TransactionDescription ||
                    (this.TransactionDescription != null &&
                    this.TransactionDescription.Equals(input.TransactionDescription))
                ) && base.Equals(input) && 
                (
                    this.VendorOrCustomer == input.VendorOrCustomer ||
                    (this.VendorOrCustomer != null &&
                    this.VendorOrCustomer.Equals(input.VendorOrCustomer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.APDocumentsToApply != null)
                    hashCode = hashCode * 59 + this.APDocumentsToApply.GetHashCode();
                if (this.ARDocumentsToApply != null)
                    hashCode = hashCode * 59 + this.ARDocumentsToApply.GetHashCode();
                if (this.BatchModule != null)
                    hashCode = hashCode * 59 + this.BatchModule.GetHashCode();
                if (this.BatchNbr != null)
                    hashCode = hashCode * 59 + this.BatchNbr.GetHashCode();
                if (this.CardAccountNbr != null)
                    hashCode = hashCode * 59 + this.CardAccountNbr.GetHashCode();
                if (this.CardAccountNbrCardAccountNbr != null)
                    hashCode = hashCode * 59 + this.CardAccountNbrCardAccountNbr.GetHashCode();
                if (this.CashDiscount != null)
                    hashCode = hashCode * 59 + this.CashDiscount.GetHashCode();
                if (this.CashDiscountDate != null)
                    hashCode = hashCode * 59 + this.CashDiscountDate.GetHashCode();
                if (this.CreditAccount != null)
                    hashCode = hashCode * 59 + this.CreditAccount.GetHashCode();
                if (this.CreditSubaccount != null)
                    hashCode = hashCode * 59 + this.CreditSubaccount.GetHashCode();
                if (this.DebitAccount != null)
                    hashCode = hashCode * 59 + this.DebitAccount.GetHashCode();
                if (this.DebitSubaccount != null)
                    hashCode = hashCode * 59 + this.DebitSubaccount.GetHashCode();
                if (this.DocCreated != null)
                    hashCode = hashCode * 59 + this.DocCreated.GetHashCode();
                if (this.DocTotal != null)
                    hashCode = hashCode * 59 + this.DocTotal.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.EntryTypeID != null)
                    hashCode = hashCode * 59 + this.EntryTypeID.GetHashCode();
                if (this.ExternalRef != null)
                    hashCode = hashCode * 59 + this.ExternalRef.GetHashCode();
                if (this.GroupTransactionID != null)
                    hashCode = hashCode * 59 + this.GroupTransactionID.GetHashCode();
                if (this.IncludedTaxAmount != null)
                    hashCode = hashCode * 59 + this.IncludedTaxAmount.GetHashCode();
                if (this.LineNbr != null)
                    hashCode = hashCode * 59 + this.LineNbr.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.ProjectTask != null)
                    hashCode = hashCode * 59 + this.ProjectTask.GetHashCode();
                if (this.ReferenceNbr != null)
                    hashCode = hashCode * 59 + this.ReferenceNbr.GetHashCode();
                if (this.Released != null)
                    hashCode = hashCode * 59 + this.Released.GetHashCode();
                if (this.Split != null)
                    hashCode = hashCode * 59 + this.Split.GetHashCode();
                if (this.SubtotalAmount != null)
                    hashCode = hashCode * 59 + this.SubtotalAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                if (this.TaxZone != null)
                    hashCode = hashCode * 59 + this.TaxZone.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.TransactionCode != null)
                    hashCode = hashCode * 59 + this.TransactionCode.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.TransactionDescription != null)
                    hashCode = hashCode * 59 + this.TransactionDescription.GetHashCode();
                if (this.VendorOrCustomer != null)
                    hashCode = hashCode * 59 + this.VendorOrCustomer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
