/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// ProjectTransactionDetail
    /// </summary>
    [DataContract]
    public partial class ProjectTransactionDetail : Entity,  IEquatable<ProjectTransactionDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectTransactionDetail" /> class.
        /// </summary>
        /// <param name="accountGroup">accountGroup.</param>
        /// <param name="accountGroupDescription">accountGroupDescription.</param>
        /// <param name="allocated">allocated.</param>
        /// <param name="amount">amount.</param>
        /// <param name="batchNbr">batchNbr.</param>
        /// <param name="billable">billable.</param>
        /// <param name="billableQty">billableQty.</param>
        /// <param name="billed">billed.</param>
        /// <param name="branch">branch.</param>
        /// <param name="costCode">costCode.</param>
        /// <param name="creditAccount">creditAccount.</param>
        /// <param name="creditSubaccount">creditSubaccount.</param>
        /// <param name="date">date.</param>
        /// <param name="debitAccount">debitAccount.</param>
        /// <param name="debitSubaccount">debitSubaccount.</param>
        /// <param name="description">description.</param>
        /// <param name="earningType">earningType.</param>
        /// <param name="employee">employee.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="externalRefNbr">externalRefNbr.</param>
        /// <param name="finPeriod">finPeriod.</param>
        /// <param name="inventoryID">inventoryID.</param>
        /// <param name="location">location.</param>
        /// <param name="multiplier">multiplier.</param>
        /// <param name="project">project.</param>
        /// <param name="projectTask">projectTask.</param>
        /// <param name="qty">qty.</param>
        /// <param name="released">released.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="transactionID">transactionID.</param>
        /// <param name="unitRate">unitRate.</param>
        /// <param name="uOM">uOM.</param>
        /// <param name="useBillableQtyInAmountFormula">useBillableQtyInAmountFormula.</param>
        /// <param name="vendorOrCustomer">vendorOrCustomer.</param>
        public ProjectTransactionDetail(StringValue accountGroup = default(StringValue), StringValue accountGroupDescription = default(StringValue), BooleanValue allocated = default(BooleanValue), DecimalValue amount = default(DecimalValue), StringValue batchNbr = default(StringValue), BooleanValue billable = default(BooleanValue), DecimalValue billableQty = default(DecimalValue), BooleanValue billed = default(BooleanValue), StringValue branch = default(StringValue), StringValue costCode = default(StringValue), StringValue creditAccount = default(StringValue), StringValue creditSubaccount = default(StringValue), DateTimeValue date = default(DateTimeValue), StringValue debitAccount = default(StringValue), StringValue debitSubaccount = default(StringValue), StringValue description = default(StringValue), StringValue earningType = default(StringValue), StringValue employee = default(StringValue), DateTimeValue endDate = default(DateTimeValue), StringValue externalRefNbr = default(StringValue), StringValue finPeriod = default(StringValue), StringValue inventoryID = default(StringValue), StringValue location = default(StringValue), DecimalValue multiplier = default(DecimalValue), StringValue project = default(StringValue), StringValue projectTask = default(StringValue), DecimalValue qty = default(DecimalValue), BooleanValue released = default(BooleanValue), DateTimeValue startDate = default(DateTimeValue), LongValue transactionID = default(LongValue), DecimalValue unitRate = default(DecimalValue), StringValue uOM = default(StringValue), BooleanValue useBillableQtyInAmountFormula = default(BooleanValue), StringValue vendorOrCustomer = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AccountGroup = accountGroup;
            this.AccountGroupDescription = accountGroupDescription;
            this.Allocated = allocated;
            this.Amount = amount;
            this.BatchNbr = batchNbr;
            this.Billable = billable;
            this.BillableQty = billableQty;
            this.Billed = billed;
            this.Branch = branch;
            this.CostCode = costCode;
            this.CreditAccount = creditAccount;
            this.CreditSubaccount = creditSubaccount;
            this.Date = date;
            this.DebitAccount = debitAccount;
            this.DebitSubaccount = debitSubaccount;
            this.Description = description;
            this.EarningType = earningType;
            this.Employee = employee;
            this.EndDate = endDate;
            this.ExternalRefNbr = externalRefNbr;
            this.FinPeriod = finPeriod;
            this.InventoryID = inventoryID;
            this.Location = location;
            this.Multiplier = multiplier;
            this.Project = project;
            this.ProjectTask = projectTask;
            this.Qty = qty;
            this.Released = released;
            this.StartDate = startDate;
            this.TransactionID = transactionID;
            this.UnitRate = unitRate;
            this.UOM = uOM;
            this.UseBillableQtyInAmountFormula = useBillableQtyInAmountFormula;
            this.VendorOrCustomer = vendorOrCustomer;
        }
        
        /// <summary>
        /// Gets or Sets AccountGroup
        /// </summary>
        [DataMember(Name="AccountGroup", EmitDefaultValue=false)]
        public StringValue AccountGroup { get; set; }

        /// <summary>
        /// Gets or Sets AccountGroupDescription
        /// </summary>
        [DataMember(Name="AccountGroupDescription", EmitDefaultValue=false)]
        public StringValue AccountGroupDescription { get; set; }

        /// <summary>
        /// Gets or Sets Allocated
        /// </summary>
        [DataMember(Name="Allocated", EmitDefaultValue=false)]
        public BooleanValue Allocated { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public DecimalValue Amount { get; set; }

        /// <summary>
        /// Gets or Sets BatchNbr
        /// </summary>
        [DataMember(Name="BatchNbr", EmitDefaultValue=false)]
        public StringValue BatchNbr { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public BooleanValue Billable { get; set; }

        /// <summary>
        /// Gets or Sets BillableQty
        /// </summary>
        [DataMember(Name="BillableQty", EmitDefaultValue=false)]
        public DecimalValue BillableQty { get; set; }

        /// <summary>
        /// Gets or Sets Billed
        /// </summary>
        [DataMember(Name="Billed", EmitDefaultValue=false)]
        public BooleanValue Billed { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="Branch", EmitDefaultValue=false)]
        public StringValue Branch { get; set; }

        /// <summary>
        /// Gets or Sets CostCode
        /// </summary>
        [DataMember(Name="CostCode", EmitDefaultValue=false)]
        public StringValue CostCode { get; set; }

        /// <summary>
        /// Gets or Sets CreditAccount
        /// </summary>
        [DataMember(Name="CreditAccount", EmitDefaultValue=false)]
        public StringValue CreditAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditSubaccount
        /// </summary>
        [DataMember(Name="CreditSubaccount", EmitDefaultValue=false)]
        public StringValue CreditSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// Gets or Sets DebitAccount
        /// </summary>
        [DataMember(Name="DebitAccount", EmitDefaultValue=false)]
        public StringValue DebitAccount { get; set; }

        /// <summary>
        /// Gets or Sets DebitSubaccount
        /// </summary>
        [DataMember(Name="DebitSubaccount", EmitDefaultValue=false)]
        public StringValue DebitSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets EarningType
        /// </summary>
        [DataMember(Name="EarningType", EmitDefaultValue=false)]
        public StringValue EarningType { get; set; }

        /// <summary>
        /// Gets or Sets Employee
        /// </summary>
        [DataMember(Name="Employee", EmitDefaultValue=false)]
        public StringValue Employee { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="EndDate", EmitDefaultValue=false)]
        public DateTimeValue EndDate { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRefNbr
        /// </summary>
        [DataMember(Name="ExternalRefNbr", EmitDefaultValue=false)]
        public StringValue ExternalRefNbr { get; set; }

        /// <summary>
        /// Gets or Sets FinPeriod
        /// </summary>
        [DataMember(Name="FinPeriod", EmitDefaultValue=false)]
        public StringValue FinPeriod { get; set; }

        /// <summary>
        /// Gets or Sets InventoryID
        /// </summary>
        [DataMember(Name="InventoryID", EmitDefaultValue=false)]
        public StringValue InventoryID { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public StringValue Location { get; set; }

        /// <summary>
        /// Gets or Sets Multiplier
        /// </summary>
        [DataMember(Name="Multiplier", EmitDefaultValue=false)]
        public DecimalValue Multiplier { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="Project", EmitDefaultValue=false)]
        public StringValue Project { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTask
        /// </summary>
        [DataMember(Name="ProjectTask", EmitDefaultValue=false)]
        public StringValue ProjectTask { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="Qty", EmitDefaultValue=false)]
        public DecimalValue Qty { get; set; }

        /// <summary>
        /// Gets or Sets Released
        /// </summary>
        [DataMember(Name="Released", EmitDefaultValue=false)]
        public BooleanValue Released { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTimeValue StartDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionID
        /// </summary>
        [DataMember(Name="TransactionID", EmitDefaultValue=false)]
        public LongValue TransactionID { get; set; }

        /// <summary>
        /// Gets or Sets UnitRate
        /// </summary>
        [DataMember(Name="UnitRate", EmitDefaultValue=false)]
        public DecimalValue UnitRate { get; set; }

        /// <summary>
        /// Gets or Sets UOM
        /// </summary>
        [DataMember(Name="UOM", EmitDefaultValue=false)]
        public StringValue UOM { get; set; }

        /// <summary>
        /// Gets or Sets UseBillableQtyInAmountFormula
        /// </summary>
        [DataMember(Name="UseBillableQtyInAmountFormula", EmitDefaultValue=false)]
        public BooleanValue UseBillableQtyInAmountFormula { get; set; }

        /// <summary>
        /// Gets or Sets VendorOrCustomer
        /// </summary>
        [DataMember(Name="VendorOrCustomer", EmitDefaultValue=false)]
        public StringValue VendorOrCustomer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectTransactionDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountGroup: ").Append(AccountGroup).Append("\n");
            sb.Append("  AccountGroupDescription: ").Append(AccountGroupDescription).Append("\n");
            sb.Append("  Allocated: ").Append(Allocated).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BatchNbr: ").Append(BatchNbr).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  BillableQty: ").Append(BillableQty).Append("\n");
            sb.Append("  Billed: ").Append(Billed).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  CostCode: ").Append(CostCode).Append("\n");
            sb.Append("  CreditAccount: ").Append(CreditAccount).Append("\n");
            sb.Append("  CreditSubaccount: ").Append(CreditSubaccount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DebitAccount: ").Append(DebitAccount).Append("\n");
            sb.Append("  DebitSubaccount: ").Append(DebitSubaccount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EarningType: ").Append(EarningType).Append("\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  ExternalRefNbr: ").Append(ExternalRefNbr).Append("\n");
            sb.Append("  FinPeriod: ").Append(FinPeriod).Append("\n");
            sb.Append("  InventoryID: ").Append(InventoryID).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ProjectTask: ").Append(ProjectTask).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Released: ").Append(Released).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TransactionID: ").Append(TransactionID).Append("\n");
            sb.Append("  UnitRate: ").Append(UnitRate).Append("\n");
            sb.Append("  UOM: ").Append(UOM).Append("\n");
            sb.Append("  UseBillableQtyInAmountFormula: ").Append(UseBillableQtyInAmountFormula).Append("\n");
            sb.Append("  VendorOrCustomer: ").Append(VendorOrCustomer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectTransactionDetail);
        }

        /// <summary>
        /// Returns true if ProjectTransactionDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectTransactionDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectTransactionDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AccountGroup == input.AccountGroup ||
                    (this.AccountGroup != null &&
                    this.AccountGroup.Equals(input.AccountGroup))
                ) && base.Equals(input) && 
                (
                    this.AccountGroupDescription == input.AccountGroupDescription ||
                    (this.AccountGroupDescription != null &&
                    this.AccountGroupDescription.Equals(input.AccountGroupDescription))
                ) && base.Equals(input) && 
                (
                    this.Allocated == input.Allocated ||
                    (this.Allocated != null &&
                    this.Allocated.Equals(input.Allocated))
                ) && base.Equals(input) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && base.Equals(input) && 
                (
                    this.BatchNbr == input.BatchNbr ||
                    (this.BatchNbr != null &&
                    this.BatchNbr.Equals(input.BatchNbr))
                ) && base.Equals(input) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && base.Equals(input) && 
                (
                    this.BillableQty == input.BillableQty ||
                    (this.BillableQty != null &&
                    this.BillableQty.Equals(input.BillableQty))
                ) && base.Equals(input) && 
                (
                    this.Billed == input.Billed ||
                    (this.Billed != null &&
                    this.Billed.Equals(input.Billed))
                ) && base.Equals(input) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && base.Equals(input) && 
                (
                    this.CostCode == input.CostCode ||
                    (this.CostCode != null &&
                    this.CostCode.Equals(input.CostCode))
                ) && base.Equals(input) && 
                (
                    this.CreditAccount == input.CreditAccount ||
                    (this.CreditAccount != null &&
                    this.CreditAccount.Equals(input.CreditAccount))
                ) && base.Equals(input) && 
                (
                    this.CreditSubaccount == input.CreditSubaccount ||
                    (this.CreditSubaccount != null &&
                    this.CreditSubaccount.Equals(input.CreditSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.DebitAccount == input.DebitAccount ||
                    (this.DebitAccount != null &&
                    this.DebitAccount.Equals(input.DebitAccount))
                ) && base.Equals(input) && 
                (
                    this.DebitSubaccount == input.DebitSubaccount ||
                    (this.DebitSubaccount != null &&
                    this.DebitSubaccount.Equals(input.DebitSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.EarningType == input.EarningType ||
                    (this.EarningType != null &&
                    this.EarningType.Equals(input.EarningType))
                ) && base.Equals(input) && 
                (
                    this.Employee == input.Employee ||
                    (this.Employee != null &&
                    this.Employee.Equals(input.Employee))
                ) && base.Equals(input) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && base.Equals(input) && 
                (
                    this.ExternalRefNbr == input.ExternalRefNbr ||
                    (this.ExternalRefNbr != null &&
                    this.ExternalRefNbr.Equals(input.ExternalRefNbr))
                ) && base.Equals(input) && 
                (
                    this.FinPeriod == input.FinPeriod ||
                    (this.FinPeriod != null &&
                    this.FinPeriod.Equals(input.FinPeriod))
                ) && base.Equals(input) && 
                (
                    this.InventoryID == input.InventoryID ||
                    (this.InventoryID != null &&
                    this.InventoryID.Equals(input.InventoryID))
                ) && base.Equals(input) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && base.Equals(input) && 
                (
                    this.Multiplier == input.Multiplier ||
                    (this.Multiplier != null &&
                    this.Multiplier.Equals(input.Multiplier))
                ) && base.Equals(input) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && base.Equals(input) && 
                (
                    this.ProjectTask == input.ProjectTask ||
                    (this.ProjectTask != null &&
                    this.ProjectTask.Equals(input.ProjectTask))
                ) && base.Equals(input) && 
                (
                    this.Qty == input.Qty ||
                    (this.Qty != null &&
                    this.Qty.Equals(input.Qty))
                ) && base.Equals(input) && 
                (
                    this.Released == input.Released ||
                    (this.Released != null &&
                    this.Released.Equals(input.Released))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.TransactionID == input.TransactionID ||
                    (this.TransactionID != null &&
                    this.TransactionID.Equals(input.TransactionID))
                ) && base.Equals(input) && 
                (
                    this.UnitRate == input.UnitRate ||
                    (this.UnitRate != null &&
                    this.UnitRate.Equals(input.UnitRate))
                ) && base.Equals(input) && 
                (
                    this.UOM == input.UOM ||
                    (this.UOM != null &&
                    this.UOM.Equals(input.UOM))
                ) && base.Equals(input) && 
                (
                    this.UseBillableQtyInAmountFormula == input.UseBillableQtyInAmountFormula ||
                    (this.UseBillableQtyInAmountFormula != null &&
                    this.UseBillableQtyInAmountFormula.Equals(input.UseBillableQtyInAmountFormula))
                ) && base.Equals(input) && 
                (
                    this.VendorOrCustomer == input.VendorOrCustomer ||
                    (this.VendorOrCustomer != null &&
                    this.VendorOrCustomer.Equals(input.VendorOrCustomer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountGroup != null)
                    hashCode = hashCode * 59 + this.AccountGroup.GetHashCode();
                if (this.AccountGroupDescription != null)
                    hashCode = hashCode * 59 + this.AccountGroupDescription.GetHashCode();
                if (this.Allocated != null)
                    hashCode = hashCode * 59 + this.Allocated.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BatchNbr != null)
                    hashCode = hashCode * 59 + this.BatchNbr.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.BillableQty != null)
                    hashCode = hashCode * 59 + this.BillableQty.GetHashCode();
                if (this.Billed != null)
                    hashCode = hashCode * 59 + this.Billed.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.CostCode != null)
                    hashCode = hashCode * 59 + this.CostCode.GetHashCode();
                if (this.CreditAccount != null)
                    hashCode = hashCode * 59 + this.CreditAccount.GetHashCode();
                if (this.CreditSubaccount != null)
                    hashCode = hashCode * 59 + this.CreditSubaccount.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.DebitAccount != null)
                    hashCode = hashCode * 59 + this.DebitAccount.GetHashCode();
                if (this.DebitSubaccount != null)
                    hashCode = hashCode * 59 + this.DebitSubaccount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EarningType != null)
                    hashCode = hashCode * 59 + this.EarningType.GetHashCode();
                if (this.Employee != null)
                    hashCode = hashCode * 59 + this.Employee.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.ExternalRefNbr != null)
                    hashCode = hashCode * 59 + this.ExternalRefNbr.GetHashCode();
                if (this.FinPeriod != null)
                    hashCode = hashCode * 59 + this.FinPeriod.GetHashCode();
                if (this.InventoryID != null)
                    hashCode = hashCode * 59 + this.InventoryID.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Multiplier != null)
                    hashCode = hashCode * 59 + this.Multiplier.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.ProjectTask != null)
                    hashCode = hashCode * 59 + this.ProjectTask.GetHashCode();
                if (this.Qty != null)
                    hashCode = hashCode * 59 + this.Qty.GetHashCode();
                if (this.Released != null)
                    hashCode = hashCode * 59 + this.Released.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.TransactionID != null)
                    hashCode = hashCode * 59 + this.TransactionID.GetHashCode();
                if (this.UnitRate != null)
                    hashCode = hashCode * 59 + this.UnitRate.GetHashCode();
                if (this.UOM != null)
                    hashCode = hashCode * 59 + this.UOM.GetHashCode();
                if (this.UseBillableQtyInAmountFormula != null)
                    hashCode = hashCode * 59 + this.UseBillableQtyInAmountFormula.GetHashCode();
                if (this.VendorOrCustomer != null)
                    hashCode = hashCode * 59 + this.VendorOrCustomer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
