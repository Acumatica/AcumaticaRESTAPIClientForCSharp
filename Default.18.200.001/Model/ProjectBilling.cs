/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// ProjectBilling
    /// </summary>
    [DataContract]
    public partial class ProjectBilling : Entity,  IEquatable<ProjectBilling>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectBilling" /> class.
        /// </summary>
        /// <param name="customer">customer.</param>
        /// <param name="customerClass">customerClass.</param>
        /// <param name="details">details.</param>
        /// <param name="invoiceDate">invoiceDate.</param>
        /// <param name="postPeriod">postPeriod.</param>
        /// <param name="projectTemplate">projectTemplate.</param>
        /// <param name="statementCycle">statementCycle.</param>
        public ProjectBilling(StringValue customer = default(StringValue), StringValue customerClass = default(StringValue), List<ProjectBillingDetails> details = default(List<ProjectBillingDetails>), DateTimeValue invoiceDate = default(DateTimeValue), StringValue postPeriod = default(StringValue), StringValue projectTemplate = default(StringValue), StringValue statementCycle = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Customer = customer;
            this.CustomerClass = customerClass;
            this.Details = details;
            this.InvoiceDate = invoiceDate;
            this.PostPeriod = postPeriod;
            this.ProjectTemplate = projectTemplate;
            this.StatementCycle = statementCycle;
        }
        
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="Customer", EmitDefaultValue=false)]
        public StringValue Customer { get; set; }

        /// <summary>
        /// Gets or Sets CustomerClass
        /// </summary>
        [DataMember(Name="CustomerClass", EmitDefaultValue=false)]
        public StringValue CustomerClass { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public List<ProjectBillingDetails> Details { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name="InvoiceDate", EmitDefaultValue=false)]
        public DateTimeValue InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets PostPeriod
        /// </summary>
        [DataMember(Name="PostPeriod", EmitDefaultValue=false)]
        public StringValue PostPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTemplate
        /// </summary>
        [DataMember(Name="ProjectTemplate", EmitDefaultValue=false)]
        public StringValue ProjectTemplate { get; set; }

        /// <summary>
        /// Gets or Sets StatementCycle
        /// </summary>
        [DataMember(Name="StatementCycle", EmitDefaultValue=false)]
        public StringValue StatementCycle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectBilling {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  CustomerClass: ").Append(CustomerClass).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  PostPeriod: ").Append(PostPeriod).Append("\n");
            sb.Append("  ProjectTemplate: ").Append(ProjectTemplate).Append("\n");
            sb.Append("  StatementCycle: ").Append(StatementCycle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectBilling);
        }

        /// <summary>
        /// Returns true if ProjectBilling instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectBilling to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectBilling input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && base.Equals(input) && 
                (
                    this.CustomerClass == input.CustomerClass ||
                    (this.CustomerClass != null &&
                    this.CustomerClass.Equals(input.CustomerClass))
                ) && base.Equals(input) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && base.Equals(input) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && base.Equals(input) && 
                (
                    this.PostPeriod == input.PostPeriod ||
                    (this.PostPeriod != null &&
                    this.PostPeriod.Equals(input.PostPeriod))
                ) && base.Equals(input) && 
                (
                    this.ProjectTemplate == input.ProjectTemplate ||
                    (this.ProjectTemplate != null &&
                    this.ProjectTemplate.Equals(input.ProjectTemplate))
                ) && base.Equals(input) && 
                (
                    this.StatementCycle == input.StatementCycle ||
                    (this.StatementCycle != null &&
                    this.StatementCycle.Equals(input.StatementCycle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.CustomerClass != null)
                    hashCode = hashCode * 59 + this.CustomerClass.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.PostPeriod != null)
                    hashCode = hashCode * 59 + this.PostPeriod.GetHashCode();
                if (this.ProjectTemplate != null)
                    hashCode = hashCode * 59 + this.ProjectTemplate.GetHashCode();
                if (this.StatementCycle != null)
                    hashCode = hashCode * 59 + this.StatementCycle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
