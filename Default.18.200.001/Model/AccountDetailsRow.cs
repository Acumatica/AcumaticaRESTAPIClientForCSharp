/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// AccountDetailsRow
    /// </summary>
    [DataContract]
    public partial class AccountDetailsRow : Entity,  IEquatable<AccountDetailsRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDetailsRow" /> class.
        /// </summary>
        /// <param name="account">account.</param>
        /// <param name="batchNbr">batchNbr.</param>
        /// <param name="beginingBalance">beginingBalance.</param>
        /// <param name="branch">branch.</param>
        /// <param name="creditAmount">creditAmount.</param>
        /// <param name="currencyBeginingBalance">currencyBeginingBalance.</param>
        /// <param name="currencyCreditAmount">currencyCreditAmount.</param>
        /// <param name="currencyDebitAmount">currencyDebitAmount.</param>
        /// <param name="currencyEndingBalance">currencyEndingBalance.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="debitAmount">debitAmount.</param>
        /// <param name="description">description.</param>
        /// <param name="endingBalance">endingBalance.</param>
        /// <param name="includedinReclassHistory">includedinReclassHistory.</param>
        /// <param name="inventoryID">inventoryID.</param>
        /// <param name="lineNbr">lineNbr.</param>
        /// <param name="module">module.</param>
        /// <param name="period">period.</param>
        /// <param name="reclassBatchNbr">reclassBatchNbr.</param>
        /// <param name="referenceNbr">referenceNbr.</param>
        /// <param name="selected">selected.</param>
        /// <param name="subaccount">subaccount.</param>
        /// <param name="transactionDate">transactionDate.</param>
        /// <param name="vendorOrCustomer">vendorOrCustomer.</param>
        public AccountDetailsRow(StringValue account = default(StringValue), StringValue batchNbr = default(StringValue), DecimalValue beginingBalance = default(DecimalValue), StringValue branch = default(StringValue), DecimalValue creditAmount = default(DecimalValue), DecimalValue currencyBeginingBalance = default(DecimalValue), DecimalValue currencyCreditAmount = default(DecimalValue), DecimalValue currencyDebitAmount = default(DecimalValue), DecimalValue currencyEndingBalance = default(DecimalValue), StringValue currencyID = default(StringValue), DecimalValue debitAmount = default(DecimalValue), StringValue description = default(StringValue), DecimalValue endingBalance = default(DecimalValue), BooleanValue includedinReclassHistory = default(BooleanValue), StringValue inventoryID = default(StringValue), IntValue lineNbr = default(IntValue), StringValue module = default(StringValue), StringValue period = default(StringValue), StringValue reclassBatchNbr = default(StringValue), StringValue referenceNbr = default(StringValue), BooleanValue selected = default(BooleanValue), StringValue subaccount = default(StringValue), DateTimeValue transactionDate = default(DateTimeValue), StringValue vendorOrCustomer = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Account = account;
            this.BatchNbr = batchNbr;
            this.BeginingBalance = beginingBalance;
            this.Branch = branch;
            this.CreditAmount = creditAmount;
            this.CurrencyBeginingBalance = currencyBeginingBalance;
            this.CurrencyCreditAmount = currencyCreditAmount;
            this.CurrencyDebitAmount = currencyDebitAmount;
            this.CurrencyEndingBalance = currencyEndingBalance;
            this.CurrencyID = currencyID;
            this.DebitAmount = debitAmount;
            this.Description = description;
            this.EndingBalance = endingBalance;
            this.IncludedinReclassHistory = includedinReclassHistory;
            this.InventoryID = inventoryID;
            this.LineNbr = lineNbr;
            this.Module = module;
            this.Period = period;
            this.ReclassBatchNbr = reclassBatchNbr;
            this.ReferenceNbr = referenceNbr;
            this.Selected = selected;
            this.Subaccount = subaccount;
            this.TransactionDate = transactionDate;
            this.VendorOrCustomer = vendorOrCustomer;
        }
        
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="Account", EmitDefaultValue=false)]
        public StringValue Account { get; set; }

        /// <summary>
        /// Gets or Sets BatchNbr
        /// </summary>
        [DataMember(Name="BatchNbr", EmitDefaultValue=false)]
        public StringValue BatchNbr { get; set; }

        /// <summary>
        /// Gets or Sets BeginingBalance
        /// </summary>
        [DataMember(Name="BeginingBalance", EmitDefaultValue=false)]
        public DecimalValue BeginingBalance { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="Branch", EmitDefaultValue=false)]
        public StringValue Branch { get; set; }

        /// <summary>
        /// Gets or Sets CreditAmount
        /// </summary>
        [DataMember(Name="CreditAmount", EmitDefaultValue=false)]
        public DecimalValue CreditAmount { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyBeginingBalance
        /// </summary>
        [DataMember(Name="CurrencyBeginingBalance", EmitDefaultValue=false)]
        public DecimalValue CurrencyBeginingBalance { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCreditAmount
        /// </summary>
        [DataMember(Name="CurrencyCreditAmount", EmitDefaultValue=false)]
        public DecimalValue CurrencyCreditAmount { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyDebitAmount
        /// </summary>
        [DataMember(Name="CurrencyDebitAmount", EmitDefaultValue=false)]
        public DecimalValue CurrencyDebitAmount { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyEndingBalance
        /// </summary>
        [DataMember(Name="CurrencyEndingBalance", EmitDefaultValue=false)]
        public DecimalValue CurrencyEndingBalance { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets DebitAmount
        /// </summary>
        [DataMember(Name="DebitAmount", EmitDefaultValue=false)]
        public DecimalValue DebitAmount { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets EndingBalance
        /// </summary>
        [DataMember(Name="EndingBalance", EmitDefaultValue=false)]
        public DecimalValue EndingBalance { get; set; }

        /// <summary>
        /// Gets or Sets IncludedinReclassHistory
        /// </summary>
        [DataMember(Name="IncludedinReclassHistory", EmitDefaultValue=false)]
        public BooleanValue IncludedinReclassHistory { get; set; }

        /// <summary>
        /// Gets or Sets InventoryID
        /// </summary>
        [DataMember(Name="InventoryID", EmitDefaultValue=false)]
        public StringValue InventoryID { get; set; }

        /// <summary>
        /// Gets or Sets LineNbr
        /// </summary>
        [DataMember(Name="LineNbr", EmitDefaultValue=false)]
        public IntValue LineNbr { get; set; }

        /// <summary>
        /// Gets or Sets Module
        /// </summary>
        [DataMember(Name="Module", EmitDefaultValue=false)]
        public StringValue Module { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="Period", EmitDefaultValue=false)]
        public StringValue Period { get; set; }

        /// <summary>
        /// Gets or Sets ReclassBatchNbr
        /// </summary>
        [DataMember(Name="ReclassBatchNbr", EmitDefaultValue=false)]
        public StringValue ReclassBatchNbr { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNbr
        /// </summary>
        [DataMember(Name="ReferenceNbr", EmitDefaultValue=false)]
        public StringValue ReferenceNbr { get; set; }

        /// <summary>
        /// Gets or Sets Selected
        /// </summary>
        [DataMember(Name="Selected", EmitDefaultValue=false)]
        public BooleanValue Selected { get; set; }

        /// <summary>
        /// Gets or Sets Subaccount
        /// </summary>
        [DataMember(Name="Subaccount", EmitDefaultValue=false)]
        public StringValue Subaccount { get; set; }

        /// <summary>
        /// Gets or Sets TransactionDate
        /// </summary>
        [DataMember(Name="TransactionDate", EmitDefaultValue=false)]
        public DateTimeValue TransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets VendorOrCustomer
        /// </summary>
        [DataMember(Name="VendorOrCustomer", EmitDefaultValue=false)]
        public StringValue VendorOrCustomer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDetailsRow {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  BatchNbr: ").Append(BatchNbr).Append("\n");
            sb.Append("  BeginingBalance: ").Append(BeginingBalance).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  CreditAmount: ").Append(CreditAmount).Append("\n");
            sb.Append("  CurrencyBeginingBalance: ").Append(CurrencyBeginingBalance).Append("\n");
            sb.Append("  CurrencyCreditAmount: ").Append(CurrencyCreditAmount).Append("\n");
            sb.Append("  CurrencyDebitAmount: ").Append(CurrencyDebitAmount).Append("\n");
            sb.Append("  CurrencyEndingBalance: ").Append(CurrencyEndingBalance).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  DebitAmount: ").Append(DebitAmount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndingBalance: ").Append(EndingBalance).Append("\n");
            sb.Append("  IncludedinReclassHistory: ").Append(IncludedinReclassHistory).Append("\n");
            sb.Append("  InventoryID: ").Append(InventoryID).Append("\n");
            sb.Append("  LineNbr: ").Append(LineNbr).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  ReclassBatchNbr: ").Append(ReclassBatchNbr).Append("\n");
            sb.Append("  ReferenceNbr: ").Append(ReferenceNbr).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  Subaccount: ").Append(Subaccount).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  VendorOrCustomer: ").Append(VendorOrCustomer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDetailsRow);
        }

        /// <summary>
        /// Returns true if AccountDetailsRow instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDetailsRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDetailsRow input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && base.Equals(input) && 
                (
                    this.BatchNbr == input.BatchNbr ||
                    (this.BatchNbr != null &&
                    this.BatchNbr.Equals(input.BatchNbr))
                ) && base.Equals(input) && 
                (
                    this.BeginingBalance == input.BeginingBalance ||
                    (this.BeginingBalance != null &&
                    this.BeginingBalance.Equals(input.BeginingBalance))
                ) && base.Equals(input) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && base.Equals(input) && 
                (
                    this.CreditAmount == input.CreditAmount ||
                    (this.CreditAmount != null &&
                    this.CreditAmount.Equals(input.CreditAmount))
                ) && base.Equals(input) && 
                (
                    this.CurrencyBeginingBalance == input.CurrencyBeginingBalance ||
                    (this.CurrencyBeginingBalance != null &&
                    this.CurrencyBeginingBalance.Equals(input.CurrencyBeginingBalance))
                ) && base.Equals(input) && 
                (
                    this.CurrencyCreditAmount == input.CurrencyCreditAmount ||
                    (this.CurrencyCreditAmount != null &&
                    this.CurrencyCreditAmount.Equals(input.CurrencyCreditAmount))
                ) && base.Equals(input) && 
                (
                    this.CurrencyDebitAmount == input.CurrencyDebitAmount ||
                    (this.CurrencyDebitAmount != null &&
                    this.CurrencyDebitAmount.Equals(input.CurrencyDebitAmount))
                ) && base.Equals(input) && 
                (
                    this.CurrencyEndingBalance == input.CurrencyEndingBalance ||
                    (this.CurrencyEndingBalance != null &&
                    this.CurrencyEndingBalance.Equals(input.CurrencyEndingBalance))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.DebitAmount == input.DebitAmount ||
                    (this.DebitAmount != null &&
                    this.DebitAmount.Equals(input.DebitAmount))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.EndingBalance == input.EndingBalance ||
                    (this.EndingBalance != null &&
                    this.EndingBalance.Equals(input.EndingBalance))
                ) && base.Equals(input) && 
                (
                    this.IncludedinReclassHistory == input.IncludedinReclassHistory ||
                    (this.IncludedinReclassHistory != null &&
                    this.IncludedinReclassHistory.Equals(input.IncludedinReclassHistory))
                ) && base.Equals(input) && 
                (
                    this.InventoryID == input.InventoryID ||
                    (this.InventoryID != null &&
                    this.InventoryID.Equals(input.InventoryID))
                ) && base.Equals(input) && 
                (
                    this.LineNbr == input.LineNbr ||
                    (this.LineNbr != null &&
                    this.LineNbr.Equals(input.LineNbr))
                ) && base.Equals(input) && 
                (
                    this.Module == input.Module ||
                    (this.Module != null &&
                    this.Module.Equals(input.Module))
                ) && base.Equals(input) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && base.Equals(input) && 
                (
                    this.ReclassBatchNbr == input.ReclassBatchNbr ||
                    (this.ReclassBatchNbr != null &&
                    this.ReclassBatchNbr.Equals(input.ReclassBatchNbr))
                ) && base.Equals(input) && 
                (
                    this.ReferenceNbr == input.ReferenceNbr ||
                    (this.ReferenceNbr != null &&
                    this.ReferenceNbr.Equals(input.ReferenceNbr))
                ) && base.Equals(input) && 
                (
                    this.Selected == input.Selected ||
                    (this.Selected != null &&
                    this.Selected.Equals(input.Selected))
                ) && base.Equals(input) && 
                (
                    this.Subaccount == input.Subaccount ||
                    (this.Subaccount != null &&
                    this.Subaccount.Equals(input.Subaccount))
                ) && base.Equals(input) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && base.Equals(input) && 
                (
                    this.VendorOrCustomer == input.VendorOrCustomer ||
                    (this.VendorOrCustomer != null &&
                    this.VendorOrCustomer.Equals(input.VendorOrCustomer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.BatchNbr != null)
                    hashCode = hashCode * 59 + this.BatchNbr.GetHashCode();
                if (this.BeginingBalance != null)
                    hashCode = hashCode * 59 + this.BeginingBalance.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.CreditAmount != null)
                    hashCode = hashCode * 59 + this.CreditAmount.GetHashCode();
                if (this.CurrencyBeginingBalance != null)
                    hashCode = hashCode * 59 + this.CurrencyBeginingBalance.GetHashCode();
                if (this.CurrencyCreditAmount != null)
                    hashCode = hashCode * 59 + this.CurrencyCreditAmount.GetHashCode();
                if (this.CurrencyDebitAmount != null)
                    hashCode = hashCode * 59 + this.CurrencyDebitAmount.GetHashCode();
                if (this.CurrencyEndingBalance != null)
                    hashCode = hashCode * 59 + this.CurrencyEndingBalance.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.DebitAmount != null)
                    hashCode = hashCode * 59 + this.DebitAmount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EndingBalance != null)
                    hashCode = hashCode * 59 + this.EndingBalance.GetHashCode();
                if (this.IncludedinReclassHistory != null)
                    hashCode = hashCode * 59 + this.IncludedinReclassHistory.GetHashCode();
                if (this.InventoryID != null)
                    hashCode = hashCode * 59 + this.InventoryID.GetHashCode();
                if (this.LineNbr != null)
                    hashCode = hashCode * 59 + this.LineNbr.GetHashCode();
                if (this.Module != null)
                    hashCode = hashCode * 59 + this.Module.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.ReclassBatchNbr != null)
                    hashCode = hashCode * 59 + this.ReclassBatchNbr.GetHashCode();
                if (this.ReferenceNbr != null)
                    hashCode = hashCode * 59 + this.ReferenceNbr.GetHashCode();
                if (this.Selected != null)
                    hashCode = hashCode * 59 + this.Selected.GetHashCode();
                if (this.Subaccount != null)
                    hashCode = hashCode * 59 + this.Subaccount.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.VendorOrCustomer != null)
                    hashCode = hashCode * 59 + this.VendorOrCustomer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
