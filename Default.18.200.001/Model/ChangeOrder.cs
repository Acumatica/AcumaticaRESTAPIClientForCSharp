/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// ChangeOrder
    /// </summary>
    [DataContract]
    public partial class ChangeOrder : Entity,  IEquatable<ChangeOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeOrder" /> class.
        /// </summary>
        /// <param name="approvalDetails">approvalDetails.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="changeDate">changeDate.</param>
        /// <param name="_class">_class.</param>
        /// <param name="commitments">commitments.</param>
        /// <param name="commitmentsChangeTotal">commitmentsChangeTotal.</param>
        /// <param name="completionDate">completionDate.</param>
        /// <param name="contractTimeChangeDays">contractTimeChangeDays.</param>
        /// <param name="costBudget">costBudget.</param>
        /// <param name="costBudgetChangeTotal">costBudgetChangeTotal.</param>
        /// <param name="customer">customer.</param>
        /// <param name="description">description.</param>
        /// <param name="detailedDescription">detailedDescription.</param>
        /// <param name="externalRefNbr">externalRefNbr.</param>
        /// <param name="grossMargin">grossMargin.</param>
        /// <param name="grossMarginAmount">grossMarginAmount.</param>
        /// <param name="hold">hold.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="originalCORefNbr">originalCORefNbr.</param>
        /// <param name="projectID">projectID.</param>
        /// <param name="refNbr">refNbr.</param>
        /// <param name="revenueBudget">revenueBudget.</param>
        /// <param name="revenueBudgetChangeTotal">revenueBudgetChangeTotal.</param>
        /// <param name="revenueChangeNbr">revenueChangeNbr.</param>
        /// <param name="reverseStatus">reverseStatus.</param>
        /// <param name="status">status.</param>
        public ChangeOrder(List<Approval> approvalDetails = default(List<Approval>), List<AttributeValue> attributes = default(List<AttributeValue>), DateTimeValue changeDate = default(DateTimeValue), StringValue _class = default(StringValue), List<ChangeOrderCommitment> commitments = default(List<ChangeOrderCommitment>), DecimalValue commitmentsChangeTotal = default(DecimalValue), DateTimeValue completionDate = default(DateTimeValue), IntValue contractTimeChangeDays = default(IntValue), List<ChangeOrderCostBudget> costBudget = default(List<ChangeOrderCostBudget>), DecimalValue costBudgetChangeTotal = default(DecimalValue), StringValue customer = default(StringValue), StringValue description = default(StringValue), StringValue detailedDescription = default(StringValue), StringValue externalRefNbr = default(StringValue), DecimalValue grossMargin = default(DecimalValue), DecimalValue grossMarginAmount = default(DecimalValue), BooleanValue hold = default(BooleanValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue originalCORefNbr = default(StringValue), StringValue projectID = default(StringValue), StringValue refNbr = default(StringValue), List<ChangeOrderRevenueBudget> revenueBudget = default(List<ChangeOrderRevenueBudget>), DecimalValue revenueBudgetChangeTotal = default(DecimalValue), StringValue revenueChangeNbr = default(StringValue), StringValue reverseStatus = default(StringValue), StringValue status = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ApprovalDetails = approvalDetails;
            this.Attributes = attributes;
            this.ChangeDate = changeDate;
            this.Class = _class;
            this.Commitments = commitments;
            this.CommitmentsChangeTotal = commitmentsChangeTotal;
            this.CompletionDate = completionDate;
            this.ContractTimeChangeDays = contractTimeChangeDays;
            this.CostBudget = costBudget;
            this.CostBudgetChangeTotal = costBudgetChangeTotal;
            this.Customer = customer;
            this.Description = description;
            this.DetailedDescription = detailedDescription;
            this.ExternalRefNbr = externalRefNbr;
            this.GrossMargin = grossMargin;
            this.GrossMarginAmount = grossMarginAmount;
            this.Hold = hold;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.OriginalCORefNbr = originalCORefNbr;
            this.ProjectID = projectID;
            this.RefNbr = refNbr;
            this.RevenueBudget = revenueBudget;
            this.RevenueBudgetChangeTotal = revenueBudgetChangeTotal;
            this.RevenueChangeNbr = revenueChangeNbr;
            this.ReverseStatus = reverseStatus;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets ApprovalDetails
        /// </summary>
        [DataMember(Name="ApprovalDetails", EmitDefaultValue=false)]
        public List<Approval> ApprovalDetails { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<AttributeValue> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ChangeDate
        /// </summary>
        [DataMember(Name="ChangeDate", EmitDefaultValue=false)]
        public DateTimeValue ChangeDate { get; set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name="Class", EmitDefaultValue=false)]
        public StringValue Class { get; set; }

        /// <summary>
        /// Gets or Sets Commitments
        /// </summary>
        [DataMember(Name="Commitments", EmitDefaultValue=false)]
        public List<ChangeOrderCommitment> Commitments { get; set; }

        /// <summary>
        /// Gets or Sets CommitmentsChangeTotal
        /// </summary>
        [DataMember(Name="CommitmentsChangeTotal", EmitDefaultValue=false)]
        public DecimalValue CommitmentsChangeTotal { get; set; }

        /// <summary>
        /// Gets or Sets CompletionDate
        /// </summary>
        [DataMember(Name="CompletionDate", EmitDefaultValue=false)]
        public DateTimeValue CompletionDate { get; set; }

        /// <summary>
        /// Gets or Sets ContractTimeChangeDays
        /// </summary>
        [DataMember(Name="ContractTimeChangeDays", EmitDefaultValue=false)]
        public IntValue ContractTimeChangeDays { get; set; }

        /// <summary>
        /// Gets or Sets CostBudget
        /// </summary>
        [DataMember(Name="CostBudget", EmitDefaultValue=false)]
        public List<ChangeOrderCostBudget> CostBudget { get; set; }

        /// <summary>
        /// Gets or Sets CostBudgetChangeTotal
        /// </summary>
        [DataMember(Name="CostBudgetChangeTotal", EmitDefaultValue=false)]
        public DecimalValue CostBudgetChangeTotal { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="Customer", EmitDefaultValue=false)]
        public StringValue Customer { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets DetailedDescription
        /// </summary>
        [DataMember(Name="DetailedDescription", EmitDefaultValue=false)]
        public StringValue DetailedDescription { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRefNbr
        /// </summary>
        [DataMember(Name="ExternalRefNbr", EmitDefaultValue=false)]
        public StringValue ExternalRefNbr { get; set; }

        /// <summary>
        /// Gets or Sets GrossMargin
        /// </summary>
        [DataMember(Name="GrossMargin", EmitDefaultValue=false)]
        public DecimalValue GrossMargin { get; set; }

        /// <summary>
        /// Gets or Sets GrossMarginAmount
        /// </summary>
        [DataMember(Name="GrossMarginAmount", EmitDefaultValue=false)]
        public DecimalValue GrossMarginAmount { get; set; }

        /// <summary>
        /// Gets or Sets Hold
        /// </summary>
        [DataMember(Name="Hold", EmitDefaultValue=false)]
        public BooleanValue Hold { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets OriginalCORefNbr
        /// </summary>
        [DataMember(Name="OriginalCORefNbr", EmitDefaultValue=false)]
        public StringValue OriginalCORefNbr { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="ProjectID", EmitDefaultValue=false)]
        public StringValue ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets RefNbr
        /// </summary>
        [DataMember(Name="RefNbr", EmitDefaultValue=false)]
        public StringValue RefNbr { get; set; }

        /// <summary>
        /// Gets or Sets RevenueBudget
        /// </summary>
        [DataMember(Name="RevenueBudget", EmitDefaultValue=false)]
        public List<ChangeOrderRevenueBudget> RevenueBudget { get; set; }

        /// <summary>
        /// Gets or Sets RevenueBudgetChangeTotal
        /// </summary>
        [DataMember(Name="RevenueBudgetChangeTotal", EmitDefaultValue=false)]
        public DecimalValue RevenueBudgetChangeTotal { get; set; }

        /// <summary>
        /// Gets or Sets RevenueChangeNbr
        /// </summary>
        [DataMember(Name="RevenueChangeNbr", EmitDefaultValue=false)]
        public StringValue RevenueChangeNbr { get; set; }

        /// <summary>
        /// Gets or Sets ReverseStatus
        /// </summary>
        [DataMember(Name="ReverseStatus", EmitDefaultValue=false)]
        public StringValue ReverseStatus { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeOrder {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ApprovalDetails: ").Append(ApprovalDetails).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ChangeDate: ").Append(ChangeDate).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Commitments: ").Append(Commitments).Append("\n");
            sb.Append("  CommitmentsChangeTotal: ").Append(CommitmentsChangeTotal).Append("\n");
            sb.Append("  CompletionDate: ").Append(CompletionDate).Append("\n");
            sb.Append("  ContractTimeChangeDays: ").Append(ContractTimeChangeDays).Append("\n");
            sb.Append("  CostBudget: ").Append(CostBudget).Append("\n");
            sb.Append("  CostBudgetChangeTotal: ").Append(CostBudgetChangeTotal).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DetailedDescription: ").Append(DetailedDescription).Append("\n");
            sb.Append("  ExternalRefNbr: ").Append(ExternalRefNbr).Append("\n");
            sb.Append("  GrossMargin: ").Append(GrossMargin).Append("\n");
            sb.Append("  GrossMarginAmount: ").Append(GrossMarginAmount).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  OriginalCORefNbr: ").Append(OriginalCORefNbr).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  RefNbr: ").Append(RefNbr).Append("\n");
            sb.Append("  RevenueBudget: ").Append(RevenueBudget).Append("\n");
            sb.Append("  RevenueBudgetChangeTotal: ").Append(RevenueBudgetChangeTotal).Append("\n");
            sb.Append("  RevenueChangeNbr: ").Append(RevenueChangeNbr).Append("\n");
            sb.Append("  ReverseStatus: ").Append(ReverseStatus).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeOrder);
        }

        /// <summary>
        /// Returns true if ChangeOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeOrder input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ApprovalDetails == input.ApprovalDetails ||
                    this.ApprovalDetails != null &&
                    this.ApprovalDetails.SequenceEqual(input.ApprovalDetails)
                ) && base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.ChangeDate == input.ChangeDate ||
                    (this.ChangeDate != null &&
                    this.ChangeDate.Equals(input.ChangeDate))
                ) && base.Equals(input) && 
                (
                    this.Class == input.Class ||
                    (this.Class != null &&
                    this.Class.Equals(input.Class))
                ) && base.Equals(input) && 
                (
                    this.Commitments == input.Commitments ||
                    this.Commitments != null &&
                    this.Commitments.SequenceEqual(input.Commitments)
                ) && base.Equals(input) && 
                (
                    this.CommitmentsChangeTotal == input.CommitmentsChangeTotal ||
                    (this.CommitmentsChangeTotal != null &&
                    this.CommitmentsChangeTotal.Equals(input.CommitmentsChangeTotal))
                ) && base.Equals(input) && 
                (
                    this.CompletionDate == input.CompletionDate ||
                    (this.CompletionDate != null &&
                    this.CompletionDate.Equals(input.CompletionDate))
                ) && base.Equals(input) && 
                (
                    this.ContractTimeChangeDays == input.ContractTimeChangeDays ||
                    (this.ContractTimeChangeDays != null &&
                    this.ContractTimeChangeDays.Equals(input.ContractTimeChangeDays))
                ) && base.Equals(input) && 
                (
                    this.CostBudget == input.CostBudget ||
                    this.CostBudget != null &&
                    this.CostBudget.SequenceEqual(input.CostBudget)
                ) && base.Equals(input) && 
                (
                    this.CostBudgetChangeTotal == input.CostBudgetChangeTotal ||
                    (this.CostBudgetChangeTotal != null &&
                    this.CostBudgetChangeTotal.Equals(input.CostBudgetChangeTotal))
                ) && base.Equals(input) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.DetailedDescription == input.DetailedDescription ||
                    (this.DetailedDescription != null &&
                    this.DetailedDescription.Equals(input.DetailedDescription))
                ) && base.Equals(input) && 
                (
                    this.ExternalRefNbr == input.ExternalRefNbr ||
                    (this.ExternalRefNbr != null &&
                    this.ExternalRefNbr.Equals(input.ExternalRefNbr))
                ) && base.Equals(input) && 
                (
                    this.GrossMargin == input.GrossMargin ||
                    (this.GrossMargin != null &&
                    this.GrossMargin.Equals(input.GrossMargin))
                ) && base.Equals(input) && 
                (
                    this.GrossMarginAmount == input.GrossMarginAmount ||
                    (this.GrossMarginAmount != null &&
                    this.GrossMarginAmount.Equals(input.GrossMarginAmount))
                ) && base.Equals(input) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.OriginalCORefNbr == input.OriginalCORefNbr ||
                    (this.OriginalCORefNbr != null &&
                    this.OriginalCORefNbr.Equals(input.OriginalCORefNbr))
                ) && base.Equals(input) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && base.Equals(input) && 
                (
                    this.RefNbr == input.RefNbr ||
                    (this.RefNbr != null &&
                    this.RefNbr.Equals(input.RefNbr))
                ) && base.Equals(input) && 
                (
                    this.RevenueBudget == input.RevenueBudget ||
                    this.RevenueBudget != null &&
                    this.RevenueBudget.SequenceEqual(input.RevenueBudget)
                ) && base.Equals(input) && 
                (
                    this.RevenueBudgetChangeTotal == input.RevenueBudgetChangeTotal ||
                    (this.RevenueBudgetChangeTotal != null &&
                    this.RevenueBudgetChangeTotal.Equals(input.RevenueBudgetChangeTotal))
                ) && base.Equals(input) && 
                (
                    this.RevenueChangeNbr == input.RevenueChangeNbr ||
                    (this.RevenueChangeNbr != null &&
                    this.RevenueChangeNbr.Equals(input.RevenueChangeNbr))
                ) && base.Equals(input) && 
                (
                    this.ReverseStatus == input.ReverseStatus ||
                    (this.ReverseStatus != null &&
                    this.ReverseStatus.Equals(input.ReverseStatus))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ApprovalDetails != null)
                    hashCode = hashCode * 59 + this.ApprovalDetails.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.ChangeDate != null)
                    hashCode = hashCode * 59 + this.ChangeDate.GetHashCode();
                if (this.Class != null)
                    hashCode = hashCode * 59 + this.Class.GetHashCode();
                if (this.Commitments != null)
                    hashCode = hashCode * 59 + this.Commitments.GetHashCode();
                if (this.CommitmentsChangeTotal != null)
                    hashCode = hashCode * 59 + this.CommitmentsChangeTotal.GetHashCode();
                if (this.CompletionDate != null)
                    hashCode = hashCode * 59 + this.CompletionDate.GetHashCode();
                if (this.ContractTimeChangeDays != null)
                    hashCode = hashCode * 59 + this.ContractTimeChangeDays.GetHashCode();
                if (this.CostBudget != null)
                    hashCode = hashCode * 59 + this.CostBudget.GetHashCode();
                if (this.CostBudgetChangeTotal != null)
                    hashCode = hashCode * 59 + this.CostBudgetChangeTotal.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DetailedDescription != null)
                    hashCode = hashCode * 59 + this.DetailedDescription.GetHashCode();
                if (this.ExternalRefNbr != null)
                    hashCode = hashCode * 59 + this.ExternalRefNbr.GetHashCode();
                if (this.GrossMargin != null)
                    hashCode = hashCode * 59 + this.GrossMargin.GetHashCode();
                if (this.GrossMarginAmount != null)
                    hashCode = hashCode * 59 + this.GrossMarginAmount.GetHashCode();
                if (this.Hold != null)
                    hashCode = hashCode * 59 + this.Hold.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.OriginalCORefNbr != null)
                    hashCode = hashCode * 59 + this.OriginalCORefNbr.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.RefNbr != null)
                    hashCode = hashCode * 59 + this.RefNbr.GetHashCode();
                if (this.RevenueBudget != null)
                    hashCode = hashCode * 59 + this.RevenueBudget.GetHashCode();
                if (this.RevenueBudgetChangeTotal != null)
                    hashCode = hashCode * 59 + this.RevenueBudgetChangeTotal.GetHashCode();
                if (this.RevenueChangeNbr != null)
                    hashCode = hashCode * 59 + this.RevenueChangeNbr.GetHashCode();
                if (this.ReverseStatus != null)
                    hashCode = hashCode * 59 + this.ReverseStatus.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
