/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// Warehouse
    /// </summary>
    [DataContract]
    public partial class Warehouse : Entity,  IEquatable<Warehouse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Warehouse" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="cOGSExpenseAccount">cOGSExpenseAccount.</param>
        /// <param name="cOGSExpenseSubaccount">cOGSExpenseSubaccount.</param>
        /// <param name="description">description.</param>
        /// <param name="discountAccount">discountAccount.</param>
        /// <param name="discountSubaccount">discountSubaccount.</param>
        /// <param name="dropShipLocationID">dropShipLocationID.</param>
        /// <param name="freightChargeAccount">freightChargeAccount.</param>
        /// <param name="freightChargeSubaccount">freightChargeSubaccount.</param>
        /// <param name="inventoryAccount">inventoryAccount.</param>
        /// <param name="inventorySubaccount">inventorySubaccount.</param>
        /// <param name="landedCostVarianceAccount">landedCostVarianceAccount.</param>
        /// <param name="landedCostVarianceSubaccount">landedCostVarianceSubaccount.</param>
        /// <param name="locations">locations.</param>
        /// <param name="miscChargeAccount">miscChargeAccount.</param>
        /// <param name="miscChargeSubaccount">miscChargeSubaccount.</param>
        /// <param name="overrideInventoryAccountSubaccount">overrideInventoryAccountSubaccount.</param>
        /// <param name="pOAccrualAccount">pOAccrualAccount.</param>
        /// <param name="pOAccrualSubaccount">pOAccrualSubaccount.</param>
        /// <param name="purchasePriceVarianceAccount">purchasePriceVarianceAccount.</param>
        /// <param name="purchasePriceVarianceSubaccount">purchasePriceVarianceSubaccount.</param>
        /// <param name="reasonCodeSubaccount">reasonCodeSubaccount.</param>
        /// <param name="receivingLocationID">receivingLocationID.</param>
        /// <param name="rMALocationID">rMALocationID.</param>
        /// <param name="salesAccount">salesAccount.</param>
        /// <param name="salesSubaccount">salesSubaccount.</param>
        /// <param name="shippingLocationID">shippingLocationID.</param>
        /// <param name="standardCostRevaluationAccount">standardCostRevaluationAccount.</param>
        /// <param name="standardCostRevaluationSubaccount">standardCostRevaluationSubaccount.</param>
        /// <param name="standardCostVarianceAccount">standardCostVarianceAccount.</param>
        /// <param name="standardCostVarianceSubaccount">standardCostVarianceSubaccount.</param>
        /// <param name="warehouseID">warehouseID.</param>
        public Warehouse(BooleanValue active = default(BooleanValue), StringValue cOGSExpenseAccount = default(StringValue), StringValue cOGSExpenseSubaccount = default(StringValue), StringValue description = default(StringValue), StringValue discountAccount = default(StringValue), StringValue discountSubaccount = default(StringValue), StringValue dropShipLocationID = default(StringValue), StringValue freightChargeAccount = default(StringValue), StringValue freightChargeSubaccount = default(StringValue), StringValue inventoryAccount = default(StringValue), StringValue inventorySubaccount = default(StringValue), StringValue landedCostVarianceAccount = default(StringValue), StringValue landedCostVarianceSubaccount = default(StringValue), List<WarehouseLocation> locations = default(List<WarehouseLocation>), StringValue miscChargeAccount = default(StringValue), StringValue miscChargeSubaccount = default(StringValue), BooleanValue overrideInventoryAccountSubaccount = default(BooleanValue), StringValue pOAccrualAccount = default(StringValue), StringValue pOAccrualSubaccount = default(StringValue), StringValue purchasePriceVarianceAccount = default(StringValue), StringValue purchasePriceVarianceSubaccount = default(StringValue), StringValue reasonCodeSubaccount = default(StringValue), StringValue receivingLocationID = default(StringValue), StringValue rMALocationID = default(StringValue), StringValue salesAccount = default(StringValue), StringValue salesSubaccount = default(StringValue), StringValue shippingLocationID = default(StringValue), StringValue standardCostRevaluationAccount = default(StringValue), StringValue standardCostRevaluationSubaccount = default(StringValue), StringValue standardCostVarianceAccount = default(StringValue), StringValue standardCostVarianceSubaccount = default(StringValue), StringValue warehouseID = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Active = active;
            this.COGSExpenseAccount = cOGSExpenseAccount;
            this.COGSExpenseSubaccount = cOGSExpenseSubaccount;
            this.Description = description;
            this.DiscountAccount = discountAccount;
            this.DiscountSubaccount = discountSubaccount;
            this.DropShipLocationID = dropShipLocationID;
            this.FreightChargeAccount = freightChargeAccount;
            this.FreightChargeSubaccount = freightChargeSubaccount;
            this.InventoryAccount = inventoryAccount;
            this.InventorySubaccount = inventorySubaccount;
            this.LandedCostVarianceAccount = landedCostVarianceAccount;
            this.LandedCostVarianceSubaccount = landedCostVarianceSubaccount;
            this.Locations = locations;
            this.MiscChargeAccount = miscChargeAccount;
            this.MiscChargeSubaccount = miscChargeSubaccount;
            this.OverrideInventoryAccountSubaccount = overrideInventoryAccountSubaccount;
            this.POAccrualAccount = pOAccrualAccount;
            this.POAccrualSubaccount = pOAccrualSubaccount;
            this.PurchasePriceVarianceAccount = purchasePriceVarianceAccount;
            this.PurchasePriceVarianceSubaccount = purchasePriceVarianceSubaccount;
            this.ReasonCodeSubaccount = reasonCodeSubaccount;
            this.ReceivingLocationID = receivingLocationID;
            this.RMALocationID = rMALocationID;
            this.SalesAccount = salesAccount;
            this.SalesSubaccount = salesSubaccount;
            this.ShippingLocationID = shippingLocationID;
            this.StandardCostRevaluationAccount = standardCostRevaluationAccount;
            this.StandardCostRevaluationSubaccount = standardCostRevaluationSubaccount;
            this.StandardCostVarianceAccount = standardCostVarianceAccount;
            this.StandardCostVarianceSubaccount = standardCostVarianceSubaccount;
            this.WarehouseID = warehouseID;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public BooleanValue Active { get; set; }

        /// <summary>
        /// Gets or Sets COGSExpenseAccount
        /// </summary>
        [DataMember(Name="COGSExpenseAccount", EmitDefaultValue=false)]
        public StringValue COGSExpenseAccount { get; set; }

        /// <summary>
        /// Gets or Sets COGSExpenseSubaccount
        /// </summary>
        [DataMember(Name="COGSExpenseSubaccount", EmitDefaultValue=false)]
        public StringValue COGSExpenseSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAccount
        /// </summary>
        [DataMember(Name="DiscountAccount", EmitDefaultValue=false)]
        public StringValue DiscountAccount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountSubaccount
        /// </summary>
        [DataMember(Name="DiscountSubaccount", EmitDefaultValue=false)]
        public StringValue DiscountSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets DropShipLocationID
        /// </summary>
        [DataMember(Name="DropShipLocationID", EmitDefaultValue=false)]
        public StringValue DropShipLocationID { get; set; }

        /// <summary>
        /// Gets or Sets FreightChargeAccount
        /// </summary>
        [DataMember(Name="FreightChargeAccount", EmitDefaultValue=false)]
        public StringValue FreightChargeAccount { get; set; }

        /// <summary>
        /// Gets or Sets FreightChargeSubaccount
        /// </summary>
        [DataMember(Name="FreightChargeSubaccount", EmitDefaultValue=false)]
        public StringValue FreightChargeSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets InventoryAccount
        /// </summary>
        [DataMember(Name="InventoryAccount", EmitDefaultValue=false)]
        public StringValue InventoryAccount { get; set; }

        /// <summary>
        /// Gets or Sets InventorySubaccount
        /// </summary>
        [DataMember(Name="InventorySubaccount", EmitDefaultValue=false)]
        public StringValue InventorySubaccount { get; set; }

        /// <summary>
        /// Gets or Sets LandedCostVarianceAccount
        /// </summary>
        [DataMember(Name="LandedCostVarianceAccount", EmitDefaultValue=false)]
        public StringValue LandedCostVarianceAccount { get; set; }

        /// <summary>
        /// Gets or Sets LandedCostVarianceSubaccount
        /// </summary>
        [DataMember(Name="LandedCostVarianceSubaccount", EmitDefaultValue=false)]
        public StringValue LandedCostVarianceSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name="Locations", EmitDefaultValue=false)]
        public List<WarehouseLocation> Locations { get; set; }

        /// <summary>
        /// Gets or Sets MiscChargeAccount
        /// </summary>
        [DataMember(Name="MiscChargeAccount", EmitDefaultValue=false)]
        public StringValue MiscChargeAccount { get; set; }

        /// <summary>
        /// Gets or Sets MiscChargeSubaccount
        /// </summary>
        [DataMember(Name="MiscChargeSubaccount", EmitDefaultValue=false)]
        public StringValue MiscChargeSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets OverrideInventoryAccountSubaccount
        /// </summary>
        [DataMember(Name="OverrideInventoryAccountSubaccount", EmitDefaultValue=false)]
        public BooleanValue OverrideInventoryAccountSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets POAccrualAccount
        /// </summary>
        [DataMember(Name="POAccrualAccount", EmitDefaultValue=false)]
        public StringValue POAccrualAccount { get; set; }

        /// <summary>
        /// Gets or Sets POAccrualSubaccount
        /// </summary>
        [DataMember(Name="POAccrualSubaccount", EmitDefaultValue=false)]
        public StringValue POAccrualSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePriceVarianceAccount
        /// </summary>
        [DataMember(Name="PurchasePriceVarianceAccount", EmitDefaultValue=false)]
        public StringValue PurchasePriceVarianceAccount { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePriceVarianceSubaccount
        /// </summary>
        [DataMember(Name="PurchasePriceVarianceSubaccount", EmitDefaultValue=false)]
        public StringValue PurchasePriceVarianceSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeSubaccount
        /// </summary>
        [DataMember(Name="ReasonCodeSubaccount", EmitDefaultValue=false)]
        public StringValue ReasonCodeSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingLocationID
        /// </summary>
        [DataMember(Name="ReceivingLocationID", EmitDefaultValue=false)]
        public StringValue ReceivingLocationID { get; set; }

        /// <summary>
        /// Gets or Sets RMALocationID
        /// </summary>
        [DataMember(Name="RMALocationID", EmitDefaultValue=false)]
        public StringValue RMALocationID { get; set; }

        /// <summary>
        /// Gets or Sets SalesAccount
        /// </summary>
        [DataMember(Name="SalesAccount", EmitDefaultValue=false)]
        public StringValue SalesAccount { get; set; }

        /// <summary>
        /// Gets or Sets SalesSubaccount
        /// </summary>
        [DataMember(Name="SalesSubaccount", EmitDefaultValue=false)]
        public StringValue SalesSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets ShippingLocationID
        /// </summary>
        [DataMember(Name="ShippingLocationID", EmitDefaultValue=false)]
        public StringValue ShippingLocationID { get; set; }

        /// <summary>
        /// Gets or Sets StandardCostRevaluationAccount
        /// </summary>
        [DataMember(Name="StandardCostRevaluationAccount", EmitDefaultValue=false)]
        public StringValue StandardCostRevaluationAccount { get; set; }

        /// <summary>
        /// Gets or Sets StandardCostRevaluationSubaccount
        /// </summary>
        [DataMember(Name="StandardCostRevaluationSubaccount", EmitDefaultValue=false)]
        public StringValue StandardCostRevaluationSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets StandardCostVarianceAccount
        /// </summary>
        [DataMember(Name="StandardCostVarianceAccount", EmitDefaultValue=false)]
        public StringValue StandardCostVarianceAccount { get; set; }

        /// <summary>
        /// Gets or Sets StandardCostVarianceSubaccount
        /// </summary>
        [DataMember(Name="StandardCostVarianceSubaccount", EmitDefaultValue=false)]
        public StringValue StandardCostVarianceSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseID
        /// </summary>
        [DataMember(Name="WarehouseID", EmitDefaultValue=false)]
        public StringValue WarehouseID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Warehouse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  COGSExpenseAccount: ").Append(COGSExpenseAccount).Append("\n");
            sb.Append("  COGSExpenseSubaccount: ").Append(COGSExpenseSubaccount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountAccount: ").Append(DiscountAccount).Append("\n");
            sb.Append("  DiscountSubaccount: ").Append(DiscountSubaccount).Append("\n");
            sb.Append("  DropShipLocationID: ").Append(DropShipLocationID).Append("\n");
            sb.Append("  FreightChargeAccount: ").Append(FreightChargeAccount).Append("\n");
            sb.Append("  FreightChargeSubaccount: ").Append(FreightChargeSubaccount).Append("\n");
            sb.Append("  InventoryAccount: ").Append(InventoryAccount).Append("\n");
            sb.Append("  InventorySubaccount: ").Append(InventorySubaccount).Append("\n");
            sb.Append("  LandedCostVarianceAccount: ").Append(LandedCostVarianceAccount).Append("\n");
            sb.Append("  LandedCostVarianceSubaccount: ").Append(LandedCostVarianceSubaccount).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  MiscChargeAccount: ").Append(MiscChargeAccount).Append("\n");
            sb.Append("  MiscChargeSubaccount: ").Append(MiscChargeSubaccount).Append("\n");
            sb.Append("  OverrideInventoryAccountSubaccount: ").Append(OverrideInventoryAccountSubaccount).Append("\n");
            sb.Append("  POAccrualAccount: ").Append(POAccrualAccount).Append("\n");
            sb.Append("  POAccrualSubaccount: ").Append(POAccrualSubaccount).Append("\n");
            sb.Append("  PurchasePriceVarianceAccount: ").Append(PurchasePriceVarianceAccount).Append("\n");
            sb.Append("  PurchasePriceVarianceSubaccount: ").Append(PurchasePriceVarianceSubaccount).Append("\n");
            sb.Append("  ReasonCodeSubaccount: ").Append(ReasonCodeSubaccount).Append("\n");
            sb.Append("  ReceivingLocationID: ").Append(ReceivingLocationID).Append("\n");
            sb.Append("  RMALocationID: ").Append(RMALocationID).Append("\n");
            sb.Append("  SalesAccount: ").Append(SalesAccount).Append("\n");
            sb.Append("  SalesSubaccount: ").Append(SalesSubaccount).Append("\n");
            sb.Append("  ShippingLocationID: ").Append(ShippingLocationID).Append("\n");
            sb.Append("  StandardCostRevaluationAccount: ").Append(StandardCostRevaluationAccount).Append("\n");
            sb.Append("  StandardCostRevaluationSubaccount: ").Append(StandardCostRevaluationSubaccount).Append("\n");
            sb.Append("  StandardCostVarianceAccount: ").Append(StandardCostVarianceAccount).Append("\n");
            sb.Append("  StandardCostVarianceSubaccount: ").Append(StandardCostVarianceSubaccount).Append("\n");
            sb.Append("  WarehouseID: ").Append(WarehouseID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Warehouse);
        }

        /// <summary>
        /// Returns true if Warehouse instances are equal
        /// </summary>
        /// <param name="input">Instance of Warehouse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Warehouse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && base.Equals(input) && 
                (
                    this.COGSExpenseAccount == input.COGSExpenseAccount ||
                    (this.COGSExpenseAccount != null &&
                    this.COGSExpenseAccount.Equals(input.COGSExpenseAccount))
                ) && base.Equals(input) && 
                (
                    this.COGSExpenseSubaccount == input.COGSExpenseSubaccount ||
                    (this.COGSExpenseSubaccount != null &&
                    this.COGSExpenseSubaccount.Equals(input.COGSExpenseSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.DiscountAccount == input.DiscountAccount ||
                    (this.DiscountAccount != null &&
                    this.DiscountAccount.Equals(input.DiscountAccount))
                ) && base.Equals(input) && 
                (
                    this.DiscountSubaccount == input.DiscountSubaccount ||
                    (this.DiscountSubaccount != null &&
                    this.DiscountSubaccount.Equals(input.DiscountSubaccount))
                ) && base.Equals(input) && 
                (
                    this.DropShipLocationID == input.DropShipLocationID ||
                    (this.DropShipLocationID != null &&
                    this.DropShipLocationID.Equals(input.DropShipLocationID))
                ) && base.Equals(input) && 
                (
                    this.FreightChargeAccount == input.FreightChargeAccount ||
                    (this.FreightChargeAccount != null &&
                    this.FreightChargeAccount.Equals(input.FreightChargeAccount))
                ) && base.Equals(input) && 
                (
                    this.FreightChargeSubaccount == input.FreightChargeSubaccount ||
                    (this.FreightChargeSubaccount != null &&
                    this.FreightChargeSubaccount.Equals(input.FreightChargeSubaccount))
                ) && base.Equals(input) && 
                (
                    this.InventoryAccount == input.InventoryAccount ||
                    (this.InventoryAccount != null &&
                    this.InventoryAccount.Equals(input.InventoryAccount))
                ) && base.Equals(input) && 
                (
                    this.InventorySubaccount == input.InventorySubaccount ||
                    (this.InventorySubaccount != null &&
                    this.InventorySubaccount.Equals(input.InventorySubaccount))
                ) && base.Equals(input) && 
                (
                    this.LandedCostVarianceAccount == input.LandedCostVarianceAccount ||
                    (this.LandedCostVarianceAccount != null &&
                    this.LandedCostVarianceAccount.Equals(input.LandedCostVarianceAccount))
                ) && base.Equals(input) && 
                (
                    this.LandedCostVarianceSubaccount == input.LandedCostVarianceSubaccount ||
                    (this.LandedCostVarianceSubaccount != null &&
                    this.LandedCostVarianceSubaccount.Equals(input.LandedCostVarianceSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) && base.Equals(input) && 
                (
                    this.MiscChargeAccount == input.MiscChargeAccount ||
                    (this.MiscChargeAccount != null &&
                    this.MiscChargeAccount.Equals(input.MiscChargeAccount))
                ) && base.Equals(input) && 
                (
                    this.MiscChargeSubaccount == input.MiscChargeSubaccount ||
                    (this.MiscChargeSubaccount != null &&
                    this.MiscChargeSubaccount.Equals(input.MiscChargeSubaccount))
                ) && base.Equals(input) && 
                (
                    this.OverrideInventoryAccountSubaccount == input.OverrideInventoryAccountSubaccount ||
                    (this.OverrideInventoryAccountSubaccount != null &&
                    this.OverrideInventoryAccountSubaccount.Equals(input.OverrideInventoryAccountSubaccount))
                ) && base.Equals(input) && 
                (
                    this.POAccrualAccount == input.POAccrualAccount ||
                    (this.POAccrualAccount != null &&
                    this.POAccrualAccount.Equals(input.POAccrualAccount))
                ) && base.Equals(input) && 
                (
                    this.POAccrualSubaccount == input.POAccrualSubaccount ||
                    (this.POAccrualSubaccount != null &&
                    this.POAccrualSubaccount.Equals(input.POAccrualSubaccount))
                ) && base.Equals(input) && 
                (
                    this.PurchasePriceVarianceAccount == input.PurchasePriceVarianceAccount ||
                    (this.PurchasePriceVarianceAccount != null &&
                    this.PurchasePriceVarianceAccount.Equals(input.PurchasePriceVarianceAccount))
                ) && base.Equals(input) && 
                (
                    this.PurchasePriceVarianceSubaccount == input.PurchasePriceVarianceSubaccount ||
                    (this.PurchasePriceVarianceSubaccount != null &&
                    this.PurchasePriceVarianceSubaccount.Equals(input.PurchasePriceVarianceSubaccount))
                ) && base.Equals(input) && 
                (
                    this.ReasonCodeSubaccount == input.ReasonCodeSubaccount ||
                    (this.ReasonCodeSubaccount != null &&
                    this.ReasonCodeSubaccount.Equals(input.ReasonCodeSubaccount))
                ) && base.Equals(input) && 
                (
                    this.ReceivingLocationID == input.ReceivingLocationID ||
                    (this.ReceivingLocationID != null &&
                    this.ReceivingLocationID.Equals(input.ReceivingLocationID))
                ) && base.Equals(input) && 
                (
                    this.RMALocationID == input.RMALocationID ||
                    (this.RMALocationID != null &&
                    this.RMALocationID.Equals(input.RMALocationID))
                ) && base.Equals(input) && 
                (
                    this.SalesAccount == input.SalesAccount ||
                    (this.SalesAccount != null &&
                    this.SalesAccount.Equals(input.SalesAccount))
                ) && base.Equals(input) && 
                (
                    this.SalesSubaccount == input.SalesSubaccount ||
                    (this.SalesSubaccount != null &&
                    this.SalesSubaccount.Equals(input.SalesSubaccount))
                ) && base.Equals(input) && 
                (
                    this.ShippingLocationID == input.ShippingLocationID ||
                    (this.ShippingLocationID != null &&
                    this.ShippingLocationID.Equals(input.ShippingLocationID))
                ) && base.Equals(input) && 
                (
                    this.StandardCostRevaluationAccount == input.StandardCostRevaluationAccount ||
                    (this.StandardCostRevaluationAccount != null &&
                    this.StandardCostRevaluationAccount.Equals(input.StandardCostRevaluationAccount))
                ) && base.Equals(input) && 
                (
                    this.StandardCostRevaluationSubaccount == input.StandardCostRevaluationSubaccount ||
                    (this.StandardCostRevaluationSubaccount != null &&
                    this.StandardCostRevaluationSubaccount.Equals(input.StandardCostRevaluationSubaccount))
                ) && base.Equals(input) && 
                (
                    this.StandardCostVarianceAccount == input.StandardCostVarianceAccount ||
                    (this.StandardCostVarianceAccount != null &&
                    this.StandardCostVarianceAccount.Equals(input.StandardCostVarianceAccount))
                ) && base.Equals(input) && 
                (
                    this.StandardCostVarianceSubaccount == input.StandardCostVarianceSubaccount ||
                    (this.StandardCostVarianceSubaccount != null &&
                    this.StandardCostVarianceSubaccount.Equals(input.StandardCostVarianceSubaccount))
                ) && base.Equals(input) && 
                (
                    this.WarehouseID == input.WarehouseID ||
                    (this.WarehouseID != null &&
                    this.WarehouseID.Equals(input.WarehouseID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.COGSExpenseAccount != null)
                    hashCode = hashCode * 59 + this.COGSExpenseAccount.GetHashCode();
                if (this.COGSExpenseSubaccount != null)
                    hashCode = hashCode * 59 + this.COGSExpenseSubaccount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DiscountAccount != null)
                    hashCode = hashCode * 59 + this.DiscountAccount.GetHashCode();
                if (this.DiscountSubaccount != null)
                    hashCode = hashCode * 59 + this.DiscountSubaccount.GetHashCode();
                if (this.DropShipLocationID != null)
                    hashCode = hashCode * 59 + this.DropShipLocationID.GetHashCode();
                if (this.FreightChargeAccount != null)
                    hashCode = hashCode * 59 + this.FreightChargeAccount.GetHashCode();
                if (this.FreightChargeSubaccount != null)
                    hashCode = hashCode * 59 + this.FreightChargeSubaccount.GetHashCode();
                if (this.InventoryAccount != null)
                    hashCode = hashCode * 59 + this.InventoryAccount.GetHashCode();
                if (this.InventorySubaccount != null)
                    hashCode = hashCode * 59 + this.InventorySubaccount.GetHashCode();
                if (this.LandedCostVarianceAccount != null)
                    hashCode = hashCode * 59 + this.LandedCostVarianceAccount.GetHashCode();
                if (this.LandedCostVarianceSubaccount != null)
                    hashCode = hashCode * 59 + this.LandedCostVarianceSubaccount.GetHashCode();
                if (this.Locations != null)
                    hashCode = hashCode * 59 + this.Locations.GetHashCode();
                if (this.MiscChargeAccount != null)
                    hashCode = hashCode * 59 + this.MiscChargeAccount.GetHashCode();
                if (this.MiscChargeSubaccount != null)
                    hashCode = hashCode * 59 + this.MiscChargeSubaccount.GetHashCode();
                if (this.OverrideInventoryAccountSubaccount != null)
                    hashCode = hashCode * 59 + this.OverrideInventoryAccountSubaccount.GetHashCode();
                if (this.POAccrualAccount != null)
                    hashCode = hashCode * 59 + this.POAccrualAccount.GetHashCode();
                if (this.POAccrualSubaccount != null)
                    hashCode = hashCode * 59 + this.POAccrualSubaccount.GetHashCode();
                if (this.PurchasePriceVarianceAccount != null)
                    hashCode = hashCode * 59 + this.PurchasePriceVarianceAccount.GetHashCode();
                if (this.PurchasePriceVarianceSubaccount != null)
                    hashCode = hashCode * 59 + this.PurchasePriceVarianceSubaccount.GetHashCode();
                if (this.ReasonCodeSubaccount != null)
                    hashCode = hashCode * 59 + this.ReasonCodeSubaccount.GetHashCode();
                if (this.ReceivingLocationID != null)
                    hashCode = hashCode * 59 + this.ReceivingLocationID.GetHashCode();
                if (this.RMALocationID != null)
                    hashCode = hashCode * 59 + this.RMALocationID.GetHashCode();
                if (this.SalesAccount != null)
                    hashCode = hashCode * 59 + this.SalesAccount.GetHashCode();
                if (this.SalesSubaccount != null)
                    hashCode = hashCode * 59 + this.SalesSubaccount.GetHashCode();
                if (this.ShippingLocationID != null)
                    hashCode = hashCode * 59 + this.ShippingLocationID.GetHashCode();
                if (this.StandardCostRevaluationAccount != null)
                    hashCode = hashCode * 59 + this.StandardCostRevaluationAccount.GetHashCode();
                if (this.StandardCostRevaluationSubaccount != null)
                    hashCode = hashCode * 59 + this.StandardCostRevaluationSubaccount.GetHashCode();
                if (this.StandardCostVarianceAccount != null)
                    hashCode = hashCode * 59 + this.StandardCostVarianceAccount.GetHashCode();
                if (this.StandardCostVarianceSubaccount != null)
                    hashCode = hashCode * 59 + this.StandardCostVarianceSubaccount.GetHashCode();
                if (this.WarehouseID != null)
                    hashCode = hashCode * 59 + this.WarehouseID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
