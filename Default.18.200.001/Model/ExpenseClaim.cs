/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// ExpenseClaim
    /// </summary>
    [DataContract]
    public partial class ExpenseClaim : Entity,  IEquatable<ExpenseClaim>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseClaim" /> class.
        /// </summary>
        /// <param name="approvalDate">approvalDate.</param>
        /// <param name="approvalDetails">approvalDetails.</param>
        /// <param name="baseCurrencyID">baseCurrencyID.</param>
        /// <param name="claimedBy">claimedBy.</param>
        /// <param name="claimTotal">claimTotal.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="currencyRate">currencyRate.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="date">date.</param>
        /// <param name="departmentID">departmentID.</param>
        /// <param name="description">description.</param>
        /// <param name="details">details.</param>
        /// <param name="financialDetails">financialDetails.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="locationID">locationID.</param>
        /// <param name="reciprocalRate">reciprocalRate.</param>
        /// <param name="refNbr">refNbr.</param>
        /// <param name="status">status.</param>
        /// <param name="taxDetails">taxDetails.</param>
        /// <param name="taxTotal">taxTotal.</param>
        /// <param name="vATExemptTotal">vATExemptTotal.</param>
        /// <param name="vATTaxableTotal">vATTaxableTotal.</param>
        public ExpenseClaim(DateTimeValue approvalDate = default(DateTimeValue), List<Approval> approvalDetails = default(List<Approval>), StringValue baseCurrencyID = default(StringValue), StringValue claimedBy = default(StringValue), DecimalValue claimTotal = default(DecimalValue), StringValue currencyID = default(StringValue), DecimalValue currencyRate = default(DecimalValue), StringValue customerID = default(StringValue), DateTimeValue date = default(DateTimeValue), StringValue departmentID = default(StringValue), StringValue description = default(StringValue), List<ExpenseClaimDetails> details = default(List<ExpenseClaimDetails>), ExpenseClaimFinancialDetail financialDetails = default(ExpenseClaimFinancialDetail), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue locationID = default(StringValue), DecimalValue reciprocalRate = default(DecimalValue), StringValue refNbr = default(StringValue), StringValue status = default(StringValue), List<ExpenseClaimTaxDetail> taxDetails = default(List<ExpenseClaimTaxDetail>), DecimalValue taxTotal = default(DecimalValue), DecimalValue vATExemptTotal = default(DecimalValue), DecimalValue vATTaxableTotal = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ApprovalDate = approvalDate;
            this.ApprovalDetails = approvalDetails;
            this.BaseCurrencyID = baseCurrencyID;
            this.ClaimedBy = claimedBy;
            this.ClaimTotal = claimTotal;
            this.CurrencyID = currencyID;
            this.CurrencyRate = currencyRate;
            this.CustomerID = customerID;
            this.Date = date;
            this.DepartmentID = departmentID;
            this.Description = description;
            this.Details = details;
            this.FinancialDetails = financialDetails;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.LocationID = locationID;
            this.ReciprocalRate = reciprocalRate;
            this.RefNbr = refNbr;
            this.Status = status;
            this.TaxDetails = taxDetails;
            this.TaxTotal = taxTotal;
            this.VATExemptTotal = vATExemptTotal;
            this.VATTaxableTotal = vATTaxableTotal;
        }
        
        /// <summary>
        /// Gets or Sets ApprovalDate
        /// </summary>
        [DataMember(Name="ApprovalDate", EmitDefaultValue=false)]
        public DateTimeValue ApprovalDate { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalDetails
        /// </summary>
        [DataMember(Name="ApprovalDetails", EmitDefaultValue=false)]
        public List<Approval> ApprovalDetails { get; set; }

        /// <summary>
        /// Gets or Sets BaseCurrencyID
        /// </summary>
        [DataMember(Name="BaseCurrencyID", EmitDefaultValue=false)]
        public StringValue BaseCurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets ClaimedBy
        /// </summary>
        [DataMember(Name="ClaimedBy", EmitDefaultValue=false)]
        public StringValue ClaimedBy { get; set; }

        /// <summary>
        /// Gets or Sets ClaimTotal
        /// </summary>
        [DataMember(Name="ClaimTotal", EmitDefaultValue=false)]
        public DecimalValue ClaimTotal { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyRate
        /// </summary>
        [DataMember(Name="CurrencyRate", EmitDefaultValue=false)]
        public DecimalValue CurrencyRate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="CustomerID", EmitDefaultValue=false)]
        public StringValue CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentID
        /// </summary>
        [DataMember(Name="DepartmentID", EmitDefaultValue=false)]
        public StringValue DepartmentID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public List<ExpenseClaimDetails> Details { get; set; }

        /// <summary>
        /// Gets or Sets FinancialDetails
        /// </summary>
        [DataMember(Name="FinancialDetails", EmitDefaultValue=false)]
        public ExpenseClaimFinancialDetail FinancialDetails { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="LocationID", EmitDefaultValue=false)]
        public StringValue LocationID { get; set; }

        /// <summary>
        /// Gets or Sets ReciprocalRate
        /// </summary>
        [DataMember(Name="ReciprocalRate", EmitDefaultValue=false)]
        public DecimalValue ReciprocalRate { get; set; }

        /// <summary>
        /// Gets or Sets RefNbr
        /// </summary>
        [DataMember(Name="RefNbr", EmitDefaultValue=false)]
        public StringValue RefNbr { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TaxDetails
        /// </summary>
        [DataMember(Name="TaxDetails", EmitDefaultValue=false)]
        public List<ExpenseClaimTaxDetail> TaxDetails { get; set; }

        /// <summary>
        /// Gets or Sets TaxTotal
        /// </summary>
        [DataMember(Name="TaxTotal", EmitDefaultValue=false)]
        public DecimalValue TaxTotal { get; set; }

        /// <summary>
        /// Gets or Sets VATExemptTotal
        /// </summary>
        [DataMember(Name="VATExemptTotal", EmitDefaultValue=false)]
        public DecimalValue VATExemptTotal { get; set; }

        /// <summary>
        /// Gets or Sets VATTaxableTotal
        /// </summary>
        [DataMember(Name="VATTaxableTotal", EmitDefaultValue=false)]
        public DecimalValue VATTaxableTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseClaim {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ApprovalDate: ").Append(ApprovalDate).Append("\n");
            sb.Append("  ApprovalDetails: ").Append(ApprovalDetails).Append("\n");
            sb.Append("  BaseCurrencyID: ").Append(BaseCurrencyID).Append("\n");
            sb.Append("  ClaimedBy: ").Append(ClaimedBy).Append("\n");
            sb.Append("  ClaimTotal: ").Append(ClaimTotal).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DepartmentID: ").Append(DepartmentID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  FinancialDetails: ").Append(FinancialDetails).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("  ReciprocalRate: ").Append(ReciprocalRate).Append("\n");
            sb.Append("  RefNbr: ").Append(RefNbr).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("  VATExemptTotal: ").Append(VATExemptTotal).Append("\n");
            sb.Append("  VATTaxableTotal: ").Append(VATTaxableTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseClaim);
        }

        /// <summary>
        /// Returns true if ExpenseClaim instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseClaim to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseClaim input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ApprovalDate == input.ApprovalDate ||
                    (this.ApprovalDate != null &&
                    this.ApprovalDate.Equals(input.ApprovalDate))
                ) && base.Equals(input) && 
                (
                    this.ApprovalDetails == input.ApprovalDetails ||
                    this.ApprovalDetails != null &&
                    this.ApprovalDetails.SequenceEqual(input.ApprovalDetails)
                ) && base.Equals(input) && 
                (
                    this.BaseCurrencyID == input.BaseCurrencyID ||
                    (this.BaseCurrencyID != null &&
                    this.BaseCurrencyID.Equals(input.BaseCurrencyID))
                ) && base.Equals(input) && 
                (
                    this.ClaimedBy == input.ClaimedBy ||
                    (this.ClaimedBy != null &&
                    this.ClaimedBy.Equals(input.ClaimedBy))
                ) && base.Equals(input) && 
                (
                    this.ClaimTotal == input.ClaimTotal ||
                    (this.ClaimTotal != null &&
                    this.ClaimTotal.Equals(input.ClaimTotal))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRate == input.CurrencyRate ||
                    (this.CurrencyRate != null &&
                    this.CurrencyRate.Equals(input.CurrencyRate))
                ) && base.Equals(input) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.DepartmentID == input.DepartmentID ||
                    (this.DepartmentID != null &&
                    this.DepartmentID.Equals(input.DepartmentID))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && base.Equals(input) && 
                (
                    this.FinancialDetails == input.FinancialDetails ||
                    (this.FinancialDetails != null &&
                    this.FinancialDetails.Equals(input.FinancialDetails))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.LocationID == input.LocationID ||
                    (this.LocationID != null &&
                    this.LocationID.Equals(input.LocationID))
                ) && base.Equals(input) && 
                (
                    this.ReciprocalRate == input.ReciprocalRate ||
                    (this.ReciprocalRate != null &&
                    this.ReciprocalRate.Equals(input.ReciprocalRate))
                ) && base.Equals(input) && 
                (
                    this.RefNbr == input.RefNbr ||
                    (this.RefNbr != null &&
                    this.RefNbr.Equals(input.RefNbr))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.SequenceEqual(input.TaxDetails)
                ) && base.Equals(input) && 
                (
                    this.TaxTotal == input.TaxTotal ||
                    (this.TaxTotal != null &&
                    this.TaxTotal.Equals(input.TaxTotal))
                ) && base.Equals(input) && 
                (
                    this.VATExemptTotal == input.VATExemptTotal ||
                    (this.VATExemptTotal != null &&
                    this.VATExemptTotal.Equals(input.VATExemptTotal))
                ) && base.Equals(input) && 
                (
                    this.VATTaxableTotal == input.VATTaxableTotal ||
                    (this.VATTaxableTotal != null &&
                    this.VATTaxableTotal.Equals(input.VATTaxableTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ApprovalDate != null)
                    hashCode = hashCode * 59 + this.ApprovalDate.GetHashCode();
                if (this.ApprovalDetails != null)
                    hashCode = hashCode * 59 + this.ApprovalDetails.GetHashCode();
                if (this.BaseCurrencyID != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyID.GetHashCode();
                if (this.ClaimedBy != null)
                    hashCode = hashCode * 59 + this.ClaimedBy.GetHashCode();
                if (this.ClaimTotal != null)
                    hashCode = hashCode * 59 + this.ClaimTotal.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CurrencyRate != null)
                    hashCode = hashCode * 59 + this.CurrencyRate.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.DepartmentID != null)
                    hashCode = hashCode * 59 + this.DepartmentID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.FinancialDetails != null)
                    hashCode = hashCode * 59 + this.FinancialDetails.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.LocationID != null)
                    hashCode = hashCode * 59 + this.LocationID.GetHashCode();
                if (this.ReciprocalRate != null)
                    hashCode = hashCode * 59 + this.ReciprocalRate.GetHashCode();
                if (this.RefNbr != null)
                    hashCode = hashCode * 59 + this.RefNbr.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                if (this.TaxTotal != null)
                    hashCode = hashCode * 59 + this.TaxTotal.GetHashCode();
                if (this.VATExemptTotal != null)
                    hashCode = hashCode * 59 + this.VATExemptTotal.GetHashCode();
                if (this.VATTaxableTotal != null)
                    hashCode = hashCode * 59 + this.VATTaxableTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
