/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// TrialBalance
    /// </summary>
    [DataContract]
    public partial class TrialBalance : Entity,  IEquatable<TrialBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrialBalance" /> class.
        /// </summary>
        /// <param name="batchNbr">batchNbr.</param>
        /// <param name="branch">branch.</param>
        /// <param name="controlTotal">controlTotal.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="creditTotal">creditTotal.</param>
        /// <param name="debitTotal">debitTotal.</param>
        /// <param name="description">description.</param>
        /// <param name="details">details.</param>
        /// <param name="hold">hold.</param>
        /// <param name="importDate">importDate.</param>
        /// <param name="importNbr">importNbr.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="ledger">ledger.</param>
        /// <param name="period">period.</param>
        /// <param name="status">status.</param>
        public TrialBalance(StringValue batchNbr = default(StringValue), StringValue branch = default(StringValue), DecimalValue controlTotal = default(DecimalValue), DateTimeValue createdDateTime = default(DateTimeValue), DecimalValue creditTotal = default(DecimalValue), DecimalValue debitTotal = default(DecimalValue), StringValue description = default(StringValue), IEnumerable<TrialBalanceDetail> details = default(IEnumerable<TrialBalanceDetail>), BooleanValue hold = default(BooleanValue), DateTimeValue importDate = default(DateTimeValue), StringValue importNbr = default(StringValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue ledger = default(StringValue), StringValue period = default(StringValue), StringValue status = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BatchNbr = batchNbr;
            this.Branch = branch;
            this.ControlTotal = controlTotal;
            this.CreatedDateTime = createdDateTime;
            this.CreditTotal = creditTotal;
            this.DebitTotal = debitTotal;
            this.Description = description;
            this.Details = details;
            this.Hold = hold;
            this.ImportDate = importDate;
            this.ImportNbr = importNbr;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.Ledger = ledger;
            this.Period = period;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets BatchNbr
        /// </summary>
        [DataMember(Name="BatchNbr", EmitDefaultValue=false)]
        public StringValue BatchNbr { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="Branch", EmitDefaultValue=false)]
        public StringValue Branch { get; set; }

        /// <summary>
        /// Gets or Sets ControlTotal
        /// </summary>
        [DataMember(Name="ControlTotal", EmitDefaultValue=false)]
        public DecimalValue ControlTotal { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreditTotal
        /// </summary>
        [DataMember(Name="CreditTotal", EmitDefaultValue=false)]
        public DecimalValue CreditTotal { get; set; }

        /// <summary>
        /// Gets or Sets DebitTotal
        /// </summary>
        [DataMember(Name="DebitTotal", EmitDefaultValue=false)]
        public DecimalValue DebitTotal { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public IEnumerable<TrialBalanceDetail> Details { get; set; }

        /// <summary>
        /// Gets or Sets Hold
        /// </summary>
        [DataMember(Name="Hold", EmitDefaultValue=false)]
        public BooleanValue Hold { get; set; }

        /// <summary>
        /// Gets or Sets ImportDate
        /// </summary>
        [DataMember(Name="ImportDate", EmitDefaultValue=false)]
        public DateTimeValue ImportDate { get; set; }

        /// <summary>
        /// Gets or Sets ImportNbr
        /// </summary>
        [DataMember(Name="ImportNbr", EmitDefaultValue=false)]
        public StringValue ImportNbr { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Ledger
        /// </summary>
        [DataMember(Name="Ledger", EmitDefaultValue=false)]
        public StringValue Ledger { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="Period", EmitDefaultValue=false)]
        public StringValue Period { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrialBalance {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BatchNbr: ").Append(BatchNbr).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  ControlTotal: ").Append(ControlTotal).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CreditTotal: ").Append(CreditTotal).Append("\n");
            sb.Append("  DebitTotal: ").Append(DebitTotal).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  ImportDate: ").Append(ImportDate).Append("\n");
            sb.Append("  ImportNbr: ").Append(ImportNbr).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  Ledger: ").Append(Ledger).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrialBalance);
        }

        /// <summary>
        /// Returns true if TrialBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of TrialBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrialBalance input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BatchNbr == input.BatchNbr ||
                    (this.BatchNbr != null &&
                    this.BatchNbr.Equals(input.BatchNbr))
                ) && base.Equals(input) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && base.Equals(input) && 
                (
                    this.ControlTotal == input.ControlTotal ||
                    (this.ControlTotal != null &&
                    this.ControlTotal.Equals(input.ControlTotal))
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.CreditTotal == input.CreditTotal ||
                    (this.CreditTotal != null &&
                    this.CreditTotal.Equals(input.CreditTotal))
                ) && base.Equals(input) && 
                (
                    this.DebitTotal == input.DebitTotal ||
                    (this.DebitTotal != null &&
                    this.DebitTotal.Equals(input.DebitTotal))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && base.Equals(input) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && base.Equals(input) && 
                (
                    this.ImportDate == input.ImportDate ||
                    (this.ImportDate != null &&
                    this.ImportDate.Equals(input.ImportDate))
                ) && base.Equals(input) && 
                (
                    this.ImportNbr == input.ImportNbr ||
                    (this.ImportNbr != null &&
                    this.ImportNbr.Equals(input.ImportNbr))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.Ledger == input.Ledger ||
                    (this.Ledger != null &&
                    this.Ledger.Equals(input.Ledger))
                ) && base.Equals(input) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BatchNbr != null)
                    hashCode = hashCode * 59 + this.BatchNbr.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.ControlTotal != null)
                    hashCode = hashCode * 59 + this.ControlTotal.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CreditTotal != null)
                    hashCode = hashCode * 59 + this.CreditTotal.GetHashCode();
                if (this.DebitTotal != null)
                    hashCode = hashCode * 59 + this.DebitTotal.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Hold != null)
                    hashCode = hashCode * 59 + this.Hold.GetHashCode();
                if (this.ImportDate != null)
                    hashCode = hashCode * 59 + this.ImportDate.GetHashCode();
                if (this.ImportNbr != null)
                    hashCode = hashCode * 59 + this.ImportNbr.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.Ledger != null)
                    hashCode = hashCode * 59 + this.Ledger.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
