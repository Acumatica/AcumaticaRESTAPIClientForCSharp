/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// Employee
    /// </summary>
    [DataContract]
    public partial class Employee : Entity,  IEquatable<Employee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        /// <param name="attributes">attributes.</param>
        /// <param name="contactInfo">contactInfo.</param>
        /// <param name="delegates">delegates.</param>
        /// <param name="employeeID">employeeID.</param>
        /// <param name="employeeName">employeeName.</param>
        /// <param name="employeeSettings">employeeSettings.</param>
        /// <param name="employmentHistory">employmentHistory.</param>
        /// <param name="financialSettings">financialSettings.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="status">status.</param>
        public Employee(List<AttributeDetail> attributes = default(List<AttributeDetail>), Contact contactInfo = default(Contact), List<EmployeeDelegate> delegates = default(List<EmployeeDelegate>), StringValue employeeID = default(StringValue), StringValue employeeName = default(StringValue), EmployeeSettings employeeSettings = default(EmployeeSettings), List<EmploymentHistoryRecord> employmentHistory = default(List<EmploymentHistoryRecord>), EmployeeFinancialSettings financialSettings = default(EmployeeFinancialSettings), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue status = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Attributes = attributes;
            this.ContactInfo = contactInfo;
            this.Delegates = delegates;
            this.EmployeeID = employeeID;
            this.EmployeeName = employeeName;
            this.EmployeeSettings = employeeSettings;
            this.EmploymentHistory = employmentHistory;
            this.FinancialSettings = financialSettings;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<AttributeDetail> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ContactInfo
        /// </summary>
        [DataMember(Name="ContactInfo", EmitDefaultValue=false)]
        public Contact ContactInfo { get; set; }

        /// <summary>
        /// Gets or Sets Delegates
        /// </summary>
        [DataMember(Name="Delegates", EmitDefaultValue=false)]
        public List<EmployeeDelegate> Delegates { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeID
        /// </summary>
        [DataMember(Name="EmployeeID", EmitDefaultValue=false)]
        public StringValue EmployeeID { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeName
        /// </summary>
        [DataMember(Name="EmployeeName", EmitDefaultValue=false)]
        public StringValue EmployeeName { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeSettings
        /// </summary>
        [DataMember(Name="EmployeeSettings", EmitDefaultValue=false)]
        public EmployeeSettings EmployeeSettings { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentHistory
        /// </summary>
        [DataMember(Name="EmploymentHistory", EmitDefaultValue=false)]
        public List<EmploymentHistoryRecord> EmploymentHistory { get; set; }

        /// <summary>
        /// Gets or Sets FinancialSettings
        /// </summary>
        [DataMember(Name="FinancialSettings", EmitDefaultValue=false)]
        public EmployeeFinancialSettings FinancialSettings { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ContactInfo: ").Append(ContactInfo).Append("\n");
            sb.Append("  Delegates: ").Append(Delegates).Append("\n");
            sb.Append("  EmployeeID: ").Append(EmployeeID).Append("\n");
            sb.Append("  EmployeeName: ").Append(EmployeeName).Append("\n");
            sb.Append("  EmployeeSettings: ").Append(EmployeeSettings).Append("\n");
            sb.Append("  EmploymentHistory: ").Append(EmploymentHistory).Append("\n");
            sb.Append("  FinancialSettings: ").Append(FinancialSettings).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Employee);
        }

        /// <summary>
        /// Returns true if Employee instances are equal
        /// </summary>
        /// <param name="input">Instance of Employee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employee input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.ContactInfo == input.ContactInfo ||
                    (this.ContactInfo != null &&
                    this.ContactInfo.Equals(input.ContactInfo))
                ) && base.Equals(input) && 
                (
                    this.Delegates == input.Delegates ||
                    this.Delegates != null &&
                    this.Delegates.SequenceEqual(input.Delegates)
                ) && base.Equals(input) && 
                (
                    this.EmployeeID == input.EmployeeID ||
                    (this.EmployeeID != null &&
                    this.EmployeeID.Equals(input.EmployeeID))
                ) && base.Equals(input) && 
                (
                    this.EmployeeName == input.EmployeeName ||
                    (this.EmployeeName != null &&
                    this.EmployeeName.Equals(input.EmployeeName))
                ) && base.Equals(input) && 
                (
                    this.EmployeeSettings == input.EmployeeSettings ||
                    (this.EmployeeSettings != null &&
                    this.EmployeeSettings.Equals(input.EmployeeSettings))
                ) && base.Equals(input) && 
                (
                    this.EmploymentHistory == input.EmploymentHistory ||
                    this.EmploymentHistory != null &&
                    this.EmploymentHistory.SequenceEqual(input.EmploymentHistory)
                ) && base.Equals(input) && 
                (
                    this.FinancialSettings == input.FinancialSettings ||
                    (this.FinancialSettings != null &&
                    this.FinancialSettings.Equals(input.FinancialSettings))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.ContactInfo != null)
                    hashCode = hashCode * 59 + this.ContactInfo.GetHashCode();
                if (this.Delegates != null)
                    hashCode = hashCode * 59 + this.Delegates.GetHashCode();
                if (this.EmployeeID != null)
                    hashCode = hashCode * 59 + this.EmployeeID.GetHashCode();
                if (this.EmployeeName != null)
                    hashCode = hashCode * 59 + this.EmployeeName.GetHashCode();
                if (this.EmployeeSettings != null)
                    hashCode = hashCode * 59 + this.EmployeeSettings.GetHashCode();
                if (this.EmploymentHistory != null)
                    hashCode = hashCode * 59 + this.EmploymentHistory.GetHashCode();
                if (this.FinancialSettings != null)
                    hashCode = hashCode * 59 + this.FinancialSettings.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
