/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// KitSpecification
    /// </summary>
    [DataContract]
    public partial class KitSpecification : Entity,  IEquatable<KitSpecification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KitSpecification" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="description">description.</param>
        /// <param name="isNonStock">isNonStock.</param>
        /// <param name="kitInventoryID">kitInventoryID.</param>
        /// <param name="nonStockComponents">nonStockComponents.</param>
        /// <param name="revisionID">revisionID.</param>
        /// <param name="stockComponents">stockComponents.</param>
        public KitSpecification(BooleanValue active = default(BooleanValue), StringValue description = default(StringValue), BooleanValue isNonStock = default(BooleanValue), StringValue kitInventoryID = default(StringValue), IEnumerable<KitNonStockComponent> nonStockComponents = default(IEnumerable<KitNonStockComponent>), StringValue revisionID = default(StringValue), IEnumerable<KitStockComponent> stockComponents = default(IEnumerable<KitStockComponent>), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Active = active;
            this.Description = description;
            this.IsNonStock = isNonStock;
            this.KitInventoryID = kitInventoryID;
            this.NonStockComponents = nonStockComponents;
            this.RevisionID = revisionID;
            this.StockComponents = stockComponents;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public BooleanValue Active { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets IsNonStock
        /// </summary>
        [DataMember(Name="IsNonStock", EmitDefaultValue=false)]
        public BooleanValue IsNonStock { get; set; }

        /// <summary>
        /// Gets or Sets KitInventoryID
        /// </summary>
        [DataMember(Name="KitInventoryID", EmitDefaultValue=false)]
        public StringValue KitInventoryID { get; set; }

        /// <summary>
        /// Gets or Sets NonStockComponents
        /// </summary>
        [DataMember(Name="NonStockComponents", EmitDefaultValue=false)]
        public IEnumerable<KitNonStockComponent> NonStockComponents { get; set; }

        /// <summary>
        /// Gets or Sets RevisionID
        /// </summary>
        [DataMember(Name="RevisionID", EmitDefaultValue=false)]
        public StringValue RevisionID { get; set; }

        /// <summary>
        /// Gets or Sets StockComponents
        /// </summary>
        [DataMember(Name="StockComponents", EmitDefaultValue=false)]
        public IEnumerable<KitStockComponent> StockComponents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KitSpecification {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsNonStock: ").Append(IsNonStock).Append("\n");
            sb.Append("  KitInventoryID: ").Append(KitInventoryID).Append("\n");
            sb.Append("  NonStockComponents: ").Append(NonStockComponents).Append("\n");
            sb.Append("  RevisionID: ").Append(RevisionID).Append("\n");
            sb.Append("  StockComponents: ").Append(StockComponents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KitSpecification);
        }

        /// <summary>
        /// Returns true if KitSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of KitSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KitSpecification input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.IsNonStock == input.IsNonStock ||
                    (this.IsNonStock != null &&
                    this.IsNonStock.Equals(input.IsNonStock))
                ) && base.Equals(input) && 
                (
                    this.KitInventoryID == input.KitInventoryID ||
                    (this.KitInventoryID != null &&
                    this.KitInventoryID.Equals(input.KitInventoryID))
                ) && base.Equals(input) && 
                (
                    this.NonStockComponents == input.NonStockComponents ||
                    this.NonStockComponents != null &&
                    this.NonStockComponents.SequenceEqual(input.NonStockComponents)
                ) && base.Equals(input) && 
                (
                    this.RevisionID == input.RevisionID ||
                    (this.RevisionID != null &&
                    this.RevisionID.Equals(input.RevisionID))
                ) && base.Equals(input) && 
                (
                    this.StockComponents == input.StockComponents ||
                    this.StockComponents != null &&
                    this.StockComponents.SequenceEqual(input.StockComponents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IsNonStock != null)
                    hashCode = hashCode * 59 + this.IsNonStock.GetHashCode();
                if (this.KitInventoryID != null)
                    hashCode = hashCode * 59 + this.KitInventoryID.GetHashCode();
                if (this.NonStockComponents != null)
                    hashCode = hashCode * 59 + this.NonStockComponents.GetHashCode();
                if (this.RevisionID != null)
                    hashCode = hashCode * 59 + this.RevisionID.GetHashCode();
                if (this.StockComponents != null)
                    hashCode = hashCode * 59 + this.StockComponents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
