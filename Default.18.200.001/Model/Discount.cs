/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// Discount
    /// </summary>
    [DataContract]
    public partial class Discount : Entity,  IEquatable<Discount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Discount" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="breakBy">breakBy.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="customerPriceClasses">customerPriceClasses.</param>
        /// <param name="customers">customers.</param>
        /// <param name="description">description.</param>
        /// <param name="discountBreakpoints">discountBreakpoints.</param>
        /// <param name="discountBy">discountBy.</param>
        /// <param name="discountCode">discountCode.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="itemPriceClasses">itemPriceClasses.</param>
        /// <param name="items">items.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="promotional">promotional.</param>
        /// <param name="prorateDiscount">prorateDiscount.</param>
        /// <param name="sequence">sequence.</param>
        /// <param name="showFreeItem">showFreeItem.</param>
        /// <param name="warehouses">warehouses.</param>
        public Discount(BooleanValue active = default(BooleanValue), StringValue breakBy = default(StringValue), DateTimeValue createdDateTime = default(DateTimeValue), List<DiscountCustomerPriceClassesDetail> customerPriceClasses = default(List<DiscountCustomerPriceClassesDetail>), List<DiscountCustomerDetail> customers = default(List<DiscountCustomerDetail>), StringValue description = default(StringValue), List<DiscountBreakpointDetail> discountBreakpoints = default(List<DiscountBreakpointDetail>), StringValue discountBy = default(StringValue), StringValue discountCode = default(StringValue), DateTimeValue effectiveDate = default(DateTimeValue), DateTimeValue expirationDate = default(DateTimeValue), List<DiscountItemPriceClassesDetail> itemPriceClasses = default(List<DiscountItemPriceClassesDetail>), List<DiscountItemDetail> items = default(List<DiscountItemDetail>), DateTimeValue lastModifiedDateTime = default(DateTimeValue), BooleanValue promotional = default(BooleanValue), BooleanValue prorateDiscount = default(BooleanValue), StringValue sequence = default(StringValue), BooleanValue showFreeItem = default(BooleanValue), List<DiscountWarehouseDetail> warehouses = default(List<DiscountWarehouseDetail>), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Active = active;
            this.BreakBy = breakBy;
            this.CreatedDateTime = createdDateTime;
            this.CustomerPriceClasses = customerPriceClasses;
            this.Customers = customers;
            this.Description = description;
            this.DiscountBreakpoints = discountBreakpoints;
            this.DiscountBy = discountBy;
            this.DiscountCode = discountCode;
            this.EffectiveDate = effectiveDate;
            this.ExpirationDate = expirationDate;
            this.ItemPriceClasses = itemPriceClasses;
            this.Items = items;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.Promotional = promotional;
            this.ProrateDiscount = prorateDiscount;
            this.Sequence = sequence;
            this.ShowFreeItem = showFreeItem;
            this.Warehouses = warehouses;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public BooleanValue Active { get; set; }

        /// <summary>
        /// Gets or Sets BreakBy
        /// </summary>
        [DataMember(Name="BreakBy", EmitDefaultValue=false)]
        public StringValue BreakBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CustomerPriceClasses
        /// </summary>
        [DataMember(Name="CustomerPriceClasses", EmitDefaultValue=false)]
        public List<DiscountCustomerPriceClassesDetail> CustomerPriceClasses { get; set; }

        /// <summary>
        /// Gets or Sets Customers
        /// </summary>
        [DataMember(Name="Customers", EmitDefaultValue=false)]
        public List<DiscountCustomerDetail> Customers { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets DiscountBreakpoints
        /// </summary>
        [DataMember(Name="DiscountBreakpoints", EmitDefaultValue=false)]
        public List<DiscountBreakpointDetail> DiscountBreakpoints { get; set; }

        /// <summary>
        /// Gets or Sets DiscountBy
        /// </summary>
        [DataMember(Name="DiscountBy", EmitDefaultValue=false)]
        public StringValue DiscountBy { get; set; }

        /// <summary>
        /// Gets or Sets DiscountCode
        /// </summary>
        [DataMember(Name="DiscountCode", EmitDefaultValue=false)]
        public StringValue DiscountCode { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="EffectiveDate", EmitDefaultValue=false)]
        public DateTimeValue EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="ExpirationDate", EmitDefaultValue=false)]
        public DateTimeValue ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets ItemPriceClasses
        /// </summary>
        [DataMember(Name="ItemPriceClasses", EmitDefaultValue=false)]
        public List<DiscountItemPriceClassesDetail> ItemPriceClasses { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="Items", EmitDefaultValue=false)]
        public List<DiscountItemDetail> Items { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Promotional
        /// </summary>
        [DataMember(Name="Promotional", EmitDefaultValue=false)]
        public BooleanValue Promotional { get; set; }

        /// <summary>
        /// Gets or Sets ProrateDiscount
        /// </summary>
        [DataMember(Name="ProrateDiscount", EmitDefaultValue=false)]
        public BooleanValue ProrateDiscount { get; set; }

        /// <summary>
        /// Gets or Sets Sequence
        /// </summary>
        [DataMember(Name="Sequence", EmitDefaultValue=false)]
        public StringValue Sequence { get; set; }

        /// <summary>
        /// Gets or Sets ShowFreeItem
        /// </summary>
        [DataMember(Name="ShowFreeItem", EmitDefaultValue=false)]
        public BooleanValue ShowFreeItem { get; set; }

        /// <summary>
        /// Gets or Sets Warehouses
        /// </summary>
        [DataMember(Name="Warehouses", EmitDefaultValue=false)]
        public List<DiscountWarehouseDetail> Warehouses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Discount {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  BreakBy: ").Append(BreakBy).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CustomerPriceClasses: ").Append(CustomerPriceClasses).Append("\n");
            sb.Append("  Customers: ").Append(Customers).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountBreakpoints: ").Append(DiscountBreakpoints).Append("\n");
            sb.Append("  DiscountBy: ").Append(DiscountBy).Append("\n");
            sb.Append("  DiscountCode: ").Append(DiscountCode).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ItemPriceClasses: ").Append(ItemPriceClasses).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  Promotional: ").Append(Promotional).Append("\n");
            sb.Append("  ProrateDiscount: ").Append(ProrateDiscount).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  ShowFreeItem: ").Append(ShowFreeItem).Append("\n");
            sb.Append("  Warehouses: ").Append(Warehouses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Discount);
        }

        /// <summary>
        /// Returns true if Discount instances are equal
        /// </summary>
        /// <param name="input">Instance of Discount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Discount input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && base.Equals(input) && 
                (
                    this.BreakBy == input.BreakBy ||
                    (this.BreakBy != null &&
                    this.BreakBy.Equals(input.BreakBy))
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.CustomerPriceClasses == input.CustomerPriceClasses ||
                    this.CustomerPriceClasses != null &&
                    this.CustomerPriceClasses.SequenceEqual(input.CustomerPriceClasses)
                ) && base.Equals(input) && 
                (
                    this.Customers == input.Customers ||
                    this.Customers != null &&
                    this.Customers.SequenceEqual(input.Customers)
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.DiscountBreakpoints == input.DiscountBreakpoints ||
                    this.DiscountBreakpoints != null &&
                    this.DiscountBreakpoints.SequenceEqual(input.DiscountBreakpoints)
                ) && base.Equals(input) && 
                (
                    this.DiscountBy == input.DiscountBy ||
                    (this.DiscountBy != null &&
                    this.DiscountBy.Equals(input.DiscountBy))
                ) && base.Equals(input) && 
                (
                    this.DiscountCode == input.DiscountCode ||
                    (this.DiscountCode != null &&
                    this.DiscountCode.Equals(input.DiscountCode))
                ) && base.Equals(input) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && base.Equals(input) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && base.Equals(input) && 
                (
                    this.ItemPriceClasses == input.ItemPriceClasses ||
                    this.ItemPriceClasses != null &&
                    this.ItemPriceClasses.SequenceEqual(input.ItemPriceClasses)
                ) && base.Equals(input) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.Promotional == input.Promotional ||
                    (this.Promotional != null &&
                    this.Promotional.Equals(input.Promotional))
                ) && base.Equals(input) && 
                (
                    this.ProrateDiscount == input.ProrateDiscount ||
                    (this.ProrateDiscount != null &&
                    this.ProrateDiscount.Equals(input.ProrateDiscount))
                ) && base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.ShowFreeItem == input.ShowFreeItem ||
                    (this.ShowFreeItem != null &&
                    this.ShowFreeItem.Equals(input.ShowFreeItem))
                ) && base.Equals(input) && 
                (
                    this.Warehouses == input.Warehouses ||
                    this.Warehouses != null &&
                    this.Warehouses.SequenceEqual(input.Warehouses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.BreakBy != null)
                    hashCode = hashCode * 59 + this.BreakBy.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CustomerPriceClasses != null)
                    hashCode = hashCode * 59 + this.CustomerPriceClasses.GetHashCode();
                if (this.Customers != null)
                    hashCode = hashCode * 59 + this.Customers.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DiscountBreakpoints != null)
                    hashCode = hashCode * 59 + this.DiscountBreakpoints.GetHashCode();
                if (this.DiscountBy != null)
                    hashCode = hashCode * 59 + this.DiscountBy.GetHashCode();
                if (this.DiscountCode != null)
                    hashCode = hashCode * 59 + this.DiscountCode.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.ItemPriceClasses != null)
                    hashCode = hashCode * 59 + this.ItemPriceClasses.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.Promotional != null)
                    hashCode = hashCode * 59 + this.Promotional.GetHashCode();
                if (this.ProrateDiscount != null)
                    hashCode = hashCode * 59 + this.ProrateDiscount.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.ShowFreeItem != null)
                    hashCode = hashCode * 59 + this.ShowFreeItem.GetHashCode();
                if (this.Warehouses != null)
                    hashCode = hashCode * 59 + this.Warehouses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
