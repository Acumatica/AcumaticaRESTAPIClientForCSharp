/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// BusinessAccountContract
    /// </summary>
    [DataContract]
    public partial class BusinessAccountContract : Entity,  IEquatable<BusinessAccountContract>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccountContract" /> class.
        /// </summary>
        /// <param name="businessAccountID">businessAccountID.</param>
        /// <param name="businessAccountName">businessAccountName.</param>
        /// <param name="contractID">contractID.</param>
        /// <param name="description">description.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="location">location.</param>
        /// <param name="status">status.</param>
        public BusinessAccountContract(StringValue businessAccountID = default(StringValue), StringValue businessAccountName = default(StringValue), StringValue contractID = default(StringValue), StringValue description = default(StringValue), DateTimeValue expirationDate = default(DateTimeValue), StringValue location = default(StringValue), StringValue status = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BusinessAccountID = businessAccountID;
            this.BusinessAccountName = businessAccountName;
            this.ContractID = contractID;
            this.Description = description;
            this.ExpirationDate = expirationDate;
            this.Location = location;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets BusinessAccountID
        /// </summary>
        [DataMember(Name="BusinessAccountID", EmitDefaultValue=false)]
        public StringValue BusinessAccountID { get; set; }

        /// <summary>
        /// Gets or Sets BusinessAccountName
        /// </summary>
        [DataMember(Name="BusinessAccountName", EmitDefaultValue=false)]
        public StringValue BusinessAccountName { get; set; }

        /// <summary>
        /// Gets or Sets ContractID
        /// </summary>
        [DataMember(Name="ContractID", EmitDefaultValue=false)]
        public StringValue ContractID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="ExpirationDate", EmitDefaultValue=false)]
        public DateTimeValue ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public StringValue Location { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessAccountContract {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BusinessAccountID: ").Append(BusinessAccountID).Append("\n");
            sb.Append("  BusinessAccountName: ").Append(BusinessAccountName).Append("\n");
            sb.Append("  ContractID: ").Append(ContractID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessAccountContract);
        }

        /// <summary>
        /// Returns true if BusinessAccountContract instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessAccountContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessAccountContract input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BusinessAccountID == input.BusinessAccountID ||
                    (this.BusinessAccountID != null &&
                    this.BusinessAccountID.Equals(input.BusinessAccountID))
                ) && base.Equals(input) && 
                (
                    this.BusinessAccountName == input.BusinessAccountName ||
                    (this.BusinessAccountName != null &&
                    this.BusinessAccountName.Equals(input.BusinessAccountName))
                ) && base.Equals(input) && 
                (
                    this.ContractID == input.ContractID ||
                    (this.ContractID != null &&
                    this.ContractID.Equals(input.ContractID))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && base.Equals(input) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BusinessAccountID != null)
                    hashCode = hashCode * 59 + this.BusinessAccountID.GetHashCode();
                if (this.BusinessAccountName != null)
                    hashCode = hashCode * 59 + this.BusinessAccountName.GetHashCode();
                if (this.ContractID != null)
                    hashCode = hashCode * 59 + this.ContractID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
