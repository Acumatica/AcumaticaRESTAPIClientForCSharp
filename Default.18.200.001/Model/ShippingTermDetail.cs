/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// ShippingTermDetail
    /// </summary>
    [DataContract]
    public partial class ShippingTermDetail : Entity,  IEquatable<ShippingTermDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingTermDetail" /> class.
        /// </summary>
        /// <param name="breakAmount">breakAmount.</param>
        /// <param name="freightCost">freightCost.</param>
        /// <param name="invoiceAmount">invoiceAmount.</param>
        /// <param name="lineHandling">lineHandling.</param>
        /// <param name="lineNbr">lineNbr.</param>
        /// <param name="shippingandHandling">shippingandHandling.</param>
        public ShippingTermDetail(DecimalValue breakAmount = default(DecimalValue), DecimalValue freightCost = default(DecimalValue), DecimalValue invoiceAmount = default(DecimalValue), DecimalValue lineHandling = default(DecimalValue), IntValue lineNbr = default(IntValue), DecimalValue shippingandHandling = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BreakAmount = breakAmount;
            this.FreightCost = freightCost;
            this.InvoiceAmount = invoiceAmount;
            this.LineHandling = lineHandling;
            this.LineNbr = lineNbr;
            this.ShippingandHandling = shippingandHandling;
        }
        
        /// <summary>
        /// Gets or Sets BreakAmount
        /// </summary>
        [DataMember(Name="BreakAmount", EmitDefaultValue=false)]
        public DecimalValue BreakAmount { get; set; }

        /// <summary>
        /// Gets or Sets FreightCost
        /// </summary>
        [DataMember(Name="FreightCost", EmitDefaultValue=false)]
        public DecimalValue FreightCost { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceAmount
        /// </summary>
        [DataMember(Name="InvoiceAmount", EmitDefaultValue=false)]
        public DecimalValue InvoiceAmount { get; set; }

        /// <summary>
        /// Gets or Sets LineHandling
        /// </summary>
        [DataMember(Name="LineHandling", EmitDefaultValue=false)]
        public DecimalValue LineHandling { get; set; }

        /// <summary>
        /// Gets or Sets LineNbr
        /// </summary>
        [DataMember(Name="LineNbr", EmitDefaultValue=false)]
        public IntValue LineNbr { get; set; }

        /// <summary>
        /// Gets or Sets ShippingandHandling
        /// </summary>
        [DataMember(Name="ShippingandHandling", EmitDefaultValue=false)]
        public DecimalValue ShippingandHandling { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingTermDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BreakAmount: ").Append(BreakAmount).Append("\n");
            sb.Append("  FreightCost: ").Append(FreightCost).Append("\n");
            sb.Append("  InvoiceAmount: ").Append(InvoiceAmount).Append("\n");
            sb.Append("  LineHandling: ").Append(LineHandling).Append("\n");
            sb.Append("  LineNbr: ").Append(LineNbr).Append("\n");
            sb.Append("  ShippingandHandling: ").Append(ShippingandHandling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingTermDetail);
        }

        /// <summary>
        /// Returns true if ShippingTermDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingTermDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingTermDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BreakAmount == input.BreakAmount ||
                    (this.BreakAmount != null &&
                    this.BreakAmount.Equals(input.BreakAmount))
                ) && base.Equals(input) && 
                (
                    this.FreightCost == input.FreightCost ||
                    (this.FreightCost != null &&
                    this.FreightCost.Equals(input.FreightCost))
                ) && base.Equals(input) && 
                (
                    this.InvoiceAmount == input.InvoiceAmount ||
                    (this.InvoiceAmount != null &&
                    this.InvoiceAmount.Equals(input.InvoiceAmount))
                ) && base.Equals(input) && 
                (
                    this.LineHandling == input.LineHandling ||
                    (this.LineHandling != null &&
                    this.LineHandling.Equals(input.LineHandling))
                ) && base.Equals(input) && 
                (
                    this.LineNbr == input.LineNbr ||
                    (this.LineNbr != null &&
                    this.LineNbr.Equals(input.LineNbr))
                ) && base.Equals(input) && 
                (
                    this.ShippingandHandling == input.ShippingandHandling ||
                    (this.ShippingandHandling != null &&
                    this.ShippingandHandling.Equals(input.ShippingandHandling))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BreakAmount != null)
                    hashCode = hashCode * 59 + this.BreakAmount.GetHashCode();
                if (this.FreightCost != null)
                    hashCode = hashCode * 59 + this.FreightCost.GetHashCode();
                if (this.InvoiceAmount != null)
                    hashCode = hashCode * 59 + this.InvoiceAmount.GetHashCode();
                if (this.LineHandling != null)
                    hashCode = hashCode * 59 + this.LineHandling.GetHashCode();
                if (this.LineNbr != null)
                    hashCode = hashCode * 59 + this.LineNbr.GetHashCode();
                if (this.ShippingandHandling != null)
                    hashCode = hashCode * 59 + this.ShippingandHandling.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
