/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// Task
    /// </summary>
    [DataContract]
    public partial class Task : Entity,  IEquatable<Task>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Task" /> class.
        /// </summary>
        /// <param name="body">body.</param>
        /// <param name="category">category.</param>
        /// <param name="completedAt">completedAt.</param>
        /// <param name="completionPercentage">completionPercentage.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="_internal">_internal.</param>
        /// <param name="noteID">noteID.</param>
        /// <param name="owner">owner.</param>
        /// <param name="parent">parent.</param>
        /// <param name="parentSummary">parentSummary.</param>
        /// <param name="priority">priority.</param>
        /// <param name="relatedActivities">relatedActivities.</param>
        /// <param name="relatedEntityDescription">relatedEntityDescription.</param>
        /// <param name="relatedTasks">relatedTasks.</param>
        /// <param name="reminder">reminder.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="status">status.</param>
        /// <param name="summary">summary.</param>
        /// <param name="timeActivity">timeActivity.</param>
        /// <param name="workgroupID">workgroupID.</param>
        public Task(StringValue body = default(StringValue), StringValue category = default(StringValue), DateTimeValue completedAt = default(DateTimeValue), IntValue completionPercentage = default(IntValue), DateTimeValue dueDate = default(DateTimeValue), BooleanValue _internal = default(BooleanValue), GuidValue noteID = default(GuidValue), StringValue owner = default(StringValue), GuidValue parent = default(GuidValue), StringValue parentSummary = default(StringValue), StringValue priority = default(StringValue), List<TaskRelatedActivity> relatedActivities = default(List<TaskRelatedActivity>), StringValue relatedEntityDescription = default(StringValue), List<TaskRelatedTask> relatedTasks = default(List<TaskRelatedTask>), ReminderDetail reminder = default(ReminderDetail), DateTimeValue startDate = default(DateTimeValue), StringValue status = default(StringValue), StringValue summary = default(StringValue), TaskTimeActivity timeActivity = default(TaskTimeActivity), StringValue workgroupID = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Body = body;
            this.Category = category;
            this.CompletedAt = completedAt;
            this.CompletionPercentage = completionPercentage;
            this.DueDate = dueDate;
            this.Internal = _internal;
            this.NoteID = noteID;
            this.Owner = owner;
            this.Parent = parent;
            this.ParentSummary = parentSummary;
            this.Priority = priority;
            this.RelatedActivities = relatedActivities;
            this.RelatedEntityDescription = relatedEntityDescription;
            this.RelatedTasks = relatedTasks;
            this.Reminder = reminder;
            this.StartDate = startDate;
            this.Status = status;
            this.Summary = summary;
            this.TimeActivity = timeActivity;
            this.WorkgroupID = workgroupID;
        }
        
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="Body", EmitDefaultValue=false)]
        public StringValue Body { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public StringValue Category { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name="CompletedAt", EmitDefaultValue=false)]
        public DateTimeValue CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets CompletionPercentage
        /// </summary>
        [DataMember(Name="CompletionPercentage", EmitDefaultValue=false)]
        public IntValue CompletionPercentage { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="DueDate", EmitDefaultValue=false)]
        public DateTimeValue DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Internal
        /// </summary>
        [DataMember(Name="Internal", EmitDefaultValue=false)]
        public BooleanValue Internal { get; set; }

        /// <summary>
        /// Gets or Sets NoteID
        /// </summary>
        [DataMember(Name="NoteID", EmitDefaultValue=false)]
        public GuidValue NoteID { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public StringValue Owner { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="Parent", EmitDefaultValue=false)]
        public GuidValue Parent { get; set; }

        /// <summary>
        /// Gets or Sets ParentSummary
        /// </summary>
        [DataMember(Name="ParentSummary", EmitDefaultValue=false)]
        public StringValue ParentSummary { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public StringValue Priority { get; set; }

        /// <summary>
        /// Gets or Sets RelatedActivities
        /// </summary>
        [DataMember(Name="RelatedActivities", EmitDefaultValue=false)]
        public List<TaskRelatedActivity> RelatedActivities { get; set; }

        /// <summary>
        /// Gets or Sets RelatedEntityDescription
        /// </summary>
        [DataMember(Name="RelatedEntityDescription", EmitDefaultValue=false)]
        public StringValue RelatedEntityDescription { get; set; }

        /// <summary>
        /// Gets or Sets RelatedTasks
        /// </summary>
        [DataMember(Name="RelatedTasks", EmitDefaultValue=false)]
        public List<TaskRelatedTask> RelatedTasks { get; set; }

        /// <summary>
        /// Gets or Sets Reminder
        /// </summary>
        [DataMember(Name="Reminder", EmitDefaultValue=false)]
        public ReminderDetail Reminder { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTimeValue StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="Summary", EmitDefaultValue=false)]
        public StringValue Summary { get; set; }

        /// <summary>
        /// Gets or Sets TimeActivity
        /// </summary>
        [DataMember(Name="TimeActivity", EmitDefaultValue=false)]
        public TaskTimeActivity TimeActivity { get; set; }

        /// <summary>
        /// Gets or Sets WorkgroupID
        /// </summary>
        [DataMember(Name="WorkgroupID", EmitDefaultValue=false)]
        public StringValue WorkgroupID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Task {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  CompletionPercentage: ").Append(CompletionPercentage).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("  NoteID: ").Append(NoteID).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  ParentSummary: ").Append(ParentSummary).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  RelatedActivities: ").Append(RelatedActivities).Append("\n");
            sb.Append("  RelatedEntityDescription: ").Append(RelatedEntityDescription).Append("\n");
            sb.Append("  RelatedTasks: ").Append(RelatedTasks).Append("\n");
            sb.Append("  Reminder: ").Append(Reminder).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  TimeActivity: ").Append(TimeActivity).Append("\n");
            sb.Append("  WorkgroupID: ").Append(WorkgroupID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Task);
        }

        /// <summary>
        /// Returns true if Task instances are equal
        /// </summary>
        /// <param name="input">Instance of Task to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Task input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && base.Equals(input) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && base.Equals(input) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && base.Equals(input) && 
                (
                    this.CompletionPercentage == input.CompletionPercentage ||
                    (this.CompletionPercentage != null &&
                    this.CompletionPercentage.Equals(input.CompletionPercentage))
                ) && base.Equals(input) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && base.Equals(input) && 
                (
                    this.Internal == input.Internal ||
                    (this.Internal != null &&
                    this.Internal.Equals(input.Internal))
                ) && base.Equals(input) && 
                (
                    this.NoteID == input.NoteID ||
                    (this.NoteID != null &&
                    this.NoteID.Equals(input.NoteID))
                ) && base.Equals(input) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && base.Equals(input) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && base.Equals(input) && 
                (
                    this.ParentSummary == input.ParentSummary ||
                    (this.ParentSummary != null &&
                    this.ParentSummary.Equals(input.ParentSummary))
                ) && base.Equals(input) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && base.Equals(input) && 
                (
                    this.RelatedActivities == input.RelatedActivities ||
                    this.RelatedActivities != null &&
                    this.RelatedActivities.SequenceEqual(input.RelatedActivities)
                ) && base.Equals(input) && 
                (
                    this.RelatedEntityDescription == input.RelatedEntityDescription ||
                    (this.RelatedEntityDescription != null &&
                    this.RelatedEntityDescription.Equals(input.RelatedEntityDescription))
                ) && base.Equals(input) && 
                (
                    this.RelatedTasks == input.RelatedTasks ||
                    this.RelatedTasks != null &&
                    this.RelatedTasks.SequenceEqual(input.RelatedTasks)
                ) && base.Equals(input) && 
                (
                    this.Reminder == input.Reminder ||
                    (this.Reminder != null &&
                    this.Reminder.Equals(input.Reminder))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && base.Equals(input) && 
                (
                    this.TimeActivity == input.TimeActivity ||
                    (this.TimeActivity != null &&
                    this.TimeActivity.Equals(input.TimeActivity))
                ) && base.Equals(input) && 
                (
                    this.WorkgroupID == input.WorkgroupID ||
                    (this.WorkgroupID != null &&
                    this.WorkgroupID.Equals(input.WorkgroupID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.CompletionPercentage != null)
                    hashCode = hashCode * 59 + this.CompletionPercentage.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Internal != null)
                    hashCode = hashCode * 59 + this.Internal.GetHashCode();
                if (this.NoteID != null)
                    hashCode = hashCode * 59 + this.NoteID.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Parent != null)
                    hashCode = hashCode * 59 + this.Parent.GetHashCode();
                if (this.ParentSummary != null)
                    hashCode = hashCode * 59 + this.ParentSummary.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.RelatedActivities != null)
                    hashCode = hashCode * 59 + this.RelatedActivities.GetHashCode();
                if (this.RelatedEntityDescription != null)
                    hashCode = hashCode * 59 + this.RelatedEntityDescription.GetHashCode();
                if (this.RelatedTasks != null)
                    hashCode = hashCode * 59 + this.RelatedTasks.GetHashCode();
                if (this.Reminder != null)
                    hashCode = hashCode * 59 + this.Reminder.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.TimeActivity != null)
                    hashCode = hashCode * 59 + this.TimeActivity.GetHashCode();
                if (this.WorkgroupID != null)
                    hashCode = hashCode * 59 + this.WorkgroupID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
