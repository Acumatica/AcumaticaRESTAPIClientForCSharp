/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// AccountGroup
    /// </summary>
    [DataContract]
    public partial class AccountGroup : Entity,  IEquatable<AccountGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountGroup" /> class.
        /// </summary>
        /// <param name="accountGroupID">accountGroupID.</param>
        /// <param name="active">active.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="defaultAccountID">defaultAccountID.</param>
        /// <param name="description">description.</param>
        /// <param name="expense">expense.</param>
        /// <param name="sortOrder">sortOrder.</param>
        /// <param name="type">type.</param>
        public AccountGroup(StringValue accountGroupID = default(StringValue), BooleanValue active = default(BooleanValue), IEnumerable<AttributeDetail> attributes = default(IEnumerable<AttributeDetail>), StringValue defaultAccountID = default(StringValue), StringValue description = default(StringValue), BooleanValue expense = default(BooleanValue), ShortValue sortOrder = default(ShortValue), StringValue type = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AccountGroupID = accountGroupID;
            this.Active = active;
            this.Attributes = attributes;
            this.DefaultAccountID = defaultAccountID;
            this.Description = description;
            this.Expense = expense;
            this.SortOrder = sortOrder;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets AccountGroupID
        /// </summary>
        [DataMember(Name="AccountGroupID", EmitDefaultValue=false)]
        public StringValue AccountGroupID { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public BooleanValue Active { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public IEnumerable<AttributeDetail> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAccountID
        /// </summary>
        [DataMember(Name="DefaultAccountID", EmitDefaultValue=false)]
        public StringValue DefaultAccountID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets Expense
        /// </summary>
        [DataMember(Name="Expense", EmitDefaultValue=false)]
        public BooleanValue Expense { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name="SortOrder", EmitDefaultValue=false)]
        public ShortValue SortOrder { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public StringValue Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountGroup {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountGroupID: ").Append(AccountGroupID).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  DefaultAccountID: ").Append(DefaultAccountID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Expense: ").Append(Expense).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountGroup);
        }

        /// <summary>
        /// Returns true if AccountGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountGroup input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AccountGroupID == input.AccountGroupID ||
                    (this.AccountGroupID != null &&
                    this.AccountGroupID.Equals(input.AccountGroupID))
                ) && base.Equals(input) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.DefaultAccountID == input.DefaultAccountID ||
                    (this.DefaultAccountID != null &&
                    this.DefaultAccountID.Equals(input.DefaultAccountID))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Expense == input.Expense ||
                    (this.Expense != null &&
                    this.Expense.Equals(input.Expense))
                ) && base.Equals(input) && 
                (
                    this.SortOrder == input.SortOrder ||
                    (this.SortOrder != null &&
                    this.SortOrder.Equals(input.SortOrder))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountGroupID != null)
                    hashCode = hashCode * 59 + this.AccountGroupID.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.DefaultAccountID != null)
                    hashCode = hashCode * 59 + this.DefaultAccountID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Expense != null)
                    hashCode = hashCode * 59 + this.Expense.GetHashCode();
                if (this.SortOrder != null)
                    hashCode = hashCode * 59 + this.SortOrder.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
