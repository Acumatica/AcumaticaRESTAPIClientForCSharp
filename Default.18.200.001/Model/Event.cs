/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// Event
    /// </summary>
    [DataContract]
    public partial class Event : Entity,  IEquatable<Event>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        /// <param name="allDay">allDay.</param>
        /// <param name="attendees">attendees.</param>
        /// <param name="body">body.</param>
        /// <param name="category">category.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="_internal">_internal.</param>
        /// <param name="location">location.</param>
        /// <param name="noteID">noteID.</param>
        /// <param name="priority">priority.</param>
        /// <param name="relatedActivities">relatedActivities.</param>
        /// <param name="relatedEntityDescription">relatedEntityDescription.</param>
        /// <param name="reminder">reminder.</param>
        /// <param name="showAs">showAs.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="status">status.</param>
        /// <param name="summary">summary.</param>
        /// <param name="timeActivity">timeActivity.</param>
        public Event(BooleanValue allDay = default(BooleanValue), List<EventAttendee> attendees = default(List<EventAttendee>), StringValue body = default(StringValue), StringValue category = default(StringValue), DateTimeValue endDate = default(DateTimeValue), DateTimeValue endTime = default(DateTimeValue), BooleanValue _internal = default(BooleanValue), StringValue location = default(StringValue), GuidValue noteID = default(GuidValue), StringValue priority = default(StringValue), List<EventRelatedActivity> relatedActivities = default(List<EventRelatedActivity>), StringValue relatedEntityDescription = default(StringValue), ReminderDetail reminder = default(ReminderDetail), StringValue showAs = default(StringValue), DateTimeValue startDate = default(DateTimeValue), DateTimeValue startTime = default(DateTimeValue), StringValue status = default(StringValue), StringValue summary = default(StringValue), EventTimeActivity timeActivity = default(EventTimeActivity), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AllDay = allDay;
            this.Attendees = attendees;
            this.Body = body;
            this.Category = category;
            this.EndDate = endDate;
            this.EndTime = endTime;
            this.Internal = _internal;
            this.Location = location;
            this.NoteID = noteID;
            this.Priority = priority;
            this.RelatedActivities = relatedActivities;
            this.RelatedEntityDescription = relatedEntityDescription;
            this.Reminder = reminder;
            this.ShowAs = showAs;
            this.StartDate = startDate;
            this.StartTime = startTime;
            this.Status = status;
            this.Summary = summary;
            this.TimeActivity = timeActivity;
        }
        
        /// <summary>
        /// Gets or Sets AllDay
        /// </summary>
        [DataMember(Name="AllDay", EmitDefaultValue=false)]
        public BooleanValue AllDay { get; set; }

        /// <summary>
        /// Gets or Sets Attendees
        /// </summary>
        [DataMember(Name="Attendees", EmitDefaultValue=false)]
        public List<EventAttendee> Attendees { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="Body", EmitDefaultValue=false)]
        public StringValue Body { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public StringValue Category { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="EndDate", EmitDefaultValue=false)]
        public DateTimeValue EndDate { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="EndTime", EmitDefaultValue=false)]
        public DateTimeValue EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Internal
        /// </summary>
        [DataMember(Name="Internal", EmitDefaultValue=false)]
        public BooleanValue Internal { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public StringValue Location { get; set; }

        /// <summary>
        /// Gets or Sets NoteID
        /// </summary>
        [DataMember(Name="NoteID", EmitDefaultValue=false)]
        public GuidValue NoteID { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public StringValue Priority { get; set; }

        /// <summary>
        /// Gets or Sets RelatedActivities
        /// </summary>
        [DataMember(Name="RelatedActivities", EmitDefaultValue=false)]
        public List<EventRelatedActivity> RelatedActivities { get; set; }

        /// <summary>
        /// Gets or Sets RelatedEntityDescription
        /// </summary>
        [DataMember(Name="RelatedEntityDescription", EmitDefaultValue=false)]
        public StringValue RelatedEntityDescription { get; set; }

        /// <summary>
        /// Gets or Sets Reminder
        /// </summary>
        [DataMember(Name="Reminder", EmitDefaultValue=false)]
        public ReminderDetail Reminder { get; set; }

        /// <summary>
        /// Gets or Sets ShowAs
        /// </summary>
        [DataMember(Name="ShowAs", EmitDefaultValue=false)]
        public StringValue ShowAs { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTimeValue StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="StartTime", EmitDefaultValue=false)]
        public DateTimeValue StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="Summary", EmitDefaultValue=false)]
        public StringValue Summary { get; set; }

        /// <summary>
        /// Gets or Sets TimeActivity
        /// </summary>
        [DataMember(Name="TimeActivity", EmitDefaultValue=false)]
        public EventTimeActivity TimeActivity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AllDay: ").Append(AllDay).Append("\n");
            sb.Append("  Attendees: ").Append(Attendees).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  NoteID: ").Append(NoteID).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  RelatedActivities: ").Append(RelatedActivities).Append("\n");
            sb.Append("  RelatedEntityDescription: ").Append(RelatedEntityDescription).Append("\n");
            sb.Append("  Reminder: ").Append(Reminder).Append("\n");
            sb.Append("  ShowAs: ").Append(ShowAs).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  TimeActivity: ").Append(TimeActivity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Event);
        }

        /// <summary>
        /// Returns true if Event instances are equal
        /// </summary>
        /// <param name="input">Instance of Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Event input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AllDay == input.AllDay ||
                    (this.AllDay != null &&
                    this.AllDay.Equals(input.AllDay))
                ) && base.Equals(input) && 
                (
                    this.Attendees == input.Attendees ||
                    this.Attendees != null &&
                    this.Attendees.SequenceEqual(input.Attendees)
                ) && base.Equals(input) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && base.Equals(input) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && base.Equals(input) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && base.Equals(input) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && base.Equals(input) && 
                (
                    this.Internal == input.Internal ||
                    (this.Internal != null &&
                    this.Internal.Equals(input.Internal))
                ) && base.Equals(input) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && base.Equals(input) && 
                (
                    this.NoteID == input.NoteID ||
                    (this.NoteID != null &&
                    this.NoteID.Equals(input.NoteID))
                ) && base.Equals(input) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && base.Equals(input) && 
                (
                    this.RelatedActivities == input.RelatedActivities ||
                    this.RelatedActivities != null &&
                    this.RelatedActivities.SequenceEqual(input.RelatedActivities)
                ) && base.Equals(input) && 
                (
                    this.RelatedEntityDescription == input.RelatedEntityDescription ||
                    (this.RelatedEntityDescription != null &&
                    this.RelatedEntityDescription.Equals(input.RelatedEntityDescription))
                ) && base.Equals(input) && 
                (
                    this.Reminder == input.Reminder ||
                    (this.Reminder != null &&
                    this.Reminder.Equals(input.Reminder))
                ) && base.Equals(input) && 
                (
                    this.ShowAs == input.ShowAs ||
                    (this.ShowAs != null &&
                    this.ShowAs.Equals(input.ShowAs))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && base.Equals(input) && 
                (
                    this.TimeActivity == input.TimeActivity ||
                    (this.TimeActivity != null &&
                    this.TimeActivity.Equals(input.TimeActivity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AllDay != null)
                    hashCode = hashCode * 59 + this.AllDay.GetHashCode();
                if (this.Attendees != null)
                    hashCode = hashCode * 59 + this.Attendees.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Internal != null)
                    hashCode = hashCode * 59 + this.Internal.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.NoteID != null)
                    hashCode = hashCode * 59 + this.NoteID.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.RelatedActivities != null)
                    hashCode = hashCode * 59 + this.RelatedActivities.GetHashCode();
                if (this.RelatedEntityDescription != null)
                    hashCode = hashCode * 59 + this.RelatedEntityDescription.GetHashCode();
                if (this.Reminder != null)
                    hashCode = hashCode * 59 + this.Reminder.GetHashCode();
                if (this.ShowAs != null)
                    hashCode = hashCode * 59 + this.ShowAs.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.TimeActivity != null)
                    hashCode = hashCode * 59 + this.TimeActivity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
