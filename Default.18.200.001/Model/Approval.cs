/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// Approval
    /// </summary>
    [DataContract]
    public partial class Approval : Entity,  IEquatable<Approval>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Approval" /> class.
        /// </summary>
        /// <param name="approvedBy">approvedBy.</param>
        /// <param name="approvedByName">approvedByName.</param>
        /// <param name="approver">approver.</param>
        /// <param name="approverName">approverName.</param>
        /// <param name="date">date.</param>
        /// <param name="status">status.</param>
        /// <param name="workgroup">workgroup.</param>
        public Approval(StringValue approvedBy = default(StringValue), StringValue approvedByName = default(StringValue), StringValue approver = default(StringValue), StringValue approverName = default(StringValue), DateTimeValue date = default(DateTimeValue), StringValue status = default(StringValue), StringValue workgroup = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ApprovedBy = approvedBy;
            this.ApprovedByName = approvedByName;
            this.Approver = approver;
            this.ApproverName = approverName;
            this.Date = date;
            this.Status = status;
            this.Workgroup = workgroup;
        }
        
        /// <summary>
        /// Gets or Sets ApprovedBy
        /// </summary>
        [DataMember(Name="ApprovedBy", EmitDefaultValue=false)]
        public StringValue ApprovedBy { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedByName
        /// </summary>
        [DataMember(Name="ApprovedByName", EmitDefaultValue=false)]
        public StringValue ApprovedByName { get; set; }

        /// <summary>
        /// Gets or Sets Approver
        /// </summary>
        [DataMember(Name="Approver", EmitDefaultValue=false)]
        public StringValue Approver { get; set; }

        /// <summary>
        /// Gets or Sets ApproverName
        /// </summary>
        [DataMember(Name="ApproverName", EmitDefaultValue=false)]
        public StringValue ApproverName { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets Workgroup
        /// </summary>
        [DataMember(Name="Workgroup", EmitDefaultValue=false)]
        public StringValue Workgroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Approval {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ApprovedBy: ").Append(ApprovedBy).Append("\n");
            sb.Append("  ApprovedByName: ").Append(ApprovedByName).Append("\n");
            sb.Append("  Approver: ").Append(Approver).Append("\n");
            sb.Append("  ApproverName: ").Append(ApproverName).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Workgroup: ").Append(Workgroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Approval);
        }

        /// <summary>
        /// Returns true if Approval instances are equal
        /// </summary>
        /// <param name="input">Instance of Approval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Approval input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ApprovedBy == input.ApprovedBy ||
                    (this.ApprovedBy != null &&
                    this.ApprovedBy.Equals(input.ApprovedBy))
                ) && base.Equals(input) && 
                (
                    this.ApprovedByName == input.ApprovedByName ||
                    (this.ApprovedByName != null &&
                    this.ApprovedByName.Equals(input.ApprovedByName))
                ) && base.Equals(input) && 
                (
                    this.Approver == input.Approver ||
                    (this.Approver != null &&
                    this.Approver.Equals(input.Approver))
                ) && base.Equals(input) && 
                (
                    this.ApproverName == input.ApproverName ||
                    (this.ApproverName != null &&
                    this.ApproverName.Equals(input.ApproverName))
                ) && base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.Workgroup == input.Workgroup ||
                    (this.Workgroup != null &&
                    this.Workgroup.Equals(input.Workgroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ApprovedBy != null)
                    hashCode = hashCode * 59 + this.ApprovedBy.GetHashCode();
                if (this.ApprovedByName != null)
                    hashCode = hashCode * 59 + this.ApprovedByName.GetHashCode();
                if (this.Approver != null)
                    hashCode = hashCode * 59 + this.Approver.GetHashCode();
                if (this.ApproverName != null)
                    hashCode = hashCode * 59 + this.ApproverName.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Workgroup != null)
                    hashCode = hashCode * 59 + this.Workgroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
