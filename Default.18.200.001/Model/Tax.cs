/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// Tax
    /// </summary>
    [DataContract]
    public partial class Tax : Entity,  IEquatable<Tax>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tax" /> class.
        /// </summary>
        /// <param name="calculateOn">calculateOn.</param>
        /// <param name="cashDiscount">cashDiscount.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="deductibleVAT">deductibleVAT.</param>
        /// <param name="description">description.</param>
        /// <param name="enterFromTaxBill">enterFromTaxBill.</param>
        /// <param name="excludeFromTaxonTaxCalculation">excludeFromTaxonTaxCalculation.</param>
        /// <param name="includeInVATExemptTotal">includeInVATExemptTotal.</param>
        /// <param name="includeInVATTaxableTotal">includeInVATTaxableTotal.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="notValidAfter">notValidAfter.</param>
        /// <param name="pendingVAT">pendingVAT.</param>
        /// <param name="reverseVAT">reverseVAT.</param>
        /// <param name="statisticalVAT">statisticalVAT.</param>
        /// <param name="taxAgency">taxAgency.</param>
        /// <param name="taxClaimableAccount">taxClaimableAccount.</param>
        /// <param name="taxClaimableSubaccount">taxClaimableSubaccount.</param>
        /// <param name="taxExpenseAccount">taxExpenseAccount.</param>
        /// <param name="taxExpenseSubaccount">taxExpenseSubaccount.</param>
        /// <param name="taxID">taxID.</param>
        /// <param name="taxPayableAccount">taxPayableAccount.</param>
        /// <param name="taxPayableSubaccount">taxPayableSubaccount.</param>
        /// <param name="taxSchedule">taxSchedule.</param>
        /// <param name="taxType">taxType.</param>
        /// <param name="zones">zones.</param>
        public Tax(StringValue calculateOn = default(StringValue), StringValue cashDiscount = default(StringValue), DateTimeValue createdDateTime = default(DateTimeValue), BooleanValue deductibleVAT = default(BooleanValue), StringValue description = default(StringValue), BooleanValue enterFromTaxBill = default(BooleanValue), BooleanValue excludeFromTaxonTaxCalculation = default(BooleanValue), BooleanValue includeInVATExemptTotal = default(BooleanValue), BooleanValue includeInVATTaxableTotal = default(BooleanValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), DateTimeValue notValidAfter = default(DateTimeValue), BooleanValue pendingVAT = default(BooleanValue), BooleanValue reverseVAT = default(BooleanValue), BooleanValue statisticalVAT = default(BooleanValue), StringValue taxAgency = default(StringValue), StringValue taxClaimableAccount = default(StringValue), StringValue taxClaimableSubaccount = default(StringValue), StringValue taxExpenseAccount = default(StringValue), StringValue taxExpenseSubaccount = default(StringValue), StringValue taxID = default(StringValue), StringValue taxPayableAccount = default(StringValue), StringValue taxPayableSubaccount = default(StringValue), IEnumerable<TaxScheduleDetail> taxSchedule = default(IEnumerable<TaxScheduleDetail>), StringValue taxType = default(StringValue), IEnumerable<TaxZoneDetail> zones = default(IEnumerable<TaxZoneDetail>), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.CalculateOn = calculateOn;
            this.CashDiscount = cashDiscount;
            this.CreatedDateTime = createdDateTime;
            this.DeductibleVAT = deductibleVAT;
            this.Description = description;
            this.EnterFromTaxBill = enterFromTaxBill;
            this.ExcludeFromTaxonTaxCalculation = excludeFromTaxonTaxCalculation;
            this.IncludeInVATExemptTotal = includeInVATExemptTotal;
            this.IncludeInVATTaxableTotal = includeInVATTaxableTotal;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.NotValidAfter = notValidAfter;
            this.PendingVAT = pendingVAT;
            this.ReverseVAT = reverseVAT;
            this.StatisticalVAT = statisticalVAT;
            this.TaxAgency = taxAgency;
            this.TaxClaimableAccount = taxClaimableAccount;
            this.TaxClaimableSubaccount = taxClaimableSubaccount;
            this.TaxExpenseAccount = taxExpenseAccount;
            this.TaxExpenseSubaccount = taxExpenseSubaccount;
            this.TaxID = taxID;
            this.TaxPayableAccount = taxPayableAccount;
            this.TaxPayableSubaccount = taxPayableSubaccount;
            this.TaxSchedule = taxSchedule;
            this.TaxType = taxType;
            this.Zones = zones;
        }
        
        /// <summary>
        /// Gets or Sets CalculateOn
        /// </summary>
        [DataMember(Name="CalculateOn", EmitDefaultValue=false)]
        public StringValue CalculateOn { get; set; }

        /// <summary>
        /// Gets or Sets CashDiscount
        /// </summary>
        [DataMember(Name="CashDiscount", EmitDefaultValue=false)]
        public StringValue CashDiscount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DeductibleVAT
        /// </summary>
        [DataMember(Name="DeductibleVAT", EmitDefaultValue=false)]
        public BooleanValue DeductibleVAT { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets EnterFromTaxBill
        /// </summary>
        [DataMember(Name="EnterFromTaxBill", EmitDefaultValue=false)]
        public BooleanValue EnterFromTaxBill { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeFromTaxonTaxCalculation
        /// </summary>
        [DataMember(Name="ExcludeFromTaxonTaxCalculation", EmitDefaultValue=false)]
        public BooleanValue ExcludeFromTaxonTaxCalculation { get; set; }

        /// <summary>
        /// Gets or Sets IncludeInVATExemptTotal
        /// </summary>
        [DataMember(Name="IncludeInVATExemptTotal", EmitDefaultValue=false)]
        public BooleanValue IncludeInVATExemptTotal { get; set; }

        /// <summary>
        /// Gets or Sets IncludeInVATTaxableTotal
        /// </summary>
        [DataMember(Name="IncludeInVATTaxableTotal", EmitDefaultValue=false)]
        public BooleanValue IncludeInVATTaxableTotal { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets NotValidAfter
        /// </summary>
        [DataMember(Name="NotValidAfter", EmitDefaultValue=false)]
        public DateTimeValue NotValidAfter { get; set; }

        /// <summary>
        /// Gets or Sets PendingVAT
        /// </summary>
        [DataMember(Name="PendingVAT", EmitDefaultValue=false)]
        public BooleanValue PendingVAT { get; set; }

        /// <summary>
        /// Gets or Sets ReverseVAT
        /// </summary>
        [DataMember(Name="ReverseVAT", EmitDefaultValue=false)]
        public BooleanValue ReverseVAT { get; set; }

        /// <summary>
        /// Gets or Sets StatisticalVAT
        /// </summary>
        [DataMember(Name="StatisticalVAT", EmitDefaultValue=false)]
        public BooleanValue StatisticalVAT { get; set; }

        /// <summary>
        /// Gets or Sets TaxAgency
        /// </summary>
        [DataMember(Name="TaxAgency", EmitDefaultValue=false)]
        public StringValue TaxAgency { get; set; }

        /// <summary>
        /// Gets or Sets TaxClaimableAccount
        /// </summary>
        [DataMember(Name="TaxClaimableAccount", EmitDefaultValue=false)]
        public StringValue TaxClaimableAccount { get; set; }

        /// <summary>
        /// Gets or Sets TaxClaimableSubaccount
        /// </summary>
        [DataMember(Name="TaxClaimableSubaccount", EmitDefaultValue=false)]
        public StringValue TaxClaimableSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets TaxExpenseAccount
        /// </summary>
        [DataMember(Name="TaxExpenseAccount", EmitDefaultValue=false)]
        public StringValue TaxExpenseAccount { get; set; }

        /// <summary>
        /// Gets or Sets TaxExpenseSubaccount
        /// </summary>
        [DataMember(Name="TaxExpenseSubaccount", EmitDefaultValue=false)]
        public StringValue TaxExpenseSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets TaxID
        /// </summary>
        [DataMember(Name="TaxID", EmitDefaultValue=false)]
        public StringValue TaxID { get; set; }

        /// <summary>
        /// Gets or Sets TaxPayableAccount
        /// </summary>
        [DataMember(Name="TaxPayableAccount", EmitDefaultValue=false)]
        public StringValue TaxPayableAccount { get; set; }

        /// <summary>
        /// Gets or Sets TaxPayableSubaccount
        /// </summary>
        [DataMember(Name="TaxPayableSubaccount", EmitDefaultValue=false)]
        public StringValue TaxPayableSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets TaxSchedule
        /// </summary>
        [DataMember(Name="TaxSchedule", EmitDefaultValue=false)]
        public IEnumerable<TaxScheduleDetail> TaxSchedule { get; set; }

        /// <summary>
        /// Gets or Sets TaxType
        /// </summary>
        [DataMember(Name="TaxType", EmitDefaultValue=false)]
        public StringValue TaxType { get; set; }

        /// <summary>
        /// Gets or Sets Zones
        /// </summary>
        [DataMember(Name="Zones", EmitDefaultValue=false)]
        public IEnumerable<TaxZoneDetail> Zones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tax {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CalculateOn: ").Append(CalculateOn).Append("\n");
            sb.Append("  CashDiscount: ").Append(CashDiscount).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  DeductibleVAT: ").Append(DeductibleVAT).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnterFromTaxBill: ").Append(EnterFromTaxBill).Append("\n");
            sb.Append("  ExcludeFromTaxonTaxCalculation: ").Append(ExcludeFromTaxonTaxCalculation).Append("\n");
            sb.Append("  IncludeInVATExemptTotal: ").Append(IncludeInVATExemptTotal).Append("\n");
            sb.Append("  IncludeInVATTaxableTotal: ").Append(IncludeInVATTaxableTotal).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  NotValidAfter: ").Append(NotValidAfter).Append("\n");
            sb.Append("  PendingVAT: ").Append(PendingVAT).Append("\n");
            sb.Append("  ReverseVAT: ").Append(ReverseVAT).Append("\n");
            sb.Append("  StatisticalVAT: ").Append(StatisticalVAT).Append("\n");
            sb.Append("  TaxAgency: ").Append(TaxAgency).Append("\n");
            sb.Append("  TaxClaimableAccount: ").Append(TaxClaimableAccount).Append("\n");
            sb.Append("  TaxClaimableSubaccount: ").Append(TaxClaimableSubaccount).Append("\n");
            sb.Append("  TaxExpenseAccount: ").Append(TaxExpenseAccount).Append("\n");
            sb.Append("  TaxExpenseSubaccount: ").Append(TaxExpenseSubaccount).Append("\n");
            sb.Append("  TaxID: ").Append(TaxID).Append("\n");
            sb.Append("  TaxPayableAccount: ").Append(TaxPayableAccount).Append("\n");
            sb.Append("  TaxPayableSubaccount: ").Append(TaxPayableSubaccount).Append("\n");
            sb.Append("  TaxSchedule: ").Append(TaxSchedule).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  Zones: ").Append(Zones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tax);
        }

        /// <summary>
        /// Returns true if Tax instances are equal
        /// </summary>
        /// <param name="input">Instance of Tax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tax input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CalculateOn == input.CalculateOn ||
                    (this.CalculateOn != null &&
                    this.CalculateOn.Equals(input.CalculateOn))
                ) && base.Equals(input) && 
                (
                    this.CashDiscount == input.CashDiscount ||
                    (this.CashDiscount != null &&
                    this.CashDiscount.Equals(input.CashDiscount))
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.DeductibleVAT == input.DeductibleVAT ||
                    (this.DeductibleVAT != null &&
                    this.DeductibleVAT.Equals(input.DeductibleVAT))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.EnterFromTaxBill == input.EnterFromTaxBill ||
                    (this.EnterFromTaxBill != null &&
                    this.EnterFromTaxBill.Equals(input.EnterFromTaxBill))
                ) && base.Equals(input) && 
                (
                    this.ExcludeFromTaxonTaxCalculation == input.ExcludeFromTaxonTaxCalculation ||
                    (this.ExcludeFromTaxonTaxCalculation != null &&
                    this.ExcludeFromTaxonTaxCalculation.Equals(input.ExcludeFromTaxonTaxCalculation))
                ) && base.Equals(input) && 
                (
                    this.IncludeInVATExemptTotal == input.IncludeInVATExemptTotal ||
                    (this.IncludeInVATExemptTotal != null &&
                    this.IncludeInVATExemptTotal.Equals(input.IncludeInVATExemptTotal))
                ) && base.Equals(input) && 
                (
                    this.IncludeInVATTaxableTotal == input.IncludeInVATTaxableTotal ||
                    (this.IncludeInVATTaxableTotal != null &&
                    this.IncludeInVATTaxableTotal.Equals(input.IncludeInVATTaxableTotal))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.NotValidAfter == input.NotValidAfter ||
                    (this.NotValidAfter != null &&
                    this.NotValidAfter.Equals(input.NotValidAfter))
                ) && base.Equals(input) && 
                (
                    this.PendingVAT == input.PendingVAT ||
                    (this.PendingVAT != null &&
                    this.PendingVAT.Equals(input.PendingVAT))
                ) && base.Equals(input) && 
                (
                    this.ReverseVAT == input.ReverseVAT ||
                    (this.ReverseVAT != null &&
                    this.ReverseVAT.Equals(input.ReverseVAT))
                ) && base.Equals(input) && 
                (
                    this.StatisticalVAT == input.StatisticalVAT ||
                    (this.StatisticalVAT != null &&
                    this.StatisticalVAT.Equals(input.StatisticalVAT))
                ) && base.Equals(input) && 
                (
                    this.TaxAgency == input.TaxAgency ||
                    (this.TaxAgency != null &&
                    this.TaxAgency.Equals(input.TaxAgency))
                ) && base.Equals(input) && 
                (
                    this.TaxClaimableAccount == input.TaxClaimableAccount ||
                    (this.TaxClaimableAccount != null &&
                    this.TaxClaimableAccount.Equals(input.TaxClaimableAccount))
                ) && base.Equals(input) && 
                (
                    this.TaxClaimableSubaccount == input.TaxClaimableSubaccount ||
                    (this.TaxClaimableSubaccount != null &&
                    this.TaxClaimableSubaccount.Equals(input.TaxClaimableSubaccount))
                ) && base.Equals(input) && 
                (
                    this.TaxExpenseAccount == input.TaxExpenseAccount ||
                    (this.TaxExpenseAccount != null &&
                    this.TaxExpenseAccount.Equals(input.TaxExpenseAccount))
                ) && base.Equals(input) && 
                (
                    this.TaxExpenseSubaccount == input.TaxExpenseSubaccount ||
                    (this.TaxExpenseSubaccount != null &&
                    this.TaxExpenseSubaccount.Equals(input.TaxExpenseSubaccount))
                ) && base.Equals(input) && 
                (
                    this.TaxID == input.TaxID ||
                    (this.TaxID != null &&
                    this.TaxID.Equals(input.TaxID))
                ) && base.Equals(input) && 
                (
                    this.TaxPayableAccount == input.TaxPayableAccount ||
                    (this.TaxPayableAccount != null &&
                    this.TaxPayableAccount.Equals(input.TaxPayableAccount))
                ) && base.Equals(input) && 
                (
                    this.TaxPayableSubaccount == input.TaxPayableSubaccount ||
                    (this.TaxPayableSubaccount != null &&
                    this.TaxPayableSubaccount.Equals(input.TaxPayableSubaccount))
                ) && base.Equals(input) && 
                (
                    this.TaxSchedule == input.TaxSchedule ||
                    this.TaxSchedule != null &&
                    this.TaxSchedule.SequenceEqual(input.TaxSchedule)
                ) && base.Equals(input) && 
                (
                    this.TaxType == input.TaxType ||
                    (this.TaxType != null &&
                    this.TaxType.Equals(input.TaxType))
                ) && base.Equals(input) && 
                (
                    this.Zones == input.Zones ||
                    this.Zones != null &&
                    this.Zones.SequenceEqual(input.Zones)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CalculateOn != null)
                    hashCode = hashCode * 59 + this.CalculateOn.GetHashCode();
                if (this.CashDiscount != null)
                    hashCode = hashCode * 59 + this.CashDiscount.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.DeductibleVAT != null)
                    hashCode = hashCode * 59 + this.DeductibleVAT.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EnterFromTaxBill != null)
                    hashCode = hashCode * 59 + this.EnterFromTaxBill.GetHashCode();
                if (this.ExcludeFromTaxonTaxCalculation != null)
                    hashCode = hashCode * 59 + this.ExcludeFromTaxonTaxCalculation.GetHashCode();
                if (this.IncludeInVATExemptTotal != null)
                    hashCode = hashCode * 59 + this.IncludeInVATExemptTotal.GetHashCode();
                if (this.IncludeInVATTaxableTotal != null)
                    hashCode = hashCode * 59 + this.IncludeInVATTaxableTotal.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.NotValidAfter != null)
                    hashCode = hashCode * 59 + this.NotValidAfter.GetHashCode();
                if (this.PendingVAT != null)
                    hashCode = hashCode * 59 + this.PendingVAT.GetHashCode();
                if (this.ReverseVAT != null)
                    hashCode = hashCode * 59 + this.ReverseVAT.GetHashCode();
                if (this.StatisticalVAT != null)
                    hashCode = hashCode * 59 + this.StatisticalVAT.GetHashCode();
                if (this.TaxAgency != null)
                    hashCode = hashCode * 59 + this.TaxAgency.GetHashCode();
                if (this.TaxClaimableAccount != null)
                    hashCode = hashCode * 59 + this.TaxClaimableAccount.GetHashCode();
                if (this.TaxClaimableSubaccount != null)
                    hashCode = hashCode * 59 + this.TaxClaimableSubaccount.GetHashCode();
                if (this.TaxExpenseAccount != null)
                    hashCode = hashCode * 59 + this.TaxExpenseAccount.GetHashCode();
                if (this.TaxExpenseSubaccount != null)
                    hashCode = hashCode * 59 + this.TaxExpenseSubaccount.GetHashCode();
                if (this.TaxID != null)
                    hashCode = hashCode * 59 + this.TaxID.GetHashCode();
                if (this.TaxPayableAccount != null)
                    hashCode = hashCode * 59 + this.TaxPayableAccount.GetHashCode();
                if (this.TaxPayableSubaccount != null)
                    hashCode = hashCode * 59 + this.TaxPayableSubaccount.GetHashCode();
                if (this.TaxSchedule != null)
                    hashCode = hashCode * 59 + this.TaxSchedule.GetHashCode();
                if (this.TaxType != null)
                    hashCode = hashCode * 59 + this.TaxType.GetHashCode();
                if (this.Zones != null)
                    hashCode = hashCode * 59 + this.Zones.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
