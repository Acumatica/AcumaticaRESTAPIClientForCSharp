/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// EmployeeFinancialSettings
    /// </summary>
    [DataContract]
    public partial class EmployeeFinancialSettings : Entity,  IEquatable<EmployeeFinancialSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeFinancialSettings" /> class.
        /// </summary>
        /// <param name="aPAccount">aPAccount.</param>
        /// <param name="aPSubaccount">aPSubaccount.</param>
        /// <param name="cashAccount">cashAccount.</param>
        /// <param name="expenseAccount">expenseAccount.</param>
        /// <param name="expenseSubaccount">expenseSubaccount.</param>
        /// <param name="paymentInstructions">paymentInstructions.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="prepaymentAccount">prepaymentAccount.</param>
        /// <param name="prepaymentSubaccount">prepaymentSubaccount.</param>
        /// <param name="salesAccount">salesAccount.</param>
        /// <param name="salesSubaccount">salesSubaccount.</param>
        /// <param name="taxZone">taxZone.</param>
        /// <param name="terms">terms.</param>
        public EmployeeFinancialSettings(StringValue aPAccount = default(StringValue), StringValue aPSubaccount = default(StringValue), StringValue cashAccount = default(StringValue), StringValue expenseAccount = default(StringValue), StringValue expenseSubaccount = default(StringValue), BusinessAccountPaymentInstructionDetail paymentInstructions = default(BusinessAccountPaymentInstructionDetail), StringValue paymentMethod = default(StringValue), StringValue prepaymentAccount = default(StringValue), StringValue prepaymentSubaccount = default(StringValue), StringValue salesAccount = default(StringValue), StringValue salesSubaccount = default(StringValue), StringValue taxZone = default(StringValue), StringValue terms = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.APAccount = aPAccount;
            this.APSubaccount = aPSubaccount;
            this.CashAccount = cashAccount;
            this.ExpenseAccount = expenseAccount;
            this.ExpenseSubaccount = expenseSubaccount;
            this.PaymentInstructions = paymentInstructions;
            this.PaymentMethod = paymentMethod;
            this.PrepaymentAccount = prepaymentAccount;
            this.PrepaymentSubaccount = prepaymentSubaccount;
            this.SalesAccount = salesAccount;
            this.SalesSubaccount = salesSubaccount;
            this.TaxZone = taxZone;
            this.Terms = terms;
        }
        
        /// <summary>
        /// Gets or Sets APAccount
        /// </summary>
        [DataMember(Name="APAccount", EmitDefaultValue=false)]
        public StringValue APAccount { get; set; }

        /// <summary>
        /// Gets or Sets APSubaccount
        /// </summary>
        [DataMember(Name="APSubaccount", EmitDefaultValue=false)]
        public StringValue APSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets CashAccount
        /// </summary>
        [DataMember(Name="CashAccount", EmitDefaultValue=false)]
        public StringValue CashAccount { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseAccount
        /// </summary>
        [DataMember(Name="ExpenseAccount", EmitDefaultValue=false)]
        public StringValue ExpenseAccount { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseSubaccount
        /// </summary>
        [DataMember(Name="ExpenseSubaccount", EmitDefaultValue=false)]
        public StringValue ExpenseSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInstructions
        /// </summary>
        [DataMember(Name="PaymentInstructions", EmitDefaultValue=false)]
        public BusinessAccountPaymentInstructionDetail PaymentInstructions { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public StringValue PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PrepaymentAccount
        /// </summary>
        [DataMember(Name="PrepaymentAccount", EmitDefaultValue=false)]
        public StringValue PrepaymentAccount { get; set; }

        /// <summary>
        /// Gets or Sets PrepaymentSubaccount
        /// </summary>
        [DataMember(Name="PrepaymentSubaccount", EmitDefaultValue=false)]
        public StringValue PrepaymentSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets SalesAccount
        /// </summary>
        [DataMember(Name="SalesAccount", EmitDefaultValue=false)]
        public StringValue SalesAccount { get; set; }

        /// <summary>
        /// Gets or Sets SalesSubaccount
        /// </summary>
        [DataMember(Name="SalesSubaccount", EmitDefaultValue=false)]
        public StringValue SalesSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets TaxZone
        /// </summary>
        [DataMember(Name="TaxZone", EmitDefaultValue=false)]
        public StringValue TaxZone { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public StringValue Terms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmployeeFinancialSettings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  APAccount: ").Append(APAccount).Append("\n");
            sb.Append("  APSubaccount: ").Append(APSubaccount).Append("\n");
            sb.Append("  CashAccount: ").Append(CashAccount).Append("\n");
            sb.Append("  ExpenseAccount: ").Append(ExpenseAccount).Append("\n");
            sb.Append("  ExpenseSubaccount: ").Append(ExpenseSubaccount).Append("\n");
            sb.Append("  PaymentInstructions: ").Append(PaymentInstructions).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PrepaymentAccount: ").Append(PrepaymentAccount).Append("\n");
            sb.Append("  PrepaymentSubaccount: ").Append(PrepaymentSubaccount).Append("\n");
            sb.Append("  SalesAccount: ").Append(SalesAccount).Append("\n");
            sb.Append("  SalesSubaccount: ").Append(SalesSubaccount).Append("\n");
            sb.Append("  TaxZone: ").Append(TaxZone).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmployeeFinancialSettings);
        }

        /// <summary>
        /// Returns true if EmployeeFinancialSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EmployeeFinancialSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmployeeFinancialSettings input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.APAccount == input.APAccount ||
                    (this.APAccount != null &&
                    this.APAccount.Equals(input.APAccount))
                ) && base.Equals(input) && 
                (
                    this.APSubaccount == input.APSubaccount ||
                    (this.APSubaccount != null &&
                    this.APSubaccount.Equals(input.APSubaccount))
                ) && base.Equals(input) && 
                (
                    this.CashAccount == input.CashAccount ||
                    (this.CashAccount != null &&
                    this.CashAccount.Equals(input.CashAccount))
                ) && base.Equals(input) && 
                (
                    this.ExpenseAccount == input.ExpenseAccount ||
                    (this.ExpenseAccount != null &&
                    this.ExpenseAccount.Equals(input.ExpenseAccount))
                ) && base.Equals(input) && 
                (
                    this.ExpenseSubaccount == input.ExpenseSubaccount ||
                    (this.ExpenseSubaccount != null &&
                    this.ExpenseSubaccount.Equals(input.ExpenseSubaccount))
                ) && base.Equals(input) && 
                (
                    this.PaymentInstructions == input.PaymentInstructions ||
                    (this.PaymentInstructions != null &&
                    this.PaymentInstructions.Equals(input.PaymentInstructions))
                ) && base.Equals(input) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && base.Equals(input) && 
                (
                    this.PrepaymentAccount == input.PrepaymentAccount ||
                    (this.PrepaymentAccount != null &&
                    this.PrepaymentAccount.Equals(input.PrepaymentAccount))
                ) && base.Equals(input) && 
                (
                    this.PrepaymentSubaccount == input.PrepaymentSubaccount ||
                    (this.PrepaymentSubaccount != null &&
                    this.PrepaymentSubaccount.Equals(input.PrepaymentSubaccount))
                ) && base.Equals(input) && 
                (
                    this.SalesAccount == input.SalesAccount ||
                    (this.SalesAccount != null &&
                    this.SalesAccount.Equals(input.SalesAccount))
                ) && base.Equals(input) && 
                (
                    this.SalesSubaccount == input.SalesSubaccount ||
                    (this.SalesSubaccount != null &&
                    this.SalesSubaccount.Equals(input.SalesSubaccount))
                ) && base.Equals(input) && 
                (
                    this.TaxZone == input.TaxZone ||
                    (this.TaxZone != null &&
                    this.TaxZone.Equals(input.TaxZone))
                ) && base.Equals(input) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.APAccount != null)
                    hashCode = hashCode * 59 + this.APAccount.GetHashCode();
                if (this.APSubaccount != null)
                    hashCode = hashCode * 59 + this.APSubaccount.GetHashCode();
                if (this.CashAccount != null)
                    hashCode = hashCode * 59 + this.CashAccount.GetHashCode();
                if (this.ExpenseAccount != null)
                    hashCode = hashCode * 59 + this.ExpenseAccount.GetHashCode();
                if (this.ExpenseSubaccount != null)
                    hashCode = hashCode * 59 + this.ExpenseSubaccount.GetHashCode();
                if (this.PaymentInstructions != null)
                    hashCode = hashCode * 59 + this.PaymentInstructions.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PrepaymentAccount != null)
                    hashCode = hashCode * 59 + this.PrepaymentAccount.GetHashCode();
                if (this.PrepaymentSubaccount != null)
                    hashCode = hashCode * 59 + this.PrepaymentSubaccount.GetHashCode();
                if (this.SalesAccount != null)
                    hashCode = hashCode * 59 + this.SalesAccount.GetHashCode();
                if (this.SalesSubaccount != null)
                    hashCode = hashCode * 59 + this.SalesSubaccount.GetHashCode();
                if (this.TaxZone != null)
                    hashCode = hashCode * 59 + this.TaxZone.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
