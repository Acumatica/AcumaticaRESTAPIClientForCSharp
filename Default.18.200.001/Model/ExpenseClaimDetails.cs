/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// ExpenseClaimDetails
    /// </summary>
    [DataContract]
    public partial class ExpenseClaimDetails : Entity,  IEquatable<ExpenseClaimDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseClaimDetails" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="amountInClaimCurrency">amountInClaimCurrency.</param>
        /// <param name="aPRefNbr">aPRefNbr.</param>
        /// <param name="aRRefNbr">aRRefNbr.</param>
        /// <param name="billable">billable.</param>
        /// <param name="branch">branch.</param>
        /// <param name="claimAmount">claimAmount.</param>
        /// <param name="costCode">costCode.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="date">date.</param>
        /// <param name="description">description.</param>
        /// <param name="employeePart">employeePart.</param>
        /// <param name="expenseAccount">expenseAccount.</param>
        /// <param name="expenseItemID">expenseItemID.</param>
        /// <param name="expenseSubaccount">expenseSubaccount.</param>
        /// <param name="locationID">locationID.</param>
        /// <param name="netAmount">netAmount.</param>
        /// <param name="projectID">projectID.</param>
        /// <param name="projectTaskID">projectTaskID.</param>
        /// <param name="qty">qty.</param>
        /// <param name="refNbr">refNbr.</param>
        /// <param name="salesAccount">salesAccount.</param>
        /// <param name="salesSubaccount">salesSubaccount.</param>
        /// <param name="status">status.</param>
        /// <param name="taxAmount">taxAmount.</param>
        /// <param name="taxCategory">taxCategory.</param>
        /// <param name="taxZone">taxZone.</param>
        /// <param name="tipAmount">tipAmount.</param>
        /// <param name="unitCost">unitCost.</param>
        /// <param name="uOM">uOM.</param>
        public ExpenseClaimDetails(DecimalValue amount = default(DecimalValue), DecimalValue amountInClaimCurrency = default(DecimalValue), StringValue aPRefNbr = default(StringValue), StringValue aRRefNbr = default(StringValue), BooleanValue billable = default(BooleanValue), StringValue branch = default(StringValue), DecimalValue claimAmount = default(DecimalValue), StringValue costCode = default(StringValue), StringValue currencyID = default(StringValue), StringValue customerID = default(StringValue), DateTimeValue date = default(DateTimeValue), StringValue description = default(StringValue), DecimalValue employeePart = default(DecimalValue), StringValue expenseAccount = default(StringValue), StringValue expenseItemID = default(StringValue), StringValue expenseSubaccount = default(StringValue), StringValue locationID = default(StringValue), DecimalValue netAmount = default(DecimalValue), StringValue projectID = default(StringValue), StringValue projectTaskID = default(StringValue), DecimalValue qty = default(DecimalValue), StringValue refNbr = default(StringValue), StringValue salesAccount = default(StringValue), StringValue salesSubaccount = default(StringValue), StringValue status = default(StringValue), DecimalValue taxAmount = default(DecimalValue), StringValue taxCategory = default(StringValue), StringValue taxZone = default(StringValue), DecimalValue tipAmount = default(DecimalValue), DecimalValue unitCost = default(DecimalValue), StringValue uOM = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Amount = amount;
            this.AmountInClaimCurrency = amountInClaimCurrency;
            this.APRefNbr = aPRefNbr;
            this.ARRefNbr = aRRefNbr;
            this.Billable = billable;
            this.Branch = branch;
            this.ClaimAmount = claimAmount;
            this.CostCode = costCode;
            this.CurrencyID = currencyID;
            this.CustomerID = customerID;
            this.Date = date;
            this.Description = description;
            this.EmployeePart = employeePart;
            this.ExpenseAccount = expenseAccount;
            this.ExpenseItemID = expenseItemID;
            this.ExpenseSubaccount = expenseSubaccount;
            this.LocationID = locationID;
            this.NetAmount = netAmount;
            this.ProjectID = projectID;
            this.ProjectTaskID = projectTaskID;
            this.Qty = qty;
            this.RefNbr = refNbr;
            this.SalesAccount = salesAccount;
            this.SalesSubaccount = salesSubaccount;
            this.Status = status;
            this.TaxAmount = taxAmount;
            this.TaxCategory = taxCategory;
            this.TaxZone = taxZone;
            this.TipAmount = tipAmount;
            this.UnitCost = unitCost;
            this.UOM = uOM;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public DecimalValue Amount { get; set; }

        /// <summary>
        /// Gets or Sets AmountInClaimCurrency
        /// </summary>
        [DataMember(Name="AmountInClaimCurrency", EmitDefaultValue=false)]
        public DecimalValue AmountInClaimCurrency { get; set; }

        /// <summary>
        /// Gets or Sets APRefNbr
        /// </summary>
        [DataMember(Name="APRefNbr", EmitDefaultValue=false)]
        public StringValue APRefNbr { get; set; }

        /// <summary>
        /// Gets or Sets ARRefNbr
        /// </summary>
        [DataMember(Name="ARRefNbr", EmitDefaultValue=false)]
        public StringValue ARRefNbr { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public BooleanValue Billable { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="Branch", EmitDefaultValue=false)]
        public StringValue Branch { get; set; }

        /// <summary>
        /// Gets or Sets ClaimAmount
        /// </summary>
        [DataMember(Name="ClaimAmount", EmitDefaultValue=false)]
        public DecimalValue ClaimAmount { get; set; }

        /// <summary>
        /// Gets or Sets CostCode
        /// </summary>
        [DataMember(Name="CostCode", EmitDefaultValue=false)]
        public StringValue CostCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="CustomerID", EmitDefaultValue=false)]
        public StringValue CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets EmployeePart
        /// </summary>
        [DataMember(Name="EmployeePart", EmitDefaultValue=false)]
        public DecimalValue EmployeePart { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseAccount
        /// </summary>
        [DataMember(Name="ExpenseAccount", EmitDefaultValue=false)]
        public StringValue ExpenseAccount { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseItemID
        /// </summary>
        [DataMember(Name="ExpenseItemID", EmitDefaultValue=false)]
        public StringValue ExpenseItemID { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseSubaccount
        /// </summary>
        [DataMember(Name="ExpenseSubaccount", EmitDefaultValue=false)]
        public StringValue ExpenseSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="LocationID", EmitDefaultValue=false)]
        public StringValue LocationID { get; set; }

        /// <summary>
        /// Gets or Sets NetAmount
        /// </summary>
        [DataMember(Name="NetAmount", EmitDefaultValue=false)]
        public DecimalValue NetAmount { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="ProjectID", EmitDefaultValue=false)]
        public StringValue ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTaskID
        /// </summary>
        [DataMember(Name="ProjectTaskID", EmitDefaultValue=false)]
        public StringValue ProjectTaskID { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="Qty", EmitDefaultValue=false)]
        public DecimalValue Qty { get; set; }

        /// <summary>
        /// Gets or Sets RefNbr
        /// </summary>
        [DataMember(Name="RefNbr", EmitDefaultValue=false)]
        public StringValue RefNbr { get; set; }

        /// <summary>
        /// Gets or Sets SalesAccount
        /// </summary>
        [DataMember(Name="SalesAccount", EmitDefaultValue=false)]
        public StringValue SalesAccount { get; set; }

        /// <summary>
        /// Gets or Sets SalesSubaccount
        /// </summary>
        [DataMember(Name="SalesSubaccount", EmitDefaultValue=false)]
        public StringValue SalesSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TaxAmount
        /// </summary>
        [DataMember(Name="TaxAmount", EmitDefaultValue=false)]
        public DecimalValue TaxAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategory
        /// </summary>
        [DataMember(Name="TaxCategory", EmitDefaultValue=false)]
        public StringValue TaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets TaxZone
        /// </summary>
        [DataMember(Name="TaxZone", EmitDefaultValue=false)]
        public StringValue TaxZone { get; set; }

        /// <summary>
        /// Gets or Sets TipAmount
        /// </summary>
        [DataMember(Name="TipAmount", EmitDefaultValue=false)]
        public DecimalValue TipAmount { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="UnitCost", EmitDefaultValue=false)]
        public DecimalValue UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UOM
        /// </summary>
        [DataMember(Name="UOM", EmitDefaultValue=false)]
        public StringValue UOM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseClaimDetails {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountInClaimCurrency: ").Append(AmountInClaimCurrency).Append("\n");
            sb.Append("  APRefNbr: ").Append(APRefNbr).Append("\n");
            sb.Append("  ARRefNbr: ").Append(ARRefNbr).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  ClaimAmount: ").Append(ClaimAmount).Append("\n");
            sb.Append("  CostCode: ").Append(CostCode).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EmployeePart: ").Append(EmployeePart).Append("\n");
            sb.Append("  ExpenseAccount: ").Append(ExpenseAccount).Append("\n");
            sb.Append("  ExpenseItemID: ").Append(ExpenseItemID).Append("\n");
            sb.Append("  ExpenseSubaccount: ").Append(ExpenseSubaccount).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("  NetAmount: ").Append(NetAmount).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  ProjectTaskID: ").Append(ProjectTaskID).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  RefNbr: ").Append(RefNbr).Append("\n");
            sb.Append("  SalesAccount: ").Append(SalesAccount).Append("\n");
            sb.Append("  SalesSubaccount: ").Append(SalesSubaccount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  TaxZone: ").Append(TaxZone).Append("\n");
            sb.Append("  TipAmount: ").Append(TipAmount).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UOM: ").Append(UOM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseClaimDetails);
        }

        /// <summary>
        /// Returns true if ExpenseClaimDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseClaimDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseClaimDetails input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && base.Equals(input) && 
                (
                    this.AmountInClaimCurrency == input.AmountInClaimCurrency ||
                    (this.AmountInClaimCurrency != null &&
                    this.AmountInClaimCurrency.Equals(input.AmountInClaimCurrency))
                ) && base.Equals(input) && 
                (
                    this.APRefNbr == input.APRefNbr ||
                    (this.APRefNbr != null &&
                    this.APRefNbr.Equals(input.APRefNbr))
                ) && base.Equals(input) && 
                (
                    this.ARRefNbr == input.ARRefNbr ||
                    (this.ARRefNbr != null &&
                    this.ARRefNbr.Equals(input.ARRefNbr))
                ) && base.Equals(input) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && base.Equals(input) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && base.Equals(input) && 
                (
                    this.ClaimAmount == input.ClaimAmount ||
                    (this.ClaimAmount != null &&
                    this.ClaimAmount.Equals(input.ClaimAmount))
                ) && base.Equals(input) && 
                (
                    this.CostCode == input.CostCode ||
                    (this.CostCode != null &&
                    this.CostCode.Equals(input.CostCode))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.EmployeePart == input.EmployeePart ||
                    (this.EmployeePart != null &&
                    this.EmployeePart.Equals(input.EmployeePart))
                ) && base.Equals(input) && 
                (
                    this.ExpenseAccount == input.ExpenseAccount ||
                    (this.ExpenseAccount != null &&
                    this.ExpenseAccount.Equals(input.ExpenseAccount))
                ) && base.Equals(input) && 
                (
                    this.ExpenseItemID == input.ExpenseItemID ||
                    (this.ExpenseItemID != null &&
                    this.ExpenseItemID.Equals(input.ExpenseItemID))
                ) && base.Equals(input) && 
                (
                    this.ExpenseSubaccount == input.ExpenseSubaccount ||
                    (this.ExpenseSubaccount != null &&
                    this.ExpenseSubaccount.Equals(input.ExpenseSubaccount))
                ) && base.Equals(input) && 
                (
                    this.LocationID == input.LocationID ||
                    (this.LocationID != null &&
                    this.LocationID.Equals(input.LocationID))
                ) && base.Equals(input) && 
                (
                    this.NetAmount == input.NetAmount ||
                    (this.NetAmount != null &&
                    this.NetAmount.Equals(input.NetAmount))
                ) && base.Equals(input) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && base.Equals(input) && 
                (
                    this.ProjectTaskID == input.ProjectTaskID ||
                    (this.ProjectTaskID != null &&
                    this.ProjectTaskID.Equals(input.ProjectTaskID))
                ) && base.Equals(input) && 
                (
                    this.Qty == input.Qty ||
                    (this.Qty != null &&
                    this.Qty.Equals(input.Qty))
                ) && base.Equals(input) && 
                (
                    this.RefNbr == input.RefNbr ||
                    (this.RefNbr != null &&
                    this.RefNbr.Equals(input.RefNbr))
                ) && base.Equals(input) && 
                (
                    this.SalesAccount == input.SalesAccount ||
                    (this.SalesAccount != null &&
                    this.SalesAccount.Equals(input.SalesAccount))
                ) && base.Equals(input) && 
                (
                    this.SalesSubaccount == input.SalesSubaccount ||
                    (this.SalesSubaccount != null &&
                    this.SalesSubaccount.Equals(input.SalesSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) && base.Equals(input) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                ) && base.Equals(input) && 
                (
                    this.TaxZone == input.TaxZone ||
                    (this.TaxZone != null &&
                    this.TaxZone.Equals(input.TaxZone))
                ) && base.Equals(input) && 
                (
                    this.TipAmount == input.TipAmount ||
                    (this.TipAmount != null &&
                    this.TipAmount.Equals(input.TipAmount))
                ) && base.Equals(input) && 
                (
                    this.UnitCost == input.UnitCost ||
                    (this.UnitCost != null &&
                    this.UnitCost.Equals(input.UnitCost))
                ) && base.Equals(input) && 
                (
                    this.UOM == input.UOM ||
                    (this.UOM != null &&
                    this.UOM.Equals(input.UOM))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AmountInClaimCurrency != null)
                    hashCode = hashCode * 59 + this.AmountInClaimCurrency.GetHashCode();
                if (this.APRefNbr != null)
                    hashCode = hashCode * 59 + this.APRefNbr.GetHashCode();
                if (this.ARRefNbr != null)
                    hashCode = hashCode * 59 + this.ARRefNbr.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.ClaimAmount != null)
                    hashCode = hashCode * 59 + this.ClaimAmount.GetHashCode();
                if (this.CostCode != null)
                    hashCode = hashCode * 59 + this.CostCode.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EmployeePart != null)
                    hashCode = hashCode * 59 + this.EmployeePart.GetHashCode();
                if (this.ExpenseAccount != null)
                    hashCode = hashCode * 59 + this.ExpenseAccount.GetHashCode();
                if (this.ExpenseItemID != null)
                    hashCode = hashCode * 59 + this.ExpenseItemID.GetHashCode();
                if (this.ExpenseSubaccount != null)
                    hashCode = hashCode * 59 + this.ExpenseSubaccount.GetHashCode();
                if (this.LocationID != null)
                    hashCode = hashCode * 59 + this.LocationID.GetHashCode();
                if (this.NetAmount != null)
                    hashCode = hashCode * 59 + this.NetAmount.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.ProjectTaskID != null)
                    hashCode = hashCode * 59 + this.ProjectTaskID.GetHashCode();
                if (this.Qty != null)
                    hashCode = hashCode * 59 + this.Qty.GetHashCode();
                if (this.RefNbr != null)
                    hashCode = hashCode * 59 + this.RefNbr.GetHashCode();
                if (this.SalesAccount != null)
                    hashCode = hashCode * 59 + this.SalesAccount.GetHashCode();
                if (this.SalesSubaccount != null)
                    hashCode = hashCode * 59 + this.SalesSubaccount.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                if (this.TaxZone != null)
                    hashCode = hashCode * 59 + this.TaxZone.GetHashCode();
                if (this.TipAmount != null)
                    hashCode = hashCode * 59 + this.TipAmount.GetHashCode();
                if (this.UnitCost != null)
                    hashCode = hashCode * 59 + this.UnitCost.GetHashCode();
                if (this.UOM != null)
                    hashCode = hashCode * 59 + this.UOM.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
