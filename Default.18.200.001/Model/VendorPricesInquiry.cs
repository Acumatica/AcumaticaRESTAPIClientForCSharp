/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// VendorPricesInquiry
    /// </summary>
    [DataContract]
    public partial class VendorPricesInquiry : Entity,  IEquatable<VendorPricesInquiry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorPricesInquiry" /> class.
        /// </summary>
        /// <param name="inventoryID">inventoryID.</param>
        /// <param name="itemClass">itemClass.</param>
        /// <param name="productManager">productManager.</param>
        /// <param name="productWorkgroup">productWorkgroup.</param>
        /// <param name="vendor">vendor.</param>
        /// <param name="vendorPriceDetails">vendorPriceDetails.</param>
        public VendorPricesInquiry(StringValue inventoryID = default(StringValue), StringValue itemClass = default(StringValue), StringValue productManager = default(StringValue), StringValue productWorkgroup = default(StringValue), StringValue vendor = default(StringValue), List<VendorPriceDetail> vendorPriceDetails = default(List<VendorPriceDetail>), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.InventoryID = inventoryID;
            this.ItemClass = itemClass;
            this.ProductManager = productManager;
            this.ProductWorkgroup = productWorkgroup;
            this.Vendor = vendor;
            this.VendorPriceDetails = vendorPriceDetails;
        }
        
        /// <summary>
        /// Gets or Sets InventoryID
        /// </summary>
        [DataMember(Name="InventoryID", EmitDefaultValue=false)]
        public StringValue InventoryID { get; set; }

        /// <summary>
        /// Gets or Sets ItemClass
        /// </summary>
        [DataMember(Name="ItemClass", EmitDefaultValue=false)]
        public StringValue ItemClass { get; set; }

        /// <summary>
        /// Gets or Sets ProductManager
        /// </summary>
        [DataMember(Name="ProductManager", EmitDefaultValue=false)]
        public StringValue ProductManager { get; set; }

        /// <summary>
        /// Gets or Sets ProductWorkgroup
        /// </summary>
        [DataMember(Name="ProductWorkgroup", EmitDefaultValue=false)]
        public StringValue ProductWorkgroup { get; set; }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="Vendor", EmitDefaultValue=false)]
        public StringValue Vendor { get; set; }

        /// <summary>
        /// Gets or Sets VendorPriceDetails
        /// </summary>
        [DataMember(Name="VendorPriceDetails", EmitDefaultValue=false)]
        public List<VendorPriceDetail> VendorPriceDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VendorPricesInquiry {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  InventoryID: ").Append(InventoryID).Append("\n");
            sb.Append("  ItemClass: ").Append(ItemClass).Append("\n");
            sb.Append("  ProductManager: ").Append(ProductManager).Append("\n");
            sb.Append("  ProductWorkgroup: ").Append(ProductWorkgroup).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  VendorPriceDetails: ").Append(VendorPriceDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorPricesInquiry);
        }

        /// <summary>
        /// Returns true if VendorPricesInquiry instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorPricesInquiry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorPricesInquiry input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.InventoryID == input.InventoryID ||
                    (this.InventoryID != null &&
                    this.InventoryID.Equals(input.InventoryID))
                ) && base.Equals(input) && 
                (
                    this.ItemClass == input.ItemClass ||
                    (this.ItemClass != null &&
                    this.ItemClass.Equals(input.ItemClass))
                ) && base.Equals(input) && 
                (
                    this.ProductManager == input.ProductManager ||
                    (this.ProductManager != null &&
                    this.ProductManager.Equals(input.ProductManager))
                ) && base.Equals(input) && 
                (
                    this.ProductWorkgroup == input.ProductWorkgroup ||
                    (this.ProductWorkgroup != null &&
                    this.ProductWorkgroup.Equals(input.ProductWorkgroup))
                ) && base.Equals(input) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && base.Equals(input) && 
                (
                    this.VendorPriceDetails == input.VendorPriceDetails ||
                    this.VendorPriceDetails != null &&
                    this.VendorPriceDetails.SequenceEqual(input.VendorPriceDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.InventoryID != null)
                    hashCode = hashCode * 59 + this.InventoryID.GetHashCode();
                if (this.ItemClass != null)
                    hashCode = hashCode * 59 + this.ItemClass.GetHashCode();
                if (this.ProductManager != null)
                    hashCode = hashCode * 59 + this.ProductManager.GetHashCode();
                if (this.ProductWorkgroup != null)
                    hashCode = hashCode * 59 + this.ProductWorkgroup.GetHashCode();
                if (this.Vendor != null)
                    hashCode = hashCode * 59 + this.Vendor.GetHashCode();
                if (this.VendorPriceDetails != null)
                    hashCode = hashCode * 59 + this.VendorPriceDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
