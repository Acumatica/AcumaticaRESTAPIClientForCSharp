/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// Case
    /// </summary>
    [DataContract]
    public partial class Case : Entity,  IEquatable<Case>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Case" /> class.
        /// </summary>
        /// <param name="activities">activities.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="billable">billable.</param>
        /// <param name="billableOvertime">billableOvertime.</param>
        /// <param name="billableTime">billableTime.</param>
        /// <param name="businessAccount">businessAccount.</param>
        /// <param name="businessAccountName">businessAccountName.</param>
        /// <param name="caseID">caseID.</param>
        /// <param name="classID">classID.</param>
        /// <param name="closingDate">closingDate.</param>
        /// <param name="contactDisplayName">contactDisplayName.</param>
        /// <param name="contactID">contactID.</param>
        /// <param name="contract">contract.</param>
        /// <param name="dateReported">dateReported.</param>
        /// <param name="description">description.</param>
        /// <param name="initialResponse">initialResponse.</param>
        /// <param name="lastActivityDate">lastActivityDate.</param>
        /// <param name="lastIncomingActivity">lastIncomingActivity.</param>
        /// <param name="lastOutgoingActivity">lastOutgoingActivity.</param>
        /// <param name="location">location.</param>
        /// <param name="manualOverride">manualOverride.</param>
        /// <param name="overtimeSpent">overtimeSpent.</param>
        /// <param name="owner">owner.</param>
        /// <param name="ownerEmployeeName">ownerEmployeeName.</param>
        /// <param name="priority">priority.</param>
        /// <param name="reason">reason.</param>
        /// <param name="relatedCases">relatedCases.</param>
        /// <param name="relations">relations.</param>
        /// <param name="resolutionTime">resolutionTime.</param>
        /// <param name="severity">severity.</param>
        /// <param name="sLA">sLA.</param>
        /// <param name="status">status.</param>
        /// <param name="subject">subject.</param>
        /// <param name="timeSpent">timeSpent.</param>
        /// <param name="workgroup">workgroup.</param>
        /// <param name="workgroupDescription">workgroupDescription.</param>
        public Case(List<CaseActivityDetail> activities = default(List<CaseActivityDetail>), List<AttributeDetail> attributes = default(List<AttributeDetail>), BooleanValue billable = default(BooleanValue), IntValue billableOvertime = default(IntValue), IntValue billableTime = default(IntValue), StringValue businessAccount = default(StringValue), StringValue businessAccountName = default(StringValue), StringValue caseID = default(StringValue), StringValue classID = default(StringValue), DateTimeValue closingDate = default(DateTimeValue), StringValue contactDisplayName = default(StringValue), IntValue contactID = default(IntValue), StringValue contract = default(StringValue), DateTimeValue dateReported = default(DateTimeValue), StringValue description = default(StringValue), StringValue initialResponse = default(StringValue), DateTimeValue lastActivityDate = default(DateTimeValue), DateTimeValue lastIncomingActivity = default(DateTimeValue), DateTimeValue lastOutgoingActivity = default(DateTimeValue), StringValue location = default(StringValue), BooleanValue manualOverride = default(BooleanValue), StringValue overtimeSpent = default(StringValue), StringValue owner = default(StringValue), StringValue ownerEmployeeName = default(StringValue), StringValue priority = default(StringValue), StringValue reason = default(StringValue), List<CaseRelatedCase> relatedCases = default(List<CaseRelatedCase>), List<RelationDetail> relations = default(List<RelationDetail>), StringValue resolutionTime = default(StringValue), StringValue severity = default(StringValue), DateTimeValue sLA = default(DateTimeValue), StringValue status = default(StringValue), StringValue subject = default(StringValue), StringValue timeSpent = default(StringValue), StringValue workgroup = default(StringValue), StringValue workgroupDescription = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Activities = activities;
            this.Attributes = attributes;
            this.Billable = billable;
            this.BillableOvertime = billableOvertime;
            this.BillableTime = billableTime;
            this.BusinessAccount = businessAccount;
            this.BusinessAccountName = businessAccountName;
            this.CaseID = caseID;
            this.ClassID = classID;
            this.ClosingDate = closingDate;
            this.ContactDisplayName = contactDisplayName;
            this.ContactID = contactID;
            this.Contract = contract;
            this.DateReported = dateReported;
            this.Description = description;
            this.InitialResponse = initialResponse;
            this.LastActivityDate = lastActivityDate;
            this.LastIncomingActivity = lastIncomingActivity;
            this.LastOutgoingActivity = lastOutgoingActivity;
            this.Location = location;
            this.ManualOverride = manualOverride;
            this.OvertimeSpent = overtimeSpent;
            this.Owner = owner;
            this.OwnerEmployeeName = ownerEmployeeName;
            this.Priority = priority;
            this.Reason = reason;
            this.RelatedCases = relatedCases;
            this.Relations = relations;
            this.ResolutionTime = resolutionTime;
            this.Severity = severity;
            this.SLA = sLA;
            this.Status = status;
            this.Subject = subject;
            this.TimeSpent = timeSpent;
            this.Workgroup = workgroup;
            this.WorkgroupDescription = workgroupDescription;
        }
        
        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [DataMember(Name="Activities", EmitDefaultValue=false)]
        public List<CaseActivityDetail> Activities { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<AttributeDetail> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public BooleanValue Billable { get; set; }

        /// <summary>
        /// Gets or Sets BillableOvertime
        /// </summary>
        [DataMember(Name="BillableOvertime", EmitDefaultValue=false)]
        public IntValue BillableOvertime { get; set; }

        /// <summary>
        /// Gets or Sets BillableTime
        /// </summary>
        [DataMember(Name="BillableTime", EmitDefaultValue=false)]
        public IntValue BillableTime { get; set; }

        /// <summary>
        /// Gets or Sets BusinessAccount
        /// </summary>
        [DataMember(Name="BusinessAccount", EmitDefaultValue=false)]
        public StringValue BusinessAccount { get; set; }

        /// <summary>
        /// Gets or Sets BusinessAccountName
        /// </summary>
        [DataMember(Name="BusinessAccountName", EmitDefaultValue=false)]
        public StringValue BusinessAccountName { get; set; }

        /// <summary>
        /// Gets or Sets CaseID
        /// </summary>
        [DataMember(Name="CaseID", EmitDefaultValue=false)]
        public StringValue CaseID { get; set; }

        /// <summary>
        /// Gets or Sets ClassID
        /// </summary>
        [DataMember(Name="ClassID", EmitDefaultValue=false)]
        public StringValue ClassID { get; set; }

        /// <summary>
        /// Gets or Sets ClosingDate
        /// </summary>
        [DataMember(Name="ClosingDate", EmitDefaultValue=false)]
        public DateTimeValue ClosingDate { get; set; }

        /// <summary>
        /// Gets or Sets ContactDisplayName
        /// </summary>
        [DataMember(Name="ContactDisplayName", EmitDefaultValue=false)]
        public StringValue ContactDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name="ContactID", EmitDefaultValue=false)]
        public IntValue ContactID { get; set; }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [DataMember(Name="Contract", EmitDefaultValue=false)]
        public StringValue Contract { get; set; }

        /// <summary>
        /// Gets or Sets DateReported
        /// </summary>
        [DataMember(Name="DateReported", EmitDefaultValue=false)]
        public DateTimeValue DateReported { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets InitialResponse
        /// </summary>
        [DataMember(Name="InitialResponse", EmitDefaultValue=false)]
        public StringValue InitialResponse { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityDate
        /// </summary>
        [DataMember(Name="LastActivityDate", EmitDefaultValue=false)]
        public DateTimeValue LastActivityDate { get; set; }

        /// <summary>
        /// Gets or Sets LastIncomingActivity
        /// </summary>
        [DataMember(Name="LastIncomingActivity", EmitDefaultValue=false)]
        public DateTimeValue LastIncomingActivity { get; set; }

        /// <summary>
        /// Gets or Sets LastOutgoingActivity
        /// </summary>
        [DataMember(Name="LastOutgoingActivity", EmitDefaultValue=false)]
        public DateTimeValue LastOutgoingActivity { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public StringValue Location { get; set; }

        /// <summary>
        /// Gets or Sets ManualOverride
        /// </summary>
        [DataMember(Name="ManualOverride", EmitDefaultValue=false)]
        public BooleanValue ManualOverride { get; set; }

        /// <summary>
        /// Gets or Sets OvertimeSpent
        /// </summary>
        [DataMember(Name="OvertimeSpent", EmitDefaultValue=false)]
        public StringValue OvertimeSpent { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public StringValue Owner { get; set; }

        /// <summary>
        /// Gets or Sets OwnerEmployeeName
        /// </summary>
        [DataMember(Name="OwnerEmployeeName", EmitDefaultValue=false)]
        public StringValue OwnerEmployeeName { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public StringValue Priority { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public StringValue Reason { get; set; }

        /// <summary>
        /// Gets or Sets RelatedCases
        /// </summary>
        [DataMember(Name="RelatedCases", EmitDefaultValue=false)]
        public List<CaseRelatedCase> RelatedCases { get; set; }

        /// <summary>
        /// Gets or Sets Relations
        /// </summary>
        [DataMember(Name="Relations", EmitDefaultValue=false)]
        public List<RelationDetail> Relations { get; set; }

        /// <summary>
        /// Gets or Sets ResolutionTime
        /// </summary>
        [DataMember(Name="ResolutionTime", EmitDefaultValue=false)]
        public StringValue ResolutionTime { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="Severity", EmitDefaultValue=false)]
        public StringValue Severity { get; set; }

        /// <summary>
        /// Gets or Sets SLA
        /// </summary>
        [DataMember(Name="SLA", EmitDefaultValue=false)]
        public DateTimeValue SLA { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public StringValue Subject { get; set; }

        /// <summary>
        /// Gets or Sets TimeSpent
        /// </summary>
        [DataMember(Name="TimeSpent", EmitDefaultValue=false)]
        public StringValue TimeSpent { get; set; }

        /// <summary>
        /// Gets or Sets Workgroup
        /// </summary>
        [DataMember(Name="Workgroup", EmitDefaultValue=false)]
        public StringValue Workgroup { get; set; }

        /// <summary>
        /// Gets or Sets WorkgroupDescription
        /// </summary>
        [DataMember(Name="WorkgroupDescription", EmitDefaultValue=false)]
        public StringValue WorkgroupDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Case {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  BillableOvertime: ").Append(BillableOvertime).Append("\n");
            sb.Append("  BillableTime: ").Append(BillableTime).Append("\n");
            sb.Append("  BusinessAccount: ").Append(BusinessAccount).Append("\n");
            sb.Append("  BusinessAccountName: ").Append(BusinessAccountName).Append("\n");
            sb.Append("  CaseID: ").Append(CaseID).Append("\n");
            sb.Append("  ClassID: ").Append(ClassID).Append("\n");
            sb.Append("  ClosingDate: ").Append(ClosingDate).Append("\n");
            sb.Append("  ContactDisplayName: ").Append(ContactDisplayName).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  DateReported: ").Append(DateReported).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InitialResponse: ").Append(InitialResponse).Append("\n");
            sb.Append("  LastActivityDate: ").Append(LastActivityDate).Append("\n");
            sb.Append("  LastIncomingActivity: ").Append(LastIncomingActivity).Append("\n");
            sb.Append("  LastOutgoingActivity: ").Append(LastOutgoingActivity).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ManualOverride: ").Append(ManualOverride).Append("\n");
            sb.Append("  OvertimeSpent: ").Append(OvertimeSpent).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OwnerEmployeeName: ").Append(OwnerEmployeeName).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RelatedCases: ").Append(RelatedCases).Append("\n");
            sb.Append("  Relations: ").Append(Relations).Append("\n");
            sb.Append("  ResolutionTime: ").Append(ResolutionTime).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  SLA: ").Append(SLA).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TimeSpent: ").Append(TimeSpent).Append("\n");
            sb.Append("  Workgroup: ").Append(Workgroup).Append("\n");
            sb.Append("  WorkgroupDescription: ").Append(WorkgroupDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Case);
        }

        /// <summary>
        /// Returns true if Case instances are equal
        /// </summary>
        /// <param name="input">Instance of Case to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Case input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Activities == input.Activities ||
                    this.Activities != null &&
                    this.Activities.SequenceEqual(input.Activities)
                ) && base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && base.Equals(input) && 
                (
                    this.BillableOvertime == input.BillableOvertime ||
                    (this.BillableOvertime != null &&
                    this.BillableOvertime.Equals(input.BillableOvertime))
                ) && base.Equals(input) && 
                (
                    this.BillableTime == input.BillableTime ||
                    (this.BillableTime != null &&
                    this.BillableTime.Equals(input.BillableTime))
                ) && base.Equals(input) && 
                (
                    this.BusinessAccount == input.BusinessAccount ||
                    (this.BusinessAccount != null &&
                    this.BusinessAccount.Equals(input.BusinessAccount))
                ) && base.Equals(input) && 
                (
                    this.BusinessAccountName == input.BusinessAccountName ||
                    (this.BusinessAccountName != null &&
                    this.BusinessAccountName.Equals(input.BusinessAccountName))
                ) && base.Equals(input) && 
                (
                    this.CaseID == input.CaseID ||
                    (this.CaseID != null &&
                    this.CaseID.Equals(input.CaseID))
                ) && base.Equals(input) && 
                (
                    this.ClassID == input.ClassID ||
                    (this.ClassID != null &&
                    this.ClassID.Equals(input.ClassID))
                ) && base.Equals(input) && 
                (
                    this.ClosingDate == input.ClosingDate ||
                    (this.ClosingDate != null &&
                    this.ClosingDate.Equals(input.ClosingDate))
                ) && base.Equals(input) && 
                (
                    this.ContactDisplayName == input.ContactDisplayName ||
                    (this.ContactDisplayName != null &&
                    this.ContactDisplayName.Equals(input.ContactDisplayName))
                ) && base.Equals(input) && 
                (
                    this.ContactID == input.ContactID ||
                    (this.ContactID != null &&
                    this.ContactID.Equals(input.ContactID))
                ) && base.Equals(input) && 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && base.Equals(input) && 
                (
                    this.DateReported == input.DateReported ||
                    (this.DateReported != null &&
                    this.DateReported.Equals(input.DateReported))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.InitialResponse == input.InitialResponse ||
                    (this.InitialResponse != null &&
                    this.InitialResponse.Equals(input.InitialResponse))
                ) && base.Equals(input) && 
                (
                    this.LastActivityDate == input.LastActivityDate ||
                    (this.LastActivityDate != null &&
                    this.LastActivityDate.Equals(input.LastActivityDate))
                ) && base.Equals(input) && 
                (
                    this.LastIncomingActivity == input.LastIncomingActivity ||
                    (this.LastIncomingActivity != null &&
                    this.LastIncomingActivity.Equals(input.LastIncomingActivity))
                ) && base.Equals(input) && 
                (
                    this.LastOutgoingActivity == input.LastOutgoingActivity ||
                    (this.LastOutgoingActivity != null &&
                    this.LastOutgoingActivity.Equals(input.LastOutgoingActivity))
                ) && base.Equals(input) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && base.Equals(input) && 
                (
                    this.ManualOverride == input.ManualOverride ||
                    (this.ManualOverride != null &&
                    this.ManualOverride.Equals(input.ManualOverride))
                ) && base.Equals(input) && 
                (
                    this.OvertimeSpent == input.OvertimeSpent ||
                    (this.OvertimeSpent != null &&
                    this.OvertimeSpent.Equals(input.OvertimeSpent))
                ) && base.Equals(input) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && base.Equals(input) && 
                (
                    this.OwnerEmployeeName == input.OwnerEmployeeName ||
                    (this.OwnerEmployeeName != null &&
                    this.OwnerEmployeeName.Equals(input.OwnerEmployeeName))
                ) && base.Equals(input) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && base.Equals(input) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && base.Equals(input) && 
                (
                    this.RelatedCases == input.RelatedCases ||
                    this.RelatedCases != null &&
                    this.RelatedCases.SequenceEqual(input.RelatedCases)
                ) && base.Equals(input) && 
                (
                    this.Relations == input.Relations ||
                    this.Relations != null &&
                    this.Relations.SequenceEqual(input.Relations)
                ) && base.Equals(input) && 
                (
                    this.ResolutionTime == input.ResolutionTime ||
                    (this.ResolutionTime != null &&
                    this.ResolutionTime.Equals(input.ResolutionTime))
                ) && base.Equals(input) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && base.Equals(input) && 
                (
                    this.SLA == input.SLA ||
                    (this.SLA != null &&
                    this.SLA.Equals(input.SLA))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && base.Equals(input) && 
                (
                    this.TimeSpent == input.TimeSpent ||
                    (this.TimeSpent != null &&
                    this.TimeSpent.Equals(input.TimeSpent))
                ) && base.Equals(input) && 
                (
                    this.Workgroup == input.Workgroup ||
                    (this.Workgroup != null &&
                    this.Workgroup.Equals(input.Workgroup))
                ) && base.Equals(input) && 
                (
                    this.WorkgroupDescription == input.WorkgroupDescription ||
                    (this.WorkgroupDescription != null &&
                    this.WorkgroupDescription.Equals(input.WorkgroupDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Activities != null)
                    hashCode = hashCode * 59 + this.Activities.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.BillableOvertime != null)
                    hashCode = hashCode * 59 + this.BillableOvertime.GetHashCode();
                if (this.BillableTime != null)
                    hashCode = hashCode * 59 + this.BillableTime.GetHashCode();
                if (this.BusinessAccount != null)
                    hashCode = hashCode * 59 + this.BusinessAccount.GetHashCode();
                if (this.BusinessAccountName != null)
                    hashCode = hashCode * 59 + this.BusinessAccountName.GetHashCode();
                if (this.CaseID != null)
                    hashCode = hashCode * 59 + this.CaseID.GetHashCode();
                if (this.ClassID != null)
                    hashCode = hashCode * 59 + this.ClassID.GetHashCode();
                if (this.ClosingDate != null)
                    hashCode = hashCode * 59 + this.ClosingDate.GetHashCode();
                if (this.ContactDisplayName != null)
                    hashCode = hashCode * 59 + this.ContactDisplayName.GetHashCode();
                if (this.ContactID != null)
                    hashCode = hashCode * 59 + this.ContactID.GetHashCode();
                if (this.Contract != null)
                    hashCode = hashCode * 59 + this.Contract.GetHashCode();
                if (this.DateReported != null)
                    hashCode = hashCode * 59 + this.DateReported.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.InitialResponse != null)
                    hashCode = hashCode * 59 + this.InitialResponse.GetHashCode();
                if (this.LastActivityDate != null)
                    hashCode = hashCode * 59 + this.LastActivityDate.GetHashCode();
                if (this.LastIncomingActivity != null)
                    hashCode = hashCode * 59 + this.LastIncomingActivity.GetHashCode();
                if (this.LastOutgoingActivity != null)
                    hashCode = hashCode * 59 + this.LastOutgoingActivity.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.ManualOverride != null)
                    hashCode = hashCode * 59 + this.ManualOverride.GetHashCode();
                if (this.OvertimeSpent != null)
                    hashCode = hashCode * 59 + this.OvertimeSpent.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.OwnerEmployeeName != null)
                    hashCode = hashCode * 59 + this.OwnerEmployeeName.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.RelatedCases != null)
                    hashCode = hashCode * 59 + this.RelatedCases.GetHashCode();
                if (this.Relations != null)
                    hashCode = hashCode * 59 + this.Relations.GetHashCode();
                if (this.ResolutionTime != null)
                    hashCode = hashCode * 59 + this.ResolutionTime.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.SLA != null)
                    hashCode = hashCode * 59 + this.SLA.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.TimeSpent != null)
                    hashCode = hashCode * 59 + this.TimeSpent.GetHashCode();
                if (this.Workgroup != null)
                    hashCode = hashCode * 59 + this.Workgroup.GetHashCode();
                if (this.WorkgroupDescription != null)
                    hashCode = hashCode * 59 + this.WorkgroupDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
