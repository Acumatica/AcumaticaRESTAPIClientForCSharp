/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// InventoryReceipt
    /// </summary>
    [DataContract]
    public partial class InventoryReceipt : Entity,  IEquatable<InventoryReceipt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryReceipt" /> class.
        /// </summary>
        /// <param name="controlCost">controlCost.</param>
        /// <param name="controlQty">controlQty.</param>
        /// <param name="date">date.</param>
        /// <param name="description">description.</param>
        /// <param name="details">details.</param>
        /// <param name="hold">hold.</param>
        /// <param name="postPeriod">postPeriod.</param>
        /// <param name="referenceNbr">referenceNbr.</param>
        /// <param name="status">status.</param>
        /// <param name="totalCost">totalCost.</param>
        /// <param name="totalQty">totalQty.</param>
        /// <param name="transferNbr">transferNbr.</param>
        public InventoryReceipt(DecimalValue controlCost = default(DecimalValue), DecimalValue controlQty = default(DecimalValue), DateTimeValue date = default(DateTimeValue), StringValue description = default(StringValue), List<InventoryReceiptDetail> details = default(List<InventoryReceiptDetail>), BooleanValue hold = default(BooleanValue), StringValue postPeriod = default(StringValue), StringValue referenceNbr = default(StringValue), StringValue status = default(StringValue), DecimalValue totalCost = default(DecimalValue), DecimalValue totalQty = default(DecimalValue), StringValue transferNbr = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ControlCost = controlCost;
            this.ControlQty = controlQty;
            this.Date = date;
            this.Description = description;
            this.Details = details;
            this.Hold = hold;
            this.PostPeriod = postPeriod;
            this.ReferenceNbr = referenceNbr;
            this.Status = status;
            this.TotalCost = totalCost;
            this.TotalQty = totalQty;
            this.TransferNbr = transferNbr;
        }
        
        /// <summary>
        /// Gets or Sets ControlCost
        /// </summary>
        [DataMember(Name="ControlCost", EmitDefaultValue=false)]
        public DecimalValue ControlCost { get; set; }

        /// <summary>
        /// Gets or Sets ControlQty
        /// </summary>
        [DataMember(Name="ControlQty", EmitDefaultValue=false)]
        public DecimalValue ControlQty { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public List<InventoryReceiptDetail> Details { get; set; }

        /// <summary>
        /// Gets or Sets Hold
        /// </summary>
        [DataMember(Name="Hold", EmitDefaultValue=false)]
        public BooleanValue Hold { get; set; }

        /// <summary>
        /// Gets or Sets PostPeriod
        /// </summary>
        [DataMember(Name="PostPeriod", EmitDefaultValue=false)]
        public StringValue PostPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNbr
        /// </summary>
        [DataMember(Name="ReferenceNbr", EmitDefaultValue=false)]
        public StringValue ReferenceNbr { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TotalCost
        /// </summary>
        [DataMember(Name="TotalCost", EmitDefaultValue=false)]
        public DecimalValue TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalQty
        /// </summary>
        [DataMember(Name="TotalQty", EmitDefaultValue=false)]
        public DecimalValue TotalQty { get; set; }

        /// <summary>
        /// Gets or Sets TransferNbr
        /// </summary>
        [DataMember(Name="TransferNbr", EmitDefaultValue=false)]
        public StringValue TransferNbr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryReceipt {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ControlCost: ").Append(ControlCost).Append("\n");
            sb.Append("  ControlQty: ").Append(ControlQty).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  PostPeriod: ").Append(PostPeriod).Append("\n");
            sb.Append("  ReferenceNbr: ").Append(ReferenceNbr).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  TotalQty: ").Append(TotalQty).Append("\n");
            sb.Append("  TransferNbr: ").Append(TransferNbr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryReceipt);
        }

        /// <summary>
        /// Returns true if InventoryReceipt instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryReceipt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryReceipt input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ControlCost == input.ControlCost ||
                    (this.ControlCost != null &&
                    this.ControlCost.Equals(input.ControlCost))
                ) && base.Equals(input) && 
                (
                    this.ControlQty == input.ControlQty ||
                    (this.ControlQty != null &&
                    this.ControlQty.Equals(input.ControlQty))
                ) && base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && base.Equals(input) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && base.Equals(input) && 
                (
                    this.PostPeriod == input.PostPeriod ||
                    (this.PostPeriod != null &&
                    this.PostPeriod.Equals(input.PostPeriod))
                ) && base.Equals(input) && 
                (
                    this.ReferenceNbr == input.ReferenceNbr ||
                    (this.ReferenceNbr != null &&
                    this.ReferenceNbr.Equals(input.ReferenceNbr))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && base.Equals(input) && 
                (
                    this.TotalQty == input.TotalQty ||
                    (this.TotalQty != null &&
                    this.TotalQty.Equals(input.TotalQty))
                ) && base.Equals(input) && 
                (
                    this.TransferNbr == input.TransferNbr ||
                    (this.TransferNbr != null &&
                    this.TransferNbr.Equals(input.TransferNbr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ControlCost != null)
                    hashCode = hashCode * 59 + this.ControlCost.GetHashCode();
                if (this.ControlQty != null)
                    hashCode = hashCode * 59 + this.ControlQty.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Hold != null)
                    hashCode = hashCode * 59 + this.Hold.GetHashCode();
                if (this.PostPeriod != null)
                    hashCode = hashCode * 59 + this.PostPeriod.GetHashCode();
                if (this.ReferenceNbr != null)
                    hashCode = hashCode * 59 + this.ReferenceNbr.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.TotalQty != null)
                    hashCode = hashCode * 59 + this.TotalQty.GetHashCode();
                if (this.TransferNbr != null)
                    hashCode = hashCode * 59 + this.TransferNbr.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
