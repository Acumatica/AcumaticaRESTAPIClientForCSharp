/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// SalesOrder
    /// </summary>
    [DataContract]
    public partial class SalesOrder : Entity,  IEquatable<SalesOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrder" /> class.
        /// </summary>
        /// <param name="approved">approved.</param>
        /// <param name="baseCurrencyID">baseCurrencyID.</param>
        /// <param name="billToAddress">billToAddress.</param>
        /// <param name="billToAddressOverride">billToAddressOverride.</param>
        /// <param name="billToAddressValidated">billToAddressValidated.</param>
        /// <param name="billToContact">billToContact.</param>
        /// <param name="billToContactOverride">billToContactOverride.</param>
        /// <param name="cashAccount">cashAccount.</param>
        /// <param name="commissions">commissions.</param>
        /// <param name="controlTotal">controlTotal.</param>
        /// <param name="creditHold">creditHold.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="currencyRate">currencyRate.</param>
        /// <param name="currencyRateTypeID">currencyRateTypeID.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="customerOrder">customerOrder.</param>
        /// <param name="date">date.</param>
        /// <param name="description">description.</param>
        /// <param name="destinationWarehouseID">destinationWarehouseID.</param>
        /// <param name="details">details.</param>
        /// <param name="disableAutomaticDiscountUpdate">disableAutomaticDiscountUpdate.</param>
        /// <param name="discountDetails">discountDetails.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="externalRef">externalRef.</param>
        /// <param name="financialSettings">financialSettings.</param>
        /// <param name="hold">hold.</param>
        /// <param name="isTaxValid">isTaxValid.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="locationID">locationID.</param>
        /// <param name="newCard">newCard.</param>
        /// <param name="orderedQty">orderedQty.</param>
        /// <param name="orderNbr">orderNbr.</param>
        /// <param name="orderTotal">orderTotal.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="paymentCardIdentifier">paymentCardIdentifier.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="paymentProfileID">paymentProfileID.</param>
        /// <param name="paymentRef">paymentRef.</param>
        /// <param name="payments">payments.</param>
        /// <param name="preAuthorizationNbr">preAuthorizationNbr.</param>
        /// <param name="preAuthorizedAmount">preAuthorizedAmount.</param>
        /// <param name="preferredWarehouseID">preferredWarehouseID.</param>
        /// <param name="project">project.</param>
        /// <param name="reciprocalRate">reciprocalRate.</param>
        /// <param name="requestedOn">requestedOn.</param>
        /// <param name="shipments">shipments.</param>
        /// <param name="shippingSettings">shippingSettings.</param>
        /// <param name="shipToAddress">shipToAddress.</param>
        /// <param name="shipToAddressOverride">shipToAddressOverride.</param>
        /// <param name="shipToAddressValidated">shipToAddressValidated.</param>
        /// <param name="shipToContact">shipToContact.</param>
        /// <param name="shipToContactOverride">shipToContactOverride.</param>
        /// <param name="shipVia">shipVia.</param>
        /// <param name="status">status.</param>
        /// <param name="taxDetails">taxDetails.</param>
        /// <param name="taxTotal">taxTotal.</param>
        /// <param name="totals">totals.</param>
        /// <param name="vATExemptTotal">vATExemptTotal.</param>
        /// <param name="vATTaxableTotal">vATTaxableTotal.</param>
        public SalesOrder(BooleanValue approved = default(BooleanValue), StringValue baseCurrencyID = default(StringValue), Address billToAddress = default(Address), BooleanValue billToAddressOverride = default(BooleanValue), BooleanValue billToAddressValidated = default(BooleanValue), DocContact billToContact = default(DocContact), BooleanValue billToContactOverride = default(BooleanValue), StringValue cashAccount = default(StringValue), Commissions commissions = default(Commissions), DecimalValue controlTotal = default(DecimalValue), BooleanValue creditHold = default(BooleanValue), StringValue currencyID = default(StringValue), DecimalValue currencyRate = default(DecimalValue), StringValue currencyRateTypeID = default(StringValue), StringValue customerID = default(StringValue), StringValue customerOrder = default(StringValue), DateTimeValue date = default(DateTimeValue), StringValue description = default(StringValue), StringValue destinationWarehouseID = default(StringValue), List<SalesOrderDetail> details = default(List<SalesOrderDetail>), BooleanValue disableAutomaticDiscountUpdate = default(BooleanValue), List<SalesOrdersDiscountDetails> discountDetails = default(List<SalesOrdersDiscountDetails>), DateTimeValue effectiveDate = default(DateTimeValue), StringValue externalRef = default(StringValue), FinancialSettings financialSettings = default(FinancialSettings), BooleanValue hold = default(BooleanValue), BooleanValue isTaxValid = default(BooleanValue), DateTimeValue lastModified = default(DateTimeValue), StringValue locationID = default(StringValue), BooleanValue newCard = default(BooleanValue), DecimalValue orderedQty = default(DecimalValue), StringValue orderNbr = default(StringValue), DecimalValue orderTotal = default(DecimalValue), StringValue orderType = default(StringValue), StringValue paymentCardIdentifier = default(StringValue), StringValue paymentMethod = default(StringValue), StringValue paymentProfileID = default(StringValue), StringValue paymentRef = default(StringValue), List<Payments> payments = default(List<Payments>), StringValue preAuthorizationNbr = default(StringValue), DecimalValue preAuthorizedAmount = default(DecimalValue), StringValue preferredWarehouseID = default(StringValue), StringValue project = default(StringValue), DecimalValue reciprocalRate = default(DecimalValue), DateTimeValue requestedOn = default(DateTimeValue), List<SalesOrderShipment> shipments = default(List<SalesOrderShipment>), ShippingSettings shippingSettings = default(ShippingSettings), Address shipToAddress = default(Address), BooleanValue shipToAddressOverride = default(BooleanValue), BooleanValue shipToAddressValidated = default(BooleanValue), DocContact shipToContact = default(DocContact), BooleanValue shipToContactOverride = default(BooleanValue), StringValue shipVia = default(StringValue), StringValue status = default(StringValue), List<TaxDetail> taxDetails = default(List<TaxDetail>), DecimalValue taxTotal = default(DecimalValue), Totals totals = default(Totals), DecimalValue vATExemptTotal = default(DecimalValue), DecimalValue vATTaxableTotal = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Approved = approved;
            this.BaseCurrencyID = baseCurrencyID;
            this.BillToAddress = billToAddress;
            this.BillToAddressOverride = billToAddressOverride;
            this.BillToAddressValidated = billToAddressValidated;
            this.BillToContact = billToContact;
            this.BillToContactOverride = billToContactOverride;
            this.CashAccount = cashAccount;
            this.Commissions = commissions;
            this.ControlTotal = controlTotal;
            this.CreditHold = creditHold;
            this.CurrencyID = currencyID;
            this.CurrencyRate = currencyRate;
            this.CurrencyRateTypeID = currencyRateTypeID;
            this.CustomerID = customerID;
            this.CustomerOrder = customerOrder;
            this.Date = date;
            this.Description = description;
            this.DestinationWarehouseID = destinationWarehouseID;
            this.Details = details;
            this.DisableAutomaticDiscountUpdate = disableAutomaticDiscountUpdate;
            this.DiscountDetails = discountDetails;
            this.EffectiveDate = effectiveDate;
            this.ExternalRef = externalRef;
            this.FinancialSettings = financialSettings;
            this.Hold = hold;
            this.IsTaxValid = isTaxValid;
            this.LastModified = lastModified;
            this.LocationID = locationID;
            this.NewCard = newCard;
            this.OrderedQty = orderedQty;
            this.OrderNbr = orderNbr;
            this.OrderTotal = orderTotal;
            this.OrderType = orderType;
            this.PaymentCardIdentifier = paymentCardIdentifier;
            this.PaymentMethod = paymentMethod;
            this.PaymentProfileID = paymentProfileID;
            this.PaymentRef = paymentRef;
            this.Payments = payments;
            this.PreAuthorizationNbr = preAuthorizationNbr;
            this.PreAuthorizedAmount = preAuthorizedAmount;
            this.PreferredWarehouseID = preferredWarehouseID;
            this.Project = project;
            this.ReciprocalRate = reciprocalRate;
            this.RequestedOn = requestedOn;
            this.Shipments = shipments;
            this.ShippingSettings = shippingSettings;
            this.ShipToAddress = shipToAddress;
            this.ShipToAddressOverride = shipToAddressOverride;
            this.ShipToAddressValidated = shipToAddressValidated;
            this.ShipToContact = shipToContact;
            this.ShipToContactOverride = shipToContactOverride;
            this.ShipVia = shipVia;
            this.Status = status;
            this.TaxDetails = taxDetails;
            this.TaxTotal = taxTotal;
            this.Totals = totals;
            this.VATExemptTotal = vATExemptTotal;
            this.VATTaxableTotal = vATTaxableTotal;
        }
        
        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name="Approved", EmitDefaultValue=false)]
        public BooleanValue Approved { get; set; }

        /// <summary>
        /// Gets or Sets BaseCurrencyID
        /// </summary>
        [DataMember(Name="BaseCurrencyID", EmitDefaultValue=false)]
        public StringValue BaseCurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets BillToAddress
        /// </summary>
        [DataMember(Name="BillToAddress", EmitDefaultValue=false)]
        public Address BillToAddress { get; set; }

        /// <summary>
        /// Gets or Sets BillToAddressOverride
        /// </summary>
        [DataMember(Name="BillToAddressOverride", EmitDefaultValue=false)]
        public BooleanValue BillToAddressOverride { get; set; }

        /// <summary>
        /// Gets or Sets BillToAddressValidated
        /// </summary>
        [DataMember(Name="BillToAddressValidated", EmitDefaultValue=false)]
        public BooleanValue BillToAddressValidated { get; set; }

        /// <summary>
        /// Gets or Sets BillToContact
        /// </summary>
        [DataMember(Name="BillToContact", EmitDefaultValue=false)]
        public DocContact BillToContact { get; set; }

        /// <summary>
        /// Gets or Sets BillToContactOverride
        /// </summary>
        [DataMember(Name="BillToContactOverride", EmitDefaultValue=false)]
        public BooleanValue BillToContactOverride { get; set; }

        /// <summary>
        /// Gets or Sets CashAccount
        /// </summary>
        [DataMember(Name="CashAccount", EmitDefaultValue=false)]
        public StringValue CashAccount { get; set; }

        /// <summary>
        /// Gets or Sets Commissions
        /// </summary>
        [DataMember(Name="Commissions", EmitDefaultValue=false)]
        public Commissions Commissions { get; set; }

        /// <summary>
        /// Gets or Sets ControlTotal
        /// </summary>
        [DataMember(Name="ControlTotal", EmitDefaultValue=false)]
        public DecimalValue ControlTotal { get; set; }

        /// <summary>
        /// Gets or Sets CreditHold
        /// </summary>
        [DataMember(Name="CreditHold", EmitDefaultValue=false)]
        public BooleanValue CreditHold { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyRate
        /// </summary>
        [DataMember(Name="CurrencyRate", EmitDefaultValue=false)]
        public DecimalValue CurrencyRate { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyRateTypeID
        /// </summary>
        [DataMember(Name="CurrencyRateTypeID", EmitDefaultValue=false)]
        public StringValue CurrencyRateTypeID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="CustomerID", EmitDefaultValue=false)]
        public StringValue CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerOrder
        /// </summary>
        [DataMember(Name="CustomerOrder", EmitDefaultValue=false)]
        public StringValue CustomerOrder { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets DestinationWarehouseID
        /// </summary>
        [DataMember(Name="DestinationWarehouseID", EmitDefaultValue=false)]
        public StringValue DestinationWarehouseID { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public List<SalesOrderDetail> Details { get; set; }

        /// <summary>
        /// Gets or Sets DisableAutomaticDiscountUpdate
        /// </summary>
        [DataMember(Name="DisableAutomaticDiscountUpdate", EmitDefaultValue=false)]
        public BooleanValue DisableAutomaticDiscountUpdate { get; set; }

        /// <summary>
        /// Gets or Sets DiscountDetails
        /// </summary>
        [DataMember(Name="DiscountDetails", EmitDefaultValue=false)]
        public List<SalesOrdersDiscountDetails> DiscountDetails { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="EffectiveDate", EmitDefaultValue=false)]
        public DateTimeValue EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRef
        /// </summary>
        [DataMember(Name="ExternalRef", EmitDefaultValue=false)]
        public StringValue ExternalRef { get; set; }

        /// <summary>
        /// Gets or Sets FinancialSettings
        /// </summary>
        [DataMember(Name="FinancialSettings", EmitDefaultValue=false)]
        public FinancialSettings FinancialSettings { get; set; }

        /// <summary>
        /// Gets or Sets Hold
        /// </summary>
        [DataMember(Name="Hold", EmitDefaultValue=false)]
        public BooleanValue Hold { get; set; }

        /// <summary>
        /// Gets or Sets IsTaxValid
        /// </summary>
        [DataMember(Name="IsTaxValid", EmitDefaultValue=false)]
        public BooleanValue IsTaxValid { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="LastModified", EmitDefaultValue=false)]
        public DateTimeValue LastModified { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="LocationID", EmitDefaultValue=false)]
        public StringValue LocationID { get; set; }

        /// <summary>
        /// Gets or Sets NewCard
        /// </summary>
        [DataMember(Name="NewCard", EmitDefaultValue=false)]
        public BooleanValue NewCard { get; set; }

        /// <summary>
        /// Gets or Sets OrderedQty
        /// </summary>
        [DataMember(Name="OrderedQty", EmitDefaultValue=false)]
        public DecimalValue OrderedQty { get; set; }

        /// <summary>
        /// Gets or Sets OrderNbr
        /// </summary>
        [DataMember(Name="OrderNbr", EmitDefaultValue=false)]
        public StringValue OrderNbr { get; set; }

        /// <summary>
        /// Gets or Sets OrderTotal
        /// </summary>
        [DataMember(Name="OrderTotal", EmitDefaultValue=false)]
        public DecimalValue OrderTotal { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name="OrderType", EmitDefaultValue=false)]
        public StringValue OrderType { get; set; }

        /// <summary>
        /// Gets or Sets PaymentCardIdentifier
        /// </summary>
        [DataMember(Name="PaymentCardIdentifier", EmitDefaultValue=false)]
        public StringValue PaymentCardIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public StringValue PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PaymentProfileID
        /// </summary>
        [DataMember(Name="PaymentProfileID", EmitDefaultValue=false)]
        public StringValue PaymentProfileID { get; set; }

        /// <summary>
        /// Gets or Sets PaymentRef
        /// </summary>
        [DataMember(Name="PaymentRef", EmitDefaultValue=false)]
        public StringValue PaymentRef { get; set; }

        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name="Payments", EmitDefaultValue=false)]
        public List<Payments> Payments { get; set; }

        /// <summary>
        /// Gets or Sets PreAuthorizationNbr
        /// </summary>
        [DataMember(Name="PreAuthorizationNbr", EmitDefaultValue=false)]
        public StringValue PreAuthorizationNbr { get; set; }

        /// <summary>
        /// Gets or Sets PreAuthorizedAmount
        /// </summary>
        [DataMember(Name="PreAuthorizedAmount", EmitDefaultValue=false)]
        public DecimalValue PreAuthorizedAmount { get; set; }

        /// <summary>
        /// Gets or Sets PreferredWarehouseID
        /// </summary>
        [DataMember(Name="PreferredWarehouseID", EmitDefaultValue=false)]
        public StringValue PreferredWarehouseID { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="Project", EmitDefaultValue=false)]
        public StringValue Project { get; set; }

        /// <summary>
        /// Gets or Sets ReciprocalRate
        /// </summary>
        [DataMember(Name="ReciprocalRate", EmitDefaultValue=false)]
        public DecimalValue ReciprocalRate { get; set; }

        /// <summary>
        /// Gets or Sets RequestedOn
        /// </summary>
        [DataMember(Name="RequestedOn", EmitDefaultValue=false)]
        public DateTimeValue RequestedOn { get; set; }

        /// <summary>
        /// Gets or Sets Shipments
        /// </summary>
        [DataMember(Name="Shipments", EmitDefaultValue=false)]
        public List<SalesOrderShipment> Shipments { get; set; }

        /// <summary>
        /// Gets or Sets ShippingSettings
        /// </summary>
        [DataMember(Name="ShippingSettings", EmitDefaultValue=false)]
        public ShippingSettings ShippingSettings { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddress
        /// </summary>
        [DataMember(Name="ShipToAddress", EmitDefaultValue=false)]
        public Address ShipToAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddressOverride
        /// </summary>
        [DataMember(Name="ShipToAddressOverride", EmitDefaultValue=false)]
        public BooleanValue ShipToAddressOverride { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddressValidated
        /// </summary>
        [DataMember(Name="ShipToAddressValidated", EmitDefaultValue=false)]
        public BooleanValue ShipToAddressValidated { get; set; }

        /// <summary>
        /// Gets or Sets ShipToContact
        /// </summary>
        [DataMember(Name="ShipToContact", EmitDefaultValue=false)]
        public DocContact ShipToContact { get; set; }

        /// <summary>
        /// Gets or Sets ShipToContactOverride
        /// </summary>
        [DataMember(Name="ShipToContactOverride", EmitDefaultValue=false)]
        public BooleanValue ShipToContactOverride { get; set; }

        /// <summary>
        /// Gets or Sets ShipVia
        /// </summary>
        [DataMember(Name="ShipVia", EmitDefaultValue=false)]
        public StringValue ShipVia { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TaxDetails
        /// </summary>
        [DataMember(Name="TaxDetails", EmitDefaultValue=false)]
        public List<TaxDetail> TaxDetails { get; set; }

        /// <summary>
        /// Gets or Sets TaxTotal
        /// </summary>
        [DataMember(Name="TaxTotal", EmitDefaultValue=false)]
        public DecimalValue TaxTotal { get; set; }

        /// <summary>
        /// Gets or Sets Totals
        /// </summary>
        [DataMember(Name="Totals", EmitDefaultValue=false)]
        public Totals Totals { get; set; }

        /// <summary>
        /// Gets or Sets VATExemptTotal
        /// </summary>
        [DataMember(Name="VATExemptTotal", EmitDefaultValue=false)]
        public DecimalValue VATExemptTotal { get; set; }

        /// <summary>
        /// Gets or Sets VATTaxableTotal
        /// </summary>
        [DataMember(Name="VATTaxableTotal", EmitDefaultValue=false)]
        public DecimalValue VATTaxableTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesOrder {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  BaseCurrencyID: ").Append(BaseCurrencyID).Append("\n");
            sb.Append("  BillToAddress: ").Append(BillToAddress).Append("\n");
            sb.Append("  BillToAddressOverride: ").Append(BillToAddressOverride).Append("\n");
            sb.Append("  BillToAddressValidated: ").Append(BillToAddressValidated).Append("\n");
            sb.Append("  BillToContact: ").Append(BillToContact).Append("\n");
            sb.Append("  BillToContactOverride: ").Append(BillToContactOverride).Append("\n");
            sb.Append("  CashAccount: ").Append(CashAccount).Append("\n");
            sb.Append("  Commissions: ").Append(Commissions).Append("\n");
            sb.Append("  ControlTotal: ").Append(ControlTotal).Append("\n");
            sb.Append("  CreditHold: ").Append(CreditHold).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  CurrencyRateTypeID: ").Append(CurrencyRateTypeID).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  CustomerOrder: ").Append(CustomerOrder).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DestinationWarehouseID: ").Append(DestinationWarehouseID).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  DisableAutomaticDiscountUpdate: ").Append(DisableAutomaticDiscountUpdate).Append("\n");
            sb.Append("  DiscountDetails: ").Append(DiscountDetails).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExternalRef: ").Append(ExternalRef).Append("\n");
            sb.Append("  FinancialSettings: ").Append(FinancialSettings).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  IsTaxValid: ").Append(IsTaxValid).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("  NewCard: ").Append(NewCard).Append("\n");
            sb.Append("  OrderedQty: ").Append(OrderedQty).Append("\n");
            sb.Append("  OrderNbr: ").Append(OrderNbr).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  PaymentCardIdentifier: ").Append(PaymentCardIdentifier).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentProfileID: ").Append(PaymentProfileID).Append("\n");
            sb.Append("  PaymentRef: ").Append(PaymentRef).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  PreAuthorizationNbr: ").Append(PreAuthorizationNbr).Append("\n");
            sb.Append("  PreAuthorizedAmount: ").Append(PreAuthorizedAmount).Append("\n");
            sb.Append("  PreferredWarehouseID: ").Append(PreferredWarehouseID).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ReciprocalRate: ").Append(ReciprocalRate).Append("\n");
            sb.Append("  RequestedOn: ").Append(RequestedOn).Append("\n");
            sb.Append("  Shipments: ").Append(Shipments).Append("\n");
            sb.Append("  ShippingSettings: ").Append(ShippingSettings).Append("\n");
            sb.Append("  ShipToAddress: ").Append(ShipToAddress).Append("\n");
            sb.Append("  ShipToAddressOverride: ").Append(ShipToAddressOverride).Append("\n");
            sb.Append("  ShipToAddressValidated: ").Append(ShipToAddressValidated).Append("\n");
            sb.Append("  ShipToContact: ").Append(ShipToContact).Append("\n");
            sb.Append("  ShipToContactOverride: ").Append(ShipToContactOverride).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("  Totals: ").Append(Totals).Append("\n");
            sb.Append("  VATExemptTotal: ").Append(VATExemptTotal).Append("\n");
            sb.Append("  VATTaxableTotal: ").Append(VATTaxableTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesOrder);
        }

        /// <summary>
        /// Returns true if SalesOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesOrder input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Approved == input.Approved ||
                    (this.Approved != null &&
                    this.Approved.Equals(input.Approved))
                ) && base.Equals(input) && 
                (
                    this.BaseCurrencyID == input.BaseCurrencyID ||
                    (this.BaseCurrencyID != null &&
                    this.BaseCurrencyID.Equals(input.BaseCurrencyID))
                ) && base.Equals(input) && 
                (
                    this.BillToAddress == input.BillToAddress ||
                    (this.BillToAddress != null &&
                    this.BillToAddress.Equals(input.BillToAddress))
                ) && base.Equals(input) && 
                (
                    this.BillToAddressOverride == input.BillToAddressOverride ||
                    (this.BillToAddressOverride != null &&
                    this.BillToAddressOverride.Equals(input.BillToAddressOverride))
                ) && base.Equals(input) && 
                (
                    this.BillToAddressValidated == input.BillToAddressValidated ||
                    (this.BillToAddressValidated != null &&
                    this.BillToAddressValidated.Equals(input.BillToAddressValidated))
                ) && base.Equals(input) && 
                (
                    this.BillToContact == input.BillToContact ||
                    (this.BillToContact != null &&
                    this.BillToContact.Equals(input.BillToContact))
                ) && base.Equals(input) && 
                (
                    this.BillToContactOverride == input.BillToContactOverride ||
                    (this.BillToContactOverride != null &&
                    this.BillToContactOverride.Equals(input.BillToContactOverride))
                ) && base.Equals(input) && 
                (
                    this.CashAccount == input.CashAccount ||
                    (this.CashAccount != null &&
                    this.CashAccount.Equals(input.CashAccount))
                ) && base.Equals(input) && 
                (
                    this.Commissions == input.Commissions ||
                    (this.Commissions != null &&
                    this.Commissions.Equals(input.Commissions))
                ) && base.Equals(input) && 
                (
                    this.ControlTotal == input.ControlTotal ||
                    (this.ControlTotal != null &&
                    this.ControlTotal.Equals(input.ControlTotal))
                ) && base.Equals(input) && 
                (
                    this.CreditHold == input.CreditHold ||
                    (this.CreditHold != null &&
                    this.CreditHold.Equals(input.CreditHold))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRate == input.CurrencyRate ||
                    (this.CurrencyRate != null &&
                    this.CurrencyRate.Equals(input.CurrencyRate))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRateTypeID == input.CurrencyRateTypeID ||
                    (this.CurrencyRateTypeID != null &&
                    this.CurrencyRateTypeID.Equals(input.CurrencyRateTypeID))
                ) && base.Equals(input) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && base.Equals(input) && 
                (
                    this.CustomerOrder == input.CustomerOrder ||
                    (this.CustomerOrder != null &&
                    this.CustomerOrder.Equals(input.CustomerOrder))
                ) && base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.DestinationWarehouseID == input.DestinationWarehouseID ||
                    (this.DestinationWarehouseID != null &&
                    this.DestinationWarehouseID.Equals(input.DestinationWarehouseID))
                ) && base.Equals(input) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && base.Equals(input) && 
                (
                    this.DisableAutomaticDiscountUpdate == input.DisableAutomaticDiscountUpdate ||
                    (this.DisableAutomaticDiscountUpdate != null &&
                    this.DisableAutomaticDiscountUpdate.Equals(input.DisableAutomaticDiscountUpdate))
                ) && base.Equals(input) && 
                (
                    this.DiscountDetails == input.DiscountDetails ||
                    this.DiscountDetails != null &&
                    this.DiscountDetails.SequenceEqual(input.DiscountDetails)
                ) && base.Equals(input) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && base.Equals(input) && 
                (
                    this.ExternalRef == input.ExternalRef ||
                    (this.ExternalRef != null &&
                    this.ExternalRef.Equals(input.ExternalRef))
                ) && base.Equals(input) && 
                (
                    this.FinancialSettings == input.FinancialSettings ||
                    (this.FinancialSettings != null &&
                    this.FinancialSettings.Equals(input.FinancialSettings))
                ) && base.Equals(input) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && base.Equals(input) && 
                (
                    this.IsTaxValid == input.IsTaxValid ||
                    (this.IsTaxValid != null &&
                    this.IsTaxValid.Equals(input.IsTaxValid))
                ) && base.Equals(input) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && base.Equals(input) && 
                (
                    this.LocationID == input.LocationID ||
                    (this.LocationID != null &&
                    this.LocationID.Equals(input.LocationID))
                ) && base.Equals(input) && 
                (
                    this.NewCard == input.NewCard ||
                    (this.NewCard != null &&
                    this.NewCard.Equals(input.NewCard))
                ) && base.Equals(input) && 
                (
                    this.OrderedQty == input.OrderedQty ||
                    (this.OrderedQty != null &&
                    this.OrderedQty.Equals(input.OrderedQty))
                ) && base.Equals(input) && 
                (
                    this.OrderNbr == input.OrderNbr ||
                    (this.OrderNbr != null &&
                    this.OrderNbr.Equals(input.OrderNbr))
                ) && base.Equals(input) && 
                (
                    this.OrderTotal == input.OrderTotal ||
                    (this.OrderTotal != null &&
                    this.OrderTotal.Equals(input.OrderTotal))
                ) && base.Equals(input) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && base.Equals(input) && 
                (
                    this.PaymentCardIdentifier == input.PaymentCardIdentifier ||
                    (this.PaymentCardIdentifier != null &&
                    this.PaymentCardIdentifier.Equals(input.PaymentCardIdentifier))
                ) && base.Equals(input) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && base.Equals(input) && 
                (
                    this.PaymentProfileID == input.PaymentProfileID ||
                    (this.PaymentProfileID != null &&
                    this.PaymentProfileID.Equals(input.PaymentProfileID))
                ) && base.Equals(input) && 
                (
                    this.PaymentRef == input.PaymentRef ||
                    (this.PaymentRef != null &&
                    this.PaymentRef.Equals(input.PaymentRef))
                ) && base.Equals(input) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                ) && base.Equals(input) && 
                (
                    this.PreAuthorizationNbr == input.PreAuthorizationNbr ||
                    (this.PreAuthorizationNbr != null &&
                    this.PreAuthorizationNbr.Equals(input.PreAuthorizationNbr))
                ) && base.Equals(input) && 
                (
                    this.PreAuthorizedAmount == input.PreAuthorizedAmount ||
                    (this.PreAuthorizedAmount != null &&
                    this.PreAuthorizedAmount.Equals(input.PreAuthorizedAmount))
                ) && base.Equals(input) && 
                (
                    this.PreferredWarehouseID == input.PreferredWarehouseID ||
                    (this.PreferredWarehouseID != null &&
                    this.PreferredWarehouseID.Equals(input.PreferredWarehouseID))
                ) && base.Equals(input) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && base.Equals(input) && 
                (
                    this.ReciprocalRate == input.ReciprocalRate ||
                    (this.ReciprocalRate != null &&
                    this.ReciprocalRate.Equals(input.ReciprocalRate))
                ) && base.Equals(input) && 
                (
                    this.RequestedOn == input.RequestedOn ||
                    (this.RequestedOn != null &&
                    this.RequestedOn.Equals(input.RequestedOn))
                ) && base.Equals(input) && 
                (
                    this.Shipments == input.Shipments ||
                    this.Shipments != null &&
                    this.Shipments.SequenceEqual(input.Shipments)
                ) && base.Equals(input) && 
                (
                    this.ShippingSettings == input.ShippingSettings ||
                    (this.ShippingSettings != null &&
                    this.ShippingSettings.Equals(input.ShippingSettings))
                ) && base.Equals(input) && 
                (
                    this.ShipToAddress == input.ShipToAddress ||
                    (this.ShipToAddress != null &&
                    this.ShipToAddress.Equals(input.ShipToAddress))
                ) && base.Equals(input) && 
                (
                    this.ShipToAddressOverride == input.ShipToAddressOverride ||
                    (this.ShipToAddressOverride != null &&
                    this.ShipToAddressOverride.Equals(input.ShipToAddressOverride))
                ) && base.Equals(input) && 
                (
                    this.ShipToAddressValidated == input.ShipToAddressValidated ||
                    (this.ShipToAddressValidated != null &&
                    this.ShipToAddressValidated.Equals(input.ShipToAddressValidated))
                ) && base.Equals(input) && 
                (
                    this.ShipToContact == input.ShipToContact ||
                    (this.ShipToContact != null &&
                    this.ShipToContact.Equals(input.ShipToContact))
                ) && base.Equals(input) && 
                (
                    this.ShipToContactOverride == input.ShipToContactOverride ||
                    (this.ShipToContactOverride != null &&
                    this.ShipToContactOverride.Equals(input.ShipToContactOverride))
                ) && base.Equals(input) && 
                (
                    this.ShipVia == input.ShipVia ||
                    (this.ShipVia != null &&
                    this.ShipVia.Equals(input.ShipVia))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.SequenceEqual(input.TaxDetails)
                ) && base.Equals(input) && 
                (
                    this.TaxTotal == input.TaxTotal ||
                    (this.TaxTotal != null &&
                    this.TaxTotal.Equals(input.TaxTotal))
                ) && base.Equals(input) && 
                (
                    this.Totals == input.Totals ||
                    (this.Totals != null &&
                    this.Totals.Equals(input.Totals))
                ) && base.Equals(input) && 
                (
                    this.VATExemptTotal == input.VATExemptTotal ||
                    (this.VATExemptTotal != null &&
                    this.VATExemptTotal.Equals(input.VATExemptTotal))
                ) && base.Equals(input) && 
                (
                    this.VATTaxableTotal == input.VATTaxableTotal ||
                    (this.VATTaxableTotal != null &&
                    this.VATTaxableTotal.Equals(input.VATTaxableTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Approved != null)
                    hashCode = hashCode * 59 + this.Approved.GetHashCode();
                if (this.BaseCurrencyID != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyID.GetHashCode();
                if (this.BillToAddress != null)
                    hashCode = hashCode * 59 + this.BillToAddress.GetHashCode();
                if (this.BillToAddressOverride != null)
                    hashCode = hashCode * 59 + this.BillToAddressOverride.GetHashCode();
                if (this.BillToAddressValidated != null)
                    hashCode = hashCode * 59 + this.BillToAddressValidated.GetHashCode();
                if (this.BillToContact != null)
                    hashCode = hashCode * 59 + this.BillToContact.GetHashCode();
                if (this.BillToContactOverride != null)
                    hashCode = hashCode * 59 + this.BillToContactOverride.GetHashCode();
                if (this.CashAccount != null)
                    hashCode = hashCode * 59 + this.CashAccount.GetHashCode();
                if (this.Commissions != null)
                    hashCode = hashCode * 59 + this.Commissions.GetHashCode();
                if (this.ControlTotal != null)
                    hashCode = hashCode * 59 + this.ControlTotal.GetHashCode();
                if (this.CreditHold != null)
                    hashCode = hashCode * 59 + this.CreditHold.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CurrencyRate != null)
                    hashCode = hashCode * 59 + this.CurrencyRate.GetHashCode();
                if (this.CurrencyRateTypeID != null)
                    hashCode = hashCode * 59 + this.CurrencyRateTypeID.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.CustomerOrder != null)
                    hashCode = hashCode * 59 + this.CustomerOrder.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DestinationWarehouseID != null)
                    hashCode = hashCode * 59 + this.DestinationWarehouseID.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.DisableAutomaticDiscountUpdate != null)
                    hashCode = hashCode * 59 + this.DisableAutomaticDiscountUpdate.GetHashCode();
                if (this.DiscountDetails != null)
                    hashCode = hashCode * 59 + this.DiscountDetails.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.ExternalRef != null)
                    hashCode = hashCode * 59 + this.ExternalRef.GetHashCode();
                if (this.FinancialSettings != null)
                    hashCode = hashCode * 59 + this.FinancialSettings.GetHashCode();
                if (this.Hold != null)
                    hashCode = hashCode * 59 + this.Hold.GetHashCode();
                if (this.IsTaxValid != null)
                    hashCode = hashCode * 59 + this.IsTaxValid.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LocationID != null)
                    hashCode = hashCode * 59 + this.LocationID.GetHashCode();
                if (this.NewCard != null)
                    hashCode = hashCode * 59 + this.NewCard.GetHashCode();
                if (this.OrderedQty != null)
                    hashCode = hashCode * 59 + this.OrderedQty.GetHashCode();
                if (this.OrderNbr != null)
                    hashCode = hashCode * 59 + this.OrderNbr.GetHashCode();
                if (this.OrderTotal != null)
                    hashCode = hashCode * 59 + this.OrderTotal.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.PaymentCardIdentifier != null)
                    hashCode = hashCode * 59 + this.PaymentCardIdentifier.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentProfileID != null)
                    hashCode = hashCode * 59 + this.PaymentProfileID.GetHashCode();
                if (this.PaymentRef != null)
                    hashCode = hashCode * 59 + this.PaymentRef.GetHashCode();
                if (this.Payments != null)
                    hashCode = hashCode * 59 + this.Payments.GetHashCode();
                if (this.PreAuthorizationNbr != null)
                    hashCode = hashCode * 59 + this.PreAuthorizationNbr.GetHashCode();
                if (this.PreAuthorizedAmount != null)
                    hashCode = hashCode * 59 + this.PreAuthorizedAmount.GetHashCode();
                if (this.PreferredWarehouseID != null)
                    hashCode = hashCode * 59 + this.PreferredWarehouseID.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.ReciprocalRate != null)
                    hashCode = hashCode * 59 + this.ReciprocalRate.GetHashCode();
                if (this.RequestedOn != null)
                    hashCode = hashCode * 59 + this.RequestedOn.GetHashCode();
                if (this.Shipments != null)
                    hashCode = hashCode * 59 + this.Shipments.GetHashCode();
                if (this.ShippingSettings != null)
                    hashCode = hashCode * 59 + this.ShippingSettings.GetHashCode();
                if (this.ShipToAddress != null)
                    hashCode = hashCode * 59 + this.ShipToAddress.GetHashCode();
                if (this.ShipToAddressOverride != null)
                    hashCode = hashCode * 59 + this.ShipToAddressOverride.GetHashCode();
                if (this.ShipToAddressValidated != null)
                    hashCode = hashCode * 59 + this.ShipToAddressValidated.GetHashCode();
                if (this.ShipToContact != null)
                    hashCode = hashCode * 59 + this.ShipToContact.GetHashCode();
                if (this.ShipToContactOverride != null)
                    hashCode = hashCode * 59 + this.ShipToContactOverride.GetHashCode();
                if (this.ShipVia != null)
                    hashCode = hashCode * 59 + this.ShipVia.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                if (this.TaxTotal != null)
                    hashCode = hashCode * 59 + this.TaxTotal.GetHashCode();
                if (this.Totals != null)
                    hashCode = hashCode * 59 + this.Totals.GetHashCode();
                if (this.VATExemptTotal != null)
                    hashCode = hashCode * 59 + this.VATExemptTotal.GetHashCode();
                if (this.VATTaxableTotal != null)
                    hashCode = hashCode * 59 + this.VATTaxableTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
