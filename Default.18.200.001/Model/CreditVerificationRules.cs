/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// CreditVerificationRules
    /// </summary>
    [DataContract]
    public partial class CreditVerificationRules : Entity,  IEquatable<CreditVerificationRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditVerificationRules" /> class.
        /// </summary>
        /// <param name="creditDaysPastDue">creditDaysPastDue.</param>
        /// <param name="creditLimit">creditLimit.</param>
        /// <param name="creditVerification">creditVerification.</param>
        /// <param name="firstDueDate">firstDueDate.</param>
        /// <param name="openOrdersBalance">openOrdersBalance.</param>
        /// <param name="remainingCreditLimit">remainingCreditLimit.</param>
        /// <param name="unreleasedBalance">unreleasedBalance.</param>
        public CreditVerificationRules(ShortValue creditDaysPastDue = default(ShortValue), DecimalValue creditLimit = default(DecimalValue), StringValue creditVerification = default(StringValue), DateTimeValue firstDueDate = default(DateTimeValue), DecimalValue openOrdersBalance = default(DecimalValue), DecimalValue remainingCreditLimit = default(DecimalValue), DecimalValue unreleasedBalance = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.CreditDaysPastDue = creditDaysPastDue;
            this.CreditLimit = creditLimit;
            this.CreditVerification = creditVerification;
            this.FirstDueDate = firstDueDate;
            this.OpenOrdersBalance = openOrdersBalance;
            this.RemainingCreditLimit = remainingCreditLimit;
            this.UnreleasedBalance = unreleasedBalance;
        }
        
        /// <summary>
        /// Gets or Sets CreditDaysPastDue
        /// </summary>
        [DataMember(Name="CreditDaysPastDue", EmitDefaultValue=false)]
        public ShortValue CreditDaysPastDue { get; set; }

        /// <summary>
        /// Gets or Sets CreditLimit
        /// </summary>
        [DataMember(Name="CreditLimit", EmitDefaultValue=false)]
        public DecimalValue CreditLimit { get; set; }

        /// <summary>
        /// Gets or Sets CreditVerification
        /// </summary>
        [DataMember(Name="CreditVerification", EmitDefaultValue=false)]
        public StringValue CreditVerification { get; set; }

        /// <summary>
        /// Gets or Sets FirstDueDate
        /// </summary>
        [DataMember(Name="FirstDueDate", EmitDefaultValue=false)]
        public DateTimeValue FirstDueDate { get; set; }

        /// <summary>
        /// Gets or Sets OpenOrdersBalance
        /// </summary>
        [DataMember(Name="OpenOrdersBalance", EmitDefaultValue=false)]
        public DecimalValue OpenOrdersBalance { get; set; }

        /// <summary>
        /// Gets or Sets RemainingCreditLimit
        /// </summary>
        [DataMember(Name="RemainingCreditLimit", EmitDefaultValue=false)]
        public DecimalValue RemainingCreditLimit { get; set; }

        /// <summary>
        /// Gets or Sets UnreleasedBalance
        /// </summary>
        [DataMember(Name="UnreleasedBalance", EmitDefaultValue=false)]
        public DecimalValue UnreleasedBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditVerificationRules {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CreditDaysPastDue: ").Append(CreditDaysPastDue).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  CreditVerification: ").Append(CreditVerification).Append("\n");
            sb.Append("  FirstDueDate: ").Append(FirstDueDate).Append("\n");
            sb.Append("  OpenOrdersBalance: ").Append(OpenOrdersBalance).Append("\n");
            sb.Append("  RemainingCreditLimit: ").Append(RemainingCreditLimit).Append("\n");
            sb.Append("  UnreleasedBalance: ").Append(UnreleasedBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditVerificationRules);
        }

        /// <summary>
        /// Returns true if CreditVerificationRules instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditVerificationRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditVerificationRules input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CreditDaysPastDue == input.CreditDaysPastDue ||
                    (this.CreditDaysPastDue != null &&
                    this.CreditDaysPastDue.Equals(input.CreditDaysPastDue))
                ) && base.Equals(input) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    (this.CreditLimit != null &&
                    this.CreditLimit.Equals(input.CreditLimit))
                ) && base.Equals(input) && 
                (
                    this.CreditVerification == input.CreditVerification ||
                    (this.CreditVerification != null &&
                    this.CreditVerification.Equals(input.CreditVerification))
                ) && base.Equals(input) && 
                (
                    this.FirstDueDate == input.FirstDueDate ||
                    (this.FirstDueDate != null &&
                    this.FirstDueDate.Equals(input.FirstDueDate))
                ) && base.Equals(input) && 
                (
                    this.OpenOrdersBalance == input.OpenOrdersBalance ||
                    (this.OpenOrdersBalance != null &&
                    this.OpenOrdersBalance.Equals(input.OpenOrdersBalance))
                ) && base.Equals(input) && 
                (
                    this.RemainingCreditLimit == input.RemainingCreditLimit ||
                    (this.RemainingCreditLimit != null &&
                    this.RemainingCreditLimit.Equals(input.RemainingCreditLimit))
                ) && base.Equals(input) && 
                (
                    this.UnreleasedBalance == input.UnreleasedBalance ||
                    (this.UnreleasedBalance != null &&
                    this.UnreleasedBalance.Equals(input.UnreleasedBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CreditDaysPastDue != null)
                    hashCode = hashCode * 59 + this.CreditDaysPastDue.GetHashCode();
                if (this.CreditLimit != null)
                    hashCode = hashCode * 59 + this.CreditLimit.GetHashCode();
                if (this.CreditVerification != null)
                    hashCode = hashCode * 59 + this.CreditVerification.GetHashCode();
                if (this.FirstDueDate != null)
                    hashCode = hashCode * 59 + this.FirstDueDate.GetHashCode();
                if (this.OpenOrdersBalance != null)
                    hashCode = hashCode * 59 + this.OpenOrdersBalance.GetHashCode();
                if (this.RemainingCreditLimit != null)
                    hashCode = hashCode * 59 + this.RemainingCreditLimit.GetHashCode();
                if (this.UnreleasedBalance != null)
                    hashCode = hashCode * 59 + this.UnreleasedBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
