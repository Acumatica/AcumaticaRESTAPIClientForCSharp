/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// DiscountBreakpointDetail
    /// </summary>
    [DataContract]
    public partial class DiscountBreakpointDetail : Entity,  IEquatable<DiscountBreakpointDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscountBreakpointDetail" /> class.
        /// </summary>
        /// <param name="breakAmount">breakAmount.</param>
        /// <param name="breakQty">breakQty.</param>
        /// <param name="discountAmount">discountAmount.</param>
        /// <param name="discountDetailID">discountDetailID.</param>
        /// <param name="discountPercent">discountPercent.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="freeItemQty">freeItemQty.</param>
        /// <param name="lastBreakAmount">lastBreakAmount.</param>
        /// <param name="lastBreakQty">lastBreakQty.</param>
        /// <param name="lastDiscountAmount">lastDiscountAmount.</param>
        /// <param name="lastDiscountPercent">lastDiscountPercent.</param>
        /// <param name="lastFreeItemQty">lastFreeItemQty.</param>
        /// <param name="pendingBreakAmount">pendingBreakAmount.</param>
        /// <param name="pendingBreakQty">pendingBreakQty.</param>
        /// <param name="pendingDate">pendingDate.</param>
        /// <param name="pendingDiscountAmount">pendingDiscountAmount.</param>
        /// <param name="pendingDiscountPercent">pendingDiscountPercent.</param>
        /// <param name="pendingFreeItemQty">pendingFreeItemQty.</param>
        public DiscountBreakpointDetail(DecimalValue breakAmount = default(DecimalValue), DecimalValue breakQty = default(DecimalValue), DecimalValue discountAmount = default(DecimalValue), IntValue discountDetailID = default(IntValue), DecimalValue discountPercent = default(DecimalValue), DateTimeValue effectiveDate = default(DateTimeValue), DecimalValue freeItemQty = default(DecimalValue), DecimalValue lastBreakAmount = default(DecimalValue), DecimalValue lastBreakQty = default(DecimalValue), DecimalValue lastDiscountAmount = default(DecimalValue), DecimalValue lastDiscountPercent = default(DecimalValue), DecimalValue lastFreeItemQty = default(DecimalValue), DecimalValue pendingBreakAmount = default(DecimalValue), DecimalValue pendingBreakQty = default(DecimalValue), DateTimeValue pendingDate = default(DateTimeValue), DecimalValue pendingDiscountAmount = default(DecimalValue), DecimalValue pendingDiscountPercent = default(DecimalValue), DecimalValue pendingFreeItemQty = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BreakAmount = breakAmount;
            this.BreakQty = breakQty;
            this.DiscountAmount = discountAmount;
            this.DiscountDetailID = discountDetailID;
            this.DiscountPercent = discountPercent;
            this.EffectiveDate = effectiveDate;
            this.FreeItemQty = freeItemQty;
            this.LastBreakAmount = lastBreakAmount;
            this.LastBreakQty = lastBreakQty;
            this.LastDiscountAmount = lastDiscountAmount;
            this.LastDiscountPercent = lastDiscountPercent;
            this.LastFreeItemQty = lastFreeItemQty;
            this.PendingBreakAmount = pendingBreakAmount;
            this.PendingBreakQty = pendingBreakQty;
            this.PendingDate = pendingDate;
            this.PendingDiscountAmount = pendingDiscountAmount;
            this.PendingDiscountPercent = pendingDiscountPercent;
            this.PendingFreeItemQty = pendingFreeItemQty;
        }
        
        /// <summary>
        /// Gets or Sets BreakAmount
        /// </summary>
        [DataMember(Name="BreakAmount", EmitDefaultValue=false)]
        public DecimalValue BreakAmount { get; set; }

        /// <summary>
        /// Gets or Sets BreakQty
        /// </summary>
        [DataMember(Name="BreakQty", EmitDefaultValue=false)]
        public DecimalValue BreakQty { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAmount
        /// </summary>
        [DataMember(Name="DiscountAmount", EmitDefaultValue=false)]
        public DecimalValue DiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountDetailID
        /// </summary>
        [DataMember(Name="DiscountDetailID", EmitDefaultValue=false)]
        public IntValue DiscountDetailID { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercent
        /// </summary>
        [DataMember(Name="DiscountPercent", EmitDefaultValue=false)]
        public DecimalValue DiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="EffectiveDate", EmitDefaultValue=false)]
        public DateTimeValue EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets FreeItemQty
        /// </summary>
        [DataMember(Name="FreeItemQty", EmitDefaultValue=false)]
        public DecimalValue FreeItemQty { get; set; }

        /// <summary>
        /// Gets or Sets LastBreakAmount
        /// </summary>
        [DataMember(Name="LastBreakAmount", EmitDefaultValue=false)]
        public DecimalValue LastBreakAmount { get; set; }

        /// <summary>
        /// Gets or Sets LastBreakQty
        /// </summary>
        [DataMember(Name="LastBreakQty", EmitDefaultValue=false)]
        public DecimalValue LastBreakQty { get; set; }

        /// <summary>
        /// Gets or Sets LastDiscountAmount
        /// </summary>
        [DataMember(Name="LastDiscountAmount", EmitDefaultValue=false)]
        public DecimalValue LastDiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets LastDiscountPercent
        /// </summary>
        [DataMember(Name="LastDiscountPercent", EmitDefaultValue=false)]
        public DecimalValue LastDiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets LastFreeItemQty
        /// </summary>
        [DataMember(Name="LastFreeItemQty", EmitDefaultValue=false)]
        public DecimalValue LastFreeItemQty { get; set; }

        /// <summary>
        /// Gets or Sets PendingBreakAmount
        /// </summary>
        [DataMember(Name="PendingBreakAmount", EmitDefaultValue=false)]
        public DecimalValue PendingBreakAmount { get; set; }

        /// <summary>
        /// Gets or Sets PendingBreakQty
        /// </summary>
        [DataMember(Name="PendingBreakQty", EmitDefaultValue=false)]
        public DecimalValue PendingBreakQty { get; set; }

        /// <summary>
        /// Gets or Sets PendingDate
        /// </summary>
        [DataMember(Name="PendingDate", EmitDefaultValue=false)]
        public DateTimeValue PendingDate { get; set; }

        /// <summary>
        /// Gets or Sets PendingDiscountAmount
        /// </summary>
        [DataMember(Name="PendingDiscountAmount", EmitDefaultValue=false)]
        public DecimalValue PendingDiscountAmount { get; set; }

        /// <summary>
        /// Gets or Sets PendingDiscountPercent
        /// </summary>
        [DataMember(Name="PendingDiscountPercent", EmitDefaultValue=false)]
        public DecimalValue PendingDiscountPercent { get; set; }

        /// <summary>
        /// Gets or Sets PendingFreeItemQty
        /// </summary>
        [DataMember(Name="PendingFreeItemQty", EmitDefaultValue=false)]
        public DecimalValue PendingFreeItemQty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscountBreakpointDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BreakAmount: ").Append(BreakAmount).Append("\n");
            sb.Append("  BreakQty: ").Append(BreakQty).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountDetailID: ").Append(DiscountDetailID).Append("\n");
            sb.Append("  DiscountPercent: ").Append(DiscountPercent).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  FreeItemQty: ").Append(FreeItemQty).Append("\n");
            sb.Append("  LastBreakAmount: ").Append(LastBreakAmount).Append("\n");
            sb.Append("  LastBreakQty: ").Append(LastBreakQty).Append("\n");
            sb.Append("  LastDiscountAmount: ").Append(LastDiscountAmount).Append("\n");
            sb.Append("  LastDiscountPercent: ").Append(LastDiscountPercent).Append("\n");
            sb.Append("  LastFreeItemQty: ").Append(LastFreeItemQty).Append("\n");
            sb.Append("  PendingBreakAmount: ").Append(PendingBreakAmount).Append("\n");
            sb.Append("  PendingBreakQty: ").Append(PendingBreakQty).Append("\n");
            sb.Append("  PendingDate: ").Append(PendingDate).Append("\n");
            sb.Append("  PendingDiscountAmount: ").Append(PendingDiscountAmount).Append("\n");
            sb.Append("  PendingDiscountPercent: ").Append(PendingDiscountPercent).Append("\n");
            sb.Append("  PendingFreeItemQty: ").Append(PendingFreeItemQty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiscountBreakpointDetail);
        }

        /// <summary>
        /// Returns true if DiscountBreakpointDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DiscountBreakpointDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscountBreakpointDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BreakAmount == input.BreakAmount ||
                    (this.BreakAmount != null &&
                    this.BreakAmount.Equals(input.BreakAmount))
                ) && base.Equals(input) && 
                (
                    this.BreakQty == input.BreakQty ||
                    (this.BreakQty != null &&
                    this.BreakQty.Equals(input.BreakQty))
                ) && base.Equals(input) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && base.Equals(input) && 
                (
                    this.DiscountDetailID == input.DiscountDetailID ||
                    (this.DiscountDetailID != null &&
                    this.DiscountDetailID.Equals(input.DiscountDetailID))
                ) && base.Equals(input) && 
                (
                    this.DiscountPercent == input.DiscountPercent ||
                    (this.DiscountPercent != null &&
                    this.DiscountPercent.Equals(input.DiscountPercent))
                ) && base.Equals(input) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && base.Equals(input) && 
                (
                    this.FreeItemQty == input.FreeItemQty ||
                    (this.FreeItemQty != null &&
                    this.FreeItemQty.Equals(input.FreeItemQty))
                ) && base.Equals(input) && 
                (
                    this.LastBreakAmount == input.LastBreakAmount ||
                    (this.LastBreakAmount != null &&
                    this.LastBreakAmount.Equals(input.LastBreakAmount))
                ) && base.Equals(input) && 
                (
                    this.LastBreakQty == input.LastBreakQty ||
                    (this.LastBreakQty != null &&
                    this.LastBreakQty.Equals(input.LastBreakQty))
                ) && base.Equals(input) && 
                (
                    this.LastDiscountAmount == input.LastDiscountAmount ||
                    (this.LastDiscountAmount != null &&
                    this.LastDiscountAmount.Equals(input.LastDiscountAmount))
                ) && base.Equals(input) && 
                (
                    this.LastDiscountPercent == input.LastDiscountPercent ||
                    (this.LastDiscountPercent != null &&
                    this.LastDiscountPercent.Equals(input.LastDiscountPercent))
                ) && base.Equals(input) && 
                (
                    this.LastFreeItemQty == input.LastFreeItemQty ||
                    (this.LastFreeItemQty != null &&
                    this.LastFreeItemQty.Equals(input.LastFreeItemQty))
                ) && base.Equals(input) && 
                (
                    this.PendingBreakAmount == input.PendingBreakAmount ||
                    (this.PendingBreakAmount != null &&
                    this.PendingBreakAmount.Equals(input.PendingBreakAmount))
                ) && base.Equals(input) && 
                (
                    this.PendingBreakQty == input.PendingBreakQty ||
                    (this.PendingBreakQty != null &&
                    this.PendingBreakQty.Equals(input.PendingBreakQty))
                ) && base.Equals(input) && 
                (
                    this.PendingDate == input.PendingDate ||
                    (this.PendingDate != null &&
                    this.PendingDate.Equals(input.PendingDate))
                ) && base.Equals(input) && 
                (
                    this.PendingDiscountAmount == input.PendingDiscountAmount ||
                    (this.PendingDiscountAmount != null &&
                    this.PendingDiscountAmount.Equals(input.PendingDiscountAmount))
                ) && base.Equals(input) && 
                (
                    this.PendingDiscountPercent == input.PendingDiscountPercent ||
                    (this.PendingDiscountPercent != null &&
                    this.PendingDiscountPercent.Equals(input.PendingDiscountPercent))
                ) && base.Equals(input) && 
                (
                    this.PendingFreeItemQty == input.PendingFreeItemQty ||
                    (this.PendingFreeItemQty != null &&
                    this.PendingFreeItemQty.Equals(input.PendingFreeItemQty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BreakAmount != null)
                    hashCode = hashCode * 59 + this.BreakAmount.GetHashCode();
                if (this.BreakQty != null)
                    hashCode = hashCode * 59 + this.BreakQty.GetHashCode();
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.DiscountDetailID != null)
                    hashCode = hashCode * 59 + this.DiscountDetailID.GetHashCode();
                if (this.DiscountPercent != null)
                    hashCode = hashCode * 59 + this.DiscountPercent.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.FreeItemQty != null)
                    hashCode = hashCode * 59 + this.FreeItemQty.GetHashCode();
                if (this.LastBreakAmount != null)
                    hashCode = hashCode * 59 + this.LastBreakAmount.GetHashCode();
                if (this.LastBreakQty != null)
                    hashCode = hashCode * 59 + this.LastBreakQty.GetHashCode();
                if (this.LastDiscountAmount != null)
                    hashCode = hashCode * 59 + this.LastDiscountAmount.GetHashCode();
                if (this.LastDiscountPercent != null)
                    hashCode = hashCode * 59 + this.LastDiscountPercent.GetHashCode();
                if (this.LastFreeItemQty != null)
                    hashCode = hashCode * 59 + this.LastFreeItemQty.GetHashCode();
                if (this.PendingBreakAmount != null)
                    hashCode = hashCode * 59 + this.PendingBreakAmount.GetHashCode();
                if (this.PendingBreakQty != null)
                    hashCode = hashCode * 59 + this.PendingBreakQty.GetHashCode();
                if (this.PendingDate != null)
                    hashCode = hashCode * 59 + this.PendingDate.GetHashCode();
                if (this.PendingDiscountAmount != null)
                    hashCode = hashCode * 59 + this.PendingDiscountAmount.GetHashCode();
                if (this.PendingDiscountPercent != null)
                    hashCode = hashCode * 59 + this.PendingDiscountPercent.GetHashCode();
                if (this.PendingFreeItemQty != null)
                    hashCode = hashCode * 59 + this.PendingFreeItemQty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
