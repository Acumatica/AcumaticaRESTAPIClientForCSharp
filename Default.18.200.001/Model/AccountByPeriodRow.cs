/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// AccountByPeriodRow
    /// </summary>
    [DataContract]
    public partial class AccountByPeriodRow : Entity,  IEquatable<AccountByPeriodRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountByPeriodRow" /> class.
        /// </summary>
        /// <param name="beginingBalance">beginingBalance.</param>
        /// <param name="creditTotal">creditTotal.</param>
        /// <param name="currencyBeginingBalance">currencyBeginingBalance.</param>
        /// <param name="currencyCreditTotal">currencyCreditTotal.</param>
        /// <param name="currencyDebitTotal">currencyDebitTotal.</param>
        /// <param name="currencyEndingBalance">currencyEndingBalance.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="currencyPtdTotal">currencyPtdTotal.</param>
        /// <param name="debitTotal">debitTotal.</param>
        /// <param name="endingBalance">endingBalance.</param>
        /// <param name="ledgerID">ledgerID.</param>
        /// <param name="period">period.</param>
        /// <param name="ptdTotal">ptdTotal.</param>
        public AccountByPeriodRow(DecimalValue beginingBalance = default(DecimalValue), DecimalValue creditTotal = default(DecimalValue), DecimalValue currencyBeginingBalance = default(DecimalValue), DecimalValue currencyCreditTotal = default(DecimalValue), DecimalValue currencyDebitTotal = default(DecimalValue), DecimalValue currencyEndingBalance = default(DecimalValue), StringValue currencyID = default(StringValue), DecimalValue currencyPtdTotal = default(DecimalValue), DecimalValue debitTotal = default(DecimalValue), DecimalValue endingBalance = default(DecimalValue), IntValue ledgerID = default(IntValue), StringValue period = default(StringValue), DecimalValue ptdTotal = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BeginingBalance = beginingBalance;
            this.CreditTotal = creditTotal;
            this.CurrencyBeginingBalance = currencyBeginingBalance;
            this.CurrencyCreditTotal = currencyCreditTotal;
            this.CurrencyDebitTotal = currencyDebitTotal;
            this.CurrencyEndingBalance = currencyEndingBalance;
            this.CurrencyID = currencyID;
            this.CurrencyPtdTotal = currencyPtdTotal;
            this.DebitTotal = debitTotal;
            this.EndingBalance = endingBalance;
            this.LedgerID = ledgerID;
            this.Period = period;
            this.PtdTotal = ptdTotal;
        }
        
        /// <summary>
        /// Gets or Sets BeginingBalance
        /// </summary>
        [DataMember(Name="BeginingBalance", EmitDefaultValue=false)]
        public DecimalValue BeginingBalance { get; set; }

        /// <summary>
        /// Gets or Sets CreditTotal
        /// </summary>
        [DataMember(Name="CreditTotal", EmitDefaultValue=false)]
        public DecimalValue CreditTotal { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyBeginingBalance
        /// </summary>
        [DataMember(Name="CurrencyBeginingBalance", EmitDefaultValue=false)]
        public DecimalValue CurrencyBeginingBalance { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCreditTotal
        /// </summary>
        [DataMember(Name="CurrencyCreditTotal", EmitDefaultValue=false)]
        public DecimalValue CurrencyCreditTotal { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyDebitTotal
        /// </summary>
        [DataMember(Name="CurrencyDebitTotal", EmitDefaultValue=false)]
        public DecimalValue CurrencyDebitTotal { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyEndingBalance
        /// </summary>
        [DataMember(Name="CurrencyEndingBalance", EmitDefaultValue=false)]
        public DecimalValue CurrencyEndingBalance { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyPtdTotal
        /// </summary>
        [DataMember(Name="CurrencyPtdTotal", EmitDefaultValue=false)]
        public DecimalValue CurrencyPtdTotal { get; set; }

        /// <summary>
        /// Gets or Sets DebitTotal
        /// </summary>
        [DataMember(Name="DebitTotal", EmitDefaultValue=false)]
        public DecimalValue DebitTotal { get; set; }

        /// <summary>
        /// Gets or Sets EndingBalance
        /// </summary>
        [DataMember(Name="EndingBalance", EmitDefaultValue=false)]
        public DecimalValue EndingBalance { get; set; }

        /// <summary>
        /// Gets or Sets LedgerID
        /// </summary>
        [DataMember(Name="LedgerID", EmitDefaultValue=false)]
        public IntValue LedgerID { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="Period", EmitDefaultValue=false)]
        public StringValue Period { get; set; }

        /// <summary>
        /// Gets or Sets PtdTotal
        /// </summary>
        [DataMember(Name="PtdTotal", EmitDefaultValue=false)]
        public DecimalValue PtdTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountByPeriodRow {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BeginingBalance: ").Append(BeginingBalance).Append("\n");
            sb.Append("  CreditTotal: ").Append(CreditTotal).Append("\n");
            sb.Append("  CurrencyBeginingBalance: ").Append(CurrencyBeginingBalance).Append("\n");
            sb.Append("  CurrencyCreditTotal: ").Append(CurrencyCreditTotal).Append("\n");
            sb.Append("  CurrencyDebitTotal: ").Append(CurrencyDebitTotal).Append("\n");
            sb.Append("  CurrencyEndingBalance: ").Append(CurrencyEndingBalance).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CurrencyPtdTotal: ").Append(CurrencyPtdTotal).Append("\n");
            sb.Append("  DebitTotal: ").Append(DebitTotal).Append("\n");
            sb.Append("  EndingBalance: ").Append(EndingBalance).Append("\n");
            sb.Append("  LedgerID: ").Append(LedgerID).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  PtdTotal: ").Append(PtdTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountByPeriodRow);
        }

        /// <summary>
        /// Returns true if AccountByPeriodRow instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountByPeriodRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountByPeriodRow input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BeginingBalance == input.BeginingBalance ||
                    (this.BeginingBalance != null &&
                    this.BeginingBalance.Equals(input.BeginingBalance))
                ) && base.Equals(input) && 
                (
                    this.CreditTotal == input.CreditTotal ||
                    (this.CreditTotal != null &&
                    this.CreditTotal.Equals(input.CreditTotal))
                ) && base.Equals(input) && 
                (
                    this.CurrencyBeginingBalance == input.CurrencyBeginingBalance ||
                    (this.CurrencyBeginingBalance != null &&
                    this.CurrencyBeginingBalance.Equals(input.CurrencyBeginingBalance))
                ) && base.Equals(input) && 
                (
                    this.CurrencyCreditTotal == input.CurrencyCreditTotal ||
                    (this.CurrencyCreditTotal != null &&
                    this.CurrencyCreditTotal.Equals(input.CurrencyCreditTotal))
                ) && base.Equals(input) && 
                (
                    this.CurrencyDebitTotal == input.CurrencyDebitTotal ||
                    (this.CurrencyDebitTotal != null &&
                    this.CurrencyDebitTotal.Equals(input.CurrencyDebitTotal))
                ) && base.Equals(input) && 
                (
                    this.CurrencyEndingBalance == input.CurrencyEndingBalance ||
                    (this.CurrencyEndingBalance != null &&
                    this.CurrencyEndingBalance.Equals(input.CurrencyEndingBalance))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CurrencyPtdTotal == input.CurrencyPtdTotal ||
                    (this.CurrencyPtdTotal != null &&
                    this.CurrencyPtdTotal.Equals(input.CurrencyPtdTotal))
                ) && base.Equals(input) && 
                (
                    this.DebitTotal == input.DebitTotal ||
                    (this.DebitTotal != null &&
                    this.DebitTotal.Equals(input.DebitTotal))
                ) && base.Equals(input) && 
                (
                    this.EndingBalance == input.EndingBalance ||
                    (this.EndingBalance != null &&
                    this.EndingBalance.Equals(input.EndingBalance))
                ) && base.Equals(input) && 
                (
                    this.LedgerID == input.LedgerID ||
                    (this.LedgerID != null &&
                    this.LedgerID.Equals(input.LedgerID))
                ) && base.Equals(input) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && base.Equals(input) && 
                (
                    this.PtdTotal == input.PtdTotal ||
                    (this.PtdTotal != null &&
                    this.PtdTotal.Equals(input.PtdTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BeginingBalance != null)
                    hashCode = hashCode * 59 + this.BeginingBalance.GetHashCode();
                if (this.CreditTotal != null)
                    hashCode = hashCode * 59 + this.CreditTotal.GetHashCode();
                if (this.CurrencyBeginingBalance != null)
                    hashCode = hashCode * 59 + this.CurrencyBeginingBalance.GetHashCode();
                if (this.CurrencyCreditTotal != null)
                    hashCode = hashCode * 59 + this.CurrencyCreditTotal.GetHashCode();
                if (this.CurrencyDebitTotal != null)
                    hashCode = hashCode * 59 + this.CurrencyDebitTotal.GetHashCode();
                if (this.CurrencyEndingBalance != null)
                    hashCode = hashCode * 59 + this.CurrencyEndingBalance.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CurrencyPtdTotal != null)
                    hashCode = hashCode * 59 + this.CurrencyPtdTotal.GetHashCode();
                if (this.DebitTotal != null)
                    hashCode = hashCode * 59 + this.DebitTotal.GetHashCode();
                if (this.EndingBalance != null)
                    hashCode = hashCode * 59 + this.EndingBalance.GetHashCode();
                if (this.LedgerID != null)
                    hashCode = hashCode * 59 + this.LedgerID.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.PtdTotal != null)
                    hashCode = hashCode * 59 + this.PtdTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
