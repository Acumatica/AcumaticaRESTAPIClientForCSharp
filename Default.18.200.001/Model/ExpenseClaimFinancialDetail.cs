/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// ExpenseClaimFinancialDetail
    /// </summary>
    [DataContract]
    public partial class ExpenseClaimFinancialDetail : Entity,  IEquatable<ExpenseClaimFinancialDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseClaimFinancialDetail" /> class.
        /// </summary>
        /// <param name="aPDocuments">aPDocuments.</param>
        /// <param name="branch">branch.</param>
        /// <param name="posttoPeriod">posttoPeriod.</param>
        /// <param name="taxZone">taxZone.</param>
        public ExpenseClaimFinancialDetail(IEnumerable<ExpenseClaimAPDocument> aPDocuments = default(IEnumerable<ExpenseClaimAPDocument>), StringValue branch = default(StringValue), StringValue posttoPeriod = default(StringValue), StringValue taxZone = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.APDocuments = aPDocuments;
            this.Branch = branch;
            this.PosttoPeriod = posttoPeriod;
            this.TaxZone = taxZone;
        }
        
        /// <summary>
        /// Gets or Sets APDocuments
        /// </summary>
        [DataMember(Name="APDocuments", EmitDefaultValue=false)]
        public IEnumerable<ExpenseClaimAPDocument> APDocuments { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="Branch", EmitDefaultValue=false)]
        public StringValue Branch { get; set; }

        /// <summary>
        /// Gets or Sets PosttoPeriod
        /// </summary>
        [DataMember(Name="PosttoPeriod", EmitDefaultValue=false)]
        public StringValue PosttoPeriod { get; set; }

        /// <summary>
        /// Gets or Sets TaxZone
        /// </summary>
        [DataMember(Name="TaxZone", EmitDefaultValue=false)]
        public StringValue TaxZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseClaimFinancialDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  APDocuments: ").Append(APDocuments).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  PosttoPeriod: ").Append(PosttoPeriod).Append("\n");
            sb.Append("  TaxZone: ").Append(TaxZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseClaimFinancialDetail);
        }

        /// <summary>
        /// Returns true if ExpenseClaimFinancialDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseClaimFinancialDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseClaimFinancialDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.APDocuments == input.APDocuments ||
                    this.APDocuments != null &&
                    this.APDocuments.SequenceEqual(input.APDocuments)
                ) && base.Equals(input) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && base.Equals(input) && 
                (
                    this.PosttoPeriod == input.PosttoPeriod ||
                    (this.PosttoPeriod != null &&
                    this.PosttoPeriod.Equals(input.PosttoPeriod))
                ) && base.Equals(input) && 
                (
                    this.TaxZone == input.TaxZone ||
                    (this.TaxZone != null &&
                    this.TaxZone.Equals(input.TaxZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.APDocuments != null)
                    hashCode = hashCode * 59 + this.APDocuments.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.PosttoPeriod != null)
                    hashCode = hashCode * 59 + this.PosttoPeriod.GetHashCode();
                if (this.TaxZone != null)
                    hashCode = hashCode * 59 + this.TaxZone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
