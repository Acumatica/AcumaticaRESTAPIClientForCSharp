/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// TaxScheduleDetail
    /// </summary>
    [DataContract]
    public partial class TaxScheduleDetail : Entity,  IEquatable<TaxScheduleDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxScheduleDetail" /> class.
        /// </summary>
        /// <param name="deductibleTaxRate">deductibleTaxRate.</param>
        /// <param name="maxTaxableAmount">maxTaxableAmount.</param>
        /// <param name="minTaxableAmount">minTaxableAmount.</param>
        /// <param name="reportingGroup">reportingGroup.</param>
        /// <param name="revisionID">revisionID.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="taxID">taxID.</param>
        /// <param name="taxRate">taxRate.</param>
        public TaxScheduleDetail(DecimalValue deductibleTaxRate = default(DecimalValue), DecimalValue maxTaxableAmount = default(DecimalValue), DecimalValue minTaxableAmount = default(DecimalValue), StringValue reportingGroup = default(StringValue), IntValue revisionID = default(IntValue), DateTimeValue startDate = default(DateTimeValue), StringValue taxID = default(StringValue), DecimalValue taxRate = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.DeductibleTaxRate = deductibleTaxRate;
            this.MaxTaxableAmount = maxTaxableAmount;
            this.MinTaxableAmount = minTaxableAmount;
            this.ReportingGroup = reportingGroup;
            this.RevisionID = revisionID;
            this.StartDate = startDate;
            this.TaxID = taxID;
            this.TaxRate = taxRate;
        }
        
        /// <summary>
        /// Gets or Sets DeductibleTaxRate
        /// </summary>
        [DataMember(Name="DeductibleTaxRate", EmitDefaultValue=false)]
        public DecimalValue DeductibleTaxRate { get; set; }

        /// <summary>
        /// Gets or Sets MaxTaxableAmount
        /// </summary>
        [DataMember(Name="MaxTaxableAmount", EmitDefaultValue=false)]
        public DecimalValue MaxTaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets MinTaxableAmount
        /// </summary>
        [DataMember(Name="MinTaxableAmount", EmitDefaultValue=false)]
        public DecimalValue MinTaxableAmount { get; set; }

        /// <summary>
        /// Gets or Sets ReportingGroup
        /// </summary>
        [DataMember(Name="ReportingGroup", EmitDefaultValue=false)]
        public StringValue ReportingGroup { get; set; }

        /// <summary>
        /// Gets or Sets RevisionID
        /// </summary>
        [DataMember(Name="RevisionID", EmitDefaultValue=false)]
        public IntValue RevisionID { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTimeValue StartDate { get; set; }

        /// <summary>
        /// Gets or Sets TaxID
        /// </summary>
        [DataMember(Name="TaxID", EmitDefaultValue=false)]
        public StringValue TaxID { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="TaxRate", EmitDefaultValue=false)]
        public DecimalValue TaxRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxScheduleDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DeductibleTaxRate: ").Append(DeductibleTaxRate).Append("\n");
            sb.Append("  MaxTaxableAmount: ").Append(MaxTaxableAmount).Append("\n");
            sb.Append("  MinTaxableAmount: ").Append(MinTaxableAmount).Append("\n");
            sb.Append("  ReportingGroup: ").Append(ReportingGroup).Append("\n");
            sb.Append("  RevisionID: ").Append(RevisionID).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TaxID: ").Append(TaxID).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxScheduleDetail);
        }

        /// <summary>
        /// Returns true if TaxScheduleDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxScheduleDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxScheduleDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DeductibleTaxRate == input.DeductibleTaxRate ||
                    (this.DeductibleTaxRate != null &&
                    this.DeductibleTaxRate.Equals(input.DeductibleTaxRate))
                ) && base.Equals(input) && 
                (
                    this.MaxTaxableAmount == input.MaxTaxableAmount ||
                    (this.MaxTaxableAmount != null &&
                    this.MaxTaxableAmount.Equals(input.MaxTaxableAmount))
                ) && base.Equals(input) && 
                (
                    this.MinTaxableAmount == input.MinTaxableAmount ||
                    (this.MinTaxableAmount != null &&
                    this.MinTaxableAmount.Equals(input.MinTaxableAmount))
                ) && base.Equals(input) && 
                (
                    this.ReportingGroup == input.ReportingGroup ||
                    (this.ReportingGroup != null &&
                    this.ReportingGroup.Equals(input.ReportingGroup))
                ) && base.Equals(input) && 
                (
                    this.RevisionID == input.RevisionID ||
                    (this.RevisionID != null &&
                    this.RevisionID.Equals(input.RevisionID))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.TaxID == input.TaxID ||
                    (this.TaxID != null &&
                    this.TaxID.Equals(input.TaxID))
                ) && base.Equals(input) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DeductibleTaxRate != null)
                    hashCode = hashCode * 59 + this.DeductibleTaxRate.GetHashCode();
                if (this.MaxTaxableAmount != null)
                    hashCode = hashCode * 59 + this.MaxTaxableAmount.GetHashCode();
                if (this.MinTaxableAmount != null)
                    hashCode = hashCode * 59 + this.MinTaxableAmount.GetHashCode();
                if (this.ReportingGroup != null)
                    hashCode = hashCode * 59 + this.ReportingGroup.GetHashCode();
                if (this.RevisionID != null)
                    hashCode = hashCode * 59 + this.RevisionID.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.TaxID != null)
                    hashCode = hashCode * 59 + this.TaxID.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
