/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// PaymentMethod
    /// </summary>
    [DataContract]
    public partial class PaymentMethod : Entity,  IEquatable<PaymentMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethod" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="allowedCashAccounts">allowedCashAccounts.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="description">description.</param>
        /// <param name="integratedProcessing">integratedProcessing.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="meansOfPayment">meansOfPayment.</param>
        /// <param name="paymentMethodID">paymentMethodID.</param>
        /// <param name="processingCenters">processingCenters.</param>
        /// <param name="requireRemittanceInformationforCashAccount">requireRemittanceInformationforCashAccount.</param>
        /// <param name="useInAP">useInAP.</param>
        /// <param name="useInAR">useInAR.</param>
        public PaymentMethod(BooleanValue active = default(BooleanValue), List<PaymentMethodAllowedCashAccountDetail> allowedCashAccounts = default(List<PaymentMethodAllowedCashAccountDetail>), DateTimeValue createdDateTime = default(DateTimeValue), StringValue description = default(StringValue), BooleanValue integratedProcessing = default(BooleanValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue meansOfPayment = default(StringValue), StringValue paymentMethodID = default(StringValue), List<PaymentMethodProcessingCenterDetail> processingCenters = default(List<PaymentMethodProcessingCenterDetail>), BooleanValue requireRemittanceInformationforCashAccount = default(BooleanValue), BooleanValue useInAP = default(BooleanValue), BooleanValue useInAR = default(BooleanValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Active = active;
            this.AllowedCashAccounts = allowedCashAccounts;
            this.CreatedDateTime = createdDateTime;
            this.Description = description;
            this.IntegratedProcessing = integratedProcessing;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.MeansOfPayment = meansOfPayment;
            this.PaymentMethodID = paymentMethodID;
            this.ProcessingCenters = processingCenters;
            this.RequireRemittanceInformationforCashAccount = requireRemittanceInformationforCashAccount;
            this.UseInAP = useInAP;
            this.UseInAR = useInAR;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public BooleanValue Active { get; set; }

        /// <summary>
        /// Gets or Sets AllowedCashAccounts
        /// </summary>
        [DataMember(Name="AllowedCashAccounts", EmitDefaultValue=false)]
        public List<PaymentMethodAllowedCashAccountDetail> AllowedCashAccounts { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets IntegratedProcessing
        /// </summary>
        [DataMember(Name="IntegratedProcessing", EmitDefaultValue=false)]
        public BooleanValue IntegratedProcessing { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets MeansOfPayment
        /// </summary>
        [DataMember(Name="MeansOfPayment", EmitDefaultValue=false)]
        public StringValue MeansOfPayment { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodID
        /// </summary>
        [DataMember(Name="PaymentMethodID", EmitDefaultValue=false)]
        public StringValue PaymentMethodID { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingCenters
        /// </summary>
        [DataMember(Name="ProcessingCenters", EmitDefaultValue=false)]
        public List<PaymentMethodProcessingCenterDetail> ProcessingCenters { get; set; }

        /// <summary>
        /// Gets or Sets RequireRemittanceInformationforCashAccount
        /// </summary>
        [DataMember(Name="RequireRemittanceInformationforCashAccount", EmitDefaultValue=false)]
        public BooleanValue RequireRemittanceInformationforCashAccount { get; set; }

        /// <summary>
        /// Gets or Sets UseInAP
        /// </summary>
        [DataMember(Name="UseInAP", EmitDefaultValue=false)]
        public BooleanValue UseInAP { get; set; }

        /// <summary>
        /// Gets or Sets UseInAR
        /// </summary>
        [DataMember(Name="UseInAR", EmitDefaultValue=false)]
        public BooleanValue UseInAR { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethod {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AllowedCashAccounts: ").Append(AllowedCashAccounts).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IntegratedProcessing: ").Append(IntegratedProcessing).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  MeansOfPayment: ").Append(MeansOfPayment).Append("\n");
            sb.Append("  PaymentMethodID: ").Append(PaymentMethodID).Append("\n");
            sb.Append("  ProcessingCenters: ").Append(ProcessingCenters).Append("\n");
            sb.Append("  RequireRemittanceInformationforCashAccount: ").Append(RequireRemittanceInformationforCashAccount).Append("\n");
            sb.Append("  UseInAP: ").Append(UseInAP).Append("\n");
            sb.Append("  UseInAR: ").Append(UseInAR).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethod);
        }

        /// <summary>
        /// Returns true if PaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethod input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && base.Equals(input) && 
                (
                    this.AllowedCashAccounts == input.AllowedCashAccounts ||
                    this.AllowedCashAccounts != null &&
                    this.AllowedCashAccounts.SequenceEqual(input.AllowedCashAccounts)
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.IntegratedProcessing == input.IntegratedProcessing ||
                    (this.IntegratedProcessing != null &&
                    this.IntegratedProcessing.Equals(input.IntegratedProcessing))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.MeansOfPayment == input.MeansOfPayment ||
                    (this.MeansOfPayment != null &&
                    this.MeansOfPayment.Equals(input.MeansOfPayment))
                ) && base.Equals(input) && 
                (
                    this.PaymentMethodID == input.PaymentMethodID ||
                    (this.PaymentMethodID != null &&
                    this.PaymentMethodID.Equals(input.PaymentMethodID))
                ) && base.Equals(input) && 
                (
                    this.ProcessingCenters == input.ProcessingCenters ||
                    this.ProcessingCenters != null &&
                    this.ProcessingCenters.SequenceEqual(input.ProcessingCenters)
                ) && base.Equals(input) && 
                (
                    this.RequireRemittanceInformationforCashAccount == input.RequireRemittanceInformationforCashAccount ||
                    (this.RequireRemittanceInformationforCashAccount != null &&
                    this.RequireRemittanceInformationforCashAccount.Equals(input.RequireRemittanceInformationforCashAccount))
                ) && base.Equals(input) && 
                (
                    this.UseInAP == input.UseInAP ||
                    (this.UseInAP != null &&
                    this.UseInAP.Equals(input.UseInAP))
                ) && base.Equals(input) && 
                (
                    this.UseInAR == input.UseInAR ||
                    (this.UseInAR != null &&
                    this.UseInAR.Equals(input.UseInAR))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.AllowedCashAccounts != null)
                    hashCode = hashCode * 59 + this.AllowedCashAccounts.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.IntegratedProcessing != null)
                    hashCode = hashCode * 59 + this.IntegratedProcessing.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.MeansOfPayment != null)
                    hashCode = hashCode * 59 + this.MeansOfPayment.GetHashCode();
                if (this.PaymentMethodID != null)
                    hashCode = hashCode * 59 + this.PaymentMethodID.GetHashCode();
                if (this.ProcessingCenters != null)
                    hashCode = hashCode * 59 + this.ProcessingCenters.GetHashCode();
                if (this.RequireRemittanceInformationforCashAccount != null)
                    hashCode = hashCode * 59 + this.RequireRemittanceInformationforCashAccount.GetHashCode();
                if (this.UseInAP != null)
                    hashCode = hashCode * 59 + this.UseInAP.GetHashCode();
                if (this.UseInAR != null)
                    hashCode = hashCode * 59 + this.UseInAR.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
