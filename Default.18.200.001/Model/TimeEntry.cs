/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// TimeEntry
    /// </summary>
    [DataContract]
    public partial class TimeEntry : Entity,  IEquatable<TimeEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeEntry" /> class.
        /// </summary>
        /// <param name="approvalStatus">approvalStatus.</param>
        /// <param name="approver">approver.</param>
        /// <param name="billable">billable.</param>
        /// <param name="billableOvertime">billableOvertime.</param>
        /// <param name="billableTime">billableTime.</param>
        /// <param name="certifiedJob">certifiedJob.</param>
        /// <param name="costCode">costCode.</param>
        /// <param name="costRate">costRate.</param>
        /// <param name="date">date.</param>
        /// <param name="earningType">earningType.</param>
        /// <param name="employee">employee.</param>
        /// <param name="externalRefNbr">externalRefNbr.</param>
        /// <param name="laborItem">laborItem.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="overtime">overtime.</param>
        /// <param name="projectID">projectID.</param>
        /// <param name="projectTaskID">projectTaskID.</param>
        /// <param name="summary">summary.</param>
        /// <param name="time">time.</param>
        /// <param name="timeEntryID">timeEntryID.</param>
        /// <param name="timeSpent">timeSpent.</param>
        /// <param name="unionLocal">unionLocal.</param>
        /// <param name="wCCCode">wCCCode.</param>
        public TimeEntry(StringValue approvalStatus = default(StringValue), StringValue approver = default(StringValue), BooleanValue billable = default(BooleanValue), StringValue billableOvertime = default(StringValue), StringValue billableTime = default(StringValue), BooleanValue certifiedJob = default(BooleanValue), StringValue costCode = default(StringValue), DecimalValue costRate = default(DecimalValue), DateTimeValue date = default(DateTimeValue), StringValue earningType = default(StringValue), StringValue employee = default(StringValue), StringValue externalRefNbr = default(StringValue), StringValue laborItem = default(StringValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue overtime = default(StringValue), StringValue projectID = default(StringValue), StringValue projectTaskID = default(StringValue), StringValue summary = default(StringValue), DateTimeValue time = default(DateTimeValue), GuidValue timeEntryID = default(GuidValue), StringValue timeSpent = default(StringValue), StringValue unionLocal = default(StringValue), StringValue wCCCode = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ApprovalStatus = approvalStatus;
            this.Approver = approver;
            this.Billable = billable;
            this.BillableOvertime = billableOvertime;
            this.BillableTime = billableTime;
            this.CertifiedJob = certifiedJob;
            this.CostCode = costCode;
            this.CostRate = costRate;
            this.Date = date;
            this.EarningType = earningType;
            this.Employee = employee;
            this.ExternalRefNbr = externalRefNbr;
            this.LaborItem = laborItem;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.Overtime = overtime;
            this.ProjectID = projectID;
            this.ProjectTaskID = projectTaskID;
            this.Summary = summary;
            this.Time = time;
            this.TimeEntryID = timeEntryID;
            this.TimeSpent = timeSpent;
            this.UnionLocal = unionLocal;
            this.WCCCode = wCCCode;
        }
        
        /// <summary>
        /// Gets or Sets ApprovalStatus
        /// </summary>
        [DataMember(Name="ApprovalStatus", EmitDefaultValue=false)]
        public StringValue ApprovalStatus { get; set; }

        /// <summary>
        /// Gets or Sets Approver
        /// </summary>
        [DataMember(Name="Approver", EmitDefaultValue=false)]
        public StringValue Approver { get; set; }

        /// <summary>
        /// Gets or Sets Billable
        /// </summary>
        [DataMember(Name="Billable", EmitDefaultValue=false)]
        public BooleanValue Billable { get; set; }

        /// <summary>
        /// Gets or Sets BillableOvertime
        /// </summary>
        [DataMember(Name="BillableOvertime", EmitDefaultValue=false)]
        public StringValue BillableOvertime { get; set; }

        /// <summary>
        /// Gets or Sets BillableTime
        /// </summary>
        [DataMember(Name="BillableTime", EmitDefaultValue=false)]
        public StringValue BillableTime { get; set; }

        /// <summary>
        /// Gets or Sets CertifiedJob
        /// </summary>
        [DataMember(Name="CertifiedJob", EmitDefaultValue=false)]
        public BooleanValue CertifiedJob { get; set; }

        /// <summary>
        /// Gets or Sets CostCode
        /// </summary>
        [DataMember(Name="CostCode", EmitDefaultValue=false)]
        public StringValue CostCode { get; set; }

        /// <summary>
        /// Gets or Sets CostRate
        /// </summary>
        [DataMember(Name="CostRate", EmitDefaultValue=false)]
        public DecimalValue CostRate { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// Gets or Sets EarningType
        /// </summary>
        [DataMember(Name="EarningType", EmitDefaultValue=false)]
        public StringValue EarningType { get; set; }

        /// <summary>
        /// Gets or Sets Employee
        /// </summary>
        [DataMember(Name="Employee", EmitDefaultValue=false)]
        public StringValue Employee { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRefNbr
        /// </summary>
        [DataMember(Name="ExternalRefNbr", EmitDefaultValue=false)]
        public StringValue ExternalRefNbr { get; set; }

        /// <summary>
        /// Gets or Sets LaborItem
        /// </summary>
        [DataMember(Name="LaborItem", EmitDefaultValue=false)]
        public StringValue LaborItem { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Overtime
        /// </summary>
        [DataMember(Name="Overtime", EmitDefaultValue=false)]
        public StringValue Overtime { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="ProjectID", EmitDefaultValue=false)]
        public StringValue ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTaskID
        /// </summary>
        [DataMember(Name="ProjectTaskID", EmitDefaultValue=false)]
        public StringValue ProjectTaskID { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="Summary", EmitDefaultValue=false)]
        public StringValue Summary { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name="Time", EmitDefaultValue=false)]
        public DateTimeValue Time { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntryID
        /// </summary>
        [DataMember(Name="TimeEntryID", EmitDefaultValue=false)]
        public GuidValue TimeEntryID { get; set; }

        /// <summary>
        /// Gets or Sets TimeSpent
        /// </summary>
        [DataMember(Name="TimeSpent", EmitDefaultValue=false)]
        public StringValue TimeSpent { get; set; }

        /// <summary>
        /// Gets or Sets UnionLocal
        /// </summary>
        [DataMember(Name="UnionLocal", EmitDefaultValue=false)]
        public StringValue UnionLocal { get; set; }

        /// <summary>
        /// Gets or Sets WCCCode
        /// </summary>
        [DataMember(Name="WCCCode", EmitDefaultValue=false)]
        public StringValue WCCCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeEntry {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ApprovalStatus: ").Append(ApprovalStatus).Append("\n");
            sb.Append("  Approver: ").Append(Approver).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  BillableOvertime: ").Append(BillableOvertime).Append("\n");
            sb.Append("  BillableTime: ").Append(BillableTime).Append("\n");
            sb.Append("  CertifiedJob: ").Append(CertifiedJob).Append("\n");
            sb.Append("  CostCode: ").Append(CostCode).Append("\n");
            sb.Append("  CostRate: ").Append(CostRate).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  EarningType: ").Append(EarningType).Append("\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  ExternalRefNbr: ").Append(ExternalRefNbr).Append("\n");
            sb.Append("  LaborItem: ").Append(LaborItem).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  Overtime: ").Append(Overtime).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  ProjectTaskID: ").Append(ProjectTaskID).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  TimeEntryID: ").Append(TimeEntryID).Append("\n");
            sb.Append("  TimeSpent: ").Append(TimeSpent).Append("\n");
            sb.Append("  UnionLocal: ").Append(UnionLocal).Append("\n");
            sb.Append("  WCCCode: ").Append(WCCCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeEntry);
        }

        /// <summary>
        /// Returns true if TimeEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeEntry input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ApprovalStatus == input.ApprovalStatus ||
                    (this.ApprovalStatus != null &&
                    this.ApprovalStatus.Equals(input.ApprovalStatus))
                ) && base.Equals(input) && 
                (
                    this.Approver == input.Approver ||
                    (this.Approver != null &&
                    this.Approver.Equals(input.Approver))
                ) && base.Equals(input) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && base.Equals(input) && 
                (
                    this.BillableOvertime == input.BillableOvertime ||
                    (this.BillableOvertime != null &&
                    this.BillableOvertime.Equals(input.BillableOvertime))
                ) && base.Equals(input) && 
                (
                    this.BillableTime == input.BillableTime ||
                    (this.BillableTime != null &&
                    this.BillableTime.Equals(input.BillableTime))
                ) && base.Equals(input) && 
                (
                    this.CertifiedJob == input.CertifiedJob ||
                    (this.CertifiedJob != null &&
                    this.CertifiedJob.Equals(input.CertifiedJob))
                ) && base.Equals(input) && 
                (
                    this.CostCode == input.CostCode ||
                    (this.CostCode != null &&
                    this.CostCode.Equals(input.CostCode))
                ) && base.Equals(input) && 
                (
                    this.CostRate == input.CostRate ||
                    (this.CostRate != null &&
                    this.CostRate.Equals(input.CostRate))
                ) && base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.EarningType == input.EarningType ||
                    (this.EarningType != null &&
                    this.EarningType.Equals(input.EarningType))
                ) && base.Equals(input) && 
                (
                    this.Employee == input.Employee ||
                    (this.Employee != null &&
                    this.Employee.Equals(input.Employee))
                ) && base.Equals(input) && 
                (
                    this.ExternalRefNbr == input.ExternalRefNbr ||
                    (this.ExternalRefNbr != null &&
                    this.ExternalRefNbr.Equals(input.ExternalRefNbr))
                ) && base.Equals(input) && 
                (
                    this.LaborItem == input.LaborItem ||
                    (this.LaborItem != null &&
                    this.LaborItem.Equals(input.LaborItem))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.Overtime == input.Overtime ||
                    (this.Overtime != null &&
                    this.Overtime.Equals(input.Overtime))
                ) && base.Equals(input) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && base.Equals(input) && 
                (
                    this.ProjectTaskID == input.ProjectTaskID ||
                    (this.ProjectTaskID != null &&
                    this.ProjectTaskID.Equals(input.ProjectTaskID))
                ) && base.Equals(input) && 
                (
                    this.Summary == input.Summary ||
                    (this.Summary != null &&
                    this.Summary.Equals(input.Summary))
                ) && base.Equals(input) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && base.Equals(input) && 
                (
                    this.TimeEntryID == input.TimeEntryID ||
                    (this.TimeEntryID != null &&
                    this.TimeEntryID.Equals(input.TimeEntryID))
                ) && base.Equals(input) && 
                (
                    this.TimeSpent == input.TimeSpent ||
                    (this.TimeSpent != null &&
                    this.TimeSpent.Equals(input.TimeSpent))
                ) && base.Equals(input) && 
                (
                    this.UnionLocal == input.UnionLocal ||
                    (this.UnionLocal != null &&
                    this.UnionLocal.Equals(input.UnionLocal))
                ) && base.Equals(input) && 
                (
                    this.WCCCode == input.WCCCode ||
                    (this.WCCCode != null &&
                    this.WCCCode.Equals(input.WCCCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ApprovalStatus != null)
                    hashCode = hashCode * 59 + this.ApprovalStatus.GetHashCode();
                if (this.Approver != null)
                    hashCode = hashCode * 59 + this.Approver.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.BillableOvertime != null)
                    hashCode = hashCode * 59 + this.BillableOvertime.GetHashCode();
                if (this.BillableTime != null)
                    hashCode = hashCode * 59 + this.BillableTime.GetHashCode();
                if (this.CertifiedJob != null)
                    hashCode = hashCode * 59 + this.CertifiedJob.GetHashCode();
                if (this.CostCode != null)
                    hashCode = hashCode * 59 + this.CostCode.GetHashCode();
                if (this.CostRate != null)
                    hashCode = hashCode * 59 + this.CostRate.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.EarningType != null)
                    hashCode = hashCode * 59 + this.EarningType.GetHashCode();
                if (this.Employee != null)
                    hashCode = hashCode * 59 + this.Employee.GetHashCode();
                if (this.ExternalRefNbr != null)
                    hashCode = hashCode * 59 + this.ExternalRefNbr.GetHashCode();
                if (this.LaborItem != null)
                    hashCode = hashCode * 59 + this.LaborItem.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.Overtime != null)
                    hashCode = hashCode * 59 + this.Overtime.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.ProjectTaskID != null)
                    hashCode = hashCode * 59 + this.ProjectTaskID.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.TimeEntryID != null)
                    hashCode = hashCode * 59 + this.TimeEntryID.GetHashCode();
                if (this.TimeSpent != null)
                    hashCode = hashCode * 59 + this.TimeSpent.GetHashCode();
                if (this.UnionLocal != null)
                    hashCode = hashCode * 59 + this.UnionLocal.GetHashCode();
                if (this.WCCCode != null)
                    hashCode = hashCode * 59 + this.WCCCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
