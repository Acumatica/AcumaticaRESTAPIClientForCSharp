/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// StatementCycle
    /// </summary>
    [DataContract]
    public partial class StatementCycle : Entity,  IEquatable<StatementCycle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatementCycle" /> class.
        /// </summary>
        /// <param name="agingPeriod1EndDay">agingPeriod1EndDay.</param>
        /// <param name="agingPeriod1Message">agingPeriod1Message.</param>
        /// <param name="agingPeriod2EndDay">agingPeriod2EndDay.</param>
        /// <param name="agingPeriod2Message">agingPeriod2Message.</param>
        /// <param name="agingPeriod3EndDay">agingPeriod3EndDay.</param>
        /// <param name="agingPeriod3Message">agingPeriod3Message.</param>
        /// <param name="agingPeriod4Message">agingPeriod4Message.</param>
        /// <param name="applyOverdueCharges">applyOverdueCharges.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="cycleID">cycleID.</param>
        /// <param name="dayOfMonth">dayOfMonth.</param>
        /// <param name="dayOfMonth1">dayOfMonth1.</param>
        /// <param name="description">description.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="lastStatementDate">lastStatementDate.</param>
        /// <param name="overdueChargeID">overdueChargeID.</param>
        /// <param name="prepareOn">prepareOn.</param>
        /// <param name="requireOverdueChargesCalculationBeforeStatement">requireOverdueChargesCalculationBeforeStatement.</param>
        /// <param name="requirePaymentApplicationBeforeStatementProcessing">requirePaymentApplicationBeforeStatementProcessing.</param>
        public StatementCycle(ShortValue agingPeriod1EndDay = default(ShortValue), StringValue agingPeriod1Message = default(StringValue), ShortValue agingPeriod2EndDay = default(ShortValue), StringValue agingPeriod2Message = default(StringValue), ShortValue agingPeriod3EndDay = default(ShortValue), StringValue agingPeriod3Message = default(StringValue), StringValue agingPeriod4Message = default(StringValue), BooleanValue applyOverdueCharges = default(BooleanValue), DateTimeValue createdDateTime = default(DateTimeValue), StringValue cycleID = default(StringValue), ShortValue dayOfMonth = default(ShortValue), ShortValue dayOfMonth1 = default(ShortValue), StringValue description = default(StringValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), DateTimeValue lastStatementDate = default(DateTimeValue), StringValue overdueChargeID = default(StringValue), StringValue prepareOn = default(StringValue), BooleanValue requireOverdueChargesCalculationBeforeStatement = default(BooleanValue), BooleanValue requirePaymentApplicationBeforeStatementProcessing = default(BooleanValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AgingPeriod1EndDay = agingPeriod1EndDay;
            this.AgingPeriod1Message = agingPeriod1Message;
            this.AgingPeriod2EndDay = agingPeriod2EndDay;
            this.AgingPeriod2Message = agingPeriod2Message;
            this.AgingPeriod3EndDay = agingPeriod3EndDay;
            this.AgingPeriod3Message = agingPeriod3Message;
            this.AgingPeriod4Message = agingPeriod4Message;
            this.ApplyOverdueCharges = applyOverdueCharges;
            this.CreatedDateTime = createdDateTime;
            this.CycleID = cycleID;
            this.DayOfMonth = dayOfMonth;
            this.DayOfMonth1 = dayOfMonth1;
            this.Description = description;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.LastStatementDate = lastStatementDate;
            this.OverdueChargeID = overdueChargeID;
            this.PrepareOn = prepareOn;
            this.RequireOverdueChargesCalculationBeforeStatement = requireOverdueChargesCalculationBeforeStatement;
            this.RequirePaymentApplicationBeforeStatementProcessing = requirePaymentApplicationBeforeStatementProcessing;
        }
        
        /// <summary>
        /// Gets or Sets AgingPeriod1EndDay
        /// </summary>
        [DataMember(Name="AgingPeriod1EndDay", EmitDefaultValue=false)]
        public ShortValue AgingPeriod1EndDay { get; set; }

        /// <summary>
        /// Gets or Sets AgingPeriod1Message
        /// </summary>
        [DataMember(Name="AgingPeriod1Message", EmitDefaultValue=false)]
        public StringValue AgingPeriod1Message { get; set; }

        /// <summary>
        /// Gets or Sets AgingPeriod2EndDay
        /// </summary>
        [DataMember(Name="AgingPeriod2EndDay", EmitDefaultValue=false)]
        public ShortValue AgingPeriod2EndDay { get; set; }

        /// <summary>
        /// Gets or Sets AgingPeriod2Message
        /// </summary>
        [DataMember(Name="AgingPeriod2Message", EmitDefaultValue=false)]
        public StringValue AgingPeriod2Message { get; set; }

        /// <summary>
        /// Gets or Sets AgingPeriod3EndDay
        /// </summary>
        [DataMember(Name="AgingPeriod3EndDay", EmitDefaultValue=false)]
        public ShortValue AgingPeriod3EndDay { get; set; }

        /// <summary>
        /// Gets or Sets AgingPeriod3Message
        /// </summary>
        [DataMember(Name="AgingPeriod3Message", EmitDefaultValue=false)]
        public StringValue AgingPeriod3Message { get; set; }

        /// <summary>
        /// Gets or Sets AgingPeriod4Message
        /// </summary>
        [DataMember(Name="AgingPeriod4Message", EmitDefaultValue=false)]
        public StringValue AgingPeriod4Message { get; set; }

        /// <summary>
        /// Gets or Sets ApplyOverdueCharges
        /// </summary>
        [DataMember(Name="ApplyOverdueCharges", EmitDefaultValue=false)]
        public BooleanValue ApplyOverdueCharges { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CycleID
        /// </summary>
        [DataMember(Name="CycleID", EmitDefaultValue=false)]
        public StringValue CycleID { get; set; }

        /// <summary>
        /// Gets or Sets DayOfMonth
        /// </summary>
        [DataMember(Name="DayOfMonth", EmitDefaultValue=false)]
        public ShortValue DayOfMonth { get; set; }

        /// <summary>
        /// Gets or Sets DayOfMonth1
        /// </summary>
        [DataMember(Name="DayOfMonth1", EmitDefaultValue=false)]
        public ShortValue DayOfMonth1 { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastStatementDate
        /// </summary>
        [DataMember(Name="LastStatementDate", EmitDefaultValue=false)]
        public DateTimeValue LastStatementDate { get; set; }

        /// <summary>
        /// Gets or Sets OverdueChargeID
        /// </summary>
        [DataMember(Name="OverdueChargeID", EmitDefaultValue=false)]
        public StringValue OverdueChargeID { get; set; }

        /// <summary>
        /// Gets or Sets PrepareOn
        /// </summary>
        [DataMember(Name="PrepareOn", EmitDefaultValue=false)]
        public StringValue PrepareOn { get; set; }

        /// <summary>
        /// Gets or Sets RequireOverdueChargesCalculationBeforeStatement
        /// </summary>
        [DataMember(Name="RequireOverdueChargesCalculationBeforeStatement", EmitDefaultValue=false)]
        public BooleanValue RequireOverdueChargesCalculationBeforeStatement { get; set; }

        /// <summary>
        /// Gets or Sets RequirePaymentApplicationBeforeStatementProcessing
        /// </summary>
        [DataMember(Name="RequirePaymentApplicationBeforeStatementProcessing", EmitDefaultValue=false)]
        public BooleanValue RequirePaymentApplicationBeforeStatementProcessing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatementCycle {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AgingPeriod1EndDay: ").Append(AgingPeriod1EndDay).Append("\n");
            sb.Append("  AgingPeriod1Message: ").Append(AgingPeriod1Message).Append("\n");
            sb.Append("  AgingPeriod2EndDay: ").Append(AgingPeriod2EndDay).Append("\n");
            sb.Append("  AgingPeriod2Message: ").Append(AgingPeriod2Message).Append("\n");
            sb.Append("  AgingPeriod3EndDay: ").Append(AgingPeriod3EndDay).Append("\n");
            sb.Append("  AgingPeriod3Message: ").Append(AgingPeriod3Message).Append("\n");
            sb.Append("  AgingPeriod4Message: ").Append(AgingPeriod4Message).Append("\n");
            sb.Append("  ApplyOverdueCharges: ").Append(ApplyOverdueCharges).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CycleID: ").Append(CycleID).Append("\n");
            sb.Append("  DayOfMonth: ").Append(DayOfMonth).Append("\n");
            sb.Append("  DayOfMonth1: ").Append(DayOfMonth1).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LastStatementDate: ").Append(LastStatementDate).Append("\n");
            sb.Append("  OverdueChargeID: ").Append(OverdueChargeID).Append("\n");
            sb.Append("  PrepareOn: ").Append(PrepareOn).Append("\n");
            sb.Append("  RequireOverdueChargesCalculationBeforeStatement: ").Append(RequireOverdueChargesCalculationBeforeStatement).Append("\n");
            sb.Append("  RequirePaymentApplicationBeforeStatementProcessing: ").Append(RequirePaymentApplicationBeforeStatementProcessing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatementCycle);
        }

        /// <summary>
        /// Returns true if StatementCycle instances are equal
        /// </summary>
        /// <param name="input">Instance of StatementCycle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatementCycle input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AgingPeriod1EndDay == input.AgingPeriod1EndDay ||
                    (this.AgingPeriod1EndDay != null &&
                    this.AgingPeriod1EndDay.Equals(input.AgingPeriod1EndDay))
                ) && base.Equals(input) && 
                (
                    this.AgingPeriod1Message == input.AgingPeriod1Message ||
                    (this.AgingPeriod1Message != null &&
                    this.AgingPeriod1Message.Equals(input.AgingPeriod1Message))
                ) && base.Equals(input) && 
                (
                    this.AgingPeriod2EndDay == input.AgingPeriod2EndDay ||
                    (this.AgingPeriod2EndDay != null &&
                    this.AgingPeriod2EndDay.Equals(input.AgingPeriod2EndDay))
                ) && base.Equals(input) && 
                (
                    this.AgingPeriod2Message == input.AgingPeriod2Message ||
                    (this.AgingPeriod2Message != null &&
                    this.AgingPeriod2Message.Equals(input.AgingPeriod2Message))
                ) && base.Equals(input) && 
                (
                    this.AgingPeriod3EndDay == input.AgingPeriod3EndDay ||
                    (this.AgingPeriod3EndDay != null &&
                    this.AgingPeriod3EndDay.Equals(input.AgingPeriod3EndDay))
                ) && base.Equals(input) && 
                (
                    this.AgingPeriod3Message == input.AgingPeriod3Message ||
                    (this.AgingPeriod3Message != null &&
                    this.AgingPeriod3Message.Equals(input.AgingPeriod3Message))
                ) && base.Equals(input) && 
                (
                    this.AgingPeriod4Message == input.AgingPeriod4Message ||
                    (this.AgingPeriod4Message != null &&
                    this.AgingPeriod4Message.Equals(input.AgingPeriod4Message))
                ) && base.Equals(input) && 
                (
                    this.ApplyOverdueCharges == input.ApplyOverdueCharges ||
                    (this.ApplyOverdueCharges != null &&
                    this.ApplyOverdueCharges.Equals(input.ApplyOverdueCharges))
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.CycleID == input.CycleID ||
                    (this.CycleID != null &&
                    this.CycleID.Equals(input.CycleID))
                ) && base.Equals(input) && 
                (
                    this.DayOfMonth == input.DayOfMonth ||
                    (this.DayOfMonth != null &&
                    this.DayOfMonth.Equals(input.DayOfMonth))
                ) && base.Equals(input) && 
                (
                    this.DayOfMonth1 == input.DayOfMonth1 ||
                    (this.DayOfMonth1 != null &&
                    this.DayOfMonth1.Equals(input.DayOfMonth1))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.LastStatementDate == input.LastStatementDate ||
                    (this.LastStatementDate != null &&
                    this.LastStatementDate.Equals(input.LastStatementDate))
                ) && base.Equals(input) && 
                (
                    this.OverdueChargeID == input.OverdueChargeID ||
                    (this.OverdueChargeID != null &&
                    this.OverdueChargeID.Equals(input.OverdueChargeID))
                ) && base.Equals(input) && 
                (
                    this.PrepareOn == input.PrepareOn ||
                    (this.PrepareOn != null &&
                    this.PrepareOn.Equals(input.PrepareOn))
                ) && base.Equals(input) && 
                (
                    this.RequireOverdueChargesCalculationBeforeStatement == input.RequireOverdueChargesCalculationBeforeStatement ||
                    (this.RequireOverdueChargesCalculationBeforeStatement != null &&
                    this.RequireOverdueChargesCalculationBeforeStatement.Equals(input.RequireOverdueChargesCalculationBeforeStatement))
                ) && base.Equals(input) && 
                (
                    this.RequirePaymentApplicationBeforeStatementProcessing == input.RequirePaymentApplicationBeforeStatementProcessing ||
                    (this.RequirePaymentApplicationBeforeStatementProcessing != null &&
                    this.RequirePaymentApplicationBeforeStatementProcessing.Equals(input.RequirePaymentApplicationBeforeStatementProcessing))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AgingPeriod1EndDay != null)
                    hashCode = hashCode * 59 + this.AgingPeriod1EndDay.GetHashCode();
                if (this.AgingPeriod1Message != null)
                    hashCode = hashCode * 59 + this.AgingPeriod1Message.GetHashCode();
                if (this.AgingPeriod2EndDay != null)
                    hashCode = hashCode * 59 + this.AgingPeriod2EndDay.GetHashCode();
                if (this.AgingPeriod2Message != null)
                    hashCode = hashCode * 59 + this.AgingPeriod2Message.GetHashCode();
                if (this.AgingPeriod3EndDay != null)
                    hashCode = hashCode * 59 + this.AgingPeriod3EndDay.GetHashCode();
                if (this.AgingPeriod3Message != null)
                    hashCode = hashCode * 59 + this.AgingPeriod3Message.GetHashCode();
                if (this.AgingPeriod4Message != null)
                    hashCode = hashCode * 59 + this.AgingPeriod4Message.GetHashCode();
                if (this.ApplyOverdueCharges != null)
                    hashCode = hashCode * 59 + this.ApplyOverdueCharges.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CycleID != null)
                    hashCode = hashCode * 59 + this.CycleID.GetHashCode();
                if (this.DayOfMonth != null)
                    hashCode = hashCode * 59 + this.DayOfMonth.GetHashCode();
                if (this.DayOfMonth1 != null)
                    hashCode = hashCode * 59 + this.DayOfMonth1.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.LastStatementDate != null)
                    hashCode = hashCode * 59 + this.LastStatementDate.GetHashCode();
                if (this.OverdueChargeID != null)
                    hashCode = hashCode * 59 + this.OverdueChargeID.GetHashCode();
                if (this.PrepareOn != null)
                    hashCode = hashCode * 59 + this.PrepareOn.GetHashCode();
                if (this.RequireOverdueChargesCalculationBeforeStatement != null)
                    hashCode = hashCode * 59 + this.RequireOverdueChargesCalculationBeforeStatement.GetHashCode();
                if (this.RequirePaymentApplicationBeforeStatementProcessing != null)
                    hashCode = hashCode * 59 + this.RequirePaymentApplicationBeforeStatementProcessing.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
