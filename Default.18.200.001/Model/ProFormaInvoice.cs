/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// ProFormaInvoice
    /// </summary>
    [DataContract]
    public partial class ProFormaInvoice : Entity,  IEquatable<ProFormaInvoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProFormaInvoice" /> class.
        /// </summary>
        /// <param name="amountDue">amountDue.</param>
        /// <param name="approvalDetails">approvalDetails.</param>
        /// <param name="billingSettings">billingSettings.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="description">description.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="externalRefNbr">externalRefNbr.</param>
        /// <param name="financialDetails">financialDetails.</param>
        /// <param name="hold">hold.</param>
        /// <param name="invoiceDate">invoiceDate.</param>
        /// <param name="invoiceTotal">invoiceTotal.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="location">location.</param>
        /// <param name="postPeriod">postPeriod.</param>
        /// <param name="progressBilling">progressBilling.</param>
        /// <param name="progressBillingTotal">progressBillingTotal.</param>
        /// <param name="projectID">projectID.</param>
        /// <param name="refNbr">refNbr.</param>
        /// <param name="retainageTotal">retainageTotal.</param>
        /// <param name="status">status.</param>
        /// <param name="taxDetails">taxDetails.</param>
        /// <param name="taxTotal">taxTotal.</param>
        /// <param name="timeAndMaterial">timeAndMaterial.</param>
        /// <param name="timeAndMaterialTotal">timeAndMaterialTotal.</param>
        public ProFormaInvoice(DecimalValue amountDue = default(DecimalValue), List<Approval> approvalDetails = default(List<Approval>), BillToSettings billingSettings = default(BillToSettings), StringValue currencyID = default(StringValue), StringValue customerID = default(StringValue), StringValue description = default(StringValue), DateTimeValue effectiveDate = default(DateTimeValue), StringValue externalRefNbr = default(StringValue), ProFormaFinancialDetails financialDetails = default(ProFormaFinancialDetails), BooleanValue hold = default(BooleanValue), DateTimeValue invoiceDate = default(DateTimeValue), DecimalValue invoiceTotal = default(DecimalValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue location = default(StringValue), StringValue postPeriod = default(StringValue), List<ProgressBilling> progressBilling = default(List<ProgressBilling>), DecimalValue progressBillingTotal = default(DecimalValue), StringValue projectID = default(StringValue), StringValue refNbr = default(StringValue), DecimalValue retainageTotal = default(DecimalValue), StringValue status = default(StringValue), List<ProFormaTaxDetail> taxDetails = default(List<ProFormaTaxDetail>), DecimalValue taxTotal = default(DecimalValue), List<TimeAndMaterial> timeAndMaterial = default(List<TimeAndMaterial>), DecimalValue timeAndMaterialTotal = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AmountDue = amountDue;
            this.ApprovalDetails = approvalDetails;
            this.BillingSettings = billingSettings;
            this.CurrencyID = currencyID;
            this.CustomerID = customerID;
            this.Description = description;
            this.EffectiveDate = effectiveDate;
            this.ExternalRefNbr = externalRefNbr;
            this.FinancialDetails = financialDetails;
            this.Hold = hold;
            this.InvoiceDate = invoiceDate;
            this.InvoiceTotal = invoiceTotal;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.Location = location;
            this.PostPeriod = postPeriod;
            this.ProgressBilling = progressBilling;
            this.ProgressBillingTotal = progressBillingTotal;
            this.ProjectID = projectID;
            this.RefNbr = refNbr;
            this.RetainageTotal = retainageTotal;
            this.Status = status;
            this.TaxDetails = taxDetails;
            this.TaxTotal = taxTotal;
            this.TimeAndMaterial = timeAndMaterial;
            this.TimeAndMaterialTotal = timeAndMaterialTotal;
        }
        
        /// <summary>
        /// Gets or Sets AmountDue
        /// </summary>
        [DataMember(Name="AmountDue", EmitDefaultValue=false)]
        public DecimalValue AmountDue { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalDetails
        /// </summary>
        [DataMember(Name="ApprovalDetails", EmitDefaultValue=false)]
        public List<Approval> ApprovalDetails { get; set; }

        /// <summary>
        /// Gets or Sets BillingSettings
        /// </summary>
        [DataMember(Name="BillingSettings", EmitDefaultValue=false)]
        public BillToSettings BillingSettings { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="CustomerID", EmitDefaultValue=false)]
        public StringValue CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="EffectiveDate", EmitDefaultValue=false)]
        public DateTimeValue EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRefNbr
        /// </summary>
        [DataMember(Name="ExternalRefNbr", EmitDefaultValue=false)]
        public StringValue ExternalRefNbr { get; set; }

        /// <summary>
        /// Gets or Sets FinancialDetails
        /// </summary>
        [DataMember(Name="FinancialDetails", EmitDefaultValue=false)]
        public ProFormaFinancialDetails FinancialDetails { get; set; }

        /// <summary>
        /// Gets or Sets Hold
        /// </summary>
        [DataMember(Name="Hold", EmitDefaultValue=false)]
        public BooleanValue Hold { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name="InvoiceDate", EmitDefaultValue=false)]
        public DateTimeValue InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceTotal
        /// </summary>
        [DataMember(Name="InvoiceTotal", EmitDefaultValue=false)]
        public DecimalValue InvoiceTotal { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public StringValue Location { get; set; }

        /// <summary>
        /// Gets or Sets PostPeriod
        /// </summary>
        [DataMember(Name="PostPeriod", EmitDefaultValue=false)]
        public StringValue PostPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ProgressBilling
        /// </summary>
        [DataMember(Name="ProgressBilling", EmitDefaultValue=false)]
        public List<ProgressBilling> ProgressBilling { get; set; }

        /// <summary>
        /// Gets or Sets ProgressBillingTotal
        /// </summary>
        [DataMember(Name="ProgressBillingTotal", EmitDefaultValue=false)]
        public DecimalValue ProgressBillingTotal { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="ProjectID", EmitDefaultValue=false)]
        public StringValue ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets RefNbr
        /// </summary>
        [DataMember(Name="RefNbr", EmitDefaultValue=false)]
        public StringValue RefNbr { get; set; }

        /// <summary>
        /// Gets or Sets RetainageTotal
        /// </summary>
        [DataMember(Name="RetainageTotal", EmitDefaultValue=false)]
        public DecimalValue RetainageTotal { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TaxDetails
        /// </summary>
        [DataMember(Name="TaxDetails", EmitDefaultValue=false)]
        public List<ProFormaTaxDetail> TaxDetails { get; set; }

        /// <summary>
        /// Gets or Sets TaxTotal
        /// </summary>
        [DataMember(Name="TaxTotal", EmitDefaultValue=false)]
        public DecimalValue TaxTotal { get; set; }

        /// <summary>
        /// Gets or Sets TimeAndMaterial
        /// </summary>
        [DataMember(Name="TimeAndMaterial", EmitDefaultValue=false)]
        public List<TimeAndMaterial> TimeAndMaterial { get; set; }

        /// <summary>
        /// Gets or Sets TimeAndMaterialTotal
        /// </summary>
        [DataMember(Name="TimeAndMaterialTotal", EmitDefaultValue=false)]
        public DecimalValue TimeAndMaterialTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProFormaInvoice {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  ApprovalDetails: ").Append(ApprovalDetails).Append("\n");
            sb.Append("  BillingSettings: ").Append(BillingSettings).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExternalRefNbr: ").Append(ExternalRefNbr).Append("\n");
            sb.Append("  FinancialDetails: ").Append(FinancialDetails).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  InvoiceTotal: ").Append(InvoiceTotal).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PostPeriod: ").Append(PostPeriod).Append("\n");
            sb.Append("  ProgressBilling: ").Append(ProgressBilling).Append("\n");
            sb.Append("  ProgressBillingTotal: ").Append(ProgressBillingTotal).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  RefNbr: ").Append(RefNbr).Append("\n");
            sb.Append("  RetainageTotal: ").Append(RetainageTotal).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("  TimeAndMaterial: ").Append(TimeAndMaterial).Append("\n");
            sb.Append("  TimeAndMaterialTotal: ").Append(TimeAndMaterialTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProFormaInvoice);
        }

        /// <summary>
        /// Returns true if ProFormaInvoice instances are equal
        /// </summary>
        /// <param name="input">Instance of ProFormaInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProFormaInvoice input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AmountDue == input.AmountDue ||
                    (this.AmountDue != null &&
                    this.AmountDue.Equals(input.AmountDue))
                ) && base.Equals(input) && 
                (
                    this.ApprovalDetails == input.ApprovalDetails ||
                    this.ApprovalDetails != null &&
                    this.ApprovalDetails.SequenceEqual(input.ApprovalDetails)
                ) && base.Equals(input) && 
                (
                    this.BillingSettings == input.BillingSettings ||
                    (this.BillingSettings != null &&
                    this.BillingSettings.Equals(input.BillingSettings))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && base.Equals(input) && 
                (
                    this.ExternalRefNbr == input.ExternalRefNbr ||
                    (this.ExternalRefNbr != null &&
                    this.ExternalRefNbr.Equals(input.ExternalRefNbr))
                ) && base.Equals(input) && 
                (
                    this.FinancialDetails == input.FinancialDetails ||
                    (this.FinancialDetails != null &&
                    this.FinancialDetails.Equals(input.FinancialDetails))
                ) && base.Equals(input) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && base.Equals(input) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && base.Equals(input) && 
                (
                    this.InvoiceTotal == input.InvoiceTotal ||
                    (this.InvoiceTotal != null &&
                    this.InvoiceTotal.Equals(input.InvoiceTotal))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && base.Equals(input) && 
                (
                    this.PostPeriod == input.PostPeriod ||
                    (this.PostPeriod != null &&
                    this.PostPeriod.Equals(input.PostPeriod))
                ) && base.Equals(input) && 
                (
                    this.ProgressBilling == input.ProgressBilling ||
                    this.ProgressBilling != null &&
                    this.ProgressBilling.SequenceEqual(input.ProgressBilling)
                ) && base.Equals(input) && 
                (
                    this.ProgressBillingTotal == input.ProgressBillingTotal ||
                    (this.ProgressBillingTotal != null &&
                    this.ProgressBillingTotal.Equals(input.ProgressBillingTotal))
                ) && base.Equals(input) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && base.Equals(input) && 
                (
                    this.RefNbr == input.RefNbr ||
                    (this.RefNbr != null &&
                    this.RefNbr.Equals(input.RefNbr))
                ) && base.Equals(input) && 
                (
                    this.RetainageTotal == input.RetainageTotal ||
                    (this.RetainageTotal != null &&
                    this.RetainageTotal.Equals(input.RetainageTotal))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.SequenceEqual(input.TaxDetails)
                ) && base.Equals(input) && 
                (
                    this.TaxTotal == input.TaxTotal ||
                    (this.TaxTotal != null &&
                    this.TaxTotal.Equals(input.TaxTotal))
                ) && base.Equals(input) && 
                (
                    this.TimeAndMaterial == input.TimeAndMaterial ||
                    this.TimeAndMaterial != null &&
                    this.TimeAndMaterial.SequenceEqual(input.TimeAndMaterial)
                ) && base.Equals(input) && 
                (
                    this.TimeAndMaterialTotal == input.TimeAndMaterialTotal ||
                    (this.TimeAndMaterialTotal != null &&
                    this.TimeAndMaterialTotal.Equals(input.TimeAndMaterialTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AmountDue != null)
                    hashCode = hashCode * 59 + this.AmountDue.GetHashCode();
                if (this.ApprovalDetails != null)
                    hashCode = hashCode * 59 + this.ApprovalDetails.GetHashCode();
                if (this.BillingSettings != null)
                    hashCode = hashCode * 59 + this.BillingSettings.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.ExternalRefNbr != null)
                    hashCode = hashCode * 59 + this.ExternalRefNbr.GetHashCode();
                if (this.FinancialDetails != null)
                    hashCode = hashCode * 59 + this.FinancialDetails.GetHashCode();
                if (this.Hold != null)
                    hashCode = hashCode * 59 + this.Hold.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.InvoiceTotal != null)
                    hashCode = hashCode * 59 + this.InvoiceTotal.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.PostPeriod != null)
                    hashCode = hashCode * 59 + this.PostPeriod.GetHashCode();
                if (this.ProgressBilling != null)
                    hashCode = hashCode * 59 + this.ProgressBilling.GetHashCode();
                if (this.ProgressBillingTotal != null)
                    hashCode = hashCode * 59 + this.ProgressBillingTotal.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.RefNbr != null)
                    hashCode = hashCode * 59 + this.RefNbr.GetHashCode();
                if (this.RetainageTotal != null)
                    hashCode = hashCode * 59 + this.RetainageTotal.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                if (this.TaxTotal != null)
                    hashCode = hashCode * 59 + this.TaxTotal.GetHashCode();
                if (this.TimeAndMaterial != null)
                    hashCode = hashCode * 59 + this.TimeAndMaterial.GetHashCode();
                if (this.TimeAndMaterialTotal != null)
                    hashCode = hashCode * 59 + this.TimeAndMaterialTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
