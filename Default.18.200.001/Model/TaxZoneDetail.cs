/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// TaxZoneDetail
    /// </summary>
    [DataContract]
    public partial class TaxZoneDetail : Entity,  IEquatable<TaxZoneDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxZoneDetail" /> class.
        /// </summary>
        /// <param name="defaultTaxCategory">defaultTaxCategory.</param>
        /// <param name="description">description.</param>
        /// <param name="taxID">taxID.</param>
        /// <param name="taxZoneID">taxZoneID.</param>
        public TaxZoneDetail(StringValue defaultTaxCategory = default(StringValue), StringValue description = default(StringValue), StringValue taxID = default(StringValue), StringValue taxZoneID = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.DefaultTaxCategory = defaultTaxCategory;
            this.Description = description;
            this.TaxID = taxID;
            this.TaxZoneID = taxZoneID;
        }
        
        /// <summary>
        /// Gets or Sets DefaultTaxCategory
        /// </summary>
        [DataMember(Name="DefaultTaxCategory", EmitDefaultValue=false)]
        public StringValue DefaultTaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets TaxID
        /// </summary>
        [DataMember(Name="TaxID", EmitDefaultValue=false)]
        public StringValue TaxID { get; set; }

        /// <summary>
        /// Gets or Sets TaxZoneID
        /// </summary>
        [DataMember(Name="TaxZoneID", EmitDefaultValue=false)]
        public StringValue TaxZoneID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxZoneDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DefaultTaxCategory: ").Append(DefaultTaxCategory).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TaxID: ").Append(TaxID).Append("\n");
            sb.Append("  TaxZoneID: ").Append(TaxZoneID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxZoneDetail);
        }

        /// <summary>
        /// Returns true if TaxZoneDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxZoneDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxZoneDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DefaultTaxCategory == input.DefaultTaxCategory ||
                    (this.DefaultTaxCategory != null &&
                    this.DefaultTaxCategory.Equals(input.DefaultTaxCategory))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.TaxID == input.TaxID ||
                    (this.TaxID != null &&
                    this.TaxID.Equals(input.TaxID))
                ) && base.Equals(input) && 
                (
                    this.TaxZoneID == input.TaxZoneID ||
                    (this.TaxZoneID != null &&
                    this.TaxZoneID.Equals(input.TaxZoneID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DefaultTaxCategory != null)
                    hashCode = hashCode * 59 + this.DefaultTaxCategory.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TaxID != null)
                    hashCode = hashCode * 59 + this.TaxID.GetHashCode();
                if (this.TaxZoneID != null)
                    hashCode = hashCode * 59 + this.TaxZoneID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
