/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// ProjectBillingAndAllocationSettings
    /// </summary>
    [DataContract]
    public partial class ProjectBillingAndAllocationSettings : Entity,  IEquatable<ProjectBillingAndAllocationSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectBillingAndAllocationSettings" /> class.
        /// </summary>
        /// <param name="allocationRule">allocationRule.</param>
        /// <param name="automaticallyReleaseARDocuments">automaticallyReleaseARDocuments.</param>
        /// <param name="billingPeriod">billingPeriod.</param>
        /// <param name="billingRule">billingRule.</param>
        /// <param name="branch">branch.</param>
        /// <param name="createProFormaOnBilling">createProFormaOnBilling.</param>
        /// <param name="lastBillingDate">lastBillingDate.</param>
        /// <param name="nextBillingDate">nextBillingDate.</param>
        /// <param name="rateTable">rateTable.</param>
        /// <param name="retainage">retainage.</param>
        /// <param name="runAllocationOnReleaseOfProjectTransactions">runAllocationOnReleaseOfProjectTransactions.</param>
        /// <param name="terms">terms.</param>
        /// <param name="useTMRevenueBudgetLimits">useTMRevenueBudgetLimits.</param>
        public ProjectBillingAndAllocationSettings(StringValue allocationRule = default(StringValue), BooleanValue automaticallyReleaseARDocuments = default(BooleanValue), StringValue billingPeriod = default(StringValue), StringValue billingRule = default(StringValue), StringValue branch = default(StringValue), BooleanValue createProFormaOnBilling = default(BooleanValue), DateTimeValue lastBillingDate = default(DateTimeValue), DateTimeValue nextBillingDate = default(DateTimeValue), StringValue rateTable = default(StringValue), DecimalValue retainage = default(DecimalValue), BooleanValue runAllocationOnReleaseOfProjectTransactions = default(BooleanValue), StringValue terms = default(StringValue), BooleanValue useTMRevenueBudgetLimits = default(BooleanValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AllocationRule = allocationRule;
            this.AutomaticallyReleaseARDocuments = automaticallyReleaseARDocuments;
            this.BillingPeriod = billingPeriod;
            this.BillingRule = billingRule;
            this.Branch = branch;
            this.CreateProFormaOnBilling = createProFormaOnBilling;
            this.LastBillingDate = lastBillingDate;
            this.NextBillingDate = nextBillingDate;
            this.RateTable = rateTable;
            this.Retainage = retainage;
            this.RunAllocationOnReleaseOfProjectTransactions = runAllocationOnReleaseOfProjectTransactions;
            this.Terms = terms;
            this.UseTMRevenueBudgetLimits = useTMRevenueBudgetLimits;
        }
        
        /// <summary>
        /// Gets or Sets AllocationRule
        /// </summary>
        [DataMember(Name="AllocationRule", EmitDefaultValue=false)]
        public StringValue AllocationRule { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticallyReleaseARDocuments
        /// </summary>
        [DataMember(Name="AutomaticallyReleaseARDocuments", EmitDefaultValue=false)]
        public BooleanValue AutomaticallyReleaseARDocuments { get; set; }

        /// <summary>
        /// Gets or Sets BillingPeriod
        /// </summary>
        [DataMember(Name="BillingPeriod", EmitDefaultValue=false)]
        public StringValue BillingPeriod { get; set; }

        /// <summary>
        /// Gets or Sets BillingRule
        /// </summary>
        [DataMember(Name="BillingRule", EmitDefaultValue=false)]
        public StringValue BillingRule { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="Branch", EmitDefaultValue=false)]
        public StringValue Branch { get; set; }

        /// <summary>
        /// Gets or Sets CreateProFormaOnBilling
        /// </summary>
        [DataMember(Name="CreateProFormaOnBilling", EmitDefaultValue=false)]
        public BooleanValue CreateProFormaOnBilling { get; set; }

        /// <summary>
        /// Gets or Sets LastBillingDate
        /// </summary>
        [DataMember(Name="LastBillingDate", EmitDefaultValue=false)]
        public DateTimeValue LastBillingDate { get; set; }

        /// <summary>
        /// Gets or Sets NextBillingDate
        /// </summary>
        [DataMember(Name="NextBillingDate", EmitDefaultValue=false)]
        public DateTimeValue NextBillingDate { get; set; }

        /// <summary>
        /// Gets or Sets RateTable
        /// </summary>
        [DataMember(Name="RateTable", EmitDefaultValue=false)]
        public StringValue RateTable { get; set; }

        /// <summary>
        /// Gets or Sets Retainage
        /// </summary>
        [DataMember(Name="Retainage", EmitDefaultValue=false)]
        public DecimalValue Retainage { get; set; }

        /// <summary>
        /// Gets or Sets RunAllocationOnReleaseOfProjectTransactions
        /// </summary>
        [DataMember(Name="RunAllocationOnReleaseOfProjectTransactions", EmitDefaultValue=false)]
        public BooleanValue RunAllocationOnReleaseOfProjectTransactions { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public StringValue Terms { get; set; }

        /// <summary>
        /// Gets or Sets UseTMRevenueBudgetLimits
        /// </summary>
        [DataMember(Name="UseTMRevenueBudgetLimits", EmitDefaultValue=false)]
        public BooleanValue UseTMRevenueBudgetLimits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectBillingAndAllocationSettings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AllocationRule: ").Append(AllocationRule).Append("\n");
            sb.Append("  AutomaticallyReleaseARDocuments: ").Append(AutomaticallyReleaseARDocuments).Append("\n");
            sb.Append("  BillingPeriod: ").Append(BillingPeriod).Append("\n");
            sb.Append("  BillingRule: ").Append(BillingRule).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  CreateProFormaOnBilling: ").Append(CreateProFormaOnBilling).Append("\n");
            sb.Append("  LastBillingDate: ").Append(LastBillingDate).Append("\n");
            sb.Append("  NextBillingDate: ").Append(NextBillingDate).Append("\n");
            sb.Append("  RateTable: ").Append(RateTable).Append("\n");
            sb.Append("  Retainage: ").Append(Retainage).Append("\n");
            sb.Append("  RunAllocationOnReleaseOfProjectTransactions: ").Append(RunAllocationOnReleaseOfProjectTransactions).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  UseTMRevenueBudgetLimits: ").Append(UseTMRevenueBudgetLimits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectBillingAndAllocationSettings);
        }

        /// <summary>
        /// Returns true if ProjectBillingAndAllocationSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectBillingAndAllocationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectBillingAndAllocationSettings input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AllocationRule == input.AllocationRule ||
                    (this.AllocationRule != null &&
                    this.AllocationRule.Equals(input.AllocationRule))
                ) && base.Equals(input) && 
                (
                    this.AutomaticallyReleaseARDocuments == input.AutomaticallyReleaseARDocuments ||
                    (this.AutomaticallyReleaseARDocuments != null &&
                    this.AutomaticallyReleaseARDocuments.Equals(input.AutomaticallyReleaseARDocuments))
                ) && base.Equals(input) && 
                (
                    this.BillingPeriod == input.BillingPeriod ||
                    (this.BillingPeriod != null &&
                    this.BillingPeriod.Equals(input.BillingPeriod))
                ) && base.Equals(input) && 
                (
                    this.BillingRule == input.BillingRule ||
                    (this.BillingRule != null &&
                    this.BillingRule.Equals(input.BillingRule))
                ) && base.Equals(input) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && base.Equals(input) && 
                (
                    this.CreateProFormaOnBilling == input.CreateProFormaOnBilling ||
                    (this.CreateProFormaOnBilling != null &&
                    this.CreateProFormaOnBilling.Equals(input.CreateProFormaOnBilling))
                ) && base.Equals(input) && 
                (
                    this.LastBillingDate == input.LastBillingDate ||
                    (this.LastBillingDate != null &&
                    this.LastBillingDate.Equals(input.LastBillingDate))
                ) && base.Equals(input) && 
                (
                    this.NextBillingDate == input.NextBillingDate ||
                    (this.NextBillingDate != null &&
                    this.NextBillingDate.Equals(input.NextBillingDate))
                ) && base.Equals(input) && 
                (
                    this.RateTable == input.RateTable ||
                    (this.RateTable != null &&
                    this.RateTable.Equals(input.RateTable))
                ) && base.Equals(input) && 
                (
                    this.Retainage == input.Retainage ||
                    (this.Retainage != null &&
                    this.Retainage.Equals(input.Retainage))
                ) && base.Equals(input) && 
                (
                    this.RunAllocationOnReleaseOfProjectTransactions == input.RunAllocationOnReleaseOfProjectTransactions ||
                    (this.RunAllocationOnReleaseOfProjectTransactions != null &&
                    this.RunAllocationOnReleaseOfProjectTransactions.Equals(input.RunAllocationOnReleaseOfProjectTransactions))
                ) && base.Equals(input) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && base.Equals(input) && 
                (
                    this.UseTMRevenueBudgetLimits == input.UseTMRevenueBudgetLimits ||
                    (this.UseTMRevenueBudgetLimits != null &&
                    this.UseTMRevenueBudgetLimits.Equals(input.UseTMRevenueBudgetLimits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AllocationRule != null)
                    hashCode = hashCode * 59 + this.AllocationRule.GetHashCode();
                if (this.AutomaticallyReleaseARDocuments != null)
                    hashCode = hashCode * 59 + this.AutomaticallyReleaseARDocuments.GetHashCode();
                if (this.BillingPeriod != null)
                    hashCode = hashCode * 59 + this.BillingPeriod.GetHashCode();
                if (this.BillingRule != null)
                    hashCode = hashCode * 59 + this.BillingRule.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.CreateProFormaOnBilling != null)
                    hashCode = hashCode * 59 + this.CreateProFormaOnBilling.GetHashCode();
                if (this.LastBillingDate != null)
                    hashCode = hashCode * 59 + this.LastBillingDate.GetHashCode();
                if (this.NextBillingDate != null)
                    hashCode = hashCode * 59 + this.NextBillingDate.GetHashCode();
                if (this.RateTable != null)
                    hashCode = hashCode * 59 + this.RateTable.GetHashCode();
                if (this.Retainage != null)
                    hashCode = hashCode * 59 + this.Retainage.GetHashCode();
                if (this.RunAllocationOnReleaseOfProjectTransactions != null)
                    hashCode = hashCode * 59 + this.RunAllocationOnReleaseOfProjectTransactions.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.UseTMRevenueBudgetLimits != null)
                    hashCode = hashCode * 59 + this.UseTMRevenueBudgetLimits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
