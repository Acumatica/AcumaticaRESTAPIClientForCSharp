/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// Shipment
    /// </summary>
    [DataContract]
    public partial class Shipment : Entity,  IEquatable<Shipment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="baseCurrencyID">baseCurrencyID.</param>
        /// <param name="controlQty">controlQty.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="currencyRate">currencyRate.</param>
        /// <param name="currencyRateTypeID">currencyRateTypeID.</param>
        /// <param name="currencyViewState">currencyViewState.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="details">details.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="fOBPoint">fOBPoint.</param>
        /// <param name="freightAmount">freightAmount.</param>
        /// <param name="freightCost">freightCost.</param>
        /// <param name="freightCurrency">freightCurrency.</param>
        /// <param name="groundCollect">groundCollect.</param>
        /// <param name="hold">hold.</param>
        /// <param name="insurance">insurance.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="locationID">locationID.</param>
        /// <param name="operation">operation.</param>
        /// <param name="orders">orders.</param>
        /// <param name="owner">owner.</param>
        /// <param name="packageCount">packageCount.</param>
        /// <param name="packages">packages.</param>
        /// <param name="packageWeight">packageWeight.</param>
        /// <param name="reciprocalRate">reciprocalRate.</param>
        /// <param name="residentialDelivery">residentialDelivery.</param>
        /// <param name="saturdayDelivery">saturdayDelivery.</param>
        /// <param name="shipmentDate">shipmentDate.</param>
        /// <param name="shipmentNbr">shipmentNbr.</param>
        /// <param name="shippedQty">shippedQty.</param>
        /// <param name="shippedVolume">shippedVolume.</param>
        /// <param name="shippedWeight">shippedWeight.</param>
        /// <param name="shippingSettings">shippingSettings.</param>
        /// <param name="shippingTerms">shippingTerms.</param>
        /// <param name="shippingZoneID">shippingZoneID.</param>
        /// <param name="shipVia">shipVia.</param>
        /// <param name="status">status.</param>
        /// <param name="toWarehouseID">toWarehouseID.</param>
        /// <param name="type">type.</param>
        /// <param name="useCustomersAccount">useCustomersAccount.</param>
        /// <param name="warehouseID">warehouseID.</param>
        /// <param name="workgroupID">workgroupID.</param>
        public Shipment(StringValue baseCurrencyID = default(StringValue), DecimalValue controlQty = default(DecimalValue), DateTimeValue createdDateTime = default(DateTimeValue), StringValue currencyID = default(StringValue), DecimalValue currencyRate = default(DecimalValue), StringValue currencyRateTypeID = default(StringValue), BooleanValue currencyViewState = default(BooleanValue), StringValue customerID = default(StringValue), List<ShipmentDetail> details = default(List<ShipmentDetail>), DateTimeValue effectiveDate = default(DateTimeValue), StringValue fOBPoint = default(StringValue), DecimalValue freightAmount = default(DecimalValue), DecimalValue freightCost = default(DecimalValue), StringValue freightCurrency = default(StringValue), BooleanValue groundCollect = default(BooleanValue), BooleanValue hold = default(BooleanValue), BooleanValue insurance = default(BooleanValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue locationID = default(StringValue), StringValue operation = default(StringValue), List<ShipmentOrderDetail> orders = default(List<ShipmentOrderDetail>), StringValue owner = default(StringValue), IntValue packageCount = default(IntValue), List<ShipmentPackage> packages = default(List<ShipmentPackage>), DecimalValue packageWeight = default(DecimalValue), DecimalValue reciprocalRate = default(DecimalValue), BooleanValue residentialDelivery = default(BooleanValue), BooleanValue saturdayDelivery = default(BooleanValue), DateTimeValue shipmentDate = default(DateTimeValue), StringValue shipmentNbr = default(StringValue), DecimalValue shippedQty = default(DecimalValue), DecimalValue shippedVolume = default(DecimalValue), DecimalValue shippedWeight = default(DecimalValue), ShipToSettings shippingSettings = default(ShipToSettings), StringValue shippingTerms = default(StringValue), StringValue shippingZoneID = default(StringValue), StringValue shipVia = default(StringValue), StringValue status = default(StringValue), StringValue toWarehouseID = default(StringValue), StringValue type = default(StringValue), BooleanValue useCustomersAccount = default(BooleanValue), StringValue warehouseID = default(StringValue), StringValue workgroupID = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BaseCurrencyID = baseCurrencyID;
            this.ControlQty = controlQty;
            this.CreatedDateTime = createdDateTime;
            this.CurrencyID = currencyID;
            this.CurrencyRate = currencyRate;
            this.CurrencyRateTypeID = currencyRateTypeID;
            this.CurrencyViewState = currencyViewState;
            this.CustomerID = customerID;
            this.Details = details;
            this.EffectiveDate = effectiveDate;
            this.FOBPoint = fOBPoint;
            this.FreightAmount = freightAmount;
            this.FreightCost = freightCost;
            this.FreightCurrency = freightCurrency;
            this.GroundCollect = groundCollect;
            this.Hold = hold;
            this.Insurance = insurance;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.LocationID = locationID;
            this.Operation = operation;
            this.Orders = orders;
            this.Owner = owner;
            this.PackageCount = packageCount;
            this.Packages = packages;
            this.PackageWeight = packageWeight;
            this.ReciprocalRate = reciprocalRate;
            this.ResidentialDelivery = residentialDelivery;
            this.SaturdayDelivery = saturdayDelivery;
            this.ShipmentDate = shipmentDate;
            this.ShipmentNbr = shipmentNbr;
            this.ShippedQty = shippedQty;
            this.ShippedVolume = shippedVolume;
            this.ShippedWeight = shippedWeight;
            this.ShippingSettings = shippingSettings;
            this.ShippingTerms = shippingTerms;
            this.ShippingZoneID = shippingZoneID;
            this.ShipVia = shipVia;
            this.Status = status;
            this.ToWarehouseID = toWarehouseID;
            this.Type = type;
            this.UseCustomersAccount = useCustomersAccount;
            this.WarehouseID = warehouseID;
            this.WorkgroupID = workgroupID;
        }
        
        /// <summary>
        /// Gets or Sets BaseCurrencyID
        /// </summary>
        [DataMember(Name="BaseCurrencyID", EmitDefaultValue=false)]
        public StringValue BaseCurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets ControlQty
        /// </summary>
        [DataMember(Name="ControlQty", EmitDefaultValue=false)]
        public DecimalValue ControlQty { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyRate
        /// </summary>
        [DataMember(Name="CurrencyRate", EmitDefaultValue=false)]
        public DecimalValue CurrencyRate { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyRateTypeID
        /// </summary>
        [DataMember(Name="CurrencyRateTypeID", EmitDefaultValue=false)]
        public StringValue CurrencyRateTypeID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyViewState
        /// </summary>
        [DataMember(Name="CurrencyViewState", EmitDefaultValue=false)]
        public BooleanValue CurrencyViewState { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="CustomerID", EmitDefaultValue=false)]
        public StringValue CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public List<ShipmentDetail> Details { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="EffectiveDate", EmitDefaultValue=false)]
        public DateTimeValue EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets FOBPoint
        /// </summary>
        [DataMember(Name="FOBPoint", EmitDefaultValue=false)]
        public StringValue FOBPoint { get; set; }

        /// <summary>
        /// Gets or Sets FreightAmount
        /// </summary>
        [DataMember(Name="FreightAmount", EmitDefaultValue=false)]
        public DecimalValue FreightAmount { get; set; }

        /// <summary>
        /// Gets or Sets FreightCost
        /// </summary>
        [DataMember(Name="FreightCost", EmitDefaultValue=false)]
        public DecimalValue FreightCost { get; set; }

        /// <summary>
        /// Gets or Sets FreightCurrency
        /// </summary>
        [DataMember(Name="FreightCurrency", EmitDefaultValue=false)]
        public StringValue FreightCurrency { get; set; }

        /// <summary>
        /// Gets or Sets GroundCollect
        /// </summary>
        [DataMember(Name="GroundCollect", EmitDefaultValue=false)]
        public BooleanValue GroundCollect { get; set; }

        /// <summary>
        /// Gets or Sets Hold
        /// </summary>
        [DataMember(Name="Hold", EmitDefaultValue=false)]
        public BooleanValue Hold { get; set; }

        /// <summary>
        /// Gets or Sets Insurance
        /// </summary>
        [DataMember(Name="Insurance", EmitDefaultValue=false)]
        public BooleanValue Insurance { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LocationID
        /// </summary>
        [DataMember(Name="LocationID", EmitDefaultValue=false)]
        public StringValue LocationID { get; set; }

        /// <summary>
        /// Gets or Sets Operation
        /// </summary>
        [DataMember(Name="Operation", EmitDefaultValue=false)]
        public StringValue Operation { get; set; }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name="Orders", EmitDefaultValue=false)]
        public List<ShipmentOrderDetail> Orders { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public StringValue Owner { get; set; }

        /// <summary>
        /// Gets or Sets PackageCount
        /// </summary>
        [DataMember(Name="PackageCount", EmitDefaultValue=false)]
        public IntValue PackageCount { get; set; }

        /// <summary>
        /// Gets or Sets Packages
        /// </summary>
        [DataMember(Name="Packages", EmitDefaultValue=false)]
        public List<ShipmentPackage> Packages { get; set; }

        /// <summary>
        /// Gets or Sets PackageWeight
        /// </summary>
        [DataMember(Name="PackageWeight", EmitDefaultValue=false)]
        public DecimalValue PackageWeight { get; set; }

        /// <summary>
        /// Gets or Sets ReciprocalRate
        /// </summary>
        [DataMember(Name="ReciprocalRate", EmitDefaultValue=false)]
        public DecimalValue ReciprocalRate { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialDelivery
        /// </summary>
        [DataMember(Name="ResidentialDelivery", EmitDefaultValue=false)]
        public BooleanValue ResidentialDelivery { get; set; }

        /// <summary>
        /// Gets or Sets SaturdayDelivery
        /// </summary>
        [DataMember(Name="SaturdayDelivery", EmitDefaultValue=false)]
        public BooleanValue SaturdayDelivery { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentDate
        /// </summary>
        [DataMember(Name="ShipmentDate", EmitDefaultValue=false)]
        public DateTimeValue ShipmentDate { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentNbr
        /// </summary>
        [DataMember(Name="ShipmentNbr", EmitDefaultValue=false)]
        public StringValue ShipmentNbr { get; set; }

        /// <summary>
        /// Gets or Sets ShippedQty
        /// </summary>
        [DataMember(Name="ShippedQty", EmitDefaultValue=false)]
        public DecimalValue ShippedQty { get; set; }

        /// <summary>
        /// Gets or Sets ShippedVolume
        /// </summary>
        [DataMember(Name="ShippedVolume", EmitDefaultValue=false)]
        public DecimalValue ShippedVolume { get; set; }

        /// <summary>
        /// Gets or Sets ShippedWeight
        /// </summary>
        [DataMember(Name="ShippedWeight", EmitDefaultValue=false)]
        public DecimalValue ShippedWeight { get; set; }

        /// <summary>
        /// Gets or Sets ShippingSettings
        /// </summary>
        [DataMember(Name="ShippingSettings", EmitDefaultValue=false)]
        public ShipToSettings ShippingSettings { get; set; }

        /// <summary>
        /// Gets or Sets ShippingTerms
        /// </summary>
        [DataMember(Name="ShippingTerms", EmitDefaultValue=false)]
        public StringValue ShippingTerms { get; set; }

        /// <summary>
        /// Gets or Sets ShippingZoneID
        /// </summary>
        [DataMember(Name="ShippingZoneID", EmitDefaultValue=false)]
        public StringValue ShippingZoneID { get; set; }

        /// <summary>
        /// Gets or Sets ShipVia
        /// </summary>
        [DataMember(Name="ShipVia", EmitDefaultValue=false)]
        public StringValue ShipVia { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets ToWarehouseID
        /// </summary>
        [DataMember(Name="ToWarehouseID", EmitDefaultValue=false)]
        public StringValue ToWarehouseID { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public StringValue Type { get; set; }

        /// <summary>
        /// Gets or Sets UseCustomersAccount
        /// </summary>
        [DataMember(Name="UseCustomersAccount", EmitDefaultValue=false)]
        public BooleanValue UseCustomersAccount { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseID
        /// </summary>
        [DataMember(Name="WarehouseID", EmitDefaultValue=false)]
        public StringValue WarehouseID { get; set; }

        /// <summary>
        /// Gets or Sets WorkgroupID
        /// </summary>
        [DataMember(Name="WorkgroupID", EmitDefaultValue=false)]
        public StringValue WorkgroupID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BaseCurrencyID: ").Append(BaseCurrencyID).Append("\n");
            sb.Append("  ControlQty: ").Append(ControlQty).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CurrencyRate: ").Append(CurrencyRate).Append("\n");
            sb.Append("  CurrencyRateTypeID: ").Append(CurrencyRateTypeID).Append("\n");
            sb.Append("  CurrencyViewState: ").Append(CurrencyViewState).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  FOBPoint: ").Append(FOBPoint).Append("\n");
            sb.Append("  FreightAmount: ").Append(FreightAmount).Append("\n");
            sb.Append("  FreightCost: ").Append(FreightCost).Append("\n");
            sb.Append("  FreightCurrency: ").Append(FreightCurrency).Append("\n");
            sb.Append("  GroundCollect: ").Append(GroundCollect).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  Insurance: ").Append(Insurance).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LocationID: ").Append(LocationID).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PackageCount: ").Append(PackageCount).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  PackageWeight: ").Append(PackageWeight).Append("\n");
            sb.Append("  ReciprocalRate: ").Append(ReciprocalRate).Append("\n");
            sb.Append("  ResidentialDelivery: ").Append(ResidentialDelivery).Append("\n");
            sb.Append("  SaturdayDelivery: ").Append(SaturdayDelivery).Append("\n");
            sb.Append("  ShipmentDate: ").Append(ShipmentDate).Append("\n");
            sb.Append("  ShipmentNbr: ").Append(ShipmentNbr).Append("\n");
            sb.Append("  ShippedQty: ").Append(ShippedQty).Append("\n");
            sb.Append("  ShippedVolume: ").Append(ShippedVolume).Append("\n");
            sb.Append("  ShippedWeight: ").Append(ShippedWeight).Append("\n");
            sb.Append("  ShippingSettings: ").Append(ShippingSettings).Append("\n");
            sb.Append("  ShippingTerms: ").Append(ShippingTerms).Append("\n");
            sb.Append("  ShippingZoneID: ").Append(ShippingZoneID).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ToWarehouseID: ").Append(ToWarehouseID).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UseCustomersAccount: ").Append(UseCustomersAccount).Append("\n");
            sb.Append("  WarehouseID: ").Append(WarehouseID).Append("\n");
            sb.Append("  WorkgroupID: ").Append(WorkgroupID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Shipment);
        }

        /// <summary>
        /// Returns true if Shipment instances are equal
        /// </summary>
        /// <param name="input">Instance of Shipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shipment input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BaseCurrencyID == input.BaseCurrencyID ||
                    (this.BaseCurrencyID != null &&
                    this.BaseCurrencyID.Equals(input.BaseCurrencyID))
                ) && base.Equals(input) && 
                (
                    this.ControlQty == input.ControlQty ||
                    (this.ControlQty != null &&
                    this.ControlQty.Equals(input.ControlQty))
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRate == input.CurrencyRate ||
                    (this.CurrencyRate != null &&
                    this.CurrencyRate.Equals(input.CurrencyRate))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRateTypeID == input.CurrencyRateTypeID ||
                    (this.CurrencyRateTypeID != null &&
                    this.CurrencyRateTypeID.Equals(input.CurrencyRateTypeID))
                ) && base.Equals(input) && 
                (
                    this.CurrencyViewState == input.CurrencyViewState ||
                    (this.CurrencyViewState != null &&
                    this.CurrencyViewState.Equals(input.CurrencyViewState))
                ) && base.Equals(input) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && base.Equals(input) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && base.Equals(input) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && base.Equals(input) && 
                (
                    this.FOBPoint == input.FOBPoint ||
                    (this.FOBPoint != null &&
                    this.FOBPoint.Equals(input.FOBPoint))
                ) && base.Equals(input) && 
                (
                    this.FreightAmount == input.FreightAmount ||
                    (this.FreightAmount != null &&
                    this.FreightAmount.Equals(input.FreightAmount))
                ) && base.Equals(input) && 
                (
                    this.FreightCost == input.FreightCost ||
                    (this.FreightCost != null &&
                    this.FreightCost.Equals(input.FreightCost))
                ) && base.Equals(input) && 
                (
                    this.FreightCurrency == input.FreightCurrency ||
                    (this.FreightCurrency != null &&
                    this.FreightCurrency.Equals(input.FreightCurrency))
                ) && base.Equals(input) && 
                (
                    this.GroundCollect == input.GroundCollect ||
                    (this.GroundCollect != null &&
                    this.GroundCollect.Equals(input.GroundCollect))
                ) && base.Equals(input) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && base.Equals(input) && 
                (
                    this.Insurance == input.Insurance ||
                    (this.Insurance != null &&
                    this.Insurance.Equals(input.Insurance))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.LocationID == input.LocationID ||
                    (this.LocationID != null &&
                    this.LocationID.Equals(input.LocationID))
                ) && base.Equals(input) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && base.Equals(input) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                ) && base.Equals(input) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && base.Equals(input) && 
                (
                    this.PackageCount == input.PackageCount ||
                    (this.PackageCount != null &&
                    this.PackageCount.Equals(input.PackageCount))
                ) && base.Equals(input) && 
                (
                    this.Packages == input.Packages ||
                    this.Packages != null &&
                    this.Packages.SequenceEqual(input.Packages)
                ) && base.Equals(input) && 
                (
                    this.PackageWeight == input.PackageWeight ||
                    (this.PackageWeight != null &&
                    this.PackageWeight.Equals(input.PackageWeight))
                ) && base.Equals(input) && 
                (
                    this.ReciprocalRate == input.ReciprocalRate ||
                    (this.ReciprocalRate != null &&
                    this.ReciprocalRate.Equals(input.ReciprocalRate))
                ) && base.Equals(input) && 
                (
                    this.ResidentialDelivery == input.ResidentialDelivery ||
                    (this.ResidentialDelivery != null &&
                    this.ResidentialDelivery.Equals(input.ResidentialDelivery))
                ) && base.Equals(input) && 
                (
                    this.SaturdayDelivery == input.SaturdayDelivery ||
                    (this.SaturdayDelivery != null &&
                    this.SaturdayDelivery.Equals(input.SaturdayDelivery))
                ) && base.Equals(input) && 
                (
                    this.ShipmentDate == input.ShipmentDate ||
                    (this.ShipmentDate != null &&
                    this.ShipmentDate.Equals(input.ShipmentDate))
                ) && base.Equals(input) && 
                (
                    this.ShipmentNbr == input.ShipmentNbr ||
                    (this.ShipmentNbr != null &&
                    this.ShipmentNbr.Equals(input.ShipmentNbr))
                ) && base.Equals(input) && 
                (
                    this.ShippedQty == input.ShippedQty ||
                    (this.ShippedQty != null &&
                    this.ShippedQty.Equals(input.ShippedQty))
                ) && base.Equals(input) && 
                (
                    this.ShippedVolume == input.ShippedVolume ||
                    (this.ShippedVolume != null &&
                    this.ShippedVolume.Equals(input.ShippedVolume))
                ) && base.Equals(input) && 
                (
                    this.ShippedWeight == input.ShippedWeight ||
                    (this.ShippedWeight != null &&
                    this.ShippedWeight.Equals(input.ShippedWeight))
                ) && base.Equals(input) && 
                (
                    this.ShippingSettings == input.ShippingSettings ||
                    (this.ShippingSettings != null &&
                    this.ShippingSettings.Equals(input.ShippingSettings))
                ) && base.Equals(input) && 
                (
                    this.ShippingTerms == input.ShippingTerms ||
                    (this.ShippingTerms != null &&
                    this.ShippingTerms.Equals(input.ShippingTerms))
                ) && base.Equals(input) && 
                (
                    this.ShippingZoneID == input.ShippingZoneID ||
                    (this.ShippingZoneID != null &&
                    this.ShippingZoneID.Equals(input.ShippingZoneID))
                ) && base.Equals(input) && 
                (
                    this.ShipVia == input.ShipVia ||
                    (this.ShipVia != null &&
                    this.ShipVia.Equals(input.ShipVia))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.ToWarehouseID == input.ToWarehouseID ||
                    (this.ToWarehouseID != null &&
                    this.ToWarehouseID.Equals(input.ToWarehouseID))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.UseCustomersAccount == input.UseCustomersAccount ||
                    (this.UseCustomersAccount != null &&
                    this.UseCustomersAccount.Equals(input.UseCustomersAccount))
                ) && base.Equals(input) && 
                (
                    this.WarehouseID == input.WarehouseID ||
                    (this.WarehouseID != null &&
                    this.WarehouseID.Equals(input.WarehouseID))
                ) && base.Equals(input) && 
                (
                    this.WorkgroupID == input.WorkgroupID ||
                    (this.WorkgroupID != null &&
                    this.WorkgroupID.Equals(input.WorkgroupID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BaseCurrencyID != null)
                    hashCode = hashCode * 59 + this.BaseCurrencyID.GetHashCode();
                if (this.ControlQty != null)
                    hashCode = hashCode * 59 + this.ControlQty.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CurrencyRate != null)
                    hashCode = hashCode * 59 + this.CurrencyRate.GetHashCode();
                if (this.CurrencyRateTypeID != null)
                    hashCode = hashCode * 59 + this.CurrencyRateTypeID.GetHashCode();
                if (this.CurrencyViewState != null)
                    hashCode = hashCode * 59 + this.CurrencyViewState.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.FOBPoint != null)
                    hashCode = hashCode * 59 + this.FOBPoint.GetHashCode();
                if (this.FreightAmount != null)
                    hashCode = hashCode * 59 + this.FreightAmount.GetHashCode();
                if (this.FreightCost != null)
                    hashCode = hashCode * 59 + this.FreightCost.GetHashCode();
                if (this.FreightCurrency != null)
                    hashCode = hashCode * 59 + this.FreightCurrency.GetHashCode();
                if (this.GroundCollect != null)
                    hashCode = hashCode * 59 + this.GroundCollect.GetHashCode();
                if (this.Hold != null)
                    hashCode = hashCode * 59 + this.Hold.GetHashCode();
                if (this.Insurance != null)
                    hashCode = hashCode * 59 + this.Insurance.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.LocationID != null)
                    hashCode = hashCode * 59 + this.LocationID.GetHashCode();
                if (this.Operation != null)
                    hashCode = hashCode * 59 + this.Operation.GetHashCode();
                if (this.Orders != null)
                    hashCode = hashCode * 59 + this.Orders.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.PackageCount != null)
                    hashCode = hashCode * 59 + this.PackageCount.GetHashCode();
                if (this.Packages != null)
                    hashCode = hashCode * 59 + this.Packages.GetHashCode();
                if (this.PackageWeight != null)
                    hashCode = hashCode * 59 + this.PackageWeight.GetHashCode();
                if (this.ReciprocalRate != null)
                    hashCode = hashCode * 59 + this.ReciprocalRate.GetHashCode();
                if (this.ResidentialDelivery != null)
                    hashCode = hashCode * 59 + this.ResidentialDelivery.GetHashCode();
                if (this.SaturdayDelivery != null)
                    hashCode = hashCode * 59 + this.SaturdayDelivery.GetHashCode();
                if (this.ShipmentDate != null)
                    hashCode = hashCode * 59 + this.ShipmentDate.GetHashCode();
                if (this.ShipmentNbr != null)
                    hashCode = hashCode * 59 + this.ShipmentNbr.GetHashCode();
                if (this.ShippedQty != null)
                    hashCode = hashCode * 59 + this.ShippedQty.GetHashCode();
                if (this.ShippedVolume != null)
                    hashCode = hashCode * 59 + this.ShippedVolume.GetHashCode();
                if (this.ShippedWeight != null)
                    hashCode = hashCode * 59 + this.ShippedWeight.GetHashCode();
                if (this.ShippingSettings != null)
                    hashCode = hashCode * 59 + this.ShippingSettings.GetHashCode();
                if (this.ShippingTerms != null)
                    hashCode = hashCode * 59 + this.ShippingTerms.GetHashCode();
                if (this.ShippingZoneID != null)
                    hashCode = hashCode * 59 + this.ShippingZoneID.GetHashCode();
                if (this.ShipVia != null)
                    hashCode = hashCode * 59 + this.ShipVia.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ToWarehouseID != null)
                    hashCode = hashCode * 59 + this.ToWarehouseID.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UseCustomersAccount != null)
                    hashCode = hashCode * 59 + this.UseCustomersAccount.GetHashCode();
                if (this.WarehouseID != null)
                    hashCode = hashCode * 59 + this.WarehouseID.GetHashCode();
                if (this.WorkgroupID != null)
                    hashCode = hashCode * 59 + this.WorkgroupID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
