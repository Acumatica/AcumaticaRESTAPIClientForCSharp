/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// SalesInvoice
    /// </summary>
    [DataContract]
    public partial class SalesInvoice : Entity,  IEquatable<SalesInvoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesInvoice" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="applicationsCreditMemo">applicationsCreditMemo.</param>
        /// <param name="applicationsInvoice">applicationsInvoice.</param>
        /// <param name="balance">balance.</param>
        /// <param name="billingSettings">billingSettings.</param>
        /// <param name="cashDiscount">cashDiscount.</param>
        /// <param name="commissions">commissions.</param>
        /// <param name="creditHold">creditHold.</param>
        /// <param name="currency">currency.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="customerOrder">customerOrder.</param>
        /// <param name="date">date.</param>
        /// <param name="description">description.</param>
        /// <param name="details">details.</param>
        /// <param name="discountDetails">discountDetails.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="financialDetails">financialDetails.</param>
        /// <param name="freightDetails">freightDetails.</param>
        /// <param name="hold">hold.</param>
        /// <param name="project">project.</param>
        /// <param name="referenceNbr">referenceNbr.</param>
        /// <param name="status">status.</param>
        /// <param name="taxDetails">taxDetails.</param>
        /// <param name="totals">totals.</param>
        /// <param name="type">type.</param>
        /// <param name="vATExemptTotal">vATExemptTotal.</param>
        /// <param name="vATTaxableTotal">vATTaxableTotal.</param>
        public SalesInvoice(DecimalValue amount = default(DecimalValue), List<SalesInvoiceApplicationCreditMemo> applicationsCreditMemo = default(List<SalesInvoiceApplicationCreditMemo>), List<SalesInvoiceApplicationInvoice> applicationsInvoice = default(List<SalesInvoiceApplicationInvoice>), DecimalValue balance = default(DecimalValue), BillToSettings billingSettings = default(BillToSettings), DecimalValue cashDiscount = default(DecimalValue), SalesInvoiceCommissions commissions = default(SalesInvoiceCommissions), BooleanValue creditHold = default(BooleanValue), StringValue currency = default(StringValue), StringValue customerID = default(StringValue), StringValue customerOrder = default(StringValue), DateTimeValue date = default(DateTimeValue), StringValue description = default(StringValue), List<SalesInvoiceDetail> details = default(List<SalesInvoiceDetail>), List<SalesInvoiceDiscountDetails> discountDetails = default(List<SalesInvoiceDiscountDetails>), DateTimeValue dueDate = default(DateTimeValue), SalesInvoiceFinancialDetails financialDetails = default(SalesInvoiceFinancialDetails), List<SalesInvoiceFreightDetail> freightDetails = default(List<SalesInvoiceFreightDetail>), BooleanValue hold = default(BooleanValue), StringValue project = default(StringValue), StringValue referenceNbr = default(StringValue), StringValue status = default(StringValue), List<SalesInvoiceTaxDetail> taxDetails = default(List<SalesInvoiceTaxDetail>), SalesInvoiceTotals totals = default(SalesInvoiceTotals), StringValue type = default(StringValue), DecimalValue vATExemptTotal = default(DecimalValue), DecimalValue vATTaxableTotal = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Amount = amount;
            this.ApplicationsCreditMemo = applicationsCreditMemo;
            this.ApplicationsInvoice = applicationsInvoice;
            this.Balance = balance;
            this.BillingSettings = billingSettings;
            this.CashDiscount = cashDiscount;
            this.Commissions = commissions;
            this.CreditHold = creditHold;
            this.Currency = currency;
            this.CustomerID = customerID;
            this.CustomerOrder = customerOrder;
            this.Date = date;
            this.Description = description;
            this.Details = details;
            this.DiscountDetails = discountDetails;
            this.DueDate = dueDate;
            this.FinancialDetails = financialDetails;
            this.FreightDetails = freightDetails;
            this.Hold = hold;
            this.Project = project;
            this.ReferenceNbr = referenceNbr;
            this.Status = status;
            this.TaxDetails = taxDetails;
            this.Totals = totals;
            this.Type = type;
            this.VATExemptTotal = vATExemptTotal;
            this.VATTaxableTotal = vATTaxableTotal;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public DecimalValue Amount { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationsCreditMemo
        /// </summary>
        [DataMember(Name="ApplicationsCreditMemo", EmitDefaultValue=false)]
        public List<SalesInvoiceApplicationCreditMemo> ApplicationsCreditMemo { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationsInvoice
        /// </summary>
        [DataMember(Name="ApplicationsInvoice", EmitDefaultValue=false)]
        public List<SalesInvoiceApplicationInvoice> ApplicationsInvoice { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="Balance", EmitDefaultValue=false)]
        public DecimalValue Balance { get; set; }

        /// <summary>
        /// Gets or Sets BillingSettings
        /// </summary>
        [DataMember(Name="BillingSettings", EmitDefaultValue=false)]
        public BillToSettings BillingSettings { get; set; }

        /// <summary>
        /// Gets or Sets CashDiscount
        /// </summary>
        [DataMember(Name="CashDiscount", EmitDefaultValue=false)]
        public DecimalValue CashDiscount { get; set; }

        /// <summary>
        /// Gets or Sets Commissions
        /// </summary>
        [DataMember(Name="Commissions", EmitDefaultValue=false)]
        public SalesInvoiceCommissions Commissions { get; set; }

        /// <summary>
        /// Gets or Sets CreditHold
        /// </summary>
        [DataMember(Name="CreditHold", EmitDefaultValue=false)]
        public BooleanValue CreditHold { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public StringValue Currency { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="CustomerID", EmitDefaultValue=false)]
        public StringValue CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerOrder
        /// </summary>
        [DataMember(Name="CustomerOrder", EmitDefaultValue=false)]
        public StringValue CustomerOrder { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public List<SalesInvoiceDetail> Details { get; set; }

        /// <summary>
        /// Gets or Sets DiscountDetails
        /// </summary>
        [DataMember(Name="DiscountDetails", EmitDefaultValue=false)]
        public List<SalesInvoiceDiscountDetails> DiscountDetails { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="DueDate", EmitDefaultValue=false)]
        public DateTimeValue DueDate { get; set; }

        /// <summary>
        /// Gets or Sets FinancialDetails
        /// </summary>
        [DataMember(Name="FinancialDetails", EmitDefaultValue=false)]
        public SalesInvoiceFinancialDetails FinancialDetails { get; set; }

        /// <summary>
        /// Gets or Sets FreightDetails
        /// </summary>
        [DataMember(Name="FreightDetails", EmitDefaultValue=false)]
        public List<SalesInvoiceFreightDetail> FreightDetails { get; set; }

        /// <summary>
        /// Gets or Sets Hold
        /// </summary>
        [DataMember(Name="Hold", EmitDefaultValue=false)]
        public BooleanValue Hold { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="Project", EmitDefaultValue=false)]
        public StringValue Project { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNbr
        /// </summary>
        [DataMember(Name="ReferenceNbr", EmitDefaultValue=false)]
        public StringValue ReferenceNbr { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TaxDetails
        /// </summary>
        [DataMember(Name="TaxDetails", EmitDefaultValue=false)]
        public List<SalesInvoiceTaxDetail> TaxDetails { get; set; }

        /// <summary>
        /// Gets or Sets Totals
        /// </summary>
        [DataMember(Name="Totals", EmitDefaultValue=false)]
        public SalesInvoiceTotals Totals { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public StringValue Type { get; set; }

        /// <summary>
        /// Gets or Sets VATExemptTotal
        /// </summary>
        [DataMember(Name="VATExemptTotal", EmitDefaultValue=false)]
        public DecimalValue VATExemptTotal { get; set; }

        /// <summary>
        /// Gets or Sets VATTaxableTotal
        /// </summary>
        [DataMember(Name="VATTaxableTotal", EmitDefaultValue=false)]
        public DecimalValue VATTaxableTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesInvoice {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ApplicationsCreditMemo: ").Append(ApplicationsCreditMemo).Append("\n");
            sb.Append("  ApplicationsInvoice: ").Append(ApplicationsInvoice).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  BillingSettings: ").Append(BillingSettings).Append("\n");
            sb.Append("  CashDiscount: ").Append(CashDiscount).Append("\n");
            sb.Append("  Commissions: ").Append(Commissions).Append("\n");
            sb.Append("  CreditHold: ").Append(CreditHold).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  CustomerOrder: ").Append(CustomerOrder).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  DiscountDetails: ").Append(DiscountDetails).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  FinancialDetails: ").Append(FinancialDetails).Append("\n");
            sb.Append("  FreightDetails: ").Append(FreightDetails).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ReferenceNbr: ").Append(ReferenceNbr).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  Totals: ").Append(Totals).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VATExemptTotal: ").Append(VATExemptTotal).Append("\n");
            sb.Append("  VATTaxableTotal: ").Append(VATTaxableTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesInvoice);
        }

        /// <summary>
        /// Returns true if SalesInvoice instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesInvoice input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && base.Equals(input) && 
                (
                    this.ApplicationsCreditMemo == input.ApplicationsCreditMemo ||
                    this.ApplicationsCreditMemo != null &&
                    this.ApplicationsCreditMemo.SequenceEqual(input.ApplicationsCreditMemo)
                ) && base.Equals(input) && 
                (
                    this.ApplicationsInvoice == input.ApplicationsInvoice ||
                    this.ApplicationsInvoice != null &&
                    this.ApplicationsInvoice.SequenceEqual(input.ApplicationsInvoice)
                ) && base.Equals(input) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && base.Equals(input) && 
                (
                    this.BillingSettings == input.BillingSettings ||
                    (this.BillingSettings != null &&
                    this.BillingSettings.Equals(input.BillingSettings))
                ) && base.Equals(input) && 
                (
                    this.CashDiscount == input.CashDiscount ||
                    (this.CashDiscount != null &&
                    this.CashDiscount.Equals(input.CashDiscount))
                ) && base.Equals(input) && 
                (
                    this.Commissions == input.Commissions ||
                    (this.Commissions != null &&
                    this.Commissions.Equals(input.Commissions))
                ) && base.Equals(input) && 
                (
                    this.CreditHold == input.CreditHold ||
                    (this.CreditHold != null &&
                    this.CreditHold.Equals(input.CreditHold))
                ) && base.Equals(input) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && base.Equals(input) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && base.Equals(input) && 
                (
                    this.CustomerOrder == input.CustomerOrder ||
                    (this.CustomerOrder != null &&
                    this.CustomerOrder.Equals(input.CustomerOrder))
                ) && base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && base.Equals(input) && 
                (
                    this.DiscountDetails == input.DiscountDetails ||
                    this.DiscountDetails != null &&
                    this.DiscountDetails.SequenceEqual(input.DiscountDetails)
                ) && base.Equals(input) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && base.Equals(input) && 
                (
                    this.FinancialDetails == input.FinancialDetails ||
                    (this.FinancialDetails != null &&
                    this.FinancialDetails.Equals(input.FinancialDetails))
                ) && base.Equals(input) && 
                (
                    this.FreightDetails == input.FreightDetails ||
                    this.FreightDetails != null &&
                    this.FreightDetails.SequenceEqual(input.FreightDetails)
                ) && base.Equals(input) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && base.Equals(input) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && base.Equals(input) && 
                (
                    this.ReferenceNbr == input.ReferenceNbr ||
                    (this.ReferenceNbr != null &&
                    this.ReferenceNbr.Equals(input.ReferenceNbr))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.SequenceEqual(input.TaxDetails)
                ) && base.Equals(input) && 
                (
                    this.Totals == input.Totals ||
                    (this.Totals != null &&
                    this.Totals.Equals(input.Totals))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.VATExemptTotal == input.VATExemptTotal ||
                    (this.VATExemptTotal != null &&
                    this.VATExemptTotal.Equals(input.VATExemptTotal))
                ) && base.Equals(input) && 
                (
                    this.VATTaxableTotal == input.VATTaxableTotal ||
                    (this.VATTaxableTotal != null &&
                    this.VATTaxableTotal.Equals(input.VATTaxableTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.ApplicationsCreditMemo != null)
                    hashCode = hashCode * 59 + this.ApplicationsCreditMemo.GetHashCode();
                if (this.ApplicationsInvoice != null)
                    hashCode = hashCode * 59 + this.ApplicationsInvoice.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.BillingSettings != null)
                    hashCode = hashCode * 59 + this.BillingSettings.GetHashCode();
                if (this.CashDiscount != null)
                    hashCode = hashCode * 59 + this.CashDiscount.GetHashCode();
                if (this.Commissions != null)
                    hashCode = hashCode * 59 + this.Commissions.GetHashCode();
                if (this.CreditHold != null)
                    hashCode = hashCode * 59 + this.CreditHold.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.CustomerOrder != null)
                    hashCode = hashCode * 59 + this.CustomerOrder.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.DiscountDetails != null)
                    hashCode = hashCode * 59 + this.DiscountDetails.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.FinancialDetails != null)
                    hashCode = hashCode * 59 + this.FinancialDetails.GetHashCode();
                if (this.FreightDetails != null)
                    hashCode = hashCode * 59 + this.FreightDetails.GetHashCode();
                if (this.Hold != null)
                    hashCode = hashCode * 59 + this.Hold.GetHashCode();
                if (this.Project != null)
                    hashCode = hashCode * 59 + this.Project.GetHashCode();
                if (this.ReferenceNbr != null)
                    hashCode = hashCode * 59 + this.ReferenceNbr.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                if (this.Totals != null)
                    hashCode = hashCode * 59 + this.Totals.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.VATExemptTotal != null)
                    hashCode = hashCode * 59 + this.VATExemptTotal.GetHashCode();
                if (this.VATTaxableTotal != null)
                    hashCode = hashCode * 59 + this.VATTaxableTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
