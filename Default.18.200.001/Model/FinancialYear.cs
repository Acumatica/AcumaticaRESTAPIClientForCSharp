/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// FinancialYear
    /// </summary>
    [DataContract]
    public partial class FinancialYear : Entity,  IEquatable<FinancialYear>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialYear" /> class.
        /// </summary>
        /// <param name="adjustToPeriodStart">adjustToPeriodStart.</param>
        /// <param name="belongsToNextYear">belongsToNextYear.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="dayOfWeek">dayOfWeek.</param>
        /// <param name="details">details.</param>
        /// <param name="financialYearStartsOn">financialYearStartsOn.</param>
        /// <param name="firstFinancialYear">firstFinancialYear.</param>
        /// <param name="firstPeriodStartDate">firstPeriodStartDate.</param>
        /// <param name="hasAdjustmentPeriod">hasAdjustmentPeriod.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="lengthOfFinancialPeriodInDays">lengthOfFinancialPeriodInDays.</param>
        /// <param name="nbrOfFinancialPeriods">nbrOfFinancialPeriods.</param>
        /// <param name="periodsStartDayOfWeek">periodsStartDayOfWeek.</param>
        /// <param name="periodType">periodType.</param>
        /// <param name="userDefinedPeriods">userDefinedPeriods.</param>
        /// <param name="yearEndCalculationMethod">yearEndCalculationMethod.</param>
        public FinancialYear(BooleanValue adjustToPeriodStart = default(BooleanValue), BooleanValue belongsToNextYear = default(BooleanValue), DateTimeValue createdDateTime = default(DateTimeValue), StringValue dayOfWeek = default(StringValue), IEnumerable<FinancialYearPeriodDetail> details = default(IEnumerable<FinancialYearPeriodDetail>), DateTimeValue financialYearStartsOn = default(DateTimeValue), StringValue firstFinancialYear = default(StringValue), DateTimeValue firstPeriodStartDate = default(DateTimeValue), BooleanValue hasAdjustmentPeriod = default(BooleanValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), ShortValue lengthOfFinancialPeriodInDays = default(ShortValue), ShortValue nbrOfFinancialPeriods = default(ShortValue), StringValue periodsStartDayOfWeek = default(StringValue), StringValue periodType = default(StringValue), BooleanValue userDefinedPeriods = default(BooleanValue), StringValue yearEndCalculationMethod = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AdjustToPeriodStart = adjustToPeriodStart;
            this.BelongsToNextYear = belongsToNextYear;
            this.CreatedDateTime = createdDateTime;
            this.DayOfWeek = dayOfWeek;
            this.Details = details;
            this.FinancialYearStartsOn = financialYearStartsOn;
            this.FirstFinancialYear = firstFinancialYear;
            this.FirstPeriodStartDate = firstPeriodStartDate;
            this.HasAdjustmentPeriod = hasAdjustmentPeriod;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.LengthOfFinancialPeriodInDays = lengthOfFinancialPeriodInDays;
            this.NbrOfFinancialPeriods = nbrOfFinancialPeriods;
            this.PeriodsStartDayOfWeek = periodsStartDayOfWeek;
            this.PeriodType = periodType;
            this.UserDefinedPeriods = userDefinedPeriods;
            this.YearEndCalculationMethod = yearEndCalculationMethod;
        }
        
        /// <summary>
        /// Gets or Sets AdjustToPeriodStart
        /// </summary>
        [DataMember(Name="AdjustToPeriodStart", EmitDefaultValue=false)]
        public BooleanValue AdjustToPeriodStart { get; set; }

        /// <summary>
        /// Gets or Sets BelongsToNextYear
        /// </summary>
        [DataMember(Name="BelongsToNextYear", EmitDefaultValue=false)]
        public BooleanValue BelongsToNextYear { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        [DataMember(Name="DayOfWeek", EmitDefaultValue=false)]
        public StringValue DayOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public IEnumerable<FinancialYearPeriodDetail> Details { get; set; }

        /// <summary>
        /// Gets or Sets FinancialYearStartsOn
        /// </summary>
        [DataMember(Name="FinancialYearStartsOn", EmitDefaultValue=false)]
        public DateTimeValue FinancialYearStartsOn { get; set; }

        /// <summary>
        /// Gets or Sets FirstFinancialYear
        /// </summary>
        [DataMember(Name="FirstFinancialYear", EmitDefaultValue=false)]
        public StringValue FirstFinancialYear { get; set; }

        /// <summary>
        /// Gets or Sets FirstPeriodStartDate
        /// </summary>
        [DataMember(Name="FirstPeriodStartDate", EmitDefaultValue=false)]
        public DateTimeValue FirstPeriodStartDate { get; set; }

        /// <summary>
        /// Gets or Sets HasAdjustmentPeriod
        /// </summary>
        [DataMember(Name="HasAdjustmentPeriod", EmitDefaultValue=false)]
        public BooleanValue HasAdjustmentPeriod { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LengthOfFinancialPeriodInDays
        /// </summary>
        [DataMember(Name="LengthOfFinancialPeriodInDays", EmitDefaultValue=false)]
        public ShortValue LengthOfFinancialPeriodInDays { get; set; }

        /// <summary>
        /// Gets or Sets NbrOfFinancialPeriods
        /// </summary>
        [DataMember(Name="NbrOfFinancialPeriods", EmitDefaultValue=false)]
        public ShortValue NbrOfFinancialPeriods { get; set; }

        /// <summary>
        /// Gets or Sets PeriodsStartDayOfWeek
        /// </summary>
        [DataMember(Name="PeriodsStartDayOfWeek", EmitDefaultValue=false)]
        public StringValue PeriodsStartDayOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets PeriodType
        /// </summary>
        [DataMember(Name="PeriodType", EmitDefaultValue=false)]
        public StringValue PeriodType { get; set; }

        /// <summary>
        /// Gets or Sets UserDefinedPeriods
        /// </summary>
        [DataMember(Name="UserDefinedPeriods", EmitDefaultValue=false)]
        public BooleanValue UserDefinedPeriods { get; set; }

        /// <summary>
        /// Gets or Sets YearEndCalculationMethod
        /// </summary>
        [DataMember(Name="YearEndCalculationMethod", EmitDefaultValue=false)]
        public StringValue YearEndCalculationMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialYear {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AdjustToPeriodStart: ").Append(AdjustToPeriodStart).Append("\n");
            sb.Append("  BelongsToNextYear: ").Append(BelongsToNextYear).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  FinancialYearStartsOn: ").Append(FinancialYearStartsOn).Append("\n");
            sb.Append("  FirstFinancialYear: ").Append(FirstFinancialYear).Append("\n");
            sb.Append("  FirstPeriodStartDate: ").Append(FirstPeriodStartDate).Append("\n");
            sb.Append("  HasAdjustmentPeriod: ").Append(HasAdjustmentPeriod).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LengthOfFinancialPeriodInDays: ").Append(LengthOfFinancialPeriodInDays).Append("\n");
            sb.Append("  NbrOfFinancialPeriods: ").Append(NbrOfFinancialPeriods).Append("\n");
            sb.Append("  PeriodsStartDayOfWeek: ").Append(PeriodsStartDayOfWeek).Append("\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("  UserDefinedPeriods: ").Append(UserDefinedPeriods).Append("\n");
            sb.Append("  YearEndCalculationMethod: ").Append(YearEndCalculationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialYear);
        }

        /// <summary>
        /// Returns true if FinancialYear instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialYear to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialYear input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AdjustToPeriodStart == input.AdjustToPeriodStart ||
                    (this.AdjustToPeriodStart != null &&
                    this.AdjustToPeriodStart.Equals(input.AdjustToPeriodStart))
                ) && base.Equals(input) && 
                (
                    this.BelongsToNextYear == input.BelongsToNextYear ||
                    (this.BelongsToNextYear != null &&
                    this.BelongsToNextYear.Equals(input.BelongsToNextYear))
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.DayOfWeek == input.DayOfWeek ||
                    (this.DayOfWeek != null &&
                    this.DayOfWeek.Equals(input.DayOfWeek))
                ) && base.Equals(input) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && base.Equals(input) && 
                (
                    this.FinancialYearStartsOn == input.FinancialYearStartsOn ||
                    (this.FinancialYearStartsOn != null &&
                    this.FinancialYearStartsOn.Equals(input.FinancialYearStartsOn))
                ) && base.Equals(input) && 
                (
                    this.FirstFinancialYear == input.FirstFinancialYear ||
                    (this.FirstFinancialYear != null &&
                    this.FirstFinancialYear.Equals(input.FirstFinancialYear))
                ) && base.Equals(input) && 
                (
                    this.FirstPeriodStartDate == input.FirstPeriodStartDate ||
                    (this.FirstPeriodStartDate != null &&
                    this.FirstPeriodStartDate.Equals(input.FirstPeriodStartDate))
                ) && base.Equals(input) && 
                (
                    this.HasAdjustmentPeriod == input.HasAdjustmentPeriod ||
                    (this.HasAdjustmentPeriod != null &&
                    this.HasAdjustmentPeriod.Equals(input.HasAdjustmentPeriod))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.LengthOfFinancialPeriodInDays == input.LengthOfFinancialPeriodInDays ||
                    (this.LengthOfFinancialPeriodInDays != null &&
                    this.LengthOfFinancialPeriodInDays.Equals(input.LengthOfFinancialPeriodInDays))
                ) && base.Equals(input) && 
                (
                    this.NbrOfFinancialPeriods == input.NbrOfFinancialPeriods ||
                    (this.NbrOfFinancialPeriods != null &&
                    this.NbrOfFinancialPeriods.Equals(input.NbrOfFinancialPeriods))
                ) && base.Equals(input) && 
                (
                    this.PeriodsStartDayOfWeek == input.PeriodsStartDayOfWeek ||
                    (this.PeriodsStartDayOfWeek != null &&
                    this.PeriodsStartDayOfWeek.Equals(input.PeriodsStartDayOfWeek))
                ) && base.Equals(input) && 
                (
                    this.PeriodType == input.PeriodType ||
                    (this.PeriodType != null &&
                    this.PeriodType.Equals(input.PeriodType))
                ) && base.Equals(input) && 
                (
                    this.UserDefinedPeriods == input.UserDefinedPeriods ||
                    (this.UserDefinedPeriods != null &&
                    this.UserDefinedPeriods.Equals(input.UserDefinedPeriods))
                ) && base.Equals(input) && 
                (
                    this.YearEndCalculationMethod == input.YearEndCalculationMethod ||
                    (this.YearEndCalculationMethod != null &&
                    this.YearEndCalculationMethod.Equals(input.YearEndCalculationMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AdjustToPeriodStart != null)
                    hashCode = hashCode * 59 + this.AdjustToPeriodStart.GetHashCode();
                if (this.BelongsToNextYear != null)
                    hashCode = hashCode * 59 + this.BelongsToNextYear.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.DayOfWeek != null)
                    hashCode = hashCode * 59 + this.DayOfWeek.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.FinancialYearStartsOn != null)
                    hashCode = hashCode * 59 + this.FinancialYearStartsOn.GetHashCode();
                if (this.FirstFinancialYear != null)
                    hashCode = hashCode * 59 + this.FirstFinancialYear.GetHashCode();
                if (this.FirstPeriodStartDate != null)
                    hashCode = hashCode * 59 + this.FirstPeriodStartDate.GetHashCode();
                if (this.HasAdjustmentPeriod != null)
                    hashCode = hashCode * 59 + this.HasAdjustmentPeriod.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.LengthOfFinancialPeriodInDays != null)
                    hashCode = hashCode * 59 + this.LengthOfFinancialPeriodInDays.GetHashCode();
                if (this.NbrOfFinancialPeriods != null)
                    hashCode = hashCode * 59 + this.NbrOfFinancialPeriods.GetHashCode();
                if (this.PeriodsStartDayOfWeek != null)
                    hashCode = hashCode * 59 + this.PeriodsStartDayOfWeek.GetHashCode();
                if (this.PeriodType != null)
                    hashCode = hashCode * 59 + this.PeriodType.GetHashCode();
                if (this.UserDefinedPeriods != null)
                    hashCode = hashCode * 59 + this.UserDefinedPeriods.GetHashCode();
                if (this.YearEndCalculationMethod != null)
                    hashCode = hashCode * 59 + this.YearEndCalculationMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
