/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// ChangeOrderCommitment
    /// </summary>
    [DataContract]
    public partial class ChangeOrderCommitment : Entity,  IEquatable<ChangeOrderCommitment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeOrderCommitment" /> class.
        /// </summary>
        /// <param name="account">account.</param>
        /// <param name="amount">amount.</param>
        /// <param name="amountinBaseCurrency">amountinBaseCurrency.</param>
        /// <param name="costCode">costCode.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="description">description.</param>
        /// <param name="inventoryID">inventoryID.</param>
        /// <param name="lineAmount">lineAmount.</param>
        /// <param name="lineDescription">lineDescription.</param>
        /// <param name="openAmount">openAmount.</param>
        /// <param name="openQty">openQty.</param>
        /// <param name="orderDate">orderDate.</param>
        /// <param name="orderQty">orderQty.</param>
        /// <param name="pOLineNbr">pOLineNbr.</param>
        /// <param name="pONbr">pONbr.</param>
        /// <param name="potentiallyRevisedAmount">potentiallyRevisedAmount.</param>
        /// <param name="potentiallyRevisedQty">potentiallyRevisedQty.</param>
        /// <param name="projectTaskID">projectTaskID.</param>
        /// <param name="qty">qty.</param>
        /// <param name="status">status.</param>
        /// <param name="unitCost">unitCost.</param>
        /// <param name="uOM">uOM.</param>
        /// <param name="vendor">vendor.</param>
        public ChangeOrderCommitment(StringValue account = default(StringValue), DecimalValue amount = default(DecimalValue), DecimalValue amountinBaseCurrency = default(DecimalValue), StringValue costCode = default(StringValue), StringValue currencyID = default(StringValue), StringValue description = default(StringValue), StringValue inventoryID = default(StringValue), DecimalValue lineAmount = default(DecimalValue), StringValue lineDescription = default(StringValue), DecimalValue openAmount = default(DecimalValue), DecimalValue openQty = default(DecimalValue), DateTimeValue orderDate = default(DateTimeValue), DecimalValue orderQty = default(DecimalValue), IntValue pOLineNbr = default(IntValue), StringValue pONbr = default(StringValue), DecimalValue potentiallyRevisedAmount = default(DecimalValue), DecimalValue potentiallyRevisedQty = default(DecimalValue), StringValue projectTaskID = default(StringValue), DecimalValue qty = default(DecimalValue), StringValue status = default(StringValue), DecimalValue unitCost = default(DecimalValue), StringValue uOM = default(StringValue), StringValue vendor = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Account = account;
            this.Amount = amount;
            this.AmountinBaseCurrency = amountinBaseCurrency;
            this.CostCode = costCode;
            this.CurrencyID = currencyID;
            this.Description = description;
            this.InventoryID = inventoryID;
            this.LineAmount = lineAmount;
            this.LineDescription = lineDescription;
            this.OpenAmount = openAmount;
            this.OpenQty = openQty;
            this.OrderDate = orderDate;
            this.OrderQty = orderQty;
            this.POLineNbr = pOLineNbr;
            this.PONbr = pONbr;
            this.PotentiallyRevisedAmount = potentiallyRevisedAmount;
            this.PotentiallyRevisedQty = potentiallyRevisedQty;
            this.ProjectTaskID = projectTaskID;
            this.Qty = qty;
            this.Status = status;
            this.UnitCost = unitCost;
            this.UOM = uOM;
            this.Vendor = vendor;
        }
        
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="Account", EmitDefaultValue=false)]
        public StringValue Account { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public DecimalValue Amount { get; set; }

        /// <summary>
        /// Gets or Sets AmountinBaseCurrency
        /// </summary>
        [DataMember(Name="AmountinBaseCurrency", EmitDefaultValue=false)]
        public DecimalValue AmountinBaseCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CostCode
        /// </summary>
        [DataMember(Name="CostCode", EmitDefaultValue=false)]
        public StringValue CostCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets InventoryID
        /// </summary>
        [DataMember(Name="InventoryID", EmitDefaultValue=false)]
        public StringValue InventoryID { get; set; }

        /// <summary>
        /// Gets or Sets LineAmount
        /// </summary>
        [DataMember(Name="LineAmount", EmitDefaultValue=false)]
        public DecimalValue LineAmount { get; set; }

        /// <summary>
        /// Gets or Sets LineDescription
        /// </summary>
        [DataMember(Name="LineDescription", EmitDefaultValue=false)]
        public StringValue LineDescription { get; set; }

        /// <summary>
        /// Gets or Sets OpenAmount
        /// </summary>
        [DataMember(Name="OpenAmount", EmitDefaultValue=false)]
        public DecimalValue OpenAmount { get; set; }

        /// <summary>
        /// Gets or Sets OpenQty
        /// </summary>
        [DataMember(Name="OpenQty", EmitDefaultValue=false)]
        public DecimalValue OpenQty { get; set; }

        /// <summary>
        /// Gets or Sets OrderDate
        /// </summary>
        [DataMember(Name="OrderDate", EmitDefaultValue=false)]
        public DateTimeValue OrderDate { get; set; }

        /// <summary>
        /// Gets or Sets OrderQty
        /// </summary>
        [DataMember(Name="OrderQty", EmitDefaultValue=false)]
        public DecimalValue OrderQty { get; set; }

        /// <summary>
        /// Gets or Sets POLineNbr
        /// </summary>
        [DataMember(Name="POLineNbr", EmitDefaultValue=false)]
        public IntValue POLineNbr { get; set; }

        /// <summary>
        /// Gets or Sets PONbr
        /// </summary>
        [DataMember(Name="PONbr", EmitDefaultValue=false)]
        public StringValue PONbr { get; set; }

        /// <summary>
        /// Gets or Sets PotentiallyRevisedAmount
        /// </summary>
        [DataMember(Name="PotentiallyRevisedAmount", EmitDefaultValue=false)]
        public DecimalValue PotentiallyRevisedAmount { get; set; }

        /// <summary>
        /// Gets or Sets PotentiallyRevisedQty
        /// </summary>
        [DataMember(Name="PotentiallyRevisedQty", EmitDefaultValue=false)]
        public DecimalValue PotentiallyRevisedQty { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTaskID
        /// </summary>
        [DataMember(Name="ProjectTaskID", EmitDefaultValue=false)]
        public StringValue ProjectTaskID { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="Qty", EmitDefaultValue=false)]
        public DecimalValue Qty { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="UnitCost", EmitDefaultValue=false)]
        public DecimalValue UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UOM
        /// </summary>
        [DataMember(Name="UOM", EmitDefaultValue=false)]
        public StringValue UOM { get; set; }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name="Vendor", EmitDefaultValue=false)]
        public StringValue Vendor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeOrderCommitment {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountinBaseCurrency: ").Append(AmountinBaseCurrency).Append("\n");
            sb.Append("  CostCode: ").Append(CostCode).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  InventoryID: ").Append(InventoryID).Append("\n");
            sb.Append("  LineAmount: ").Append(LineAmount).Append("\n");
            sb.Append("  LineDescription: ").Append(LineDescription).Append("\n");
            sb.Append("  OpenAmount: ").Append(OpenAmount).Append("\n");
            sb.Append("  OpenQty: ").Append(OpenQty).Append("\n");
            sb.Append("  OrderDate: ").Append(OrderDate).Append("\n");
            sb.Append("  OrderQty: ").Append(OrderQty).Append("\n");
            sb.Append("  POLineNbr: ").Append(POLineNbr).Append("\n");
            sb.Append("  PONbr: ").Append(PONbr).Append("\n");
            sb.Append("  PotentiallyRevisedAmount: ").Append(PotentiallyRevisedAmount).Append("\n");
            sb.Append("  PotentiallyRevisedQty: ").Append(PotentiallyRevisedQty).Append("\n");
            sb.Append("  ProjectTaskID: ").Append(ProjectTaskID).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UOM: ").Append(UOM).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeOrderCommitment);
        }

        /// <summary>
        /// Returns true if ChangeOrderCommitment instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeOrderCommitment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeOrderCommitment input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && base.Equals(input) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && base.Equals(input) && 
                (
                    this.AmountinBaseCurrency == input.AmountinBaseCurrency ||
                    (this.AmountinBaseCurrency != null &&
                    this.AmountinBaseCurrency.Equals(input.AmountinBaseCurrency))
                ) && base.Equals(input) && 
                (
                    this.CostCode == input.CostCode ||
                    (this.CostCode != null &&
                    this.CostCode.Equals(input.CostCode))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.InventoryID == input.InventoryID ||
                    (this.InventoryID != null &&
                    this.InventoryID.Equals(input.InventoryID))
                ) && base.Equals(input) && 
                (
                    this.LineAmount == input.LineAmount ||
                    (this.LineAmount != null &&
                    this.LineAmount.Equals(input.LineAmount))
                ) && base.Equals(input) && 
                (
                    this.LineDescription == input.LineDescription ||
                    (this.LineDescription != null &&
                    this.LineDescription.Equals(input.LineDescription))
                ) && base.Equals(input) && 
                (
                    this.OpenAmount == input.OpenAmount ||
                    (this.OpenAmount != null &&
                    this.OpenAmount.Equals(input.OpenAmount))
                ) && base.Equals(input) && 
                (
                    this.OpenQty == input.OpenQty ||
                    (this.OpenQty != null &&
                    this.OpenQty.Equals(input.OpenQty))
                ) && base.Equals(input) && 
                (
                    this.OrderDate == input.OrderDate ||
                    (this.OrderDate != null &&
                    this.OrderDate.Equals(input.OrderDate))
                ) && base.Equals(input) && 
                (
                    this.OrderQty == input.OrderQty ||
                    (this.OrderQty != null &&
                    this.OrderQty.Equals(input.OrderQty))
                ) && base.Equals(input) && 
                (
                    this.POLineNbr == input.POLineNbr ||
                    (this.POLineNbr != null &&
                    this.POLineNbr.Equals(input.POLineNbr))
                ) && base.Equals(input) && 
                (
                    this.PONbr == input.PONbr ||
                    (this.PONbr != null &&
                    this.PONbr.Equals(input.PONbr))
                ) && base.Equals(input) && 
                (
                    this.PotentiallyRevisedAmount == input.PotentiallyRevisedAmount ||
                    (this.PotentiallyRevisedAmount != null &&
                    this.PotentiallyRevisedAmount.Equals(input.PotentiallyRevisedAmount))
                ) && base.Equals(input) && 
                (
                    this.PotentiallyRevisedQty == input.PotentiallyRevisedQty ||
                    (this.PotentiallyRevisedQty != null &&
                    this.PotentiallyRevisedQty.Equals(input.PotentiallyRevisedQty))
                ) && base.Equals(input) && 
                (
                    this.ProjectTaskID == input.ProjectTaskID ||
                    (this.ProjectTaskID != null &&
                    this.ProjectTaskID.Equals(input.ProjectTaskID))
                ) && base.Equals(input) && 
                (
                    this.Qty == input.Qty ||
                    (this.Qty != null &&
                    this.Qty.Equals(input.Qty))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.UnitCost == input.UnitCost ||
                    (this.UnitCost != null &&
                    this.UnitCost.Equals(input.UnitCost))
                ) && base.Equals(input) && 
                (
                    this.UOM == input.UOM ||
                    (this.UOM != null &&
                    this.UOM.Equals(input.UOM))
                ) && base.Equals(input) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AmountinBaseCurrency != null)
                    hashCode = hashCode * 59 + this.AmountinBaseCurrency.GetHashCode();
                if (this.CostCode != null)
                    hashCode = hashCode * 59 + this.CostCode.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.InventoryID != null)
                    hashCode = hashCode * 59 + this.InventoryID.GetHashCode();
                if (this.LineAmount != null)
                    hashCode = hashCode * 59 + this.LineAmount.GetHashCode();
                if (this.LineDescription != null)
                    hashCode = hashCode * 59 + this.LineDescription.GetHashCode();
                if (this.OpenAmount != null)
                    hashCode = hashCode * 59 + this.OpenAmount.GetHashCode();
                if (this.OpenQty != null)
                    hashCode = hashCode * 59 + this.OpenQty.GetHashCode();
                if (this.OrderDate != null)
                    hashCode = hashCode * 59 + this.OrderDate.GetHashCode();
                if (this.OrderQty != null)
                    hashCode = hashCode * 59 + this.OrderQty.GetHashCode();
                if (this.POLineNbr != null)
                    hashCode = hashCode * 59 + this.POLineNbr.GetHashCode();
                if (this.PONbr != null)
                    hashCode = hashCode * 59 + this.PONbr.GetHashCode();
                if (this.PotentiallyRevisedAmount != null)
                    hashCode = hashCode * 59 + this.PotentiallyRevisedAmount.GetHashCode();
                if (this.PotentiallyRevisedQty != null)
                    hashCode = hashCode * 59 + this.PotentiallyRevisedQty.GetHashCode();
                if (this.ProjectTaskID != null)
                    hashCode = hashCode * 59 + this.ProjectTaskID.GetHashCode();
                if (this.Qty != null)
                    hashCode = hashCode * 59 + this.Qty.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UnitCost != null)
                    hashCode = hashCode * 59 + this.UnitCost.GetHashCode();
                if (this.UOM != null)
                    hashCode = hashCode * 59 + this.UOM.GetHashCode();
                if (this.Vendor != null)
                    hashCode = hashCode * 59 + this.Vendor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
