/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// Payment
    /// </summary>
    [DataContract]
    public partial class Payment : Entity,  IEquatable<Payment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="applicationDate">applicationDate.</param>
        /// <param name="applicationHistory">applicationHistory.</param>
        /// <param name="appliedToDocuments">appliedToDocuments.</param>
        /// <param name="cardAccountNbr">cardAccountNbr.</param>
        /// <param name="cashAccount">cashAccount.</param>
        /// <param name="creditCardProcessingInfo">creditCardProcessingInfo.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="description">description.</param>
        /// <param name="documentsToApply">documentsToApply.</param>
        /// <param name="hold">hold.</param>
        /// <param name="ordersToApply">ordersToApply.</param>
        /// <param name="paymentAmount">paymentAmount.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="paymentRef">paymentRef.</param>
        /// <param name="referenceNbr">referenceNbr.</param>
        /// <param name="status">status.</param>
        /// <param name="type">type.</param>
        public Payment(DateTimeValue applicationDate = default(DateTimeValue), List<PaymentApplicationHistoryDetail> applicationHistory = default(List<PaymentApplicationHistoryDetail>), DecimalValue appliedToDocuments = default(DecimalValue), IntValue cardAccountNbr = default(IntValue), StringValue cashAccount = default(StringValue), List<CreditCardProcessingDetail> creditCardProcessingInfo = default(List<CreditCardProcessingDetail>), StringValue currencyID = default(StringValue), StringValue customerID = default(StringValue), StringValue description = default(StringValue), List<PaymentDetail> documentsToApply = default(List<PaymentDetail>), BooleanValue hold = default(BooleanValue), List<PaymentOrderDetail> ordersToApply = default(List<PaymentOrderDetail>), DecimalValue paymentAmount = default(DecimalValue), StringValue paymentMethod = default(StringValue), StringValue paymentRef = default(StringValue), StringValue referenceNbr = default(StringValue), StringValue status = default(StringValue), StringValue type = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ApplicationDate = applicationDate;
            this.ApplicationHistory = applicationHistory;
            this.AppliedToDocuments = appliedToDocuments;
            this.CardAccountNbr = cardAccountNbr;
            this.CashAccount = cashAccount;
            this.CreditCardProcessingInfo = creditCardProcessingInfo;
            this.CurrencyID = currencyID;
            this.CustomerID = customerID;
            this.Description = description;
            this.DocumentsToApply = documentsToApply;
            this.Hold = hold;
            this.OrdersToApply = ordersToApply;
            this.PaymentAmount = paymentAmount;
            this.PaymentMethod = paymentMethod;
            this.PaymentRef = paymentRef;
            this.ReferenceNbr = referenceNbr;
            this.Status = status;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationDate
        /// </summary>
        [DataMember(Name="ApplicationDate", EmitDefaultValue=false)]
        public DateTimeValue ApplicationDate { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationHistory
        /// </summary>
        [DataMember(Name="ApplicationHistory", EmitDefaultValue=false)]
        public List<PaymentApplicationHistoryDetail> ApplicationHistory { get; set; }

        /// <summary>
        /// Gets or Sets AppliedToDocuments
        /// </summary>
        [DataMember(Name="AppliedToDocuments", EmitDefaultValue=false)]
        public DecimalValue AppliedToDocuments { get; set; }

        /// <summary>
        /// Gets or Sets CardAccountNbr
        /// </summary>
        [DataMember(Name="CardAccountNbr", EmitDefaultValue=false)]
        public IntValue CardAccountNbr { get; set; }

        /// <summary>
        /// Gets or Sets CashAccount
        /// </summary>
        [DataMember(Name="CashAccount", EmitDefaultValue=false)]
        public StringValue CashAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardProcessingInfo
        /// </summary>
        [DataMember(Name="CreditCardProcessingInfo", EmitDefaultValue=false)]
        public List<CreditCardProcessingDetail> CreditCardProcessingInfo { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="CustomerID", EmitDefaultValue=false)]
        public StringValue CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsToApply
        /// </summary>
        [DataMember(Name="DocumentsToApply", EmitDefaultValue=false)]
        public List<PaymentDetail> DocumentsToApply { get; set; }

        /// <summary>
        /// Gets or Sets Hold
        /// </summary>
        [DataMember(Name="Hold", EmitDefaultValue=false)]
        public BooleanValue Hold { get; set; }

        /// <summary>
        /// Gets or Sets OrdersToApply
        /// </summary>
        [DataMember(Name="OrdersToApply", EmitDefaultValue=false)]
        public List<PaymentOrderDetail> OrdersToApply { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAmount
        /// </summary>
        [DataMember(Name="PaymentAmount", EmitDefaultValue=false)]
        public DecimalValue PaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public StringValue PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PaymentRef
        /// </summary>
        [DataMember(Name="PaymentRef", EmitDefaultValue=false)]
        public StringValue PaymentRef { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNbr
        /// </summary>
        [DataMember(Name="ReferenceNbr", EmitDefaultValue=false)]
        public StringValue ReferenceNbr { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public StringValue Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  ApplicationHistory: ").Append(ApplicationHistory).Append("\n");
            sb.Append("  AppliedToDocuments: ").Append(AppliedToDocuments).Append("\n");
            sb.Append("  CardAccountNbr: ").Append(CardAccountNbr).Append("\n");
            sb.Append("  CashAccount: ").Append(CashAccount).Append("\n");
            sb.Append("  CreditCardProcessingInfo: ").Append(CreditCardProcessingInfo).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DocumentsToApply: ").Append(DocumentsToApply).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  OrdersToApply: ").Append(OrdersToApply).Append("\n");
            sb.Append("  PaymentAmount: ").Append(PaymentAmount).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentRef: ").Append(PaymentRef).Append("\n");
            sb.Append("  ReferenceNbr: ").Append(ReferenceNbr).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="input">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ApplicationDate == input.ApplicationDate ||
                    (this.ApplicationDate != null &&
                    this.ApplicationDate.Equals(input.ApplicationDate))
                ) && base.Equals(input) && 
                (
                    this.ApplicationHistory == input.ApplicationHistory ||
                    this.ApplicationHistory != null &&
                    this.ApplicationHistory.SequenceEqual(input.ApplicationHistory)
                ) && base.Equals(input) && 
                (
                    this.AppliedToDocuments == input.AppliedToDocuments ||
                    (this.AppliedToDocuments != null &&
                    this.AppliedToDocuments.Equals(input.AppliedToDocuments))
                ) && base.Equals(input) && 
                (
                    this.CardAccountNbr == input.CardAccountNbr ||
                    (this.CardAccountNbr != null &&
                    this.CardAccountNbr.Equals(input.CardAccountNbr))
                ) && base.Equals(input) && 
                (
                    this.CashAccount == input.CashAccount ||
                    (this.CashAccount != null &&
                    this.CashAccount.Equals(input.CashAccount))
                ) && base.Equals(input) && 
                (
                    this.CreditCardProcessingInfo == input.CreditCardProcessingInfo ||
                    this.CreditCardProcessingInfo != null &&
                    this.CreditCardProcessingInfo.SequenceEqual(input.CreditCardProcessingInfo)
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.DocumentsToApply == input.DocumentsToApply ||
                    this.DocumentsToApply != null &&
                    this.DocumentsToApply.SequenceEqual(input.DocumentsToApply)
                ) && base.Equals(input) && 
                (
                    this.Hold == input.Hold ||
                    (this.Hold != null &&
                    this.Hold.Equals(input.Hold))
                ) && base.Equals(input) && 
                (
                    this.OrdersToApply == input.OrdersToApply ||
                    this.OrdersToApply != null &&
                    this.OrdersToApply.SequenceEqual(input.OrdersToApply)
                ) && base.Equals(input) && 
                (
                    this.PaymentAmount == input.PaymentAmount ||
                    (this.PaymentAmount != null &&
                    this.PaymentAmount.Equals(input.PaymentAmount))
                ) && base.Equals(input) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && base.Equals(input) && 
                (
                    this.PaymentRef == input.PaymentRef ||
                    (this.PaymentRef != null &&
                    this.PaymentRef.Equals(input.PaymentRef))
                ) && base.Equals(input) && 
                (
                    this.ReferenceNbr == input.ReferenceNbr ||
                    (this.ReferenceNbr != null &&
                    this.ReferenceNbr.Equals(input.ReferenceNbr))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ApplicationDate != null)
                    hashCode = hashCode * 59 + this.ApplicationDate.GetHashCode();
                if (this.ApplicationHistory != null)
                    hashCode = hashCode * 59 + this.ApplicationHistory.GetHashCode();
                if (this.AppliedToDocuments != null)
                    hashCode = hashCode * 59 + this.AppliedToDocuments.GetHashCode();
                if (this.CardAccountNbr != null)
                    hashCode = hashCode * 59 + this.CardAccountNbr.GetHashCode();
                if (this.CashAccount != null)
                    hashCode = hashCode * 59 + this.CashAccount.GetHashCode();
                if (this.CreditCardProcessingInfo != null)
                    hashCode = hashCode * 59 + this.CreditCardProcessingInfo.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DocumentsToApply != null)
                    hashCode = hashCode * 59 + this.DocumentsToApply.GetHashCode();
                if (this.Hold != null)
                    hashCode = hashCode * 59 + this.Hold.GetHashCode();
                if (this.OrdersToApply != null)
                    hashCode = hashCode * 59 + this.OrdersToApply.GetHashCode();
                if (this.PaymentAmount != null)
                    hashCode = hashCode * 59 + this.PaymentAmount.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentRef != null)
                    hashCode = hashCode * 59 + this.PaymentRef.GetHashCode();
                if (this.ReferenceNbr != null)
                    hashCode = hashCode * 59 + this.ReferenceNbr.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
