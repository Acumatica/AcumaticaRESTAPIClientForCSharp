/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// EmployeeSettings
    /// </summary>
    [DataContract]
    public partial class EmployeeSettings : Entity,  IEquatable<EmployeeSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeSettings" /> class.
        /// </summary>
        /// <param name="branchID">branchID.</param>
        /// <param name="calendar">calendar.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="currencyRateTypeID">currencyRateTypeID.</param>
        /// <param name="departmentID">departmentID.</param>
        /// <param name="employeeClass">employeeClass.</param>
        /// <param name="employeeRefNbr">employeeRefNbr.</param>
        /// <param name="enableCurrencyOverride">enableCurrencyOverride.</param>
        /// <param name="enableRateOverride">enableRateOverride.</param>
        /// <param name="laborItem">laborItem.</param>
        /// <param name="regularHoursValidation">regularHoursValidation.</param>
        /// <param name="reportsTo">reportsTo.</param>
        /// <param name="routeEmails">routeEmails.</param>
        /// <param name="salesperson">salesperson.</param>
        /// <param name="timeCardIsRequired">timeCardIsRequired.</param>
        /// <param name="unionLocalID">unionLocalID.</param>
        public EmployeeSettings(StringValue branchID = default(StringValue), StringValue calendar = default(StringValue), StringValue currencyID = default(StringValue), StringValue currencyRateTypeID = default(StringValue), StringValue departmentID = default(StringValue), StringValue employeeClass = default(StringValue), StringValue employeeRefNbr = default(StringValue), BooleanValue enableCurrencyOverride = default(BooleanValue), BooleanValue enableRateOverride = default(BooleanValue), StringValue laborItem = default(StringValue), StringValue regularHoursValidation = default(StringValue), StringValue reportsTo = default(StringValue), BooleanValue routeEmails = default(BooleanValue), StringValue salesperson = default(StringValue), BooleanValue timeCardIsRequired = default(BooleanValue), StringValue unionLocalID = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BranchID = branchID;
            this.Calendar = calendar;
            this.CurrencyID = currencyID;
            this.CurrencyRateTypeID = currencyRateTypeID;
            this.DepartmentID = departmentID;
            this.EmployeeClass = employeeClass;
            this.EmployeeRefNbr = employeeRefNbr;
            this.EnableCurrencyOverride = enableCurrencyOverride;
            this.EnableRateOverride = enableRateOverride;
            this.LaborItem = laborItem;
            this.RegularHoursValidation = regularHoursValidation;
            this.ReportsTo = reportsTo;
            this.RouteEmails = routeEmails;
            this.Salesperson = salesperson;
            this.TimeCardIsRequired = timeCardIsRequired;
            this.UnionLocalID = unionLocalID;
        }
        
        /// <summary>
        /// Gets or Sets BranchID
        /// </summary>
        [DataMember(Name="BranchID", EmitDefaultValue=false)]
        public StringValue BranchID { get; set; }

        /// <summary>
        /// Gets or Sets Calendar
        /// </summary>
        [DataMember(Name="Calendar", EmitDefaultValue=false)]
        public StringValue Calendar { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyRateTypeID
        /// </summary>
        [DataMember(Name="CurrencyRateTypeID", EmitDefaultValue=false)]
        public StringValue CurrencyRateTypeID { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentID
        /// </summary>
        [DataMember(Name="DepartmentID", EmitDefaultValue=false)]
        public StringValue DepartmentID { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeClass
        /// </summary>
        [DataMember(Name="EmployeeClass", EmitDefaultValue=false)]
        public StringValue EmployeeClass { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeRefNbr
        /// </summary>
        [DataMember(Name="EmployeeRefNbr", EmitDefaultValue=false)]
        public StringValue EmployeeRefNbr { get; set; }

        /// <summary>
        /// Gets or Sets EnableCurrencyOverride
        /// </summary>
        [DataMember(Name="EnableCurrencyOverride", EmitDefaultValue=false)]
        public BooleanValue EnableCurrencyOverride { get; set; }

        /// <summary>
        /// Gets or Sets EnableRateOverride
        /// </summary>
        [DataMember(Name="EnableRateOverride", EmitDefaultValue=false)]
        public BooleanValue EnableRateOverride { get; set; }

        /// <summary>
        /// Gets or Sets LaborItem
        /// </summary>
        [DataMember(Name="LaborItem", EmitDefaultValue=false)]
        public StringValue LaborItem { get; set; }

        /// <summary>
        /// Gets or Sets RegularHoursValidation
        /// </summary>
        [DataMember(Name="RegularHoursValidation", EmitDefaultValue=false)]
        public StringValue RegularHoursValidation { get; set; }

        /// <summary>
        /// Gets or Sets ReportsTo
        /// </summary>
        [DataMember(Name="ReportsTo", EmitDefaultValue=false)]
        public StringValue ReportsTo { get; set; }

        /// <summary>
        /// Gets or Sets RouteEmails
        /// </summary>
        [DataMember(Name="RouteEmails", EmitDefaultValue=false)]
        public BooleanValue RouteEmails { get; set; }

        /// <summary>
        /// Gets or Sets Salesperson
        /// </summary>
        [DataMember(Name="Salesperson", EmitDefaultValue=false)]
        public StringValue Salesperson { get; set; }

        /// <summary>
        /// Gets or Sets TimeCardIsRequired
        /// </summary>
        [DataMember(Name="TimeCardIsRequired", EmitDefaultValue=false)]
        public BooleanValue TimeCardIsRequired { get; set; }

        /// <summary>
        /// Gets or Sets UnionLocalID
        /// </summary>
        [DataMember(Name="UnionLocalID", EmitDefaultValue=false)]
        public StringValue UnionLocalID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmployeeSettings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BranchID: ").Append(BranchID).Append("\n");
            sb.Append("  Calendar: ").Append(Calendar).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CurrencyRateTypeID: ").Append(CurrencyRateTypeID).Append("\n");
            sb.Append("  DepartmentID: ").Append(DepartmentID).Append("\n");
            sb.Append("  EmployeeClass: ").Append(EmployeeClass).Append("\n");
            sb.Append("  EmployeeRefNbr: ").Append(EmployeeRefNbr).Append("\n");
            sb.Append("  EnableCurrencyOverride: ").Append(EnableCurrencyOverride).Append("\n");
            sb.Append("  EnableRateOverride: ").Append(EnableRateOverride).Append("\n");
            sb.Append("  LaborItem: ").Append(LaborItem).Append("\n");
            sb.Append("  RegularHoursValidation: ").Append(RegularHoursValidation).Append("\n");
            sb.Append("  ReportsTo: ").Append(ReportsTo).Append("\n");
            sb.Append("  RouteEmails: ").Append(RouteEmails).Append("\n");
            sb.Append("  Salesperson: ").Append(Salesperson).Append("\n");
            sb.Append("  TimeCardIsRequired: ").Append(TimeCardIsRequired).Append("\n");
            sb.Append("  UnionLocalID: ").Append(UnionLocalID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmployeeSettings);
        }

        /// <summary>
        /// Returns true if EmployeeSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EmployeeSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmployeeSettings input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BranchID == input.BranchID ||
                    (this.BranchID != null &&
                    this.BranchID.Equals(input.BranchID))
                ) && base.Equals(input) && 
                (
                    this.Calendar == input.Calendar ||
                    (this.Calendar != null &&
                    this.Calendar.Equals(input.Calendar))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRateTypeID == input.CurrencyRateTypeID ||
                    (this.CurrencyRateTypeID != null &&
                    this.CurrencyRateTypeID.Equals(input.CurrencyRateTypeID))
                ) && base.Equals(input) && 
                (
                    this.DepartmentID == input.DepartmentID ||
                    (this.DepartmentID != null &&
                    this.DepartmentID.Equals(input.DepartmentID))
                ) && base.Equals(input) && 
                (
                    this.EmployeeClass == input.EmployeeClass ||
                    (this.EmployeeClass != null &&
                    this.EmployeeClass.Equals(input.EmployeeClass))
                ) && base.Equals(input) && 
                (
                    this.EmployeeRefNbr == input.EmployeeRefNbr ||
                    (this.EmployeeRefNbr != null &&
                    this.EmployeeRefNbr.Equals(input.EmployeeRefNbr))
                ) && base.Equals(input) && 
                (
                    this.EnableCurrencyOverride == input.EnableCurrencyOverride ||
                    (this.EnableCurrencyOverride != null &&
                    this.EnableCurrencyOverride.Equals(input.EnableCurrencyOverride))
                ) && base.Equals(input) && 
                (
                    this.EnableRateOverride == input.EnableRateOverride ||
                    (this.EnableRateOverride != null &&
                    this.EnableRateOverride.Equals(input.EnableRateOverride))
                ) && base.Equals(input) && 
                (
                    this.LaborItem == input.LaborItem ||
                    (this.LaborItem != null &&
                    this.LaborItem.Equals(input.LaborItem))
                ) && base.Equals(input) && 
                (
                    this.RegularHoursValidation == input.RegularHoursValidation ||
                    (this.RegularHoursValidation != null &&
                    this.RegularHoursValidation.Equals(input.RegularHoursValidation))
                ) && base.Equals(input) && 
                (
                    this.ReportsTo == input.ReportsTo ||
                    (this.ReportsTo != null &&
                    this.ReportsTo.Equals(input.ReportsTo))
                ) && base.Equals(input) && 
                (
                    this.RouteEmails == input.RouteEmails ||
                    (this.RouteEmails != null &&
                    this.RouteEmails.Equals(input.RouteEmails))
                ) && base.Equals(input) && 
                (
                    this.Salesperson == input.Salesperson ||
                    (this.Salesperson != null &&
                    this.Salesperson.Equals(input.Salesperson))
                ) && base.Equals(input) && 
                (
                    this.TimeCardIsRequired == input.TimeCardIsRequired ||
                    (this.TimeCardIsRequired != null &&
                    this.TimeCardIsRequired.Equals(input.TimeCardIsRequired))
                ) && base.Equals(input) && 
                (
                    this.UnionLocalID == input.UnionLocalID ||
                    (this.UnionLocalID != null &&
                    this.UnionLocalID.Equals(input.UnionLocalID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BranchID != null)
                    hashCode = hashCode * 59 + this.BranchID.GetHashCode();
                if (this.Calendar != null)
                    hashCode = hashCode * 59 + this.Calendar.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CurrencyRateTypeID != null)
                    hashCode = hashCode * 59 + this.CurrencyRateTypeID.GetHashCode();
                if (this.DepartmentID != null)
                    hashCode = hashCode * 59 + this.DepartmentID.GetHashCode();
                if (this.EmployeeClass != null)
                    hashCode = hashCode * 59 + this.EmployeeClass.GetHashCode();
                if (this.EmployeeRefNbr != null)
                    hashCode = hashCode * 59 + this.EmployeeRefNbr.GetHashCode();
                if (this.EnableCurrencyOverride != null)
                    hashCode = hashCode * 59 + this.EnableCurrencyOverride.GetHashCode();
                if (this.EnableRateOverride != null)
                    hashCode = hashCode * 59 + this.EnableRateOverride.GetHashCode();
                if (this.LaborItem != null)
                    hashCode = hashCode * 59 + this.LaborItem.GetHashCode();
                if (this.RegularHoursValidation != null)
                    hashCode = hashCode * 59 + this.RegularHoursValidation.GetHashCode();
                if (this.ReportsTo != null)
                    hashCode = hashCode * 59 + this.ReportsTo.GetHashCode();
                if (this.RouteEmails != null)
                    hashCode = hashCode * 59 + this.RouteEmails.GetHashCode();
                if (this.Salesperson != null)
                    hashCode = hashCode * 59 + this.Salesperson.GetHashCode();
                if (this.TimeCardIsRequired != null)
                    hashCode = hashCode * 59 + this.TimeCardIsRequired.GetHashCode();
                if (this.UnionLocalID != null)
                    hashCode = hashCode * 59 + this.UnionLocalID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
