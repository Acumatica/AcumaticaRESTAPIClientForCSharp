/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// StockItem
    /// </summary>
    [DataContract]
    public partial class StockItem : Entity,  IEquatable<StockItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StockItem" /> class.
        /// </summary>
        /// <param name="aBCCode">aBCCode.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="autoIncrementalValue">autoIncrementalValue.</param>
        /// <param name="averageCost">averageCost.</param>
        /// <param name="baseUOM">baseUOM.</param>
        /// <param name="boxes">boxes.</param>
        /// <param name="categories">categories.</param>
        /// <param name="cOGSAccount">cOGSAccount.</param>
        /// <param name="cOGSSubaccount">cOGSSubaccount.</param>
        /// <param name="content">content.</param>
        /// <param name="crossReferences">crossReferences.</param>
        /// <param name="currentStdCost">currentStdCost.</param>
        /// <param name="defaultIssueLocationID">defaultIssueLocationID.</param>
        /// <param name="defaultPrice">defaultPrice.</param>
        /// <param name="defaultReceiptLocationID">defaultReceiptLocationID.</param>
        /// <param name="defaultSubitem">defaultSubitem.</param>
        /// <param name="defaultWarehouseID">defaultWarehouseID.</param>
        /// <param name="deferralAccount">deferralAccount.</param>
        /// <param name="deferralSubaccount">deferralSubaccount.</param>
        /// <param name="description">description.</param>
        /// <param name="dimensionVolume">dimensionVolume.</param>
        /// <param name="dimensionWeight">dimensionWeight.</param>
        /// <param name="discountAccount">discountAccount.</param>
        /// <param name="discountSubaccount">discountSubaccount.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="inventoryAccount">inventoryAccount.</param>
        /// <param name="inventoryID">inventoryID.</param>
        /// <param name="inventorySubaccount">inventorySubaccount.</param>
        /// <param name="isAKit">isAKit.</param>
        /// <param name="itemClass">itemClass.</param>
        /// <param name="itemStatus">itemStatus.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="landedCostVarianceAccount">landedCostVarianceAccount.</param>
        /// <param name="landedCostVarianceSubaccount">landedCostVarianceSubaccount.</param>
        /// <param name="lastCost">lastCost.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="lastStdCost">lastStdCost.</param>
        /// <param name="lotSerialClass">lotSerialClass.</param>
        /// <param name="markup">markup.</param>
        /// <param name="maxCost">maxCost.</param>
        /// <param name="minCost">minCost.</param>
        /// <param name="minMarkup">minMarkup.</param>
        /// <param name="mSRP">mSRP.</param>
        /// <param name="packagingOption">packagingOption.</param>
        /// <param name="packSeparately">packSeparately.</param>
        /// <param name="pendingStdCost">pendingStdCost.</param>
        /// <param name="pOAccrualAccount">pOAccrualAccount.</param>
        /// <param name="pOAccrualSubaccount">pOAccrualSubaccount.</param>
        /// <param name="postingClass">postingClass.</param>
        /// <param name="priceClass">priceClass.</param>
        /// <param name="priceManager">priceManager.</param>
        /// <param name="priceWorkgroup">priceWorkgroup.</param>
        /// <param name="productManager">productManager.</param>
        /// <param name="productWorkgroup">productWorkgroup.</param>
        /// <param name="purchasePriceVarianceAccount">purchasePriceVarianceAccount.</param>
        /// <param name="purchasePriceVarianceSubaccount">purchasePriceVarianceSubaccount.</param>
        /// <param name="purchaseUOM">purchaseUOM.</param>
        /// <param name="reasonCodeSubaccount">reasonCodeSubaccount.</param>
        /// <param name="replenishmentParameters">replenishmentParameters.</param>
        /// <param name="salesAccount">salesAccount.</param>
        /// <param name="salesSubaccount">salesSubaccount.</param>
        /// <param name="salesUOM">salesUOM.</param>
        /// <param name="standardCostRevaluationAccount">standardCostRevaluationAccount.</param>
        /// <param name="standardCostRevaluationSubaccount">standardCostRevaluationSubaccount.</param>
        /// <param name="standardCostVarianceAccount">standardCostVarianceAccount.</param>
        /// <param name="standardCostVarianceSubaccount">standardCostVarianceSubaccount.</param>
        /// <param name="subItems">subItems.</param>
        /// <param name="subjectToCommission">subjectToCommission.</param>
        /// <param name="taxCategory">taxCategory.</param>
        /// <param name="uOMConversions">uOMConversions.</param>
        /// <param name="useOnEntry">useOnEntry.</param>
        /// <param name="valuationMethod">valuationMethod.</param>
        /// <param name="vendorDetails">vendorDetails.</param>
        /// <param name="volumeUOM">volumeUOM.</param>
        /// <param name="warehouseDetails">warehouseDetails.</param>
        /// <param name="weightUOM">weightUOM.</param>
        public StockItem(StringValue aBCCode = default(StringValue), List<AttributeValue> attributes = default(List<AttributeValue>), StringValue autoIncrementalValue = default(StringValue), DecimalValue averageCost = default(DecimalValue), StringValue baseUOM = default(StringValue), List<BoxStockItem> boxes = default(List<BoxStockItem>), List<CategoryStockItem> categories = default(List<CategoryStockItem>), StringValue cOGSAccount = default(StringValue), StringValue cOGSSubaccount = default(StringValue), StringValue content = default(StringValue), List<InventoryItemCrossReference> crossReferences = default(List<InventoryItemCrossReference>), DecimalValue currentStdCost = default(DecimalValue), StringValue defaultIssueLocationID = default(StringValue), DecimalValue defaultPrice = default(DecimalValue), StringValue defaultReceiptLocationID = default(StringValue), StringValue defaultSubitem = default(StringValue), StringValue defaultWarehouseID = default(StringValue), StringValue deferralAccount = default(StringValue), StringValue deferralSubaccount = default(StringValue), StringValue description = default(StringValue), DecimalValue dimensionVolume = default(DecimalValue), DecimalValue dimensionWeight = default(DecimalValue), StringValue discountAccount = default(StringValue), StringValue discountSubaccount = default(StringValue), StringValue imageUrl = default(StringValue), StringValue inventoryAccount = default(StringValue), StringValue inventoryID = default(StringValue), StringValue inventorySubaccount = default(StringValue), BooleanValue isAKit = default(BooleanValue), StringValue itemClass = default(StringValue), StringValue itemStatus = default(StringValue), StringValue itemType = default(StringValue), StringValue landedCostVarianceAccount = default(StringValue), StringValue landedCostVarianceSubaccount = default(StringValue), DecimalValue lastCost = default(DecimalValue), DateTimeValue lastModified = default(DateTimeValue), DecimalValue lastStdCost = default(DecimalValue), StringValue lotSerialClass = default(StringValue), DecimalValue markup = default(DecimalValue), DecimalValue maxCost = default(DecimalValue), DecimalValue minCost = default(DecimalValue), DecimalValue minMarkup = default(DecimalValue), DecimalValue mSRP = default(DecimalValue), StringValue packagingOption = default(StringValue), BooleanValue packSeparately = default(BooleanValue), DecimalValue pendingStdCost = default(DecimalValue), StringValue pOAccrualAccount = default(StringValue), StringValue pOAccrualSubaccount = default(StringValue), StringValue postingClass = default(StringValue), StringValue priceClass = default(StringValue), StringValue priceManager = default(StringValue), StringValue priceWorkgroup = default(StringValue), StringValue productManager = default(StringValue), StringValue productWorkgroup = default(StringValue), StringValue purchasePriceVarianceAccount = default(StringValue), StringValue purchasePriceVarianceSubaccount = default(StringValue), StringValue purchaseUOM = default(StringValue), StringValue reasonCodeSubaccount = default(StringValue), List<ReplenishmentParameterStockItem> replenishmentParameters = default(List<ReplenishmentParameterStockItem>), StringValue salesAccount = default(StringValue), StringValue salesSubaccount = default(StringValue), StringValue salesUOM = default(StringValue), StringValue standardCostRevaluationAccount = default(StringValue), StringValue standardCostRevaluationSubaccount = default(StringValue), StringValue standardCostVarianceAccount = default(StringValue), StringValue standardCostVarianceSubaccount = default(StringValue), List<SubItemStockItem> subItems = default(List<SubItemStockItem>), BooleanValue subjectToCommission = default(BooleanValue), StringValue taxCategory = default(StringValue), List<InventoryItemUOMConversion> uOMConversions = default(List<InventoryItemUOMConversion>), BooleanValue useOnEntry = default(BooleanValue), StringValue valuationMethod = default(StringValue), List<StockItemVendorDetail> vendorDetails = default(List<StockItemVendorDetail>), StringValue volumeUOM = default(StringValue), List<StockItemWarehouseDetail> warehouseDetails = default(List<StockItemWarehouseDetail>), StringValue weightUOM = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ABCCode = aBCCode;
            this.Attributes = attributes;
            this.AutoIncrementalValue = autoIncrementalValue;
            this.AverageCost = averageCost;
            this.BaseUOM = baseUOM;
            this.Boxes = boxes;
            this.Categories = categories;
            this.COGSAccount = cOGSAccount;
            this.COGSSubaccount = cOGSSubaccount;
            this.Content = content;
            this.CrossReferences = crossReferences;
            this.CurrentStdCost = currentStdCost;
            this.DefaultIssueLocationID = defaultIssueLocationID;
            this.DefaultPrice = defaultPrice;
            this.DefaultReceiptLocationID = defaultReceiptLocationID;
            this.DefaultSubitem = defaultSubitem;
            this.DefaultWarehouseID = defaultWarehouseID;
            this.DeferralAccount = deferralAccount;
            this.DeferralSubaccount = deferralSubaccount;
            this.Description = description;
            this.DimensionVolume = dimensionVolume;
            this.DimensionWeight = dimensionWeight;
            this.DiscountAccount = discountAccount;
            this.DiscountSubaccount = discountSubaccount;
            this.ImageUrl = imageUrl;
            this.InventoryAccount = inventoryAccount;
            this.InventoryID = inventoryID;
            this.InventorySubaccount = inventorySubaccount;
            this.IsAKit = isAKit;
            this.ItemClass = itemClass;
            this.ItemStatus = itemStatus;
            this.ItemType = itemType;
            this.LandedCostVarianceAccount = landedCostVarianceAccount;
            this.LandedCostVarianceSubaccount = landedCostVarianceSubaccount;
            this.LastCost = lastCost;
            this.LastModified = lastModified;
            this.LastStdCost = lastStdCost;
            this.LotSerialClass = lotSerialClass;
            this.Markup = markup;
            this.MaxCost = maxCost;
            this.MinCost = minCost;
            this.MinMarkup = minMarkup;
            this.MSRP = mSRP;
            this.PackagingOption = packagingOption;
            this.PackSeparately = packSeparately;
            this.PendingStdCost = pendingStdCost;
            this.POAccrualAccount = pOAccrualAccount;
            this.POAccrualSubaccount = pOAccrualSubaccount;
            this.PostingClass = postingClass;
            this.PriceClass = priceClass;
            this.PriceManager = priceManager;
            this.PriceWorkgroup = priceWorkgroup;
            this.ProductManager = productManager;
            this.ProductWorkgroup = productWorkgroup;
            this.PurchasePriceVarianceAccount = purchasePriceVarianceAccount;
            this.PurchasePriceVarianceSubaccount = purchasePriceVarianceSubaccount;
            this.PurchaseUOM = purchaseUOM;
            this.ReasonCodeSubaccount = reasonCodeSubaccount;
            this.ReplenishmentParameters = replenishmentParameters;
            this.SalesAccount = salesAccount;
            this.SalesSubaccount = salesSubaccount;
            this.SalesUOM = salesUOM;
            this.StandardCostRevaluationAccount = standardCostRevaluationAccount;
            this.StandardCostRevaluationSubaccount = standardCostRevaluationSubaccount;
            this.StandardCostVarianceAccount = standardCostVarianceAccount;
            this.StandardCostVarianceSubaccount = standardCostVarianceSubaccount;
            this.SubItems = subItems;
            this.SubjectToCommission = subjectToCommission;
            this.TaxCategory = taxCategory;
            this.UOMConversions = uOMConversions;
            this.UseOnEntry = useOnEntry;
            this.ValuationMethod = valuationMethod;
            this.VendorDetails = vendorDetails;
            this.VolumeUOM = volumeUOM;
            this.WarehouseDetails = warehouseDetails;
            this.WeightUOM = weightUOM;
        }
        
        /// <summary>
        /// Gets or Sets ABCCode
        /// </summary>
        [DataMember(Name="ABCCode", EmitDefaultValue=false)]
        public StringValue ABCCode { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<AttributeValue> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets AutoIncrementalValue
        /// </summary>
        [DataMember(Name="AutoIncrementalValue", EmitDefaultValue=false)]
        public StringValue AutoIncrementalValue { get; set; }

        /// <summary>
        /// Gets or Sets AverageCost
        /// </summary>
        [DataMember(Name="AverageCost", EmitDefaultValue=false)]
        public DecimalValue AverageCost { get; set; }

        /// <summary>
        /// Gets or Sets BaseUOM
        /// </summary>
        [DataMember(Name="BaseUOM", EmitDefaultValue=false)]
        public StringValue BaseUOM { get; set; }

        /// <summary>
        /// Gets or Sets Boxes
        /// </summary>
        [DataMember(Name="Boxes", EmitDefaultValue=false)]
        public List<BoxStockItem> Boxes { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="Categories", EmitDefaultValue=false)]
        public List<CategoryStockItem> Categories { get; set; }

        /// <summary>
        /// Gets or Sets COGSAccount
        /// </summary>
        [DataMember(Name="COGSAccount", EmitDefaultValue=false)]
        public StringValue COGSAccount { get; set; }

        /// <summary>
        /// Gets or Sets COGSSubaccount
        /// </summary>
        [DataMember(Name="COGSSubaccount", EmitDefaultValue=false)]
        public StringValue COGSSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="Content", EmitDefaultValue=false)]
        public StringValue Content { get; set; }

        /// <summary>
        /// Gets or Sets CrossReferences
        /// </summary>
        [DataMember(Name="CrossReferences", EmitDefaultValue=false)]
        public List<InventoryItemCrossReference> CrossReferences { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStdCost
        /// </summary>
        [DataMember(Name="CurrentStdCost", EmitDefaultValue=false)]
        public DecimalValue CurrentStdCost { get; set; }

        /// <summary>
        /// Gets or Sets DefaultIssueLocationID
        /// </summary>
        [DataMember(Name="DefaultIssueLocationID", EmitDefaultValue=false)]
        public StringValue DefaultIssueLocationID { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPrice
        /// </summary>
        [DataMember(Name="DefaultPrice", EmitDefaultValue=false)]
        public DecimalValue DefaultPrice { get; set; }

        /// <summary>
        /// Gets or Sets DefaultReceiptLocationID
        /// </summary>
        [DataMember(Name="DefaultReceiptLocationID", EmitDefaultValue=false)]
        public StringValue DefaultReceiptLocationID { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSubitem
        /// </summary>
        [DataMember(Name="DefaultSubitem", EmitDefaultValue=false)]
        public StringValue DefaultSubitem { get; set; }

        /// <summary>
        /// Gets or Sets DefaultWarehouseID
        /// </summary>
        [DataMember(Name="DefaultWarehouseID", EmitDefaultValue=false)]
        public StringValue DefaultWarehouseID { get; set; }

        /// <summary>
        /// Gets or Sets DeferralAccount
        /// </summary>
        [DataMember(Name="DeferralAccount", EmitDefaultValue=false)]
        public StringValue DeferralAccount { get; set; }

        /// <summary>
        /// Gets or Sets DeferralSubaccount
        /// </summary>
        [DataMember(Name="DeferralSubaccount", EmitDefaultValue=false)]
        public StringValue DeferralSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets DimensionVolume
        /// </summary>
        [DataMember(Name="DimensionVolume", EmitDefaultValue=false)]
        public DecimalValue DimensionVolume { get; set; }

        /// <summary>
        /// Gets or Sets DimensionWeight
        /// </summary>
        [DataMember(Name="DimensionWeight", EmitDefaultValue=false)]
        public DecimalValue DimensionWeight { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAccount
        /// </summary>
        [DataMember(Name="DiscountAccount", EmitDefaultValue=false)]
        public StringValue DiscountAccount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountSubaccount
        /// </summary>
        [DataMember(Name="DiscountSubaccount", EmitDefaultValue=false)]
        public StringValue DiscountSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name="ImageUrl", EmitDefaultValue=false)]
        public StringValue ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets InventoryAccount
        /// </summary>
        [DataMember(Name="InventoryAccount", EmitDefaultValue=false)]
        public StringValue InventoryAccount { get; set; }

        /// <summary>
        /// Gets or Sets InventoryID
        /// </summary>
        [DataMember(Name="InventoryID", EmitDefaultValue=false)]
        public StringValue InventoryID { get; set; }

        /// <summary>
        /// Gets or Sets InventorySubaccount
        /// </summary>
        [DataMember(Name="InventorySubaccount", EmitDefaultValue=false)]
        public StringValue InventorySubaccount { get; set; }

        /// <summary>
        /// Gets or Sets IsAKit
        /// </summary>
        [DataMember(Name="IsAKit", EmitDefaultValue=false)]
        public BooleanValue IsAKit { get; set; }

        /// <summary>
        /// Gets or Sets ItemClass
        /// </summary>
        [DataMember(Name="ItemClass", EmitDefaultValue=false)]
        public StringValue ItemClass { get; set; }

        /// <summary>
        /// Gets or Sets ItemStatus
        /// </summary>
        [DataMember(Name="ItemStatus", EmitDefaultValue=false)]
        public StringValue ItemStatus { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="ItemType", EmitDefaultValue=false)]
        public StringValue ItemType { get; set; }

        /// <summary>
        /// Gets or Sets LandedCostVarianceAccount
        /// </summary>
        [DataMember(Name="LandedCostVarianceAccount", EmitDefaultValue=false)]
        public StringValue LandedCostVarianceAccount { get; set; }

        /// <summary>
        /// Gets or Sets LandedCostVarianceSubaccount
        /// </summary>
        [DataMember(Name="LandedCostVarianceSubaccount", EmitDefaultValue=false)]
        public StringValue LandedCostVarianceSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets LastCost
        /// </summary>
        [DataMember(Name="LastCost", EmitDefaultValue=false)]
        public DecimalValue LastCost { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="LastModified", EmitDefaultValue=false)]
        public DateTimeValue LastModified { get; set; }

        /// <summary>
        /// Gets or Sets LastStdCost
        /// </summary>
        [DataMember(Name="LastStdCost", EmitDefaultValue=false)]
        public DecimalValue LastStdCost { get; set; }

        /// <summary>
        /// Gets or Sets LotSerialClass
        /// </summary>
        [DataMember(Name="LotSerialClass", EmitDefaultValue=false)]
        public StringValue LotSerialClass { get; set; }

        /// <summary>
        /// Gets or Sets Markup
        /// </summary>
        [DataMember(Name="Markup", EmitDefaultValue=false)]
        public DecimalValue Markup { get; set; }

        /// <summary>
        /// Gets or Sets MaxCost
        /// </summary>
        [DataMember(Name="MaxCost", EmitDefaultValue=false)]
        public DecimalValue MaxCost { get; set; }

        /// <summary>
        /// Gets or Sets MinCost
        /// </summary>
        [DataMember(Name="MinCost", EmitDefaultValue=false)]
        public DecimalValue MinCost { get; set; }

        /// <summary>
        /// Gets or Sets MinMarkup
        /// </summary>
        [DataMember(Name="MinMarkup", EmitDefaultValue=false)]
        public DecimalValue MinMarkup { get; set; }

        /// <summary>
        /// Gets or Sets MSRP
        /// </summary>
        [DataMember(Name="MSRP", EmitDefaultValue=false)]
        public DecimalValue MSRP { get; set; }

        /// <summary>
        /// Gets or Sets PackagingOption
        /// </summary>
        [DataMember(Name="PackagingOption", EmitDefaultValue=false)]
        public StringValue PackagingOption { get; set; }

        /// <summary>
        /// Gets or Sets PackSeparately
        /// </summary>
        [DataMember(Name="PackSeparately", EmitDefaultValue=false)]
        public BooleanValue PackSeparately { get; set; }

        /// <summary>
        /// Gets or Sets PendingStdCost
        /// </summary>
        [DataMember(Name="PendingStdCost", EmitDefaultValue=false)]
        public DecimalValue PendingStdCost { get; set; }

        /// <summary>
        /// Gets or Sets POAccrualAccount
        /// </summary>
        [DataMember(Name="POAccrualAccount", EmitDefaultValue=false)]
        public StringValue POAccrualAccount { get; set; }

        /// <summary>
        /// Gets or Sets POAccrualSubaccount
        /// </summary>
        [DataMember(Name="POAccrualSubaccount", EmitDefaultValue=false)]
        public StringValue POAccrualSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets PostingClass
        /// </summary>
        [DataMember(Name="PostingClass", EmitDefaultValue=false)]
        public StringValue PostingClass { get; set; }

        /// <summary>
        /// Gets or Sets PriceClass
        /// </summary>
        [DataMember(Name="PriceClass", EmitDefaultValue=false)]
        public StringValue PriceClass { get; set; }

        /// <summary>
        /// Gets or Sets PriceManager
        /// </summary>
        [DataMember(Name="PriceManager", EmitDefaultValue=false)]
        public StringValue PriceManager { get; set; }

        /// <summary>
        /// Gets or Sets PriceWorkgroup
        /// </summary>
        [DataMember(Name="PriceWorkgroup", EmitDefaultValue=false)]
        public StringValue PriceWorkgroup { get; set; }

        /// <summary>
        /// Gets or Sets ProductManager
        /// </summary>
        [DataMember(Name="ProductManager", EmitDefaultValue=false)]
        public StringValue ProductManager { get; set; }

        /// <summary>
        /// Gets or Sets ProductWorkgroup
        /// </summary>
        [DataMember(Name="ProductWorkgroup", EmitDefaultValue=false)]
        public StringValue ProductWorkgroup { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePriceVarianceAccount
        /// </summary>
        [DataMember(Name="PurchasePriceVarianceAccount", EmitDefaultValue=false)]
        public StringValue PurchasePriceVarianceAccount { get; set; }

        /// <summary>
        /// Gets or Sets PurchasePriceVarianceSubaccount
        /// </summary>
        [DataMember(Name="PurchasePriceVarianceSubaccount", EmitDefaultValue=false)]
        public StringValue PurchasePriceVarianceSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseUOM
        /// </summary>
        [DataMember(Name="PurchaseUOM", EmitDefaultValue=false)]
        public StringValue PurchaseUOM { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCodeSubaccount
        /// </summary>
        [DataMember(Name="ReasonCodeSubaccount", EmitDefaultValue=false)]
        public StringValue ReasonCodeSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets ReplenishmentParameters
        /// </summary>
        [DataMember(Name="ReplenishmentParameters", EmitDefaultValue=false)]
        public List<ReplenishmentParameterStockItem> ReplenishmentParameters { get; set; }

        /// <summary>
        /// Gets or Sets SalesAccount
        /// </summary>
        [DataMember(Name="SalesAccount", EmitDefaultValue=false)]
        public StringValue SalesAccount { get; set; }

        /// <summary>
        /// Gets or Sets SalesSubaccount
        /// </summary>
        [DataMember(Name="SalesSubaccount", EmitDefaultValue=false)]
        public StringValue SalesSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets SalesUOM
        /// </summary>
        [DataMember(Name="SalesUOM", EmitDefaultValue=false)]
        public StringValue SalesUOM { get; set; }

        /// <summary>
        /// Gets or Sets StandardCostRevaluationAccount
        /// </summary>
        [DataMember(Name="StandardCostRevaluationAccount", EmitDefaultValue=false)]
        public StringValue StandardCostRevaluationAccount { get; set; }

        /// <summary>
        /// Gets or Sets StandardCostRevaluationSubaccount
        /// </summary>
        [DataMember(Name="StandardCostRevaluationSubaccount", EmitDefaultValue=false)]
        public StringValue StandardCostRevaluationSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets StandardCostVarianceAccount
        /// </summary>
        [DataMember(Name="StandardCostVarianceAccount", EmitDefaultValue=false)]
        public StringValue StandardCostVarianceAccount { get; set; }

        /// <summary>
        /// Gets or Sets StandardCostVarianceSubaccount
        /// </summary>
        [DataMember(Name="StandardCostVarianceSubaccount", EmitDefaultValue=false)]
        public StringValue StandardCostVarianceSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets SubItems
        /// </summary>
        [DataMember(Name="SubItems", EmitDefaultValue=false)]
        public List<SubItemStockItem> SubItems { get; set; }

        /// <summary>
        /// Gets or Sets SubjectToCommission
        /// </summary>
        [DataMember(Name="SubjectToCommission", EmitDefaultValue=false)]
        public BooleanValue SubjectToCommission { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategory
        /// </summary>
        [DataMember(Name="TaxCategory", EmitDefaultValue=false)]
        public StringValue TaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets UOMConversions
        /// </summary>
        [DataMember(Name="UOMConversions", EmitDefaultValue=false)]
        public List<InventoryItemUOMConversion> UOMConversions { get; set; }

        /// <summary>
        /// Gets or Sets UseOnEntry
        /// </summary>
        [DataMember(Name="UseOnEntry", EmitDefaultValue=false)]
        public BooleanValue UseOnEntry { get; set; }

        /// <summary>
        /// Gets or Sets ValuationMethod
        /// </summary>
        [DataMember(Name="ValuationMethod", EmitDefaultValue=false)]
        public StringValue ValuationMethod { get; set; }

        /// <summary>
        /// Gets or Sets VendorDetails
        /// </summary>
        [DataMember(Name="VendorDetails", EmitDefaultValue=false)]
        public List<StockItemVendorDetail> VendorDetails { get; set; }

        /// <summary>
        /// Gets or Sets VolumeUOM
        /// </summary>
        [DataMember(Name="VolumeUOM", EmitDefaultValue=false)]
        public StringValue VolumeUOM { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseDetails
        /// </summary>
        [DataMember(Name="WarehouseDetails", EmitDefaultValue=false)]
        public List<StockItemWarehouseDetail> WarehouseDetails { get; set; }

        /// <summary>
        /// Gets or Sets WeightUOM
        /// </summary>
        [DataMember(Name="WeightUOM", EmitDefaultValue=false)]
        public StringValue WeightUOM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StockItem {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ABCCode: ").Append(ABCCode).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  AutoIncrementalValue: ").Append(AutoIncrementalValue).Append("\n");
            sb.Append("  AverageCost: ").Append(AverageCost).Append("\n");
            sb.Append("  BaseUOM: ").Append(BaseUOM).Append("\n");
            sb.Append("  Boxes: ").Append(Boxes).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  COGSAccount: ").Append(COGSAccount).Append("\n");
            sb.Append("  COGSSubaccount: ").Append(COGSSubaccount).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CrossReferences: ").Append(CrossReferences).Append("\n");
            sb.Append("  CurrentStdCost: ").Append(CurrentStdCost).Append("\n");
            sb.Append("  DefaultIssueLocationID: ").Append(DefaultIssueLocationID).Append("\n");
            sb.Append("  DefaultPrice: ").Append(DefaultPrice).Append("\n");
            sb.Append("  DefaultReceiptLocationID: ").Append(DefaultReceiptLocationID).Append("\n");
            sb.Append("  DefaultSubitem: ").Append(DefaultSubitem).Append("\n");
            sb.Append("  DefaultWarehouseID: ").Append(DefaultWarehouseID).Append("\n");
            sb.Append("  DeferralAccount: ").Append(DeferralAccount).Append("\n");
            sb.Append("  DeferralSubaccount: ").Append(DeferralSubaccount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DimensionVolume: ").Append(DimensionVolume).Append("\n");
            sb.Append("  DimensionWeight: ").Append(DimensionWeight).Append("\n");
            sb.Append("  DiscountAccount: ").Append(DiscountAccount).Append("\n");
            sb.Append("  DiscountSubaccount: ").Append(DiscountSubaccount).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  InventoryAccount: ").Append(InventoryAccount).Append("\n");
            sb.Append("  InventoryID: ").Append(InventoryID).Append("\n");
            sb.Append("  InventorySubaccount: ").Append(InventorySubaccount).Append("\n");
            sb.Append("  IsAKit: ").Append(IsAKit).Append("\n");
            sb.Append("  ItemClass: ").Append(ItemClass).Append("\n");
            sb.Append("  ItemStatus: ").Append(ItemStatus).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  LandedCostVarianceAccount: ").Append(LandedCostVarianceAccount).Append("\n");
            sb.Append("  LandedCostVarianceSubaccount: ").Append(LandedCostVarianceSubaccount).Append("\n");
            sb.Append("  LastCost: ").Append(LastCost).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastStdCost: ").Append(LastStdCost).Append("\n");
            sb.Append("  LotSerialClass: ").Append(LotSerialClass).Append("\n");
            sb.Append("  Markup: ").Append(Markup).Append("\n");
            sb.Append("  MaxCost: ").Append(MaxCost).Append("\n");
            sb.Append("  MinCost: ").Append(MinCost).Append("\n");
            sb.Append("  MinMarkup: ").Append(MinMarkup).Append("\n");
            sb.Append("  MSRP: ").Append(MSRP).Append("\n");
            sb.Append("  PackagingOption: ").Append(PackagingOption).Append("\n");
            sb.Append("  PackSeparately: ").Append(PackSeparately).Append("\n");
            sb.Append("  PendingStdCost: ").Append(PendingStdCost).Append("\n");
            sb.Append("  POAccrualAccount: ").Append(POAccrualAccount).Append("\n");
            sb.Append("  POAccrualSubaccount: ").Append(POAccrualSubaccount).Append("\n");
            sb.Append("  PostingClass: ").Append(PostingClass).Append("\n");
            sb.Append("  PriceClass: ").Append(PriceClass).Append("\n");
            sb.Append("  PriceManager: ").Append(PriceManager).Append("\n");
            sb.Append("  PriceWorkgroup: ").Append(PriceWorkgroup).Append("\n");
            sb.Append("  ProductManager: ").Append(ProductManager).Append("\n");
            sb.Append("  ProductWorkgroup: ").Append(ProductWorkgroup).Append("\n");
            sb.Append("  PurchasePriceVarianceAccount: ").Append(PurchasePriceVarianceAccount).Append("\n");
            sb.Append("  PurchasePriceVarianceSubaccount: ").Append(PurchasePriceVarianceSubaccount).Append("\n");
            sb.Append("  PurchaseUOM: ").Append(PurchaseUOM).Append("\n");
            sb.Append("  ReasonCodeSubaccount: ").Append(ReasonCodeSubaccount).Append("\n");
            sb.Append("  ReplenishmentParameters: ").Append(ReplenishmentParameters).Append("\n");
            sb.Append("  SalesAccount: ").Append(SalesAccount).Append("\n");
            sb.Append("  SalesSubaccount: ").Append(SalesSubaccount).Append("\n");
            sb.Append("  SalesUOM: ").Append(SalesUOM).Append("\n");
            sb.Append("  StandardCostRevaluationAccount: ").Append(StandardCostRevaluationAccount).Append("\n");
            sb.Append("  StandardCostRevaluationSubaccount: ").Append(StandardCostRevaluationSubaccount).Append("\n");
            sb.Append("  StandardCostVarianceAccount: ").Append(StandardCostVarianceAccount).Append("\n");
            sb.Append("  StandardCostVarianceSubaccount: ").Append(StandardCostVarianceSubaccount).Append("\n");
            sb.Append("  SubItems: ").Append(SubItems).Append("\n");
            sb.Append("  SubjectToCommission: ").Append(SubjectToCommission).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  UOMConversions: ").Append(UOMConversions).Append("\n");
            sb.Append("  UseOnEntry: ").Append(UseOnEntry).Append("\n");
            sb.Append("  ValuationMethod: ").Append(ValuationMethod).Append("\n");
            sb.Append("  VendorDetails: ").Append(VendorDetails).Append("\n");
            sb.Append("  VolumeUOM: ").Append(VolumeUOM).Append("\n");
            sb.Append("  WarehouseDetails: ").Append(WarehouseDetails).Append("\n");
            sb.Append("  WeightUOM: ").Append(WeightUOM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StockItem);
        }

        /// <summary>
        /// Returns true if StockItem instances are equal
        /// </summary>
        /// <param name="input">Instance of StockItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StockItem input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ABCCode == input.ABCCode ||
                    (this.ABCCode != null &&
                    this.ABCCode.Equals(input.ABCCode))
                ) && base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.AutoIncrementalValue == input.AutoIncrementalValue ||
                    (this.AutoIncrementalValue != null &&
                    this.AutoIncrementalValue.Equals(input.AutoIncrementalValue))
                ) && base.Equals(input) && 
                (
                    this.AverageCost == input.AverageCost ||
                    (this.AverageCost != null &&
                    this.AverageCost.Equals(input.AverageCost))
                ) && base.Equals(input) && 
                (
                    this.BaseUOM == input.BaseUOM ||
                    (this.BaseUOM != null &&
                    this.BaseUOM.Equals(input.BaseUOM))
                ) && base.Equals(input) && 
                (
                    this.Boxes == input.Boxes ||
                    this.Boxes != null &&
                    this.Boxes.SequenceEqual(input.Boxes)
                ) && base.Equals(input) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && base.Equals(input) && 
                (
                    this.COGSAccount == input.COGSAccount ||
                    (this.COGSAccount != null &&
                    this.COGSAccount.Equals(input.COGSAccount))
                ) && base.Equals(input) && 
                (
                    this.COGSSubaccount == input.COGSSubaccount ||
                    (this.COGSSubaccount != null &&
                    this.COGSSubaccount.Equals(input.COGSSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && base.Equals(input) && 
                (
                    this.CrossReferences == input.CrossReferences ||
                    this.CrossReferences != null &&
                    this.CrossReferences.SequenceEqual(input.CrossReferences)
                ) && base.Equals(input) && 
                (
                    this.CurrentStdCost == input.CurrentStdCost ||
                    (this.CurrentStdCost != null &&
                    this.CurrentStdCost.Equals(input.CurrentStdCost))
                ) && base.Equals(input) && 
                (
                    this.DefaultIssueLocationID == input.DefaultIssueLocationID ||
                    (this.DefaultIssueLocationID != null &&
                    this.DefaultIssueLocationID.Equals(input.DefaultIssueLocationID))
                ) && base.Equals(input) && 
                (
                    this.DefaultPrice == input.DefaultPrice ||
                    (this.DefaultPrice != null &&
                    this.DefaultPrice.Equals(input.DefaultPrice))
                ) && base.Equals(input) && 
                (
                    this.DefaultReceiptLocationID == input.DefaultReceiptLocationID ||
                    (this.DefaultReceiptLocationID != null &&
                    this.DefaultReceiptLocationID.Equals(input.DefaultReceiptLocationID))
                ) && base.Equals(input) && 
                (
                    this.DefaultSubitem == input.DefaultSubitem ||
                    (this.DefaultSubitem != null &&
                    this.DefaultSubitem.Equals(input.DefaultSubitem))
                ) && base.Equals(input) && 
                (
                    this.DefaultWarehouseID == input.DefaultWarehouseID ||
                    (this.DefaultWarehouseID != null &&
                    this.DefaultWarehouseID.Equals(input.DefaultWarehouseID))
                ) && base.Equals(input) && 
                (
                    this.DeferralAccount == input.DeferralAccount ||
                    (this.DeferralAccount != null &&
                    this.DeferralAccount.Equals(input.DeferralAccount))
                ) && base.Equals(input) && 
                (
                    this.DeferralSubaccount == input.DeferralSubaccount ||
                    (this.DeferralSubaccount != null &&
                    this.DeferralSubaccount.Equals(input.DeferralSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.DimensionVolume == input.DimensionVolume ||
                    (this.DimensionVolume != null &&
                    this.DimensionVolume.Equals(input.DimensionVolume))
                ) && base.Equals(input) && 
                (
                    this.DimensionWeight == input.DimensionWeight ||
                    (this.DimensionWeight != null &&
                    this.DimensionWeight.Equals(input.DimensionWeight))
                ) && base.Equals(input) && 
                (
                    this.DiscountAccount == input.DiscountAccount ||
                    (this.DiscountAccount != null &&
                    this.DiscountAccount.Equals(input.DiscountAccount))
                ) && base.Equals(input) && 
                (
                    this.DiscountSubaccount == input.DiscountSubaccount ||
                    (this.DiscountSubaccount != null &&
                    this.DiscountSubaccount.Equals(input.DiscountSubaccount))
                ) && base.Equals(input) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && base.Equals(input) && 
                (
                    this.InventoryAccount == input.InventoryAccount ||
                    (this.InventoryAccount != null &&
                    this.InventoryAccount.Equals(input.InventoryAccount))
                ) && base.Equals(input) && 
                (
                    this.InventoryID == input.InventoryID ||
                    (this.InventoryID != null &&
                    this.InventoryID.Equals(input.InventoryID))
                ) && base.Equals(input) && 
                (
                    this.InventorySubaccount == input.InventorySubaccount ||
                    (this.InventorySubaccount != null &&
                    this.InventorySubaccount.Equals(input.InventorySubaccount))
                ) && base.Equals(input) && 
                (
                    this.IsAKit == input.IsAKit ||
                    (this.IsAKit != null &&
                    this.IsAKit.Equals(input.IsAKit))
                ) && base.Equals(input) && 
                (
                    this.ItemClass == input.ItemClass ||
                    (this.ItemClass != null &&
                    this.ItemClass.Equals(input.ItemClass))
                ) && base.Equals(input) && 
                (
                    this.ItemStatus == input.ItemStatus ||
                    (this.ItemStatus != null &&
                    this.ItemStatus.Equals(input.ItemStatus))
                ) && base.Equals(input) && 
                (
                    this.ItemType == input.ItemType ||
                    (this.ItemType != null &&
                    this.ItemType.Equals(input.ItemType))
                ) && base.Equals(input) && 
                (
                    this.LandedCostVarianceAccount == input.LandedCostVarianceAccount ||
                    (this.LandedCostVarianceAccount != null &&
                    this.LandedCostVarianceAccount.Equals(input.LandedCostVarianceAccount))
                ) && base.Equals(input) && 
                (
                    this.LandedCostVarianceSubaccount == input.LandedCostVarianceSubaccount ||
                    (this.LandedCostVarianceSubaccount != null &&
                    this.LandedCostVarianceSubaccount.Equals(input.LandedCostVarianceSubaccount))
                ) && base.Equals(input) && 
                (
                    this.LastCost == input.LastCost ||
                    (this.LastCost != null &&
                    this.LastCost.Equals(input.LastCost))
                ) && base.Equals(input) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && base.Equals(input) && 
                (
                    this.LastStdCost == input.LastStdCost ||
                    (this.LastStdCost != null &&
                    this.LastStdCost.Equals(input.LastStdCost))
                ) && base.Equals(input) && 
                (
                    this.LotSerialClass == input.LotSerialClass ||
                    (this.LotSerialClass != null &&
                    this.LotSerialClass.Equals(input.LotSerialClass))
                ) && base.Equals(input) && 
                (
                    this.Markup == input.Markup ||
                    (this.Markup != null &&
                    this.Markup.Equals(input.Markup))
                ) && base.Equals(input) && 
                (
                    this.MaxCost == input.MaxCost ||
                    (this.MaxCost != null &&
                    this.MaxCost.Equals(input.MaxCost))
                ) && base.Equals(input) && 
                (
                    this.MinCost == input.MinCost ||
                    (this.MinCost != null &&
                    this.MinCost.Equals(input.MinCost))
                ) && base.Equals(input) && 
                (
                    this.MinMarkup == input.MinMarkup ||
                    (this.MinMarkup != null &&
                    this.MinMarkup.Equals(input.MinMarkup))
                ) && base.Equals(input) && 
                (
                    this.MSRP == input.MSRP ||
                    (this.MSRP != null &&
                    this.MSRP.Equals(input.MSRP))
                ) && base.Equals(input) && 
                (
                    this.PackagingOption == input.PackagingOption ||
                    (this.PackagingOption != null &&
                    this.PackagingOption.Equals(input.PackagingOption))
                ) && base.Equals(input) && 
                (
                    this.PackSeparately == input.PackSeparately ||
                    (this.PackSeparately != null &&
                    this.PackSeparately.Equals(input.PackSeparately))
                ) && base.Equals(input) && 
                (
                    this.PendingStdCost == input.PendingStdCost ||
                    (this.PendingStdCost != null &&
                    this.PendingStdCost.Equals(input.PendingStdCost))
                ) && base.Equals(input) && 
                (
                    this.POAccrualAccount == input.POAccrualAccount ||
                    (this.POAccrualAccount != null &&
                    this.POAccrualAccount.Equals(input.POAccrualAccount))
                ) && base.Equals(input) && 
                (
                    this.POAccrualSubaccount == input.POAccrualSubaccount ||
                    (this.POAccrualSubaccount != null &&
                    this.POAccrualSubaccount.Equals(input.POAccrualSubaccount))
                ) && base.Equals(input) && 
                (
                    this.PostingClass == input.PostingClass ||
                    (this.PostingClass != null &&
                    this.PostingClass.Equals(input.PostingClass))
                ) && base.Equals(input) && 
                (
                    this.PriceClass == input.PriceClass ||
                    (this.PriceClass != null &&
                    this.PriceClass.Equals(input.PriceClass))
                ) && base.Equals(input) && 
                (
                    this.PriceManager == input.PriceManager ||
                    (this.PriceManager != null &&
                    this.PriceManager.Equals(input.PriceManager))
                ) && base.Equals(input) && 
                (
                    this.PriceWorkgroup == input.PriceWorkgroup ||
                    (this.PriceWorkgroup != null &&
                    this.PriceWorkgroup.Equals(input.PriceWorkgroup))
                ) && base.Equals(input) && 
                (
                    this.ProductManager == input.ProductManager ||
                    (this.ProductManager != null &&
                    this.ProductManager.Equals(input.ProductManager))
                ) && base.Equals(input) && 
                (
                    this.ProductWorkgroup == input.ProductWorkgroup ||
                    (this.ProductWorkgroup != null &&
                    this.ProductWorkgroup.Equals(input.ProductWorkgroup))
                ) && base.Equals(input) && 
                (
                    this.PurchasePriceVarianceAccount == input.PurchasePriceVarianceAccount ||
                    (this.PurchasePriceVarianceAccount != null &&
                    this.PurchasePriceVarianceAccount.Equals(input.PurchasePriceVarianceAccount))
                ) && base.Equals(input) && 
                (
                    this.PurchasePriceVarianceSubaccount == input.PurchasePriceVarianceSubaccount ||
                    (this.PurchasePriceVarianceSubaccount != null &&
                    this.PurchasePriceVarianceSubaccount.Equals(input.PurchasePriceVarianceSubaccount))
                ) && base.Equals(input) && 
                (
                    this.PurchaseUOM == input.PurchaseUOM ||
                    (this.PurchaseUOM != null &&
                    this.PurchaseUOM.Equals(input.PurchaseUOM))
                ) && base.Equals(input) && 
                (
                    this.ReasonCodeSubaccount == input.ReasonCodeSubaccount ||
                    (this.ReasonCodeSubaccount != null &&
                    this.ReasonCodeSubaccount.Equals(input.ReasonCodeSubaccount))
                ) && base.Equals(input) && 
                (
                    this.ReplenishmentParameters == input.ReplenishmentParameters ||
                    this.ReplenishmentParameters != null &&
                    this.ReplenishmentParameters.SequenceEqual(input.ReplenishmentParameters)
                ) && base.Equals(input) && 
                (
                    this.SalesAccount == input.SalesAccount ||
                    (this.SalesAccount != null &&
                    this.SalesAccount.Equals(input.SalesAccount))
                ) && base.Equals(input) && 
                (
                    this.SalesSubaccount == input.SalesSubaccount ||
                    (this.SalesSubaccount != null &&
                    this.SalesSubaccount.Equals(input.SalesSubaccount))
                ) && base.Equals(input) && 
                (
                    this.SalesUOM == input.SalesUOM ||
                    (this.SalesUOM != null &&
                    this.SalesUOM.Equals(input.SalesUOM))
                ) && base.Equals(input) && 
                (
                    this.StandardCostRevaluationAccount == input.StandardCostRevaluationAccount ||
                    (this.StandardCostRevaluationAccount != null &&
                    this.StandardCostRevaluationAccount.Equals(input.StandardCostRevaluationAccount))
                ) && base.Equals(input) && 
                (
                    this.StandardCostRevaluationSubaccount == input.StandardCostRevaluationSubaccount ||
                    (this.StandardCostRevaluationSubaccount != null &&
                    this.StandardCostRevaluationSubaccount.Equals(input.StandardCostRevaluationSubaccount))
                ) && base.Equals(input) && 
                (
                    this.StandardCostVarianceAccount == input.StandardCostVarianceAccount ||
                    (this.StandardCostVarianceAccount != null &&
                    this.StandardCostVarianceAccount.Equals(input.StandardCostVarianceAccount))
                ) && base.Equals(input) && 
                (
                    this.StandardCostVarianceSubaccount == input.StandardCostVarianceSubaccount ||
                    (this.StandardCostVarianceSubaccount != null &&
                    this.StandardCostVarianceSubaccount.Equals(input.StandardCostVarianceSubaccount))
                ) && base.Equals(input) && 
                (
                    this.SubItems == input.SubItems ||
                    this.SubItems != null &&
                    this.SubItems.SequenceEqual(input.SubItems)
                ) && base.Equals(input) && 
                (
                    this.SubjectToCommission == input.SubjectToCommission ||
                    (this.SubjectToCommission != null &&
                    this.SubjectToCommission.Equals(input.SubjectToCommission))
                ) && base.Equals(input) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                ) && base.Equals(input) && 
                (
                    this.UOMConversions == input.UOMConversions ||
                    this.UOMConversions != null &&
                    this.UOMConversions.SequenceEqual(input.UOMConversions)
                ) && base.Equals(input) && 
                (
                    this.UseOnEntry == input.UseOnEntry ||
                    (this.UseOnEntry != null &&
                    this.UseOnEntry.Equals(input.UseOnEntry))
                ) && base.Equals(input) && 
                (
                    this.ValuationMethod == input.ValuationMethod ||
                    (this.ValuationMethod != null &&
                    this.ValuationMethod.Equals(input.ValuationMethod))
                ) && base.Equals(input) && 
                (
                    this.VendorDetails == input.VendorDetails ||
                    this.VendorDetails != null &&
                    this.VendorDetails.SequenceEqual(input.VendorDetails)
                ) && base.Equals(input) && 
                (
                    this.VolumeUOM == input.VolumeUOM ||
                    (this.VolumeUOM != null &&
                    this.VolumeUOM.Equals(input.VolumeUOM))
                ) && base.Equals(input) && 
                (
                    this.WarehouseDetails == input.WarehouseDetails ||
                    this.WarehouseDetails != null &&
                    this.WarehouseDetails.SequenceEqual(input.WarehouseDetails)
                ) && base.Equals(input) && 
                (
                    this.WeightUOM == input.WeightUOM ||
                    (this.WeightUOM != null &&
                    this.WeightUOM.Equals(input.WeightUOM))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ABCCode != null)
                    hashCode = hashCode * 59 + this.ABCCode.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.AutoIncrementalValue != null)
                    hashCode = hashCode * 59 + this.AutoIncrementalValue.GetHashCode();
                if (this.AverageCost != null)
                    hashCode = hashCode * 59 + this.AverageCost.GetHashCode();
                if (this.BaseUOM != null)
                    hashCode = hashCode * 59 + this.BaseUOM.GetHashCode();
                if (this.Boxes != null)
                    hashCode = hashCode * 59 + this.Boxes.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.COGSAccount != null)
                    hashCode = hashCode * 59 + this.COGSAccount.GetHashCode();
                if (this.COGSSubaccount != null)
                    hashCode = hashCode * 59 + this.COGSSubaccount.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.CrossReferences != null)
                    hashCode = hashCode * 59 + this.CrossReferences.GetHashCode();
                if (this.CurrentStdCost != null)
                    hashCode = hashCode * 59 + this.CurrentStdCost.GetHashCode();
                if (this.DefaultIssueLocationID != null)
                    hashCode = hashCode * 59 + this.DefaultIssueLocationID.GetHashCode();
                if (this.DefaultPrice != null)
                    hashCode = hashCode * 59 + this.DefaultPrice.GetHashCode();
                if (this.DefaultReceiptLocationID != null)
                    hashCode = hashCode * 59 + this.DefaultReceiptLocationID.GetHashCode();
                if (this.DefaultSubitem != null)
                    hashCode = hashCode * 59 + this.DefaultSubitem.GetHashCode();
                if (this.DefaultWarehouseID != null)
                    hashCode = hashCode * 59 + this.DefaultWarehouseID.GetHashCode();
                if (this.DeferralAccount != null)
                    hashCode = hashCode * 59 + this.DeferralAccount.GetHashCode();
                if (this.DeferralSubaccount != null)
                    hashCode = hashCode * 59 + this.DeferralSubaccount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DimensionVolume != null)
                    hashCode = hashCode * 59 + this.DimensionVolume.GetHashCode();
                if (this.DimensionWeight != null)
                    hashCode = hashCode * 59 + this.DimensionWeight.GetHashCode();
                if (this.DiscountAccount != null)
                    hashCode = hashCode * 59 + this.DiscountAccount.GetHashCode();
                if (this.DiscountSubaccount != null)
                    hashCode = hashCode * 59 + this.DiscountSubaccount.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                if (this.InventoryAccount != null)
                    hashCode = hashCode * 59 + this.InventoryAccount.GetHashCode();
                if (this.InventoryID != null)
                    hashCode = hashCode * 59 + this.InventoryID.GetHashCode();
                if (this.InventorySubaccount != null)
                    hashCode = hashCode * 59 + this.InventorySubaccount.GetHashCode();
                if (this.IsAKit != null)
                    hashCode = hashCode * 59 + this.IsAKit.GetHashCode();
                if (this.ItemClass != null)
                    hashCode = hashCode * 59 + this.ItemClass.GetHashCode();
                if (this.ItemStatus != null)
                    hashCode = hashCode * 59 + this.ItemStatus.GetHashCode();
                if (this.ItemType != null)
                    hashCode = hashCode * 59 + this.ItemType.GetHashCode();
                if (this.LandedCostVarianceAccount != null)
                    hashCode = hashCode * 59 + this.LandedCostVarianceAccount.GetHashCode();
                if (this.LandedCostVarianceSubaccount != null)
                    hashCode = hashCode * 59 + this.LandedCostVarianceSubaccount.GetHashCode();
                if (this.LastCost != null)
                    hashCode = hashCode * 59 + this.LastCost.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastStdCost != null)
                    hashCode = hashCode * 59 + this.LastStdCost.GetHashCode();
                if (this.LotSerialClass != null)
                    hashCode = hashCode * 59 + this.LotSerialClass.GetHashCode();
                if (this.Markup != null)
                    hashCode = hashCode * 59 + this.Markup.GetHashCode();
                if (this.MaxCost != null)
                    hashCode = hashCode * 59 + this.MaxCost.GetHashCode();
                if (this.MinCost != null)
                    hashCode = hashCode * 59 + this.MinCost.GetHashCode();
                if (this.MinMarkup != null)
                    hashCode = hashCode * 59 + this.MinMarkup.GetHashCode();
                if (this.MSRP != null)
                    hashCode = hashCode * 59 + this.MSRP.GetHashCode();
                if (this.PackagingOption != null)
                    hashCode = hashCode * 59 + this.PackagingOption.GetHashCode();
                if (this.PackSeparately != null)
                    hashCode = hashCode * 59 + this.PackSeparately.GetHashCode();
                if (this.PendingStdCost != null)
                    hashCode = hashCode * 59 + this.PendingStdCost.GetHashCode();
                if (this.POAccrualAccount != null)
                    hashCode = hashCode * 59 + this.POAccrualAccount.GetHashCode();
                if (this.POAccrualSubaccount != null)
                    hashCode = hashCode * 59 + this.POAccrualSubaccount.GetHashCode();
                if (this.PostingClass != null)
                    hashCode = hashCode * 59 + this.PostingClass.GetHashCode();
                if (this.PriceClass != null)
                    hashCode = hashCode * 59 + this.PriceClass.GetHashCode();
                if (this.PriceManager != null)
                    hashCode = hashCode * 59 + this.PriceManager.GetHashCode();
                if (this.PriceWorkgroup != null)
                    hashCode = hashCode * 59 + this.PriceWorkgroup.GetHashCode();
                if (this.ProductManager != null)
                    hashCode = hashCode * 59 + this.ProductManager.GetHashCode();
                if (this.ProductWorkgroup != null)
                    hashCode = hashCode * 59 + this.ProductWorkgroup.GetHashCode();
                if (this.PurchasePriceVarianceAccount != null)
                    hashCode = hashCode * 59 + this.PurchasePriceVarianceAccount.GetHashCode();
                if (this.PurchasePriceVarianceSubaccount != null)
                    hashCode = hashCode * 59 + this.PurchasePriceVarianceSubaccount.GetHashCode();
                if (this.PurchaseUOM != null)
                    hashCode = hashCode * 59 + this.PurchaseUOM.GetHashCode();
                if (this.ReasonCodeSubaccount != null)
                    hashCode = hashCode * 59 + this.ReasonCodeSubaccount.GetHashCode();
                if (this.ReplenishmentParameters != null)
                    hashCode = hashCode * 59 + this.ReplenishmentParameters.GetHashCode();
                if (this.SalesAccount != null)
                    hashCode = hashCode * 59 + this.SalesAccount.GetHashCode();
                if (this.SalesSubaccount != null)
                    hashCode = hashCode * 59 + this.SalesSubaccount.GetHashCode();
                if (this.SalesUOM != null)
                    hashCode = hashCode * 59 + this.SalesUOM.GetHashCode();
                if (this.StandardCostRevaluationAccount != null)
                    hashCode = hashCode * 59 + this.StandardCostRevaluationAccount.GetHashCode();
                if (this.StandardCostRevaluationSubaccount != null)
                    hashCode = hashCode * 59 + this.StandardCostRevaluationSubaccount.GetHashCode();
                if (this.StandardCostVarianceAccount != null)
                    hashCode = hashCode * 59 + this.StandardCostVarianceAccount.GetHashCode();
                if (this.StandardCostVarianceSubaccount != null)
                    hashCode = hashCode * 59 + this.StandardCostVarianceSubaccount.GetHashCode();
                if (this.SubItems != null)
                    hashCode = hashCode * 59 + this.SubItems.GetHashCode();
                if (this.SubjectToCommission != null)
                    hashCode = hashCode * 59 + this.SubjectToCommission.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                if (this.UOMConversions != null)
                    hashCode = hashCode * 59 + this.UOMConversions.GetHashCode();
                if (this.UseOnEntry != null)
                    hashCode = hashCode * 59 + this.UseOnEntry.GetHashCode();
                if (this.ValuationMethod != null)
                    hashCode = hashCode * 59 + this.ValuationMethod.GetHashCode();
                if (this.VendorDetails != null)
                    hashCode = hashCode * 59 + this.VendorDetails.GetHashCode();
                if (this.VolumeUOM != null)
                    hashCode = hashCode * 59 + this.VolumeUOM.GetHashCode();
                if (this.WarehouseDetails != null)
                    hashCode = hashCode * 59 + this.WarehouseDetails.GetHashCode();
                if (this.WeightUOM != null)
                    hashCode = hashCode * 59 + this.WeightUOM.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
