/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// Account
    /// </summary>
    [DataContract]
    public partial class Account : Entity,  IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="accountCD">accountCD.</param>
        /// <param name="accountClass">accountClass.</param>
        /// <param name="accountGroup">accountGroup.</param>
        /// <param name="accountID">accountID.</param>
        /// <param name="active">active.</param>
        /// <param name="cashAccount">cashAccount.</param>
        /// <param name="chartOfAccountsOrder">chartOfAccountsOrder.</param>
        /// <param name="consolidationAccount">consolidationAccount.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="description">description.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="postOption">postOption.</param>
        /// <param name="requireUnits">requireUnits.</param>
        /// <param name="revaluationRateType">revaluationRateType.</param>
        /// <param name="secured">secured.</param>
        /// <param name="taxCategory">taxCategory.</param>
        /// <param name="type">type.</param>
        /// <param name="useDefaultSubaccount">useDefaultSubaccount.</param>
        public Account(StringValue accountCD = default(StringValue), StringValue accountClass = default(StringValue), StringValue accountGroup = default(StringValue), IntValue accountID = default(IntValue), BooleanValue active = default(BooleanValue), BooleanValue cashAccount = default(BooleanValue), IntValue chartOfAccountsOrder = default(IntValue), StringValue consolidationAccount = default(StringValue), DateTimeValue createdDateTime = default(DateTimeValue), StringValue currencyID = default(StringValue), StringValue description = default(StringValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue postOption = default(StringValue), BooleanValue requireUnits = default(BooleanValue), StringValue revaluationRateType = default(StringValue), BooleanValue secured = default(BooleanValue), StringValue taxCategory = default(StringValue), StringValue type = default(StringValue), BooleanValue useDefaultSubaccount = default(BooleanValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AccountCD = accountCD;
            this.AccountClass = accountClass;
            this.AccountGroup = accountGroup;
            this.AccountID = accountID;
            this.Active = active;
            this.CashAccount = cashAccount;
            this.ChartOfAccountsOrder = chartOfAccountsOrder;
            this.ConsolidationAccount = consolidationAccount;
            this.CreatedDateTime = createdDateTime;
            this.CurrencyID = currencyID;
            this.Description = description;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.PostOption = postOption;
            this.RequireUnits = requireUnits;
            this.RevaluationRateType = revaluationRateType;
            this.Secured = secured;
            this.TaxCategory = taxCategory;
            this.Type = type;
            this.UseDefaultSubaccount = useDefaultSubaccount;
        }
        
        /// <summary>
        /// Gets or Sets AccountCD
        /// </summary>
        [DataMember(Name="AccountCD", EmitDefaultValue=false)]
        public StringValue AccountCD { get; set; }

        /// <summary>
        /// Gets or Sets AccountClass
        /// </summary>
        [DataMember(Name="AccountClass", EmitDefaultValue=false)]
        public StringValue AccountClass { get; set; }

        /// <summary>
        /// Gets or Sets AccountGroup
        /// </summary>
        [DataMember(Name="AccountGroup", EmitDefaultValue=false)]
        public StringValue AccountGroup { get; set; }

        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="AccountID", EmitDefaultValue=false)]
        public IntValue AccountID { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public BooleanValue Active { get; set; }

        /// <summary>
        /// Gets or Sets CashAccount
        /// </summary>
        [DataMember(Name="CashAccount", EmitDefaultValue=false)]
        public BooleanValue CashAccount { get; set; }

        /// <summary>
        /// Gets or Sets ChartOfAccountsOrder
        /// </summary>
        [DataMember(Name="ChartOfAccountsOrder", EmitDefaultValue=false)]
        public IntValue ChartOfAccountsOrder { get; set; }

        /// <summary>
        /// Gets or Sets ConsolidationAccount
        /// </summary>
        [DataMember(Name="ConsolidationAccount", EmitDefaultValue=false)]
        public StringValue ConsolidationAccount { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets PostOption
        /// </summary>
        [DataMember(Name="PostOption", EmitDefaultValue=false)]
        public StringValue PostOption { get; set; }

        /// <summary>
        /// Gets or Sets RequireUnits
        /// </summary>
        [DataMember(Name="RequireUnits", EmitDefaultValue=false)]
        public BooleanValue RequireUnits { get; set; }

        /// <summary>
        /// Gets or Sets RevaluationRateType
        /// </summary>
        [DataMember(Name="RevaluationRateType", EmitDefaultValue=false)]
        public StringValue RevaluationRateType { get; set; }

        /// <summary>
        /// Gets or Sets Secured
        /// </summary>
        [DataMember(Name="Secured", EmitDefaultValue=false)]
        public BooleanValue Secured { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategory
        /// </summary>
        [DataMember(Name="TaxCategory", EmitDefaultValue=false)]
        public StringValue TaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public StringValue Type { get; set; }

        /// <summary>
        /// Gets or Sets UseDefaultSubaccount
        /// </summary>
        [DataMember(Name="UseDefaultSubaccount", EmitDefaultValue=false)]
        public BooleanValue UseDefaultSubaccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountCD: ").Append(AccountCD).Append("\n");
            sb.Append("  AccountClass: ").Append(AccountClass).Append("\n");
            sb.Append("  AccountGroup: ").Append(AccountGroup).Append("\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CashAccount: ").Append(CashAccount).Append("\n");
            sb.Append("  ChartOfAccountsOrder: ").Append(ChartOfAccountsOrder).Append("\n");
            sb.Append("  ConsolidationAccount: ").Append(ConsolidationAccount).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  PostOption: ").Append(PostOption).Append("\n");
            sb.Append("  RequireUnits: ").Append(RequireUnits).Append("\n");
            sb.Append("  RevaluationRateType: ").Append(RevaluationRateType).Append("\n");
            sb.Append("  Secured: ").Append(Secured).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UseDefaultSubaccount: ").Append(UseDefaultSubaccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AccountCD == input.AccountCD ||
                    (this.AccountCD != null &&
                    this.AccountCD.Equals(input.AccountCD))
                ) && base.Equals(input) && 
                (
                    this.AccountClass == input.AccountClass ||
                    (this.AccountClass != null &&
                    this.AccountClass.Equals(input.AccountClass))
                ) && base.Equals(input) && 
                (
                    this.AccountGroup == input.AccountGroup ||
                    (this.AccountGroup != null &&
                    this.AccountGroup.Equals(input.AccountGroup))
                ) && base.Equals(input) && 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && base.Equals(input) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && base.Equals(input) && 
                (
                    this.CashAccount == input.CashAccount ||
                    (this.CashAccount != null &&
                    this.CashAccount.Equals(input.CashAccount))
                ) && base.Equals(input) && 
                (
                    this.ChartOfAccountsOrder == input.ChartOfAccountsOrder ||
                    (this.ChartOfAccountsOrder != null &&
                    this.ChartOfAccountsOrder.Equals(input.ChartOfAccountsOrder))
                ) && base.Equals(input) && 
                (
                    this.ConsolidationAccount == input.ConsolidationAccount ||
                    (this.ConsolidationAccount != null &&
                    this.ConsolidationAccount.Equals(input.ConsolidationAccount))
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.PostOption == input.PostOption ||
                    (this.PostOption != null &&
                    this.PostOption.Equals(input.PostOption))
                ) && base.Equals(input) && 
                (
                    this.RequireUnits == input.RequireUnits ||
                    (this.RequireUnits != null &&
                    this.RequireUnits.Equals(input.RequireUnits))
                ) && base.Equals(input) && 
                (
                    this.RevaluationRateType == input.RevaluationRateType ||
                    (this.RevaluationRateType != null &&
                    this.RevaluationRateType.Equals(input.RevaluationRateType))
                ) && base.Equals(input) && 
                (
                    this.Secured == input.Secured ||
                    (this.Secured != null &&
                    this.Secured.Equals(input.Secured))
                ) && base.Equals(input) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.UseDefaultSubaccount == input.UseDefaultSubaccount ||
                    (this.UseDefaultSubaccount != null &&
                    this.UseDefaultSubaccount.Equals(input.UseDefaultSubaccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountCD != null)
                    hashCode = hashCode * 59 + this.AccountCD.GetHashCode();
                if (this.AccountClass != null)
                    hashCode = hashCode * 59 + this.AccountClass.GetHashCode();
                if (this.AccountGroup != null)
                    hashCode = hashCode * 59 + this.AccountGroup.GetHashCode();
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.CashAccount != null)
                    hashCode = hashCode * 59 + this.CashAccount.GetHashCode();
                if (this.ChartOfAccountsOrder != null)
                    hashCode = hashCode * 59 + this.ChartOfAccountsOrder.GetHashCode();
                if (this.ConsolidationAccount != null)
                    hashCode = hashCode * 59 + this.ConsolidationAccount.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.PostOption != null)
                    hashCode = hashCode * 59 + this.PostOption.GetHashCode();
                if (this.RequireUnits != null)
                    hashCode = hashCode * 59 + this.RequireUnits.GetHashCode();
                if (this.RevaluationRateType != null)
                    hashCode = hashCode * 59 + this.RevaluationRateType.GetHashCode();
                if (this.Secured != null)
                    hashCode = hashCode * 59 + this.Secured.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UseDefaultSubaccount != null)
                    hashCode = hashCode * 59 + this.UseDefaultSubaccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
