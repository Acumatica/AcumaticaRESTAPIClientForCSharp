/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// Vendor
    /// </summary>
    [DataContract]
    public partial class Vendor : Entity,  IEquatable<Vendor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vendor" /> class.
        /// </summary>
        /// <param name="accountRef">accountRef.</param>
        /// <param name="aPAccount">aPAccount.</param>
        /// <param name="aPSubaccount">aPSubaccount.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="cashAccount">cashAccount.</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="currencyRateType">currencyRateType.</param>
        /// <param name="enableCurrencyOverride">enableCurrencyOverride.</param>
        /// <param name="enableRateOverride">enableRateOverride.</param>
        /// <param name="f1099Box">f1099Box.</param>
        /// <param name="f1099Vendor">f1099Vendor.</param>
        /// <param name="fATCA">fATCA.</param>
        /// <param name="fOBPoint">fOBPoint.</param>
        /// <param name="foreignEntity">foreignEntity.</param>
        /// <param name="landedCostVendor">landedCostVendor.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="leadTimedays">leadTimedays.</param>
        /// <param name="locationName">locationName.</param>
        /// <param name="mainContact">mainContact.</param>
        /// <param name="maxReceipt">maxReceipt.</param>
        /// <param name="minReceipt">minReceipt.</param>
        /// <param name="parentAccount">parentAccount.</param>
        /// <param name="paymentBy">paymentBy.</param>
        /// <param name="paymentInstructions">paymentInstructions.</param>
        /// <param name="paymentLeadTimedays">paymentLeadTimedays.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="paySeparately">paySeparately.</param>
        /// <param name="printOrders">printOrders.</param>
        /// <param name="receiptAction">receiptAction.</param>
        /// <param name="receivingBranch">receivingBranch.</param>
        /// <param name="remittanceAddressSameasMain">remittanceAddressSameasMain.</param>
        /// <param name="remittanceContact">remittanceContact.</param>
        /// <param name="remittanceContactSameasMain">remittanceContactSameasMain.</param>
        /// <param name="sendOrdersbyEmail">sendOrdersbyEmail.</param>
        /// <param name="shippersContactSameasMain">shippersContactSameasMain.</param>
        /// <param name="shippingAddressSameasMain">shippingAddressSameasMain.</param>
        /// <param name="shippingContact">shippingContact.</param>
        /// <param name="shippingTerms">shippingTerms.</param>
        /// <param name="shipVia">shipVia.</param>
        /// <param name="status">status.</param>
        /// <param name="taxCalculationMode">taxCalculationMode.</param>
        /// <param name="taxRegistrationID">taxRegistrationID.</param>
        /// <param name="taxZone">taxZone.</param>
        /// <param name="terms">terms.</param>
        /// <param name="thresholdReceipt">thresholdReceipt.</param>
        /// <param name="vendorClass">vendorClass.</param>
        /// <param name="vendorID">vendorID.</param>
        /// <param name="vendorIsLaborUnion">vendorIsLaborUnion.</param>
        /// <param name="vendorIsTaxAgency">vendorIsTaxAgency.</param>
        /// <param name="vendorName">vendorName.</param>
        /// <param name="warehouse">warehouse.</param>
        public Vendor(StringValue accountRef = default(StringValue), StringValue aPAccount = default(StringValue), StringValue aPSubaccount = default(StringValue), List<AttributeDetail> attributes = default(List<AttributeDetail>), StringValue cashAccount = default(StringValue), List<CustomerContact> contacts = default(List<CustomerContact>), DateTimeValue createdDateTime = default(DateTimeValue), StringValue currencyID = default(StringValue), StringValue currencyRateType = default(StringValue), BooleanValue enableCurrencyOverride = default(BooleanValue), BooleanValue enableRateOverride = default(BooleanValue), StringValue f1099Box = default(StringValue), BooleanValue f1099Vendor = default(BooleanValue), BooleanValue fATCA = default(BooleanValue), StringValue fOBPoint = default(StringValue), BooleanValue foreignEntity = default(BooleanValue), BooleanValue landedCostVendor = default(BooleanValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), ShortValue leadTimedays = default(ShortValue), StringValue locationName = default(StringValue), Contact mainContact = default(Contact), DecimalValue maxReceipt = default(DecimalValue), DecimalValue minReceipt = default(DecimalValue), StringValue parentAccount = default(StringValue), StringValue paymentBy = default(StringValue), List<BusinessAccountPaymentInstructionDetail> paymentInstructions = default(List<BusinessAccountPaymentInstructionDetail>), ShortValue paymentLeadTimedays = default(ShortValue), StringValue paymentMethod = default(StringValue), BooleanValue paySeparately = default(BooleanValue), BooleanValue printOrders = default(BooleanValue), StringValue receiptAction = default(StringValue), StringValue receivingBranch = default(StringValue), BooleanValue remittanceAddressSameasMain = default(BooleanValue), Contact remittanceContact = default(Contact), BooleanValue remittanceContactSameasMain = default(BooleanValue), BooleanValue sendOrdersbyEmail = default(BooleanValue), BooleanValue shippersContactSameasMain = default(BooleanValue), BooleanValue shippingAddressSameasMain = default(BooleanValue), Contact shippingContact = default(Contact), StringValue shippingTerms = default(StringValue), StringValue shipVia = default(StringValue), StringValue status = default(StringValue), StringValue taxCalculationMode = default(StringValue), StringValue taxRegistrationID = default(StringValue), StringValue taxZone = default(StringValue), StringValue terms = default(StringValue), DecimalValue thresholdReceipt = default(DecimalValue), StringValue vendorClass = default(StringValue), StringValue vendorID = default(StringValue), BooleanValue vendorIsLaborUnion = default(BooleanValue), BooleanValue vendorIsTaxAgency = default(BooleanValue), StringValue vendorName = default(StringValue), StringValue warehouse = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AccountRef = accountRef;
            this.APAccount = aPAccount;
            this.APSubaccount = aPSubaccount;
            this.Attributes = attributes;
            this.CashAccount = cashAccount;
            this.Contacts = contacts;
            this.CreatedDateTime = createdDateTime;
            this.CurrencyID = currencyID;
            this.CurrencyRateType = currencyRateType;
            this.EnableCurrencyOverride = enableCurrencyOverride;
            this.EnableRateOverride = enableRateOverride;
            this.F1099Box = f1099Box;
            this.F1099Vendor = f1099Vendor;
            this.FATCA = fATCA;
            this.FOBPoint = fOBPoint;
            this.ForeignEntity = foreignEntity;
            this.LandedCostVendor = landedCostVendor;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.LeadTimedays = leadTimedays;
            this.LocationName = locationName;
            this.MainContact = mainContact;
            this.MaxReceipt = maxReceipt;
            this.MinReceipt = minReceipt;
            this.ParentAccount = parentAccount;
            this.PaymentBy = paymentBy;
            this.PaymentInstructions = paymentInstructions;
            this.PaymentLeadTimedays = paymentLeadTimedays;
            this.PaymentMethod = paymentMethod;
            this.PaySeparately = paySeparately;
            this.PrintOrders = printOrders;
            this.ReceiptAction = receiptAction;
            this.ReceivingBranch = receivingBranch;
            this.RemittanceAddressSameasMain = remittanceAddressSameasMain;
            this.RemittanceContact = remittanceContact;
            this.RemittanceContactSameasMain = remittanceContactSameasMain;
            this.SendOrdersbyEmail = sendOrdersbyEmail;
            this.ShippersContactSameasMain = shippersContactSameasMain;
            this.ShippingAddressSameasMain = shippingAddressSameasMain;
            this.ShippingContact = shippingContact;
            this.ShippingTerms = shippingTerms;
            this.ShipVia = shipVia;
            this.Status = status;
            this.TaxCalculationMode = taxCalculationMode;
            this.TaxRegistrationID = taxRegistrationID;
            this.TaxZone = taxZone;
            this.Terms = terms;
            this.ThresholdReceipt = thresholdReceipt;
            this.VendorClass = vendorClass;
            this.VendorID = vendorID;
            this.VendorIsLaborUnion = vendorIsLaborUnion;
            this.VendorIsTaxAgency = vendorIsTaxAgency;
            this.VendorName = vendorName;
            this.Warehouse = warehouse;
        }
        
        /// <summary>
        /// Gets or Sets AccountRef
        /// </summary>
        [DataMember(Name="AccountRef", EmitDefaultValue=false)]
        public StringValue AccountRef { get; set; }

        /// <summary>
        /// Gets or Sets APAccount
        /// </summary>
        [DataMember(Name="APAccount", EmitDefaultValue=false)]
        public StringValue APAccount { get; set; }

        /// <summary>
        /// Gets or Sets APSubaccount
        /// </summary>
        [DataMember(Name="APSubaccount", EmitDefaultValue=false)]
        public StringValue APSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<AttributeDetail> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets CashAccount
        /// </summary>
        [DataMember(Name="CashAccount", EmitDefaultValue=false)]
        public StringValue CashAccount { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name="Contacts", EmitDefaultValue=false)]
        public List<CustomerContact> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyRateType
        /// </summary>
        [DataMember(Name="CurrencyRateType", EmitDefaultValue=false)]
        public StringValue CurrencyRateType { get; set; }

        /// <summary>
        /// Gets or Sets EnableCurrencyOverride
        /// </summary>
        [DataMember(Name="EnableCurrencyOverride", EmitDefaultValue=false)]
        public BooleanValue EnableCurrencyOverride { get; set; }

        /// <summary>
        /// Gets or Sets EnableRateOverride
        /// </summary>
        [DataMember(Name="EnableRateOverride", EmitDefaultValue=false)]
        public BooleanValue EnableRateOverride { get; set; }

        /// <summary>
        /// Gets or Sets F1099Box
        /// </summary>
        [DataMember(Name="F1099Box", EmitDefaultValue=false)]
        public StringValue F1099Box { get; set; }

        /// <summary>
        /// Gets or Sets F1099Vendor
        /// </summary>
        [DataMember(Name="F1099Vendor", EmitDefaultValue=false)]
        public BooleanValue F1099Vendor { get; set; }

        /// <summary>
        /// Gets or Sets FATCA
        /// </summary>
        [DataMember(Name="FATCA", EmitDefaultValue=false)]
        public BooleanValue FATCA { get; set; }

        /// <summary>
        /// Gets or Sets FOBPoint
        /// </summary>
        [DataMember(Name="FOBPoint", EmitDefaultValue=false)]
        public StringValue FOBPoint { get; set; }

        /// <summary>
        /// Gets or Sets ForeignEntity
        /// </summary>
        [DataMember(Name="ForeignEntity", EmitDefaultValue=false)]
        public BooleanValue ForeignEntity { get; set; }

        /// <summary>
        /// Gets or Sets LandedCostVendor
        /// </summary>
        [DataMember(Name="LandedCostVendor", EmitDefaultValue=false)]
        public BooleanValue LandedCostVendor { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LeadTimedays
        /// </summary>
        [DataMember(Name="LeadTimedays", EmitDefaultValue=false)]
        public ShortValue LeadTimedays { get; set; }

        /// <summary>
        /// Gets or Sets LocationName
        /// </summary>
        [DataMember(Name="LocationName", EmitDefaultValue=false)]
        public StringValue LocationName { get; set; }

        /// <summary>
        /// Gets or Sets MainContact
        /// </summary>
        [DataMember(Name="MainContact", EmitDefaultValue=false)]
        public Contact MainContact { get; set; }

        /// <summary>
        /// Gets or Sets MaxReceipt
        /// </summary>
        [DataMember(Name="MaxReceipt", EmitDefaultValue=false)]
        public DecimalValue MaxReceipt { get; set; }

        /// <summary>
        /// Gets or Sets MinReceipt
        /// </summary>
        [DataMember(Name="MinReceipt", EmitDefaultValue=false)]
        public DecimalValue MinReceipt { get; set; }

        /// <summary>
        /// Gets or Sets ParentAccount
        /// </summary>
        [DataMember(Name="ParentAccount", EmitDefaultValue=false)]
        public StringValue ParentAccount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentBy
        /// </summary>
        [DataMember(Name="PaymentBy", EmitDefaultValue=false)]
        public StringValue PaymentBy { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInstructions
        /// </summary>
        [DataMember(Name="PaymentInstructions", EmitDefaultValue=false)]
        public List<BusinessAccountPaymentInstructionDetail> PaymentInstructions { get; set; }

        /// <summary>
        /// Gets or Sets PaymentLeadTimedays
        /// </summary>
        [DataMember(Name="PaymentLeadTimedays", EmitDefaultValue=false)]
        public ShortValue PaymentLeadTimedays { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public StringValue PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PaySeparately
        /// </summary>
        [DataMember(Name="PaySeparately", EmitDefaultValue=false)]
        public BooleanValue PaySeparately { get; set; }

        /// <summary>
        /// Gets or Sets PrintOrders
        /// </summary>
        [DataMember(Name="PrintOrders", EmitDefaultValue=false)]
        public BooleanValue PrintOrders { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptAction
        /// </summary>
        [DataMember(Name="ReceiptAction", EmitDefaultValue=false)]
        public StringValue ReceiptAction { get; set; }

        /// <summary>
        /// Gets or Sets ReceivingBranch
        /// </summary>
        [DataMember(Name="ReceivingBranch", EmitDefaultValue=false)]
        public StringValue ReceivingBranch { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceAddressSameasMain
        /// </summary>
        [DataMember(Name="RemittanceAddressSameasMain", EmitDefaultValue=false)]
        public BooleanValue RemittanceAddressSameasMain { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceContact
        /// </summary>
        [DataMember(Name="RemittanceContact", EmitDefaultValue=false)]
        public Contact RemittanceContact { get; set; }

        /// <summary>
        /// Gets or Sets RemittanceContactSameasMain
        /// </summary>
        [DataMember(Name="RemittanceContactSameasMain", EmitDefaultValue=false)]
        public BooleanValue RemittanceContactSameasMain { get; set; }

        /// <summary>
        /// Gets or Sets SendOrdersbyEmail
        /// </summary>
        [DataMember(Name="SendOrdersbyEmail", EmitDefaultValue=false)]
        public BooleanValue SendOrdersbyEmail { get; set; }

        /// <summary>
        /// Gets or Sets ShippersContactSameasMain
        /// </summary>
        [DataMember(Name="ShippersContactSameasMain", EmitDefaultValue=false)]
        public BooleanValue ShippersContactSameasMain { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddressSameasMain
        /// </summary>
        [DataMember(Name="ShippingAddressSameasMain", EmitDefaultValue=false)]
        public BooleanValue ShippingAddressSameasMain { get; set; }

        /// <summary>
        /// Gets or Sets ShippingContact
        /// </summary>
        [DataMember(Name="ShippingContact", EmitDefaultValue=false)]
        public Contact ShippingContact { get; set; }

        /// <summary>
        /// Gets or Sets ShippingTerms
        /// </summary>
        [DataMember(Name="ShippingTerms", EmitDefaultValue=false)]
        public StringValue ShippingTerms { get; set; }

        /// <summary>
        /// Gets or Sets ShipVia
        /// </summary>
        [DataMember(Name="ShipVia", EmitDefaultValue=false)]
        public StringValue ShipVia { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TaxCalculationMode
        /// </summary>
        [DataMember(Name="TaxCalculationMode", EmitDefaultValue=false)]
        public StringValue TaxCalculationMode { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegistrationID
        /// </summary>
        [DataMember(Name="TaxRegistrationID", EmitDefaultValue=false)]
        public StringValue TaxRegistrationID { get; set; }

        /// <summary>
        /// Gets or Sets TaxZone
        /// </summary>
        [DataMember(Name="TaxZone", EmitDefaultValue=false)]
        public StringValue TaxZone { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public StringValue Terms { get; set; }

        /// <summary>
        /// Gets or Sets ThresholdReceipt
        /// </summary>
        [DataMember(Name="ThresholdReceipt", EmitDefaultValue=false)]
        public DecimalValue ThresholdReceipt { get; set; }

        /// <summary>
        /// Gets or Sets VendorClass
        /// </summary>
        [DataMember(Name="VendorClass", EmitDefaultValue=false)]
        public StringValue VendorClass { get; set; }

        /// <summary>
        /// Gets or Sets VendorID
        /// </summary>
        [DataMember(Name="VendorID", EmitDefaultValue=false)]
        public StringValue VendorID { get; set; }

        /// <summary>
        /// Gets or Sets VendorIsLaborUnion
        /// </summary>
        [DataMember(Name="VendorIsLaborUnion", EmitDefaultValue=false)]
        public BooleanValue VendorIsLaborUnion { get; set; }

        /// <summary>
        /// Gets or Sets VendorIsTaxAgency
        /// </summary>
        [DataMember(Name="VendorIsTaxAgency", EmitDefaultValue=false)]
        public BooleanValue VendorIsTaxAgency { get; set; }

        /// <summary>
        /// Gets or Sets VendorName
        /// </summary>
        [DataMember(Name="VendorName", EmitDefaultValue=false)]
        public StringValue VendorName { get; set; }

        /// <summary>
        /// Gets or Sets Warehouse
        /// </summary>
        [DataMember(Name="Warehouse", EmitDefaultValue=false)]
        public StringValue Warehouse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vendor {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountRef: ").Append(AccountRef).Append("\n");
            sb.Append("  APAccount: ").Append(APAccount).Append("\n");
            sb.Append("  APSubaccount: ").Append(APSubaccount).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  CashAccount: ").Append(CashAccount).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CurrencyRateType: ").Append(CurrencyRateType).Append("\n");
            sb.Append("  EnableCurrencyOverride: ").Append(EnableCurrencyOverride).Append("\n");
            sb.Append("  EnableRateOverride: ").Append(EnableRateOverride).Append("\n");
            sb.Append("  F1099Box: ").Append(F1099Box).Append("\n");
            sb.Append("  F1099Vendor: ").Append(F1099Vendor).Append("\n");
            sb.Append("  FATCA: ").Append(FATCA).Append("\n");
            sb.Append("  FOBPoint: ").Append(FOBPoint).Append("\n");
            sb.Append("  ForeignEntity: ").Append(ForeignEntity).Append("\n");
            sb.Append("  LandedCostVendor: ").Append(LandedCostVendor).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LeadTimedays: ").Append(LeadTimedays).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  MainContact: ").Append(MainContact).Append("\n");
            sb.Append("  MaxReceipt: ").Append(MaxReceipt).Append("\n");
            sb.Append("  MinReceipt: ").Append(MinReceipt).Append("\n");
            sb.Append("  ParentAccount: ").Append(ParentAccount).Append("\n");
            sb.Append("  PaymentBy: ").Append(PaymentBy).Append("\n");
            sb.Append("  PaymentInstructions: ").Append(PaymentInstructions).Append("\n");
            sb.Append("  PaymentLeadTimedays: ").Append(PaymentLeadTimedays).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaySeparately: ").Append(PaySeparately).Append("\n");
            sb.Append("  PrintOrders: ").Append(PrintOrders).Append("\n");
            sb.Append("  ReceiptAction: ").Append(ReceiptAction).Append("\n");
            sb.Append("  ReceivingBranch: ").Append(ReceivingBranch).Append("\n");
            sb.Append("  RemittanceAddressSameasMain: ").Append(RemittanceAddressSameasMain).Append("\n");
            sb.Append("  RemittanceContact: ").Append(RemittanceContact).Append("\n");
            sb.Append("  RemittanceContactSameasMain: ").Append(RemittanceContactSameasMain).Append("\n");
            sb.Append("  SendOrdersbyEmail: ").Append(SendOrdersbyEmail).Append("\n");
            sb.Append("  ShippersContactSameasMain: ").Append(ShippersContactSameasMain).Append("\n");
            sb.Append("  ShippingAddressSameasMain: ").Append(ShippingAddressSameasMain).Append("\n");
            sb.Append("  ShippingContact: ").Append(ShippingContact).Append("\n");
            sb.Append("  ShippingTerms: ").Append(ShippingTerms).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaxCalculationMode: ").Append(TaxCalculationMode).Append("\n");
            sb.Append("  TaxRegistrationID: ").Append(TaxRegistrationID).Append("\n");
            sb.Append("  TaxZone: ").Append(TaxZone).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  ThresholdReceipt: ").Append(ThresholdReceipt).Append("\n");
            sb.Append("  VendorClass: ").Append(VendorClass).Append("\n");
            sb.Append("  VendorID: ").Append(VendorID).Append("\n");
            sb.Append("  VendorIsLaborUnion: ").Append(VendorIsLaborUnion).Append("\n");
            sb.Append("  VendorIsTaxAgency: ").Append(VendorIsTaxAgency).Append("\n");
            sb.Append("  VendorName: ").Append(VendorName).Append("\n");
            sb.Append("  Warehouse: ").Append(Warehouse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vendor);
        }

        /// <summary>
        /// Returns true if Vendor instances are equal
        /// </summary>
        /// <param name="input">Instance of Vendor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vendor input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AccountRef == input.AccountRef ||
                    (this.AccountRef != null &&
                    this.AccountRef.Equals(input.AccountRef))
                ) && base.Equals(input) && 
                (
                    this.APAccount == input.APAccount ||
                    (this.APAccount != null &&
                    this.APAccount.Equals(input.APAccount))
                ) && base.Equals(input) && 
                (
                    this.APSubaccount == input.APSubaccount ||
                    (this.APSubaccount != null &&
                    this.APSubaccount.Equals(input.APSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.CashAccount == input.CashAccount ||
                    (this.CashAccount != null &&
                    this.CashAccount.Equals(input.CashAccount))
                ) && base.Equals(input) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRateType == input.CurrencyRateType ||
                    (this.CurrencyRateType != null &&
                    this.CurrencyRateType.Equals(input.CurrencyRateType))
                ) && base.Equals(input) && 
                (
                    this.EnableCurrencyOverride == input.EnableCurrencyOverride ||
                    (this.EnableCurrencyOverride != null &&
                    this.EnableCurrencyOverride.Equals(input.EnableCurrencyOverride))
                ) && base.Equals(input) && 
                (
                    this.EnableRateOverride == input.EnableRateOverride ||
                    (this.EnableRateOverride != null &&
                    this.EnableRateOverride.Equals(input.EnableRateOverride))
                ) && base.Equals(input) && 
                (
                    this.F1099Box == input.F1099Box ||
                    (this.F1099Box != null &&
                    this.F1099Box.Equals(input.F1099Box))
                ) && base.Equals(input) && 
                (
                    this.F1099Vendor == input.F1099Vendor ||
                    (this.F1099Vendor != null &&
                    this.F1099Vendor.Equals(input.F1099Vendor))
                ) && base.Equals(input) && 
                (
                    this.FATCA == input.FATCA ||
                    (this.FATCA != null &&
                    this.FATCA.Equals(input.FATCA))
                ) && base.Equals(input) && 
                (
                    this.FOBPoint == input.FOBPoint ||
                    (this.FOBPoint != null &&
                    this.FOBPoint.Equals(input.FOBPoint))
                ) && base.Equals(input) && 
                (
                    this.ForeignEntity == input.ForeignEntity ||
                    (this.ForeignEntity != null &&
                    this.ForeignEntity.Equals(input.ForeignEntity))
                ) && base.Equals(input) && 
                (
                    this.LandedCostVendor == input.LandedCostVendor ||
                    (this.LandedCostVendor != null &&
                    this.LandedCostVendor.Equals(input.LandedCostVendor))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.LeadTimedays == input.LeadTimedays ||
                    (this.LeadTimedays != null &&
                    this.LeadTimedays.Equals(input.LeadTimedays))
                ) && base.Equals(input) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && base.Equals(input) && 
                (
                    this.MainContact == input.MainContact ||
                    (this.MainContact != null &&
                    this.MainContact.Equals(input.MainContact))
                ) && base.Equals(input) && 
                (
                    this.MaxReceipt == input.MaxReceipt ||
                    (this.MaxReceipt != null &&
                    this.MaxReceipt.Equals(input.MaxReceipt))
                ) && base.Equals(input) && 
                (
                    this.MinReceipt == input.MinReceipt ||
                    (this.MinReceipt != null &&
                    this.MinReceipt.Equals(input.MinReceipt))
                ) && base.Equals(input) && 
                (
                    this.ParentAccount == input.ParentAccount ||
                    (this.ParentAccount != null &&
                    this.ParentAccount.Equals(input.ParentAccount))
                ) && base.Equals(input) && 
                (
                    this.PaymentBy == input.PaymentBy ||
                    (this.PaymentBy != null &&
                    this.PaymentBy.Equals(input.PaymentBy))
                ) && base.Equals(input) && 
                (
                    this.PaymentInstructions == input.PaymentInstructions ||
                    this.PaymentInstructions != null &&
                    this.PaymentInstructions.SequenceEqual(input.PaymentInstructions)
                ) && base.Equals(input) && 
                (
                    this.PaymentLeadTimedays == input.PaymentLeadTimedays ||
                    (this.PaymentLeadTimedays != null &&
                    this.PaymentLeadTimedays.Equals(input.PaymentLeadTimedays))
                ) && base.Equals(input) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && base.Equals(input) && 
                (
                    this.PaySeparately == input.PaySeparately ||
                    (this.PaySeparately != null &&
                    this.PaySeparately.Equals(input.PaySeparately))
                ) && base.Equals(input) && 
                (
                    this.PrintOrders == input.PrintOrders ||
                    (this.PrintOrders != null &&
                    this.PrintOrders.Equals(input.PrintOrders))
                ) && base.Equals(input) && 
                (
                    this.ReceiptAction == input.ReceiptAction ||
                    (this.ReceiptAction != null &&
                    this.ReceiptAction.Equals(input.ReceiptAction))
                ) && base.Equals(input) && 
                (
                    this.ReceivingBranch == input.ReceivingBranch ||
                    (this.ReceivingBranch != null &&
                    this.ReceivingBranch.Equals(input.ReceivingBranch))
                ) && base.Equals(input) && 
                (
                    this.RemittanceAddressSameasMain == input.RemittanceAddressSameasMain ||
                    (this.RemittanceAddressSameasMain != null &&
                    this.RemittanceAddressSameasMain.Equals(input.RemittanceAddressSameasMain))
                ) && base.Equals(input) && 
                (
                    this.RemittanceContact == input.RemittanceContact ||
                    (this.RemittanceContact != null &&
                    this.RemittanceContact.Equals(input.RemittanceContact))
                ) && base.Equals(input) && 
                (
                    this.RemittanceContactSameasMain == input.RemittanceContactSameasMain ||
                    (this.RemittanceContactSameasMain != null &&
                    this.RemittanceContactSameasMain.Equals(input.RemittanceContactSameasMain))
                ) && base.Equals(input) && 
                (
                    this.SendOrdersbyEmail == input.SendOrdersbyEmail ||
                    (this.SendOrdersbyEmail != null &&
                    this.SendOrdersbyEmail.Equals(input.SendOrdersbyEmail))
                ) && base.Equals(input) && 
                (
                    this.ShippersContactSameasMain == input.ShippersContactSameasMain ||
                    (this.ShippersContactSameasMain != null &&
                    this.ShippersContactSameasMain.Equals(input.ShippersContactSameasMain))
                ) && base.Equals(input) && 
                (
                    this.ShippingAddressSameasMain == input.ShippingAddressSameasMain ||
                    (this.ShippingAddressSameasMain != null &&
                    this.ShippingAddressSameasMain.Equals(input.ShippingAddressSameasMain))
                ) && base.Equals(input) && 
                (
                    this.ShippingContact == input.ShippingContact ||
                    (this.ShippingContact != null &&
                    this.ShippingContact.Equals(input.ShippingContact))
                ) && base.Equals(input) && 
                (
                    this.ShippingTerms == input.ShippingTerms ||
                    (this.ShippingTerms != null &&
                    this.ShippingTerms.Equals(input.ShippingTerms))
                ) && base.Equals(input) && 
                (
                    this.ShipVia == input.ShipVia ||
                    (this.ShipVia != null &&
                    this.ShipVia.Equals(input.ShipVia))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TaxCalculationMode == input.TaxCalculationMode ||
                    (this.TaxCalculationMode != null &&
                    this.TaxCalculationMode.Equals(input.TaxCalculationMode))
                ) && base.Equals(input) && 
                (
                    this.TaxRegistrationID == input.TaxRegistrationID ||
                    (this.TaxRegistrationID != null &&
                    this.TaxRegistrationID.Equals(input.TaxRegistrationID))
                ) && base.Equals(input) && 
                (
                    this.TaxZone == input.TaxZone ||
                    (this.TaxZone != null &&
                    this.TaxZone.Equals(input.TaxZone))
                ) && base.Equals(input) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && base.Equals(input) && 
                (
                    this.ThresholdReceipt == input.ThresholdReceipt ||
                    (this.ThresholdReceipt != null &&
                    this.ThresholdReceipt.Equals(input.ThresholdReceipt))
                ) && base.Equals(input) && 
                (
                    this.VendorClass == input.VendorClass ||
                    (this.VendorClass != null &&
                    this.VendorClass.Equals(input.VendorClass))
                ) && base.Equals(input) && 
                (
                    this.VendorID == input.VendorID ||
                    (this.VendorID != null &&
                    this.VendorID.Equals(input.VendorID))
                ) && base.Equals(input) && 
                (
                    this.VendorIsLaborUnion == input.VendorIsLaborUnion ||
                    (this.VendorIsLaborUnion != null &&
                    this.VendorIsLaborUnion.Equals(input.VendorIsLaborUnion))
                ) && base.Equals(input) && 
                (
                    this.VendorIsTaxAgency == input.VendorIsTaxAgency ||
                    (this.VendorIsTaxAgency != null &&
                    this.VendorIsTaxAgency.Equals(input.VendorIsTaxAgency))
                ) && base.Equals(input) && 
                (
                    this.VendorName == input.VendorName ||
                    (this.VendorName != null &&
                    this.VendorName.Equals(input.VendorName))
                ) && base.Equals(input) && 
                (
                    this.Warehouse == input.Warehouse ||
                    (this.Warehouse != null &&
                    this.Warehouse.Equals(input.Warehouse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountRef != null)
                    hashCode = hashCode * 59 + this.AccountRef.GetHashCode();
                if (this.APAccount != null)
                    hashCode = hashCode * 59 + this.APAccount.GetHashCode();
                if (this.APSubaccount != null)
                    hashCode = hashCode * 59 + this.APSubaccount.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.CashAccount != null)
                    hashCode = hashCode * 59 + this.CashAccount.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CurrencyRateType != null)
                    hashCode = hashCode * 59 + this.CurrencyRateType.GetHashCode();
                if (this.EnableCurrencyOverride != null)
                    hashCode = hashCode * 59 + this.EnableCurrencyOverride.GetHashCode();
                if (this.EnableRateOverride != null)
                    hashCode = hashCode * 59 + this.EnableRateOverride.GetHashCode();
                if (this.F1099Box != null)
                    hashCode = hashCode * 59 + this.F1099Box.GetHashCode();
                if (this.F1099Vendor != null)
                    hashCode = hashCode * 59 + this.F1099Vendor.GetHashCode();
                if (this.FATCA != null)
                    hashCode = hashCode * 59 + this.FATCA.GetHashCode();
                if (this.FOBPoint != null)
                    hashCode = hashCode * 59 + this.FOBPoint.GetHashCode();
                if (this.ForeignEntity != null)
                    hashCode = hashCode * 59 + this.ForeignEntity.GetHashCode();
                if (this.LandedCostVendor != null)
                    hashCode = hashCode * 59 + this.LandedCostVendor.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.LeadTimedays != null)
                    hashCode = hashCode * 59 + this.LeadTimedays.GetHashCode();
                if (this.LocationName != null)
                    hashCode = hashCode * 59 + this.LocationName.GetHashCode();
                if (this.MainContact != null)
                    hashCode = hashCode * 59 + this.MainContact.GetHashCode();
                if (this.MaxReceipt != null)
                    hashCode = hashCode * 59 + this.MaxReceipt.GetHashCode();
                if (this.MinReceipt != null)
                    hashCode = hashCode * 59 + this.MinReceipt.GetHashCode();
                if (this.ParentAccount != null)
                    hashCode = hashCode * 59 + this.ParentAccount.GetHashCode();
                if (this.PaymentBy != null)
                    hashCode = hashCode * 59 + this.PaymentBy.GetHashCode();
                if (this.PaymentInstructions != null)
                    hashCode = hashCode * 59 + this.PaymentInstructions.GetHashCode();
                if (this.PaymentLeadTimedays != null)
                    hashCode = hashCode * 59 + this.PaymentLeadTimedays.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaySeparately != null)
                    hashCode = hashCode * 59 + this.PaySeparately.GetHashCode();
                if (this.PrintOrders != null)
                    hashCode = hashCode * 59 + this.PrintOrders.GetHashCode();
                if (this.ReceiptAction != null)
                    hashCode = hashCode * 59 + this.ReceiptAction.GetHashCode();
                if (this.ReceivingBranch != null)
                    hashCode = hashCode * 59 + this.ReceivingBranch.GetHashCode();
                if (this.RemittanceAddressSameasMain != null)
                    hashCode = hashCode * 59 + this.RemittanceAddressSameasMain.GetHashCode();
                if (this.RemittanceContact != null)
                    hashCode = hashCode * 59 + this.RemittanceContact.GetHashCode();
                if (this.RemittanceContactSameasMain != null)
                    hashCode = hashCode * 59 + this.RemittanceContactSameasMain.GetHashCode();
                if (this.SendOrdersbyEmail != null)
                    hashCode = hashCode * 59 + this.SendOrdersbyEmail.GetHashCode();
                if (this.ShippersContactSameasMain != null)
                    hashCode = hashCode * 59 + this.ShippersContactSameasMain.GetHashCode();
                if (this.ShippingAddressSameasMain != null)
                    hashCode = hashCode * 59 + this.ShippingAddressSameasMain.GetHashCode();
                if (this.ShippingContact != null)
                    hashCode = hashCode * 59 + this.ShippingContact.GetHashCode();
                if (this.ShippingTerms != null)
                    hashCode = hashCode * 59 + this.ShippingTerms.GetHashCode();
                if (this.ShipVia != null)
                    hashCode = hashCode * 59 + this.ShipVia.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaxCalculationMode != null)
                    hashCode = hashCode * 59 + this.TaxCalculationMode.GetHashCode();
                if (this.TaxRegistrationID != null)
                    hashCode = hashCode * 59 + this.TaxRegistrationID.GetHashCode();
                if (this.TaxZone != null)
                    hashCode = hashCode * 59 + this.TaxZone.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.ThresholdReceipt != null)
                    hashCode = hashCode * 59 + this.ThresholdReceipt.GetHashCode();
                if (this.VendorClass != null)
                    hashCode = hashCode * 59 + this.VendorClass.GetHashCode();
                if (this.VendorID != null)
                    hashCode = hashCode * 59 + this.VendorID.GetHashCode();
                if (this.VendorIsLaborUnion != null)
                    hashCode = hashCode * 59 + this.VendorIsLaborUnion.GetHashCode();
                if (this.VendorIsTaxAgency != null)
                    hashCode = hashCode * 59 + this.VendorIsTaxAgency.GetHashCode();
                if (this.VendorName != null)
                    hashCode = hashCode * 59 + this.VendorName.GetHashCode();
                if (this.Warehouse != null)
                    hashCode = hashCode * 59 + this.Warehouse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
