/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// InventoryAllocationRow
    /// </summary>
    [DataContract]
    public partial class InventoryAllocationRow : Entity,  IEquatable<InventoryAllocationRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryAllocationRow" /> class.
        /// </summary>
        /// <param name="allocationDate">allocationDate.</param>
        /// <param name="allocationType">allocationType.</param>
        /// <param name="docType">docType.</param>
        /// <param name="expired">expired.</param>
        /// <param name="location">location.</param>
        /// <param name="lotSerialNbr">lotSerialNbr.</param>
        /// <param name="module">module.</param>
        /// <param name="qty">qty.</param>
        public InventoryAllocationRow(DateTimeValue allocationDate = default(DateTimeValue), StringValue allocationType = default(StringValue), StringValue docType = default(StringValue), BooleanValue expired = default(BooleanValue), StringValue location = default(StringValue), StringValue lotSerialNbr = default(StringValue), StringValue module = default(StringValue), DecimalValue qty = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AllocationDate = allocationDate;
            this.AllocationType = allocationType;
            this.DocType = docType;
            this.Expired = expired;
            this.Location = location;
            this.LotSerialNbr = lotSerialNbr;
            this.Module = module;
            this.Qty = qty;
        }
        
        /// <summary>
        /// Gets or Sets AllocationDate
        /// </summary>
        [DataMember(Name="AllocationDate", EmitDefaultValue=false)]
        public DateTimeValue AllocationDate { get; set; }

        /// <summary>
        /// Gets or Sets AllocationType
        /// </summary>
        [DataMember(Name="AllocationType", EmitDefaultValue=false)]
        public StringValue AllocationType { get; set; }

        /// <summary>
        /// Gets or Sets DocType
        /// </summary>
        [DataMember(Name="DocType", EmitDefaultValue=false)]
        public StringValue DocType { get; set; }

        /// <summary>
        /// Gets or Sets Expired
        /// </summary>
        [DataMember(Name="Expired", EmitDefaultValue=false)]
        public BooleanValue Expired { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public StringValue Location { get; set; }

        /// <summary>
        /// Gets or Sets LotSerialNbr
        /// </summary>
        [DataMember(Name="LotSerialNbr", EmitDefaultValue=false)]
        public StringValue LotSerialNbr { get; set; }

        /// <summary>
        /// Gets or Sets Module
        /// </summary>
        [DataMember(Name="Module", EmitDefaultValue=false)]
        public StringValue Module { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="Qty", EmitDefaultValue=false)]
        public DecimalValue Qty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryAllocationRow {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AllocationDate: ").Append(AllocationDate).Append("\n");
            sb.Append("  AllocationType: ").Append(AllocationType).Append("\n");
            sb.Append("  DocType: ").Append(DocType).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LotSerialNbr: ").Append(LotSerialNbr).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryAllocationRow);
        }

        /// <summary>
        /// Returns true if InventoryAllocationRow instances are equal
        /// </summary>
        /// <param name="input">Instance of InventoryAllocationRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryAllocationRow input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AllocationDate == input.AllocationDate ||
                    (this.AllocationDate != null &&
                    this.AllocationDate.Equals(input.AllocationDate))
                ) && base.Equals(input) && 
                (
                    this.AllocationType == input.AllocationType ||
                    (this.AllocationType != null &&
                    this.AllocationType.Equals(input.AllocationType))
                ) && base.Equals(input) && 
                (
                    this.DocType == input.DocType ||
                    (this.DocType != null &&
                    this.DocType.Equals(input.DocType))
                ) && base.Equals(input) && 
                (
                    this.Expired == input.Expired ||
                    (this.Expired != null &&
                    this.Expired.Equals(input.Expired))
                ) && base.Equals(input) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && base.Equals(input) && 
                (
                    this.LotSerialNbr == input.LotSerialNbr ||
                    (this.LotSerialNbr != null &&
                    this.LotSerialNbr.Equals(input.LotSerialNbr))
                ) && base.Equals(input) && 
                (
                    this.Module == input.Module ||
                    (this.Module != null &&
                    this.Module.Equals(input.Module))
                ) && base.Equals(input) && 
                (
                    this.Qty == input.Qty ||
                    (this.Qty != null &&
                    this.Qty.Equals(input.Qty))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AllocationDate != null)
                    hashCode = hashCode * 59 + this.AllocationDate.GetHashCode();
                if (this.AllocationType != null)
                    hashCode = hashCode * 59 + this.AllocationType.GetHashCode();
                if (this.DocType != null)
                    hashCode = hashCode * 59 + this.DocType.GetHashCode();
                if (this.Expired != null)
                    hashCode = hashCode * 59 + this.Expired.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.LotSerialNbr != null)
                    hashCode = hashCode * 59 + this.LotSerialNbr.GetHashCode();
                if (this.Module != null)
                    hashCode = hashCode * 59 + this.Module.GetHashCode();
                if (this.Qty != null)
                    hashCode = hashCode * 59 + this.Qty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
