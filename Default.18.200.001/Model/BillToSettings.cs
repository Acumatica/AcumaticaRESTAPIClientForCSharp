/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// BillToSettings
    /// </summary>
    [DataContract]
    public partial class BillToSettings : Entity,  IEquatable<BillToSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BillToSettings" /> class.
        /// </summary>
        /// <param name="billToAddress">billToAddress.</param>
        /// <param name="billToAddressOverride">billToAddressOverride.</param>
        /// <param name="billToContact">billToContact.</param>
        /// <param name="billToContactOverride">billToContactOverride.</param>
        /// <param name="customerLocation">customerLocation.</param>
        public BillToSettings(Address billToAddress = default(Address), BooleanValue billToAddressOverride = default(BooleanValue), DocContact billToContact = default(DocContact), BooleanValue billToContactOverride = default(BooleanValue), StringValue customerLocation = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BillToAddress = billToAddress;
            this.BillToAddressOverride = billToAddressOverride;
            this.BillToContact = billToContact;
            this.BillToContactOverride = billToContactOverride;
            this.CustomerLocation = customerLocation;
        }
        
        /// <summary>
        /// Gets or Sets BillToAddress
        /// </summary>
        [DataMember(Name="BillToAddress", EmitDefaultValue=false)]
        public Address BillToAddress { get; set; }

        /// <summary>
        /// Gets or Sets BillToAddressOverride
        /// </summary>
        [DataMember(Name="BillToAddressOverride", EmitDefaultValue=false)]
        public BooleanValue BillToAddressOverride { get; set; }

        /// <summary>
        /// Gets or Sets BillToContact
        /// </summary>
        [DataMember(Name="BillToContact", EmitDefaultValue=false)]
        public DocContact BillToContact { get; set; }

        /// <summary>
        /// Gets or Sets BillToContactOverride
        /// </summary>
        [DataMember(Name="BillToContactOverride", EmitDefaultValue=false)]
        public BooleanValue BillToContactOverride { get; set; }

        /// <summary>
        /// Gets or Sets CustomerLocation
        /// </summary>
        [DataMember(Name="CustomerLocation", EmitDefaultValue=false)]
        public StringValue CustomerLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillToSettings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BillToAddress: ").Append(BillToAddress).Append("\n");
            sb.Append("  BillToAddressOverride: ").Append(BillToAddressOverride).Append("\n");
            sb.Append("  BillToContact: ").Append(BillToContact).Append("\n");
            sb.Append("  BillToContactOverride: ").Append(BillToContactOverride).Append("\n");
            sb.Append("  CustomerLocation: ").Append(CustomerLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillToSettings);
        }

        /// <summary>
        /// Returns true if BillToSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of BillToSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillToSettings input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BillToAddress == input.BillToAddress ||
                    (this.BillToAddress != null &&
                    this.BillToAddress.Equals(input.BillToAddress))
                ) && base.Equals(input) && 
                (
                    this.BillToAddressOverride == input.BillToAddressOverride ||
                    (this.BillToAddressOverride != null &&
                    this.BillToAddressOverride.Equals(input.BillToAddressOverride))
                ) && base.Equals(input) && 
                (
                    this.BillToContact == input.BillToContact ||
                    (this.BillToContact != null &&
                    this.BillToContact.Equals(input.BillToContact))
                ) && base.Equals(input) && 
                (
                    this.BillToContactOverride == input.BillToContactOverride ||
                    (this.BillToContactOverride != null &&
                    this.BillToContactOverride.Equals(input.BillToContactOverride))
                ) && base.Equals(input) && 
                (
                    this.CustomerLocation == input.CustomerLocation ||
                    (this.CustomerLocation != null &&
                    this.CustomerLocation.Equals(input.CustomerLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BillToAddress != null)
                    hashCode = hashCode * 59 + this.BillToAddress.GetHashCode();
                if (this.BillToAddressOverride != null)
                    hashCode = hashCode * 59 + this.BillToAddressOverride.GetHashCode();
                if (this.BillToContact != null)
                    hashCode = hashCode * 59 + this.BillToContact.GetHashCode();
                if (this.BillToContactOverride != null)
                    hashCode = hashCode * 59 + this.BillToContactOverride.GetHashCode();
                if (this.CustomerLocation != null)
                    hashCode = hashCode * 59 + this.CustomerLocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
