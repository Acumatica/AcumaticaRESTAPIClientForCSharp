/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// VisibilitySettings
    /// </summary>
    [DataContract]
    public partial class VisibilitySettings : Entity,  IEquatable<VisibilitySettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VisibilitySettings" /> class.
        /// </summary>
        /// <param name="aP">aP.</param>
        /// <param name="aR">aR.</param>
        /// <param name="cA">cA.</param>
        /// <param name="cRM">cRM.</param>
        /// <param name="expenses">expenses.</param>
        /// <param name="gL">gL.</param>
        /// <param name="iN">iN.</param>
        /// <param name="pO">pO.</param>
        /// <param name="sO">sO.</param>
        /// <param name="timeEntries">timeEntries.</param>
        public VisibilitySettings(BooleanValue aP = default(BooleanValue), BooleanValue aR = default(BooleanValue), BooleanValue cA = default(BooleanValue), BooleanValue cRM = default(BooleanValue), BooleanValue expenses = default(BooleanValue), BooleanValue gL = default(BooleanValue), BooleanValue iN = default(BooleanValue), BooleanValue pO = default(BooleanValue), BooleanValue sO = default(BooleanValue), BooleanValue timeEntries = default(BooleanValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AP = aP;
            this.AR = aR;
            this.CA = cA;
            this.CRM = cRM;
            this.Expenses = expenses;
            this.GL = gL;
            this.IN = iN;
            this.PO = pO;
            this.SO = sO;
            this.TimeEntries = timeEntries;
        }
        
        /// <summary>
        /// Gets or Sets AP
        /// </summary>
        [DataMember(Name="AP", EmitDefaultValue=false)]
        public BooleanValue AP { get; set; }

        /// <summary>
        /// Gets or Sets AR
        /// </summary>
        [DataMember(Name="AR", EmitDefaultValue=false)]
        public BooleanValue AR { get; set; }

        /// <summary>
        /// Gets or Sets CA
        /// </summary>
        [DataMember(Name="CA", EmitDefaultValue=false)]
        public BooleanValue CA { get; set; }

        /// <summary>
        /// Gets or Sets CRM
        /// </summary>
        [DataMember(Name="CRM", EmitDefaultValue=false)]
        public BooleanValue CRM { get; set; }

        /// <summary>
        /// Gets or Sets Expenses
        /// </summary>
        [DataMember(Name="Expenses", EmitDefaultValue=false)]
        public BooleanValue Expenses { get; set; }

        /// <summary>
        /// Gets or Sets GL
        /// </summary>
        [DataMember(Name="GL", EmitDefaultValue=false)]
        public BooleanValue GL { get; set; }

        /// <summary>
        /// Gets or Sets IN
        /// </summary>
        [DataMember(Name="IN", EmitDefaultValue=false)]
        public BooleanValue IN { get; set; }

        /// <summary>
        /// Gets or Sets PO
        /// </summary>
        [DataMember(Name="PO", EmitDefaultValue=false)]
        public BooleanValue PO { get; set; }

        /// <summary>
        /// Gets or Sets SO
        /// </summary>
        [DataMember(Name="SO", EmitDefaultValue=false)]
        public BooleanValue SO { get; set; }

        /// <summary>
        /// Gets or Sets TimeEntries
        /// </summary>
        [DataMember(Name="TimeEntries", EmitDefaultValue=false)]
        public BooleanValue TimeEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VisibilitySettings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AP: ").Append(AP).Append("\n");
            sb.Append("  AR: ").Append(AR).Append("\n");
            sb.Append("  CA: ").Append(CA).Append("\n");
            sb.Append("  CRM: ").Append(CRM).Append("\n");
            sb.Append("  Expenses: ").Append(Expenses).Append("\n");
            sb.Append("  GL: ").Append(GL).Append("\n");
            sb.Append("  IN: ").Append(IN).Append("\n");
            sb.Append("  PO: ").Append(PO).Append("\n");
            sb.Append("  SO: ").Append(SO).Append("\n");
            sb.Append("  TimeEntries: ").Append(TimeEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VisibilitySettings);
        }

        /// <summary>
        /// Returns true if VisibilitySettings instances are equal
        /// </summary>
        /// <param name="input">Instance of VisibilitySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VisibilitySettings input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AP == input.AP ||
                    (this.AP != null &&
                    this.AP.Equals(input.AP))
                ) && base.Equals(input) && 
                (
                    this.AR == input.AR ||
                    (this.AR != null &&
                    this.AR.Equals(input.AR))
                ) && base.Equals(input) && 
                (
                    this.CA == input.CA ||
                    (this.CA != null &&
                    this.CA.Equals(input.CA))
                ) && base.Equals(input) && 
                (
                    this.CRM == input.CRM ||
                    (this.CRM != null &&
                    this.CRM.Equals(input.CRM))
                ) && base.Equals(input) && 
                (
                    this.Expenses == input.Expenses ||
                    (this.Expenses != null &&
                    this.Expenses.Equals(input.Expenses))
                ) && base.Equals(input) && 
                (
                    this.GL == input.GL ||
                    (this.GL != null &&
                    this.GL.Equals(input.GL))
                ) && base.Equals(input) && 
                (
                    this.IN == input.IN ||
                    (this.IN != null &&
                    this.IN.Equals(input.IN))
                ) && base.Equals(input) && 
                (
                    this.PO == input.PO ||
                    (this.PO != null &&
                    this.PO.Equals(input.PO))
                ) && base.Equals(input) && 
                (
                    this.SO == input.SO ||
                    (this.SO != null &&
                    this.SO.Equals(input.SO))
                ) && base.Equals(input) && 
                (
                    this.TimeEntries == input.TimeEntries ||
                    (this.TimeEntries != null &&
                    this.TimeEntries.Equals(input.TimeEntries))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AP != null)
                    hashCode = hashCode * 59 + this.AP.GetHashCode();
                if (this.AR != null)
                    hashCode = hashCode * 59 + this.AR.GetHashCode();
                if (this.CA != null)
                    hashCode = hashCode * 59 + this.CA.GetHashCode();
                if (this.CRM != null)
                    hashCode = hashCode * 59 + this.CRM.GetHashCode();
                if (this.Expenses != null)
                    hashCode = hashCode * 59 + this.Expenses.GetHashCode();
                if (this.GL != null)
                    hashCode = hashCode * 59 + this.GL.GetHashCode();
                if (this.IN != null)
                    hashCode = hashCode * 59 + this.IN.GetHashCode();
                if (this.PO != null)
                    hashCode = hashCode * 59 + this.PO.GetHashCode();
                if (this.SO != null)
                    hashCode = hashCode * 59 + this.SO.GetHashCode();
                if (this.TimeEntries != null)
                    hashCode = hashCode * 59 + this.TimeEntries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
