/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// EmploymentHistoryRecord
    /// </summary>
    [DataContract]
    public partial class EmploymentHistoryRecord : Entity,  IEquatable<EmploymentHistoryRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmploymentHistoryRecord" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="lineNbr">lineNbr.</param>
        /// <param name="positionID">positionID.</param>
        /// <param name="rehireEligible">rehireEligible.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="startReason">startReason.</param>
        /// <param name="terminated">terminated.</param>
        /// <param name="terminationReason">terminationReason.</param>
        public EmploymentHistoryRecord(BooleanValue active = default(BooleanValue), DateTimeValue endDate = default(DateTimeValue), IntValue lineNbr = default(IntValue), StringValue positionID = default(StringValue), BooleanValue rehireEligible = default(BooleanValue), DateTimeValue startDate = default(DateTimeValue), StringValue startReason = default(StringValue), BooleanValue terminated = default(BooleanValue), StringValue terminationReason = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Active = active;
            this.EndDate = endDate;
            this.LineNbr = lineNbr;
            this.PositionID = positionID;
            this.RehireEligible = rehireEligible;
            this.StartDate = startDate;
            this.StartReason = startReason;
            this.Terminated = terminated;
            this.TerminationReason = terminationReason;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public BooleanValue Active { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="EndDate", EmitDefaultValue=false)]
        public DateTimeValue EndDate { get; set; }

        /// <summary>
        /// Gets or Sets LineNbr
        /// </summary>
        [DataMember(Name="LineNbr", EmitDefaultValue=false)]
        public IntValue LineNbr { get; set; }

        /// <summary>
        /// Gets or Sets PositionID
        /// </summary>
        [DataMember(Name="PositionID", EmitDefaultValue=false)]
        public StringValue PositionID { get; set; }

        /// <summary>
        /// Gets or Sets RehireEligible
        /// </summary>
        [DataMember(Name="RehireEligible", EmitDefaultValue=false)]
        public BooleanValue RehireEligible { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTimeValue StartDate { get; set; }

        /// <summary>
        /// Gets or Sets StartReason
        /// </summary>
        [DataMember(Name="StartReason", EmitDefaultValue=false)]
        public StringValue StartReason { get; set; }

        /// <summary>
        /// Gets or Sets Terminated
        /// </summary>
        [DataMember(Name="Terminated", EmitDefaultValue=false)]
        public BooleanValue Terminated { get; set; }

        /// <summary>
        /// Gets or Sets TerminationReason
        /// </summary>
        [DataMember(Name="TerminationReason", EmitDefaultValue=false)]
        public StringValue TerminationReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmploymentHistoryRecord {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  LineNbr: ").Append(LineNbr).Append("\n");
            sb.Append("  PositionID: ").Append(PositionID).Append("\n");
            sb.Append("  RehireEligible: ").Append(RehireEligible).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  StartReason: ").Append(StartReason).Append("\n");
            sb.Append("  Terminated: ").Append(Terminated).Append("\n");
            sb.Append("  TerminationReason: ").Append(TerminationReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmploymentHistoryRecord);
        }

        /// <summary>
        /// Returns true if EmploymentHistoryRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of EmploymentHistoryRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmploymentHistoryRecord input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && base.Equals(input) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && base.Equals(input) && 
                (
                    this.LineNbr == input.LineNbr ||
                    (this.LineNbr != null &&
                    this.LineNbr.Equals(input.LineNbr))
                ) && base.Equals(input) && 
                (
                    this.PositionID == input.PositionID ||
                    (this.PositionID != null &&
                    this.PositionID.Equals(input.PositionID))
                ) && base.Equals(input) && 
                (
                    this.RehireEligible == input.RehireEligible ||
                    (this.RehireEligible != null &&
                    this.RehireEligible.Equals(input.RehireEligible))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.StartReason == input.StartReason ||
                    (this.StartReason != null &&
                    this.StartReason.Equals(input.StartReason))
                ) && base.Equals(input) && 
                (
                    this.Terminated == input.Terminated ||
                    (this.Terminated != null &&
                    this.Terminated.Equals(input.Terminated))
                ) && base.Equals(input) && 
                (
                    this.TerminationReason == input.TerminationReason ||
                    (this.TerminationReason != null &&
                    this.TerminationReason.Equals(input.TerminationReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.LineNbr != null)
                    hashCode = hashCode * 59 + this.LineNbr.GetHashCode();
                if (this.PositionID != null)
                    hashCode = hashCode * 59 + this.PositionID.GetHashCode();
                if (this.RehireEligible != null)
                    hashCode = hashCode * 59 + this.RehireEligible.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.StartReason != null)
                    hashCode = hashCode * 59 + this.StartReason.GetHashCode();
                if (this.Terminated != null)
                    hashCode = hashCode * 59 + this.Terminated.GetHashCode();
                if (this.TerminationReason != null)
                    hashCode = hashCode * 59 + this.TerminationReason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
