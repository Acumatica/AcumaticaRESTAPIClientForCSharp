/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// ExpenseReceipt
    /// </summary>
    [DataContract]
    public partial class ExpenseReceipt : Entity,  IEquatable<ExpenseReceipt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseReceipt" /> class.
        /// </summary>
        /// <param name="branch">branch.</param>
        /// <param name="claimAmount">claimAmount.</param>
        /// <param name="claimedBy">claimedBy.</param>
        /// <param name="date">date.</param>
        /// <param name="expenseItemID">expenseItemID.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="receiptDetails">receiptDetails.</param>
        /// <param name="receiptID">receiptID.</param>
        /// <param name="status">status.</param>
        /// <param name="taxDetails">taxDetails.</param>
        /// <param name="taxTotal">taxTotal.</param>
        public ExpenseReceipt(StringValue branch = default(StringValue), DecimalValue claimAmount = default(DecimalValue), StringValue claimedBy = default(StringValue), DateTimeValue date = default(DateTimeValue), StringValue expenseItemID = default(StringValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), ExpenseReceiptDetails receiptDetails = default(ExpenseReceiptDetails), IntValue receiptID = default(IntValue), StringValue status = default(StringValue), List<ExpenseReceiptTaxDetails> taxDetails = default(List<ExpenseReceiptTaxDetails>), DecimalValue taxTotal = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Branch = branch;
            this.ClaimAmount = claimAmount;
            this.ClaimedBy = claimedBy;
            this.Date = date;
            this.ExpenseItemID = expenseItemID;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.ReceiptDetails = receiptDetails;
            this.ReceiptID = receiptID;
            this.Status = status;
            this.TaxDetails = taxDetails;
            this.TaxTotal = taxTotal;
        }
        
        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="Branch", EmitDefaultValue=false)]
        public StringValue Branch { get; set; }

        /// <summary>
        /// Gets or Sets ClaimAmount
        /// </summary>
        [DataMember(Name="ClaimAmount", EmitDefaultValue=false)]
        public DecimalValue ClaimAmount { get; set; }

        /// <summary>
        /// Gets or Sets ClaimedBy
        /// </summary>
        [DataMember(Name="ClaimedBy", EmitDefaultValue=false)]
        public StringValue ClaimedBy { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTimeValue Date { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseItemID
        /// </summary>
        [DataMember(Name="ExpenseItemID", EmitDefaultValue=false)]
        public StringValue ExpenseItemID { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptDetails
        /// </summary>
        [DataMember(Name="ReceiptDetails", EmitDefaultValue=false)]
        public ExpenseReceiptDetails ReceiptDetails { get; set; }

        /// <summary>
        /// Gets or Sets ReceiptID
        /// </summary>
        [DataMember(Name="ReceiptID", EmitDefaultValue=false)]
        public IntValue ReceiptID { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TaxDetails
        /// </summary>
        [DataMember(Name="TaxDetails", EmitDefaultValue=false)]
        public List<ExpenseReceiptTaxDetails> TaxDetails { get; set; }

        /// <summary>
        /// Gets or Sets TaxTotal
        /// </summary>
        [DataMember(Name="TaxTotal", EmitDefaultValue=false)]
        public DecimalValue TaxTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseReceipt {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  ClaimAmount: ").Append(ClaimAmount).Append("\n");
            sb.Append("  ClaimedBy: ").Append(ClaimedBy).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ExpenseItemID: ").Append(ExpenseItemID).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  ReceiptDetails: ").Append(ReceiptDetails).Append("\n");
            sb.Append("  ReceiptID: ").Append(ReceiptID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  TaxTotal: ").Append(TaxTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseReceipt);
        }

        /// <summary>
        /// Returns true if ExpenseReceipt instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseReceipt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseReceipt input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && base.Equals(input) && 
                (
                    this.ClaimAmount == input.ClaimAmount ||
                    (this.ClaimAmount != null &&
                    this.ClaimAmount.Equals(input.ClaimAmount))
                ) && base.Equals(input) && 
                (
                    this.ClaimedBy == input.ClaimedBy ||
                    (this.ClaimedBy != null &&
                    this.ClaimedBy.Equals(input.ClaimedBy))
                ) && base.Equals(input) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && base.Equals(input) && 
                (
                    this.ExpenseItemID == input.ExpenseItemID ||
                    (this.ExpenseItemID != null &&
                    this.ExpenseItemID.Equals(input.ExpenseItemID))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.ReceiptDetails == input.ReceiptDetails ||
                    (this.ReceiptDetails != null &&
                    this.ReceiptDetails.Equals(input.ReceiptDetails))
                ) && base.Equals(input) && 
                (
                    this.ReceiptID == input.ReceiptID ||
                    (this.ReceiptID != null &&
                    this.ReceiptID.Equals(input.ReceiptID))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    this.TaxDetails != null &&
                    this.TaxDetails.SequenceEqual(input.TaxDetails)
                ) && base.Equals(input) && 
                (
                    this.TaxTotal == input.TaxTotal ||
                    (this.TaxTotal != null &&
                    this.TaxTotal.Equals(input.TaxTotal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.ClaimAmount != null)
                    hashCode = hashCode * 59 + this.ClaimAmount.GetHashCode();
                if (this.ClaimedBy != null)
                    hashCode = hashCode * 59 + this.ClaimedBy.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.ExpenseItemID != null)
                    hashCode = hashCode * 59 + this.ExpenseItemID.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.ReceiptDetails != null)
                    hashCode = hashCode * 59 + this.ReceiptDetails.GetHashCode();
                if (this.ReceiptID != null)
                    hashCode = hashCode * 59 + this.ReceiptID.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                if (this.TaxTotal != null)
                    hashCode = hashCode * 59 + this.TaxTotal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
