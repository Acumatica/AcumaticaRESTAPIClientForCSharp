/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// LaborCostRate
    /// </summary>
    [DataContract]
    public partial class LaborCostRate : Entity,  IEquatable<LaborCostRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LaborCostRate" /> class.
        /// </summary>
        /// <param name="annualRate">annualRate.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="description">description.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="employeeID">employeeID.</param>
        /// <param name="employeeName">employeeName.</param>
        /// <param name="externalRefNbr">externalRefNbr.</param>
        /// <param name="hourlyRate">hourlyRate.</param>
        /// <param name="laborItem">laborItem.</param>
        /// <param name="laborRateType">laborRateType.</param>
        /// <param name="projectID">projectID.</param>
        /// <param name="projectTaskID">projectTaskID.</param>
        /// <param name="recordID">recordID.</param>
        /// <param name="regularHoursPerWeek">regularHoursPerWeek.</param>
        /// <param name="typeOfEmployment">typeOfEmployment.</param>
        /// <param name="unionLocalID">unionLocalID.</param>
        public LaborCostRate(DecimalValue annualRate = default(DecimalValue), StringValue currencyID = default(StringValue), StringValue description = default(StringValue), DateTimeValue effectiveDate = default(DateTimeValue), StringValue employeeID = default(StringValue), StringValue employeeName = default(StringValue), StringValue externalRefNbr = default(StringValue), DecimalValue hourlyRate = default(DecimalValue), StringValue laborItem = default(StringValue), StringValue laborRateType = default(StringValue), StringValue projectID = default(StringValue), StringValue projectTaskID = default(StringValue), IntValue recordID = default(IntValue), DecimalValue regularHoursPerWeek = default(DecimalValue), StringValue typeOfEmployment = default(StringValue), StringValue unionLocalID = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AnnualRate = annualRate;
            this.CurrencyID = currencyID;
            this.Description = description;
            this.EffectiveDate = effectiveDate;
            this.EmployeeID = employeeID;
            this.EmployeeName = employeeName;
            this.ExternalRefNbr = externalRefNbr;
            this.HourlyRate = hourlyRate;
            this.LaborItem = laborItem;
            this.LaborRateType = laborRateType;
            this.ProjectID = projectID;
            this.ProjectTaskID = projectTaskID;
            this.RecordID = recordID;
            this.RegularHoursPerWeek = regularHoursPerWeek;
            this.TypeOfEmployment = typeOfEmployment;
            this.UnionLocalID = unionLocalID;
        }
        
        /// <summary>
        /// Gets or Sets AnnualRate
        /// </summary>
        [DataMember(Name="AnnualRate", EmitDefaultValue=false)]
        public DecimalValue AnnualRate { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="EffectiveDate", EmitDefaultValue=false)]
        public DateTimeValue EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeID
        /// </summary>
        [DataMember(Name="EmployeeID", EmitDefaultValue=false)]
        public StringValue EmployeeID { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeName
        /// </summary>
        [DataMember(Name="EmployeeName", EmitDefaultValue=false)]
        public StringValue EmployeeName { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRefNbr
        /// </summary>
        [DataMember(Name="ExternalRefNbr", EmitDefaultValue=false)]
        public StringValue ExternalRefNbr { get; set; }

        /// <summary>
        /// Gets or Sets HourlyRate
        /// </summary>
        [DataMember(Name="HourlyRate", EmitDefaultValue=false)]
        public DecimalValue HourlyRate { get; set; }

        /// <summary>
        /// Gets or Sets LaborItem
        /// </summary>
        [DataMember(Name="LaborItem", EmitDefaultValue=false)]
        public StringValue LaborItem { get; set; }

        /// <summary>
        /// Gets or Sets LaborRateType
        /// </summary>
        [DataMember(Name="LaborRateType", EmitDefaultValue=false)]
        public StringValue LaborRateType { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="ProjectID", EmitDefaultValue=false)]
        public StringValue ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTaskID
        /// </summary>
        [DataMember(Name="ProjectTaskID", EmitDefaultValue=false)]
        public StringValue ProjectTaskID { get; set; }

        /// <summary>
        /// Gets or Sets RecordID
        /// </summary>
        [DataMember(Name="RecordID", EmitDefaultValue=false)]
        public IntValue RecordID { get; set; }

        /// <summary>
        /// Gets or Sets RegularHoursPerWeek
        /// </summary>
        [DataMember(Name="RegularHoursPerWeek", EmitDefaultValue=false)]
        public DecimalValue RegularHoursPerWeek { get; set; }

        /// <summary>
        /// Gets or Sets TypeOfEmployment
        /// </summary>
        [DataMember(Name="TypeOfEmployment", EmitDefaultValue=false)]
        public StringValue TypeOfEmployment { get; set; }

        /// <summary>
        /// Gets or Sets UnionLocalID
        /// </summary>
        [DataMember(Name="UnionLocalID", EmitDefaultValue=false)]
        public StringValue UnionLocalID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LaborCostRate {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AnnualRate: ").Append(AnnualRate).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EmployeeID: ").Append(EmployeeID).Append("\n");
            sb.Append("  EmployeeName: ").Append(EmployeeName).Append("\n");
            sb.Append("  ExternalRefNbr: ").Append(ExternalRefNbr).Append("\n");
            sb.Append("  HourlyRate: ").Append(HourlyRate).Append("\n");
            sb.Append("  LaborItem: ").Append(LaborItem).Append("\n");
            sb.Append("  LaborRateType: ").Append(LaborRateType).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  ProjectTaskID: ").Append(ProjectTaskID).Append("\n");
            sb.Append("  RecordID: ").Append(RecordID).Append("\n");
            sb.Append("  RegularHoursPerWeek: ").Append(RegularHoursPerWeek).Append("\n");
            sb.Append("  TypeOfEmployment: ").Append(TypeOfEmployment).Append("\n");
            sb.Append("  UnionLocalID: ").Append(UnionLocalID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LaborCostRate);
        }

        /// <summary>
        /// Returns true if LaborCostRate instances are equal
        /// </summary>
        /// <param name="input">Instance of LaborCostRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LaborCostRate input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AnnualRate == input.AnnualRate ||
                    (this.AnnualRate != null &&
                    this.AnnualRate.Equals(input.AnnualRate))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && base.Equals(input) && 
                (
                    this.EmployeeID == input.EmployeeID ||
                    (this.EmployeeID != null &&
                    this.EmployeeID.Equals(input.EmployeeID))
                ) && base.Equals(input) && 
                (
                    this.EmployeeName == input.EmployeeName ||
                    (this.EmployeeName != null &&
                    this.EmployeeName.Equals(input.EmployeeName))
                ) && base.Equals(input) && 
                (
                    this.ExternalRefNbr == input.ExternalRefNbr ||
                    (this.ExternalRefNbr != null &&
                    this.ExternalRefNbr.Equals(input.ExternalRefNbr))
                ) && base.Equals(input) && 
                (
                    this.HourlyRate == input.HourlyRate ||
                    (this.HourlyRate != null &&
                    this.HourlyRate.Equals(input.HourlyRate))
                ) && base.Equals(input) && 
                (
                    this.LaborItem == input.LaborItem ||
                    (this.LaborItem != null &&
                    this.LaborItem.Equals(input.LaborItem))
                ) && base.Equals(input) && 
                (
                    this.LaborRateType == input.LaborRateType ||
                    (this.LaborRateType != null &&
                    this.LaborRateType.Equals(input.LaborRateType))
                ) && base.Equals(input) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && base.Equals(input) && 
                (
                    this.ProjectTaskID == input.ProjectTaskID ||
                    (this.ProjectTaskID != null &&
                    this.ProjectTaskID.Equals(input.ProjectTaskID))
                ) && base.Equals(input) && 
                (
                    this.RecordID == input.RecordID ||
                    (this.RecordID != null &&
                    this.RecordID.Equals(input.RecordID))
                ) && base.Equals(input) && 
                (
                    this.RegularHoursPerWeek == input.RegularHoursPerWeek ||
                    (this.RegularHoursPerWeek != null &&
                    this.RegularHoursPerWeek.Equals(input.RegularHoursPerWeek))
                ) && base.Equals(input) && 
                (
                    this.TypeOfEmployment == input.TypeOfEmployment ||
                    (this.TypeOfEmployment != null &&
                    this.TypeOfEmployment.Equals(input.TypeOfEmployment))
                ) && base.Equals(input) && 
                (
                    this.UnionLocalID == input.UnionLocalID ||
                    (this.UnionLocalID != null &&
                    this.UnionLocalID.Equals(input.UnionLocalID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AnnualRate != null)
                    hashCode = hashCode * 59 + this.AnnualRate.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.EmployeeID != null)
                    hashCode = hashCode * 59 + this.EmployeeID.GetHashCode();
                if (this.EmployeeName != null)
                    hashCode = hashCode * 59 + this.EmployeeName.GetHashCode();
                if (this.ExternalRefNbr != null)
                    hashCode = hashCode * 59 + this.ExternalRefNbr.GetHashCode();
                if (this.HourlyRate != null)
                    hashCode = hashCode * 59 + this.HourlyRate.GetHashCode();
                if (this.LaborItem != null)
                    hashCode = hashCode * 59 + this.LaborItem.GetHashCode();
                if (this.LaborRateType != null)
                    hashCode = hashCode * 59 + this.LaborRateType.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.ProjectTaskID != null)
                    hashCode = hashCode * 59 + this.ProjectTaskID.GetHashCode();
                if (this.RecordID != null)
                    hashCode = hashCode * 59 + this.RecordID.GetHashCode();
                if (this.RegularHoursPerWeek != null)
                    hashCode = hashCode * 59 + this.RegularHoursPerWeek.GetHashCode();
                if (this.TypeOfEmployment != null)
                    hashCode = hashCode * 59 + this.TypeOfEmployment.GetHashCode();
                if (this.UnionLocalID != null)
                    hashCode = hashCode * 59 + this.UnionLocalID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
