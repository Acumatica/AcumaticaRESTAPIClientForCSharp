/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// ProjectBudget
    /// </summary>
    [DataContract]
    public partial class ProjectBudget : Entity,  IEquatable<ProjectBudget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectBudget" /> class.
        /// </summary>
        /// <param name="accountGroup">accountGroup.</param>
        /// <param name="actualAmount">actualAmount.</param>
        /// <param name="actualPlusOpenCommittedAmount">actualPlusOpenCommittedAmount.</param>
        /// <param name="actualQty">actualQty.</param>
        /// <param name="autoCompleted">autoCompleted.</param>
        /// <param name="budgetedCOAmount">budgetedCOAmount.</param>
        /// <param name="budgetedCOQty">budgetedCOQty.</param>
        /// <param name="committedCOAmount">committedCOAmount.</param>
        /// <param name="committedCOQty">committedCOQty.</param>
        /// <param name="committedInvoicedAmount">committedInvoicedAmount.</param>
        /// <param name="committedInvoicedQty">committedInvoicedQty.</param>
        /// <param name="committedOpenAmount">committedOpenAmount.</param>
        /// <param name="committedOpenQty">committedOpenQty.</param>
        /// <param name="committedReceivedQty">committedReceivedQty.</param>
        /// <param name="completed">completed.</param>
        /// <param name="costAtCompletion">costAtCompletion.</param>
        /// <param name="costCode">costCode.</param>
        /// <param name="costToComplete">costToComplete.</param>
        /// <param name="description">description.</param>
        /// <param name="draftInvoicesAmount">draftInvoicesAmount.</param>
        /// <param name="inventoryID">inventoryID.</param>
        /// <param name="lastCostAtCompletion">lastCostAtCompletion.</param>
        /// <param name="lastCostToComplete">lastCostToComplete.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="lastPercentageOfCompletion">lastPercentageOfCompletion.</param>
        /// <param name="originalBudgetedAmount">originalBudgetedAmount.</param>
        /// <param name="originalBudgetedQty">originalBudgetedQty.</param>
        /// <param name="originalCommittedAmount">originalCommittedAmount.</param>
        /// <param name="originalCommittedQty">originalCommittedQty.</param>
        /// <param name="pendingInvoiceAmount">pendingInvoiceAmount.</param>
        /// <param name="percentageOfCompletion">percentageOfCompletion.</param>
        /// <param name="performance">performance.</param>
        /// <param name="projectID">projectID.</param>
        /// <param name="projectTaskID">projectTaskID.</param>
        /// <param name="retainage">retainage.</param>
        /// <param name="revenueTask">revenueTask.</param>
        /// <param name="revisedBudgetedAmount">revisedBudgetedAmount.</param>
        /// <param name="revisedBudgetedQty">revisedBudgetedQty.</param>
        /// <param name="revisedCommittedAmount">revisedCommittedAmount.</param>
        /// <param name="revisedCommittedQty">revisedCommittedQty.</param>
        /// <param name="taxCategory">taxCategory.</param>
        /// <param name="type">type.</param>
        /// <param name="unitRate">unitRate.</param>
        /// <param name="uOM">uOM.</param>
        /// <param name="varianceAmount">varianceAmount.</param>
        public ProjectBudget(StringValue accountGroup = default(StringValue), DecimalValue actualAmount = default(DecimalValue), DecimalValue actualPlusOpenCommittedAmount = default(DecimalValue), DecimalValue actualQty = default(DecimalValue), BooleanValue autoCompleted = default(BooleanValue), DecimalValue budgetedCOAmount = default(DecimalValue), DecimalValue budgetedCOQty = default(DecimalValue), DecimalValue committedCOAmount = default(DecimalValue), DecimalValue committedCOQty = default(DecimalValue), DecimalValue committedInvoicedAmount = default(DecimalValue), DecimalValue committedInvoicedQty = default(DecimalValue), DecimalValue committedOpenAmount = default(DecimalValue), DecimalValue committedOpenQty = default(DecimalValue), DecimalValue committedReceivedQty = default(DecimalValue), DecimalValue completed = default(DecimalValue), DecimalValue costAtCompletion = default(DecimalValue), StringValue costCode = default(StringValue), DecimalValue costToComplete = default(DecimalValue), StringValue description = default(StringValue), DecimalValue draftInvoicesAmount = default(DecimalValue), StringValue inventoryID = default(StringValue), DecimalValue lastCostAtCompletion = default(DecimalValue), DecimalValue lastCostToComplete = default(DecimalValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), DecimalValue lastPercentageOfCompletion = default(DecimalValue), DecimalValue originalBudgetedAmount = default(DecimalValue), DecimalValue originalBudgetedQty = default(DecimalValue), DecimalValue originalCommittedAmount = default(DecimalValue), DecimalValue originalCommittedQty = default(DecimalValue), DecimalValue pendingInvoiceAmount = default(DecimalValue), DecimalValue percentageOfCompletion = default(DecimalValue), DecimalValue performance = default(DecimalValue), StringValue projectID = default(StringValue), StringValue projectTaskID = default(StringValue), DecimalValue retainage = default(DecimalValue), IntValue revenueTask = default(IntValue), DecimalValue revisedBudgetedAmount = default(DecimalValue), DecimalValue revisedBudgetedQty = default(DecimalValue), DecimalValue revisedCommittedAmount = default(DecimalValue), DecimalValue revisedCommittedQty = default(DecimalValue), StringValue taxCategory = default(StringValue), StringValue type = default(StringValue), DecimalValue unitRate = default(DecimalValue), StringValue uOM = default(StringValue), DecimalValue varianceAmount = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AccountGroup = accountGroup;
            this.ActualAmount = actualAmount;
            this.ActualPlusOpenCommittedAmount = actualPlusOpenCommittedAmount;
            this.ActualQty = actualQty;
            this.AutoCompleted = autoCompleted;
            this.BudgetedCOAmount = budgetedCOAmount;
            this.BudgetedCOQty = budgetedCOQty;
            this.CommittedCOAmount = committedCOAmount;
            this.CommittedCOQty = committedCOQty;
            this.CommittedInvoicedAmount = committedInvoicedAmount;
            this.CommittedInvoicedQty = committedInvoicedQty;
            this.CommittedOpenAmount = committedOpenAmount;
            this.CommittedOpenQty = committedOpenQty;
            this.CommittedReceivedQty = committedReceivedQty;
            this.Completed = completed;
            this.CostAtCompletion = costAtCompletion;
            this.CostCode = costCode;
            this.CostToComplete = costToComplete;
            this.Description = description;
            this.DraftInvoicesAmount = draftInvoicesAmount;
            this.InventoryID = inventoryID;
            this.LastCostAtCompletion = lastCostAtCompletion;
            this.LastCostToComplete = lastCostToComplete;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.LastPercentageOfCompletion = lastPercentageOfCompletion;
            this.OriginalBudgetedAmount = originalBudgetedAmount;
            this.OriginalBudgetedQty = originalBudgetedQty;
            this.OriginalCommittedAmount = originalCommittedAmount;
            this.OriginalCommittedQty = originalCommittedQty;
            this.PendingInvoiceAmount = pendingInvoiceAmount;
            this.PercentageOfCompletion = percentageOfCompletion;
            this.Performance = performance;
            this.ProjectID = projectID;
            this.ProjectTaskID = projectTaskID;
            this.Retainage = retainage;
            this.RevenueTask = revenueTask;
            this.RevisedBudgetedAmount = revisedBudgetedAmount;
            this.RevisedBudgetedQty = revisedBudgetedQty;
            this.RevisedCommittedAmount = revisedCommittedAmount;
            this.RevisedCommittedQty = revisedCommittedQty;
            this.TaxCategory = taxCategory;
            this.Type = type;
            this.UnitRate = unitRate;
            this.UOM = uOM;
            this.VarianceAmount = varianceAmount;
        }
        
        /// <summary>
        /// Gets or Sets AccountGroup
        /// </summary>
        [DataMember(Name="AccountGroup", EmitDefaultValue=false)]
        public StringValue AccountGroup { get; set; }

        /// <summary>
        /// Gets or Sets ActualAmount
        /// </summary>
        [DataMember(Name="ActualAmount", EmitDefaultValue=false)]
        public DecimalValue ActualAmount { get; set; }

        /// <summary>
        /// Gets or Sets ActualPlusOpenCommittedAmount
        /// </summary>
        [DataMember(Name="ActualPlusOpenCommittedAmount", EmitDefaultValue=false)]
        public DecimalValue ActualPlusOpenCommittedAmount { get; set; }

        /// <summary>
        /// Gets or Sets ActualQty
        /// </summary>
        [DataMember(Name="ActualQty", EmitDefaultValue=false)]
        public DecimalValue ActualQty { get; set; }

        /// <summary>
        /// Gets or Sets AutoCompleted
        /// </summary>
        [DataMember(Name="AutoCompleted", EmitDefaultValue=false)]
        public BooleanValue AutoCompleted { get; set; }

        /// <summary>
        /// Gets or Sets BudgetedCOAmount
        /// </summary>
        [DataMember(Name="BudgetedCOAmount", EmitDefaultValue=false)]
        public DecimalValue BudgetedCOAmount { get; set; }

        /// <summary>
        /// Gets or Sets BudgetedCOQty
        /// </summary>
        [DataMember(Name="BudgetedCOQty", EmitDefaultValue=false)]
        public DecimalValue BudgetedCOQty { get; set; }

        /// <summary>
        /// Gets or Sets CommittedCOAmount
        /// </summary>
        [DataMember(Name="CommittedCOAmount", EmitDefaultValue=false)]
        public DecimalValue CommittedCOAmount { get; set; }

        /// <summary>
        /// Gets or Sets CommittedCOQty
        /// </summary>
        [DataMember(Name="CommittedCOQty", EmitDefaultValue=false)]
        public DecimalValue CommittedCOQty { get; set; }

        /// <summary>
        /// Gets or Sets CommittedInvoicedAmount
        /// </summary>
        [DataMember(Name="CommittedInvoicedAmount", EmitDefaultValue=false)]
        public DecimalValue CommittedInvoicedAmount { get; set; }

        /// <summary>
        /// Gets or Sets CommittedInvoicedQty
        /// </summary>
        [DataMember(Name="CommittedInvoicedQty", EmitDefaultValue=false)]
        public DecimalValue CommittedInvoicedQty { get; set; }

        /// <summary>
        /// Gets or Sets CommittedOpenAmount
        /// </summary>
        [DataMember(Name="CommittedOpenAmount", EmitDefaultValue=false)]
        public DecimalValue CommittedOpenAmount { get; set; }

        /// <summary>
        /// Gets or Sets CommittedOpenQty
        /// </summary>
        [DataMember(Name="CommittedOpenQty", EmitDefaultValue=false)]
        public DecimalValue CommittedOpenQty { get; set; }

        /// <summary>
        /// Gets or Sets CommittedReceivedQty
        /// </summary>
        [DataMember(Name="CommittedReceivedQty", EmitDefaultValue=false)]
        public DecimalValue CommittedReceivedQty { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name="Completed", EmitDefaultValue=false)]
        public DecimalValue Completed { get; set; }

        /// <summary>
        /// Gets or Sets CostAtCompletion
        /// </summary>
        [DataMember(Name="CostAtCompletion", EmitDefaultValue=false)]
        public DecimalValue CostAtCompletion { get; set; }

        /// <summary>
        /// Gets or Sets CostCode
        /// </summary>
        [DataMember(Name="CostCode", EmitDefaultValue=false)]
        public StringValue CostCode { get; set; }

        /// <summary>
        /// Gets or Sets CostToComplete
        /// </summary>
        [DataMember(Name="CostToComplete", EmitDefaultValue=false)]
        public DecimalValue CostToComplete { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets DraftInvoicesAmount
        /// </summary>
        [DataMember(Name="DraftInvoicesAmount", EmitDefaultValue=false)]
        public DecimalValue DraftInvoicesAmount { get; set; }

        /// <summary>
        /// Gets or Sets InventoryID
        /// </summary>
        [DataMember(Name="InventoryID", EmitDefaultValue=false)]
        public StringValue InventoryID { get; set; }

        /// <summary>
        /// Gets or Sets LastCostAtCompletion
        /// </summary>
        [DataMember(Name="LastCostAtCompletion", EmitDefaultValue=false)]
        public DecimalValue LastCostAtCompletion { get; set; }

        /// <summary>
        /// Gets or Sets LastCostToComplete
        /// </summary>
        [DataMember(Name="LastCostToComplete", EmitDefaultValue=false)]
        public DecimalValue LastCostToComplete { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LastPercentageOfCompletion
        /// </summary>
        [DataMember(Name="LastPercentageOfCompletion", EmitDefaultValue=false)]
        public DecimalValue LastPercentageOfCompletion { get; set; }

        /// <summary>
        /// Gets or Sets OriginalBudgetedAmount
        /// </summary>
        [DataMember(Name="OriginalBudgetedAmount", EmitDefaultValue=false)]
        public DecimalValue OriginalBudgetedAmount { get; set; }

        /// <summary>
        /// Gets or Sets OriginalBudgetedQty
        /// </summary>
        [DataMember(Name="OriginalBudgetedQty", EmitDefaultValue=false)]
        public DecimalValue OriginalBudgetedQty { get; set; }

        /// <summary>
        /// Gets or Sets OriginalCommittedAmount
        /// </summary>
        [DataMember(Name="OriginalCommittedAmount", EmitDefaultValue=false)]
        public DecimalValue OriginalCommittedAmount { get; set; }

        /// <summary>
        /// Gets or Sets OriginalCommittedQty
        /// </summary>
        [DataMember(Name="OriginalCommittedQty", EmitDefaultValue=false)]
        public DecimalValue OriginalCommittedQty { get; set; }

        /// <summary>
        /// Gets or Sets PendingInvoiceAmount
        /// </summary>
        [DataMember(Name="PendingInvoiceAmount", EmitDefaultValue=false)]
        public DecimalValue PendingInvoiceAmount { get; set; }

        /// <summary>
        /// Gets or Sets PercentageOfCompletion
        /// </summary>
        [DataMember(Name="PercentageOfCompletion", EmitDefaultValue=false)]
        public DecimalValue PercentageOfCompletion { get; set; }

        /// <summary>
        /// Gets or Sets Performance
        /// </summary>
        [DataMember(Name="Performance", EmitDefaultValue=false)]
        public DecimalValue Performance { get; set; }

        /// <summary>
        /// Gets or Sets ProjectID
        /// </summary>
        [DataMember(Name="ProjectID", EmitDefaultValue=false)]
        public StringValue ProjectID { get; set; }

        /// <summary>
        /// Gets or Sets ProjectTaskID
        /// </summary>
        [DataMember(Name="ProjectTaskID", EmitDefaultValue=false)]
        public StringValue ProjectTaskID { get; set; }

        /// <summary>
        /// Gets or Sets Retainage
        /// </summary>
        [DataMember(Name="Retainage", EmitDefaultValue=false)]
        public DecimalValue Retainage { get; set; }

        /// <summary>
        /// Gets or Sets RevenueTask
        /// </summary>
        [DataMember(Name="RevenueTask", EmitDefaultValue=false)]
        public IntValue RevenueTask { get; set; }

        /// <summary>
        /// Gets or Sets RevisedBudgetedAmount
        /// </summary>
        [DataMember(Name="RevisedBudgetedAmount", EmitDefaultValue=false)]
        public DecimalValue RevisedBudgetedAmount { get; set; }

        /// <summary>
        /// Gets or Sets RevisedBudgetedQty
        /// </summary>
        [DataMember(Name="RevisedBudgetedQty", EmitDefaultValue=false)]
        public DecimalValue RevisedBudgetedQty { get; set; }

        /// <summary>
        /// Gets or Sets RevisedCommittedAmount
        /// </summary>
        [DataMember(Name="RevisedCommittedAmount", EmitDefaultValue=false)]
        public DecimalValue RevisedCommittedAmount { get; set; }

        /// <summary>
        /// Gets or Sets RevisedCommittedQty
        /// </summary>
        [DataMember(Name="RevisedCommittedQty", EmitDefaultValue=false)]
        public DecimalValue RevisedCommittedQty { get; set; }

        /// <summary>
        /// Gets or Sets TaxCategory
        /// </summary>
        [DataMember(Name="TaxCategory", EmitDefaultValue=false)]
        public StringValue TaxCategory { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public StringValue Type { get; set; }

        /// <summary>
        /// Gets or Sets UnitRate
        /// </summary>
        [DataMember(Name="UnitRate", EmitDefaultValue=false)]
        public DecimalValue UnitRate { get; set; }

        /// <summary>
        /// Gets or Sets UOM
        /// </summary>
        [DataMember(Name="UOM", EmitDefaultValue=false)]
        public StringValue UOM { get; set; }

        /// <summary>
        /// Gets or Sets VarianceAmount
        /// </summary>
        [DataMember(Name="VarianceAmount", EmitDefaultValue=false)]
        public DecimalValue VarianceAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectBudget {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountGroup: ").Append(AccountGroup).Append("\n");
            sb.Append("  ActualAmount: ").Append(ActualAmount).Append("\n");
            sb.Append("  ActualPlusOpenCommittedAmount: ").Append(ActualPlusOpenCommittedAmount).Append("\n");
            sb.Append("  ActualQty: ").Append(ActualQty).Append("\n");
            sb.Append("  AutoCompleted: ").Append(AutoCompleted).Append("\n");
            sb.Append("  BudgetedCOAmount: ").Append(BudgetedCOAmount).Append("\n");
            sb.Append("  BudgetedCOQty: ").Append(BudgetedCOQty).Append("\n");
            sb.Append("  CommittedCOAmount: ").Append(CommittedCOAmount).Append("\n");
            sb.Append("  CommittedCOQty: ").Append(CommittedCOQty).Append("\n");
            sb.Append("  CommittedInvoicedAmount: ").Append(CommittedInvoicedAmount).Append("\n");
            sb.Append("  CommittedInvoicedQty: ").Append(CommittedInvoicedQty).Append("\n");
            sb.Append("  CommittedOpenAmount: ").Append(CommittedOpenAmount).Append("\n");
            sb.Append("  CommittedOpenQty: ").Append(CommittedOpenQty).Append("\n");
            sb.Append("  CommittedReceivedQty: ").Append(CommittedReceivedQty).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  CostAtCompletion: ").Append(CostAtCompletion).Append("\n");
            sb.Append("  CostCode: ").Append(CostCode).Append("\n");
            sb.Append("  CostToComplete: ").Append(CostToComplete).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DraftInvoicesAmount: ").Append(DraftInvoicesAmount).Append("\n");
            sb.Append("  InventoryID: ").Append(InventoryID).Append("\n");
            sb.Append("  LastCostAtCompletion: ").Append(LastCostAtCompletion).Append("\n");
            sb.Append("  LastCostToComplete: ").Append(LastCostToComplete).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LastPercentageOfCompletion: ").Append(LastPercentageOfCompletion).Append("\n");
            sb.Append("  OriginalBudgetedAmount: ").Append(OriginalBudgetedAmount).Append("\n");
            sb.Append("  OriginalBudgetedQty: ").Append(OriginalBudgetedQty).Append("\n");
            sb.Append("  OriginalCommittedAmount: ").Append(OriginalCommittedAmount).Append("\n");
            sb.Append("  OriginalCommittedQty: ").Append(OriginalCommittedQty).Append("\n");
            sb.Append("  PendingInvoiceAmount: ").Append(PendingInvoiceAmount).Append("\n");
            sb.Append("  PercentageOfCompletion: ").Append(PercentageOfCompletion).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  ProjectTaskID: ").Append(ProjectTaskID).Append("\n");
            sb.Append("  Retainage: ").Append(Retainage).Append("\n");
            sb.Append("  RevenueTask: ").Append(RevenueTask).Append("\n");
            sb.Append("  RevisedBudgetedAmount: ").Append(RevisedBudgetedAmount).Append("\n");
            sb.Append("  RevisedBudgetedQty: ").Append(RevisedBudgetedQty).Append("\n");
            sb.Append("  RevisedCommittedAmount: ").Append(RevisedCommittedAmount).Append("\n");
            sb.Append("  RevisedCommittedQty: ").Append(RevisedCommittedQty).Append("\n");
            sb.Append("  TaxCategory: ").Append(TaxCategory).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitRate: ").Append(UnitRate).Append("\n");
            sb.Append("  UOM: ").Append(UOM).Append("\n");
            sb.Append("  VarianceAmount: ").Append(VarianceAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProjectBudget);
        }

        /// <summary>
        /// Returns true if ProjectBudget instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectBudget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectBudget input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AccountGroup == input.AccountGroup ||
                    (this.AccountGroup != null &&
                    this.AccountGroup.Equals(input.AccountGroup))
                ) && base.Equals(input) && 
                (
                    this.ActualAmount == input.ActualAmount ||
                    (this.ActualAmount != null &&
                    this.ActualAmount.Equals(input.ActualAmount))
                ) && base.Equals(input) && 
                (
                    this.ActualPlusOpenCommittedAmount == input.ActualPlusOpenCommittedAmount ||
                    (this.ActualPlusOpenCommittedAmount != null &&
                    this.ActualPlusOpenCommittedAmount.Equals(input.ActualPlusOpenCommittedAmount))
                ) && base.Equals(input) && 
                (
                    this.ActualQty == input.ActualQty ||
                    (this.ActualQty != null &&
                    this.ActualQty.Equals(input.ActualQty))
                ) && base.Equals(input) && 
                (
                    this.AutoCompleted == input.AutoCompleted ||
                    (this.AutoCompleted != null &&
                    this.AutoCompleted.Equals(input.AutoCompleted))
                ) && base.Equals(input) && 
                (
                    this.BudgetedCOAmount == input.BudgetedCOAmount ||
                    (this.BudgetedCOAmount != null &&
                    this.BudgetedCOAmount.Equals(input.BudgetedCOAmount))
                ) && base.Equals(input) && 
                (
                    this.BudgetedCOQty == input.BudgetedCOQty ||
                    (this.BudgetedCOQty != null &&
                    this.BudgetedCOQty.Equals(input.BudgetedCOQty))
                ) && base.Equals(input) && 
                (
                    this.CommittedCOAmount == input.CommittedCOAmount ||
                    (this.CommittedCOAmount != null &&
                    this.CommittedCOAmount.Equals(input.CommittedCOAmount))
                ) && base.Equals(input) && 
                (
                    this.CommittedCOQty == input.CommittedCOQty ||
                    (this.CommittedCOQty != null &&
                    this.CommittedCOQty.Equals(input.CommittedCOQty))
                ) && base.Equals(input) && 
                (
                    this.CommittedInvoicedAmount == input.CommittedInvoicedAmount ||
                    (this.CommittedInvoicedAmount != null &&
                    this.CommittedInvoicedAmount.Equals(input.CommittedInvoicedAmount))
                ) && base.Equals(input) && 
                (
                    this.CommittedInvoicedQty == input.CommittedInvoicedQty ||
                    (this.CommittedInvoicedQty != null &&
                    this.CommittedInvoicedQty.Equals(input.CommittedInvoicedQty))
                ) && base.Equals(input) && 
                (
                    this.CommittedOpenAmount == input.CommittedOpenAmount ||
                    (this.CommittedOpenAmount != null &&
                    this.CommittedOpenAmount.Equals(input.CommittedOpenAmount))
                ) && base.Equals(input) && 
                (
                    this.CommittedOpenQty == input.CommittedOpenQty ||
                    (this.CommittedOpenQty != null &&
                    this.CommittedOpenQty.Equals(input.CommittedOpenQty))
                ) && base.Equals(input) && 
                (
                    this.CommittedReceivedQty == input.CommittedReceivedQty ||
                    (this.CommittedReceivedQty != null &&
                    this.CommittedReceivedQty.Equals(input.CommittedReceivedQty))
                ) && base.Equals(input) && 
                (
                    this.Completed == input.Completed ||
                    (this.Completed != null &&
                    this.Completed.Equals(input.Completed))
                ) && base.Equals(input) && 
                (
                    this.CostAtCompletion == input.CostAtCompletion ||
                    (this.CostAtCompletion != null &&
                    this.CostAtCompletion.Equals(input.CostAtCompletion))
                ) && base.Equals(input) && 
                (
                    this.CostCode == input.CostCode ||
                    (this.CostCode != null &&
                    this.CostCode.Equals(input.CostCode))
                ) && base.Equals(input) && 
                (
                    this.CostToComplete == input.CostToComplete ||
                    (this.CostToComplete != null &&
                    this.CostToComplete.Equals(input.CostToComplete))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.DraftInvoicesAmount == input.DraftInvoicesAmount ||
                    (this.DraftInvoicesAmount != null &&
                    this.DraftInvoicesAmount.Equals(input.DraftInvoicesAmount))
                ) && base.Equals(input) && 
                (
                    this.InventoryID == input.InventoryID ||
                    (this.InventoryID != null &&
                    this.InventoryID.Equals(input.InventoryID))
                ) && base.Equals(input) && 
                (
                    this.LastCostAtCompletion == input.LastCostAtCompletion ||
                    (this.LastCostAtCompletion != null &&
                    this.LastCostAtCompletion.Equals(input.LastCostAtCompletion))
                ) && base.Equals(input) && 
                (
                    this.LastCostToComplete == input.LastCostToComplete ||
                    (this.LastCostToComplete != null &&
                    this.LastCostToComplete.Equals(input.LastCostToComplete))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.LastPercentageOfCompletion == input.LastPercentageOfCompletion ||
                    (this.LastPercentageOfCompletion != null &&
                    this.LastPercentageOfCompletion.Equals(input.LastPercentageOfCompletion))
                ) && base.Equals(input) && 
                (
                    this.OriginalBudgetedAmount == input.OriginalBudgetedAmount ||
                    (this.OriginalBudgetedAmount != null &&
                    this.OriginalBudgetedAmount.Equals(input.OriginalBudgetedAmount))
                ) && base.Equals(input) && 
                (
                    this.OriginalBudgetedQty == input.OriginalBudgetedQty ||
                    (this.OriginalBudgetedQty != null &&
                    this.OriginalBudgetedQty.Equals(input.OriginalBudgetedQty))
                ) && base.Equals(input) && 
                (
                    this.OriginalCommittedAmount == input.OriginalCommittedAmount ||
                    (this.OriginalCommittedAmount != null &&
                    this.OriginalCommittedAmount.Equals(input.OriginalCommittedAmount))
                ) && base.Equals(input) && 
                (
                    this.OriginalCommittedQty == input.OriginalCommittedQty ||
                    (this.OriginalCommittedQty != null &&
                    this.OriginalCommittedQty.Equals(input.OriginalCommittedQty))
                ) && base.Equals(input) && 
                (
                    this.PendingInvoiceAmount == input.PendingInvoiceAmount ||
                    (this.PendingInvoiceAmount != null &&
                    this.PendingInvoiceAmount.Equals(input.PendingInvoiceAmount))
                ) && base.Equals(input) && 
                (
                    this.PercentageOfCompletion == input.PercentageOfCompletion ||
                    (this.PercentageOfCompletion != null &&
                    this.PercentageOfCompletion.Equals(input.PercentageOfCompletion))
                ) && base.Equals(input) && 
                (
                    this.Performance == input.Performance ||
                    (this.Performance != null &&
                    this.Performance.Equals(input.Performance))
                ) && base.Equals(input) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && base.Equals(input) && 
                (
                    this.ProjectTaskID == input.ProjectTaskID ||
                    (this.ProjectTaskID != null &&
                    this.ProjectTaskID.Equals(input.ProjectTaskID))
                ) && base.Equals(input) && 
                (
                    this.Retainage == input.Retainage ||
                    (this.Retainage != null &&
                    this.Retainage.Equals(input.Retainage))
                ) && base.Equals(input) && 
                (
                    this.RevenueTask == input.RevenueTask ||
                    (this.RevenueTask != null &&
                    this.RevenueTask.Equals(input.RevenueTask))
                ) && base.Equals(input) && 
                (
                    this.RevisedBudgetedAmount == input.RevisedBudgetedAmount ||
                    (this.RevisedBudgetedAmount != null &&
                    this.RevisedBudgetedAmount.Equals(input.RevisedBudgetedAmount))
                ) && base.Equals(input) && 
                (
                    this.RevisedBudgetedQty == input.RevisedBudgetedQty ||
                    (this.RevisedBudgetedQty != null &&
                    this.RevisedBudgetedQty.Equals(input.RevisedBudgetedQty))
                ) && base.Equals(input) && 
                (
                    this.RevisedCommittedAmount == input.RevisedCommittedAmount ||
                    (this.RevisedCommittedAmount != null &&
                    this.RevisedCommittedAmount.Equals(input.RevisedCommittedAmount))
                ) && base.Equals(input) && 
                (
                    this.RevisedCommittedQty == input.RevisedCommittedQty ||
                    (this.RevisedCommittedQty != null &&
                    this.RevisedCommittedQty.Equals(input.RevisedCommittedQty))
                ) && base.Equals(input) && 
                (
                    this.TaxCategory == input.TaxCategory ||
                    (this.TaxCategory != null &&
                    this.TaxCategory.Equals(input.TaxCategory))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.UnitRate == input.UnitRate ||
                    (this.UnitRate != null &&
                    this.UnitRate.Equals(input.UnitRate))
                ) && base.Equals(input) && 
                (
                    this.UOM == input.UOM ||
                    (this.UOM != null &&
                    this.UOM.Equals(input.UOM))
                ) && base.Equals(input) && 
                (
                    this.VarianceAmount == input.VarianceAmount ||
                    (this.VarianceAmount != null &&
                    this.VarianceAmount.Equals(input.VarianceAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountGroup != null)
                    hashCode = hashCode * 59 + this.AccountGroup.GetHashCode();
                if (this.ActualAmount != null)
                    hashCode = hashCode * 59 + this.ActualAmount.GetHashCode();
                if (this.ActualPlusOpenCommittedAmount != null)
                    hashCode = hashCode * 59 + this.ActualPlusOpenCommittedAmount.GetHashCode();
                if (this.ActualQty != null)
                    hashCode = hashCode * 59 + this.ActualQty.GetHashCode();
                if (this.AutoCompleted != null)
                    hashCode = hashCode * 59 + this.AutoCompleted.GetHashCode();
                if (this.BudgetedCOAmount != null)
                    hashCode = hashCode * 59 + this.BudgetedCOAmount.GetHashCode();
                if (this.BudgetedCOQty != null)
                    hashCode = hashCode * 59 + this.BudgetedCOQty.GetHashCode();
                if (this.CommittedCOAmount != null)
                    hashCode = hashCode * 59 + this.CommittedCOAmount.GetHashCode();
                if (this.CommittedCOQty != null)
                    hashCode = hashCode * 59 + this.CommittedCOQty.GetHashCode();
                if (this.CommittedInvoicedAmount != null)
                    hashCode = hashCode * 59 + this.CommittedInvoicedAmount.GetHashCode();
                if (this.CommittedInvoicedQty != null)
                    hashCode = hashCode * 59 + this.CommittedInvoicedQty.GetHashCode();
                if (this.CommittedOpenAmount != null)
                    hashCode = hashCode * 59 + this.CommittedOpenAmount.GetHashCode();
                if (this.CommittedOpenQty != null)
                    hashCode = hashCode * 59 + this.CommittedOpenQty.GetHashCode();
                if (this.CommittedReceivedQty != null)
                    hashCode = hashCode * 59 + this.CommittedReceivedQty.GetHashCode();
                if (this.Completed != null)
                    hashCode = hashCode * 59 + this.Completed.GetHashCode();
                if (this.CostAtCompletion != null)
                    hashCode = hashCode * 59 + this.CostAtCompletion.GetHashCode();
                if (this.CostCode != null)
                    hashCode = hashCode * 59 + this.CostCode.GetHashCode();
                if (this.CostToComplete != null)
                    hashCode = hashCode * 59 + this.CostToComplete.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DraftInvoicesAmount != null)
                    hashCode = hashCode * 59 + this.DraftInvoicesAmount.GetHashCode();
                if (this.InventoryID != null)
                    hashCode = hashCode * 59 + this.InventoryID.GetHashCode();
                if (this.LastCostAtCompletion != null)
                    hashCode = hashCode * 59 + this.LastCostAtCompletion.GetHashCode();
                if (this.LastCostToComplete != null)
                    hashCode = hashCode * 59 + this.LastCostToComplete.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.LastPercentageOfCompletion != null)
                    hashCode = hashCode * 59 + this.LastPercentageOfCompletion.GetHashCode();
                if (this.OriginalBudgetedAmount != null)
                    hashCode = hashCode * 59 + this.OriginalBudgetedAmount.GetHashCode();
                if (this.OriginalBudgetedQty != null)
                    hashCode = hashCode * 59 + this.OriginalBudgetedQty.GetHashCode();
                if (this.OriginalCommittedAmount != null)
                    hashCode = hashCode * 59 + this.OriginalCommittedAmount.GetHashCode();
                if (this.OriginalCommittedQty != null)
                    hashCode = hashCode * 59 + this.OriginalCommittedQty.GetHashCode();
                if (this.PendingInvoiceAmount != null)
                    hashCode = hashCode * 59 + this.PendingInvoiceAmount.GetHashCode();
                if (this.PercentageOfCompletion != null)
                    hashCode = hashCode * 59 + this.PercentageOfCompletion.GetHashCode();
                if (this.Performance != null)
                    hashCode = hashCode * 59 + this.Performance.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.ProjectTaskID != null)
                    hashCode = hashCode * 59 + this.ProjectTaskID.GetHashCode();
                if (this.Retainage != null)
                    hashCode = hashCode * 59 + this.Retainage.GetHashCode();
                if (this.RevenueTask != null)
                    hashCode = hashCode * 59 + this.RevenueTask.GetHashCode();
                if (this.RevisedBudgetedAmount != null)
                    hashCode = hashCode * 59 + this.RevisedBudgetedAmount.GetHashCode();
                if (this.RevisedBudgetedQty != null)
                    hashCode = hashCode * 59 + this.RevisedBudgetedQty.GetHashCode();
                if (this.RevisedCommittedAmount != null)
                    hashCode = hashCode * 59 + this.RevisedCommittedAmount.GetHashCode();
                if (this.RevisedCommittedQty != null)
                    hashCode = hashCode * 59 + this.RevisedCommittedQty.GetHashCode();
                if (this.TaxCategory != null)
                    hashCode = hashCode * 59 + this.TaxCategory.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UnitRate != null)
                    hashCode = hashCode * 59 + this.UnitRate.GetHashCode();
                if (this.UOM != null)
                    hashCode = hashCode * 59 + this.UOM.GetHashCode();
                if (this.VarianceAmount != null)
                    hashCode = hashCode * 59 + this.VarianceAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
