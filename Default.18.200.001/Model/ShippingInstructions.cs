/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// ShippingInstructions
    /// </summary>
    [DataContract]
    public partial class ShippingInstructions : Entity,  IEquatable<ShippingInstructions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingInstructions" /> class.
        /// </summary>
        /// <param name="shippingDestinationType">shippingDestinationType.</param>
        /// <param name="shippingLocation">shippingLocation.</param>
        /// <param name="shipTo">shipTo.</param>
        /// <param name="shipToAddress">shipToAddress.</param>
        /// <param name="shipToAddressOverride">shipToAddressOverride.</param>
        /// <param name="shipToAddressValidated">shipToAddressValidated.</param>
        /// <param name="shipToContact">shipToContact.</param>
        /// <param name="shipToContactOverride">shipToContactOverride.</param>
        /// <param name="warehouse">warehouse.</param>
        public ShippingInstructions(StringValue shippingDestinationType = default(StringValue), StringValue shippingLocation = default(StringValue), StringValue shipTo = default(StringValue), Address shipToAddress = default(Address), BooleanValue shipToAddressOverride = default(BooleanValue), BooleanValue shipToAddressValidated = default(BooleanValue), DocContact shipToContact = default(DocContact), BooleanValue shipToContactOverride = default(BooleanValue), StringValue warehouse = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ShippingDestinationType = shippingDestinationType;
            this.ShippingLocation = shippingLocation;
            this.ShipTo = shipTo;
            this.ShipToAddress = shipToAddress;
            this.ShipToAddressOverride = shipToAddressOverride;
            this.ShipToAddressValidated = shipToAddressValidated;
            this.ShipToContact = shipToContact;
            this.ShipToContactOverride = shipToContactOverride;
            this.Warehouse = warehouse;
        }
        
        /// <summary>
        /// Gets or Sets ShippingDestinationType
        /// </summary>
        [DataMember(Name="ShippingDestinationType", EmitDefaultValue=false)]
        public StringValue ShippingDestinationType { get; set; }

        /// <summary>
        /// Gets or Sets ShippingLocation
        /// </summary>
        [DataMember(Name="ShippingLocation", EmitDefaultValue=false)]
        public StringValue ShippingLocation { get; set; }

        /// <summary>
        /// Gets or Sets ShipTo
        /// </summary>
        [DataMember(Name="ShipTo", EmitDefaultValue=false)]
        public StringValue ShipTo { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddress
        /// </summary>
        [DataMember(Name="ShipToAddress", EmitDefaultValue=false)]
        public Address ShipToAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddressOverride
        /// </summary>
        [DataMember(Name="ShipToAddressOverride", EmitDefaultValue=false)]
        public BooleanValue ShipToAddressOverride { get; set; }

        /// <summary>
        /// Gets or Sets ShipToAddressValidated
        /// </summary>
        [DataMember(Name="ShipToAddressValidated", EmitDefaultValue=false)]
        public BooleanValue ShipToAddressValidated { get; set; }

        /// <summary>
        /// Gets or Sets ShipToContact
        /// </summary>
        [DataMember(Name="ShipToContact", EmitDefaultValue=false)]
        public DocContact ShipToContact { get; set; }

        /// <summary>
        /// Gets or Sets ShipToContactOverride
        /// </summary>
        [DataMember(Name="ShipToContactOverride", EmitDefaultValue=false)]
        public BooleanValue ShipToContactOverride { get; set; }

        /// <summary>
        /// Gets or Sets Warehouse
        /// </summary>
        [DataMember(Name="Warehouse", EmitDefaultValue=false)]
        public StringValue Warehouse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingInstructions {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ShippingDestinationType: ").Append(ShippingDestinationType).Append("\n");
            sb.Append("  ShippingLocation: ").Append(ShippingLocation).Append("\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ShipToAddress: ").Append(ShipToAddress).Append("\n");
            sb.Append("  ShipToAddressOverride: ").Append(ShipToAddressOverride).Append("\n");
            sb.Append("  ShipToAddressValidated: ").Append(ShipToAddressValidated).Append("\n");
            sb.Append("  ShipToContact: ").Append(ShipToContact).Append("\n");
            sb.Append("  ShipToContactOverride: ").Append(ShipToContactOverride).Append("\n");
            sb.Append("  Warehouse: ").Append(Warehouse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingInstructions);
        }

        /// <summary>
        /// Returns true if ShippingInstructions instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingInstructions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingInstructions input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ShippingDestinationType == input.ShippingDestinationType ||
                    (this.ShippingDestinationType != null &&
                    this.ShippingDestinationType.Equals(input.ShippingDestinationType))
                ) && base.Equals(input) && 
                (
                    this.ShippingLocation == input.ShippingLocation ||
                    (this.ShippingLocation != null &&
                    this.ShippingLocation.Equals(input.ShippingLocation))
                ) && base.Equals(input) && 
                (
                    this.ShipTo == input.ShipTo ||
                    (this.ShipTo != null &&
                    this.ShipTo.Equals(input.ShipTo))
                ) && base.Equals(input) && 
                (
                    this.ShipToAddress == input.ShipToAddress ||
                    (this.ShipToAddress != null &&
                    this.ShipToAddress.Equals(input.ShipToAddress))
                ) && base.Equals(input) && 
                (
                    this.ShipToAddressOverride == input.ShipToAddressOverride ||
                    (this.ShipToAddressOverride != null &&
                    this.ShipToAddressOverride.Equals(input.ShipToAddressOverride))
                ) && base.Equals(input) && 
                (
                    this.ShipToAddressValidated == input.ShipToAddressValidated ||
                    (this.ShipToAddressValidated != null &&
                    this.ShipToAddressValidated.Equals(input.ShipToAddressValidated))
                ) && base.Equals(input) && 
                (
                    this.ShipToContact == input.ShipToContact ||
                    (this.ShipToContact != null &&
                    this.ShipToContact.Equals(input.ShipToContact))
                ) && base.Equals(input) && 
                (
                    this.ShipToContactOverride == input.ShipToContactOverride ||
                    (this.ShipToContactOverride != null &&
                    this.ShipToContactOverride.Equals(input.ShipToContactOverride))
                ) && base.Equals(input) && 
                (
                    this.Warehouse == input.Warehouse ||
                    (this.Warehouse != null &&
                    this.Warehouse.Equals(input.Warehouse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ShippingDestinationType != null)
                    hashCode = hashCode * 59 + this.ShippingDestinationType.GetHashCode();
                if (this.ShippingLocation != null)
                    hashCode = hashCode * 59 + this.ShippingLocation.GetHashCode();
                if (this.ShipTo != null)
                    hashCode = hashCode * 59 + this.ShipTo.GetHashCode();
                if (this.ShipToAddress != null)
                    hashCode = hashCode * 59 + this.ShipToAddress.GetHashCode();
                if (this.ShipToAddressOverride != null)
                    hashCode = hashCode * 59 + this.ShipToAddressOverride.GetHashCode();
                if (this.ShipToAddressValidated != null)
                    hashCode = hashCode * 59 + this.ShipToAddressValidated.GetHashCode();
                if (this.ShipToContact != null)
                    hashCode = hashCode * 59 + this.ShipToContact.GetHashCode();
                if (this.ShipToContactOverride != null)
                    hashCode = hashCode * 59 + this.ShipToContactOverride.GetHashCode();
                if (this.Warehouse != null)
                    hashCode = hashCode * 59 + this.Warehouse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
