/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// ShipmentPackage
    /// </summary>
    [DataContract]
    public partial class ShipmentPackage : Entity,  IEquatable<ShipmentPackage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipmentPackage" /> class.
        /// </summary>
        /// <param name="boxID">boxID.</param>
        /// <param name="cODAmount">cODAmount.</param>
        /// <param name="confirmed">confirmed.</param>
        /// <param name="customRefNbr1">customRefNbr1.</param>
        /// <param name="customRefNbr2">customRefNbr2.</param>
        /// <param name="declaredValue">declaredValue.</param>
        /// <param name="description">description.</param>
        /// <param name="trackingNbr">trackingNbr.</param>
        /// <param name="type">type.</param>
        /// <param name="uOM">uOM.</param>
        /// <param name="weight">weight.</param>
        public ShipmentPackage(StringValue boxID = default(StringValue), DecimalValue cODAmount = default(DecimalValue), BooleanValue confirmed = default(BooleanValue), StringValue customRefNbr1 = default(StringValue), StringValue customRefNbr2 = default(StringValue), DecimalValue declaredValue = default(DecimalValue), StringValue description = default(StringValue), StringValue trackingNbr = default(StringValue), StringValue type = default(StringValue), StringValue uOM = default(StringValue), DecimalValue weight = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BoxID = boxID;
            this.CODAmount = cODAmount;
            this.Confirmed = confirmed;
            this.CustomRefNbr1 = customRefNbr1;
            this.CustomRefNbr2 = customRefNbr2;
            this.DeclaredValue = declaredValue;
            this.Description = description;
            this.TrackingNbr = trackingNbr;
            this.Type = type;
            this.UOM = uOM;
            this.Weight = weight;
        }
        
        /// <summary>
        /// Gets or Sets BoxID
        /// </summary>
        [DataMember(Name="BoxID", EmitDefaultValue=false)]
        public StringValue BoxID { get; set; }

        /// <summary>
        /// Gets or Sets CODAmount
        /// </summary>
        [DataMember(Name="CODAmount", EmitDefaultValue=false)]
        public DecimalValue CODAmount { get; set; }

        /// <summary>
        /// Gets or Sets Confirmed
        /// </summary>
        [DataMember(Name="Confirmed", EmitDefaultValue=false)]
        public BooleanValue Confirmed { get; set; }

        /// <summary>
        /// Gets or Sets CustomRefNbr1
        /// </summary>
        [DataMember(Name="CustomRefNbr1", EmitDefaultValue=false)]
        public StringValue CustomRefNbr1 { get; set; }

        /// <summary>
        /// Gets or Sets CustomRefNbr2
        /// </summary>
        [DataMember(Name="CustomRefNbr2", EmitDefaultValue=false)]
        public StringValue CustomRefNbr2 { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredValue
        /// </summary>
        [DataMember(Name="DeclaredValue", EmitDefaultValue=false)]
        public DecimalValue DeclaredValue { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets TrackingNbr
        /// </summary>
        [DataMember(Name="TrackingNbr", EmitDefaultValue=false)]
        public StringValue TrackingNbr { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public StringValue Type { get; set; }

        /// <summary>
        /// Gets or Sets UOM
        /// </summary>
        [DataMember(Name="UOM", EmitDefaultValue=false)]
        public StringValue UOM { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="Weight", EmitDefaultValue=false)]
        public DecimalValue Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentPackage {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BoxID: ").Append(BoxID).Append("\n");
            sb.Append("  CODAmount: ").Append(CODAmount).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  CustomRefNbr1: ").Append(CustomRefNbr1).Append("\n");
            sb.Append("  CustomRefNbr2: ").Append(CustomRefNbr2).Append("\n");
            sb.Append("  DeclaredValue: ").Append(DeclaredValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TrackingNbr: ").Append(TrackingNbr).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UOM: ").Append(UOM).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipmentPackage);
        }

        /// <summary>
        /// Returns true if ShipmentPackage instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipmentPackage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentPackage input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BoxID == input.BoxID ||
                    (this.BoxID != null &&
                    this.BoxID.Equals(input.BoxID))
                ) && base.Equals(input) && 
                (
                    this.CODAmount == input.CODAmount ||
                    (this.CODAmount != null &&
                    this.CODAmount.Equals(input.CODAmount))
                ) && base.Equals(input) && 
                (
                    this.Confirmed == input.Confirmed ||
                    (this.Confirmed != null &&
                    this.Confirmed.Equals(input.Confirmed))
                ) && base.Equals(input) && 
                (
                    this.CustomRefNbr1 == input.CustomRefNbr1 ||
                    (this.CustomRefNbr1 != null &&
                    this.CustomRefNbr1.Equals(input.CustomRefNbr1))
                ) && base.Equals(input) && 
                (
                    this.CustomRefNbr2 == input.CustomRefNbr2 ||
                    (this.CustomRefNbr2 != null &&
                    this.CustomRefNbr2.Equals(input.CustomRefNbr2))
                ) && base.Equals(input) && 
                (
                    this.DeclaredValue == input.DeclaredValue ||
                    (this.DeclaredValue != null &&
                    this.DeclaredValue.Equals(input.DeclaredValue))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.TrackingNbr == input.TrackingNbr ||
                    (this.TrackingNbr != null &&
                    this.TrackingNbr.Equals(input.TrackingNbr))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.UOM == input.UOM ||
                    (this.UOM != null &&
                    this.UOM.Equals(input.UOM))
                ) && base.Equals(input) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BoxID != null)
                    hashCode = hashCode * 59 + this.BoxID.GetHashCode();
                if (this.CODAmount != null)
                    hashCode = hashCode * 59 + this.CODAmount.GetHashCode();
                if (this.Confirmed != null)
                    hashCode = hashCode * 59 + this.Confirmed.GetHashCode();
                if (this.CustomRefNbr1 != null)
                    hashCode = hashCode * 59 + this.CustomRefNbr1.GetHashCode();
                if (this.CustomRefNbr2 != null)
                    hashCode = hashCode * 59 + this.CustomRefNbr2.GetHashCode();
                if (this.DeclaredValue != null)
                    hashCode = hashCode * 59 + this.DeclaredValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TrackingNbr != null)
                    hashCode = hashCode * 59 + this.TrackingNbr.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UOM != null)
                    hashCode = hashCode * 59 + this.UOM.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
