/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.Default_18_200_001.Model
{
    /// <summary>
    /// KitAssemblyNonStockComponent
    /// </summary>
    [DataContract]
    public partial class KitAssemblyNonStockComponent : Entity,  IEquatable<KitAssemblyNonStockComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KitAssemblyNonStockComponent" /> class.
        /// </summary>
        /// <param name="componentQty">componentQty.</param>
        /// <param name="lineNbr">lineNbr.</param>
        /// <param name="nonStockInventoryID">nonStockInventoryID.</param>
        /// <param name="qty">qty.</param>
        /// <param name="reasonCode">reasonCode.</param>
        /// <param name="unitCost">unitCost.</param>
        /// <param name="uOM">uOM.</param>
        public KitAssemblyNonStockComponent(DecimalValue componentQty = default(DecimalValue), IntValue lineNbr = default(IntValue), StringValue nonStockInventoryID = default(StringValue), DecimalValue qty = default(DecimalValue), StringValue reasonCode = default(StringValue), DecimalValue unitCost = default(DecimalValue), StringValue uOM = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ComponentQty = componentQty;
            this.LineNbr = lineNbr;
            this.NonStockInventoryID = nonStockInventoryID;
            this.Qty = qty;
            this.ReasonCode = reasonCode;
            this.UnitCost = unitCost;
            this.UOM = uOM;
        }
        
        /// <summary>
        /// Gets or Sets ComponentQty
        /// </summary>
        [DataMember(Name="ComponentQty", EmitDefaultValue=false)]
        public DecimalValue ComponentQty { get; set; }

        /// <summary>
        /// Gets or Sets LineNbr
        /// </summary>
        [DataMember(Name="LineNbr", EmitDefaultValue=false)]
        public IntValue LineNbr { get; set; }

        /// <summary>
        /// Gets or Sets NonStockInventoryID
        /// </summary>
        [DataMember(Name="NonStockInventoryID", EmitDefaultValue=false)]
        public StringValue NonStockInventoryID { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="Qty", EmitDefaultValue=false)]
        public DecimalValue Qty { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode
        /// </summary>
        [DataMember(Name="ReasonCode", EmitDefaultValue=false)]
        public StringValue ReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name="UnitCost", EmitDefaultValue=false)]
        public DecimalValue UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UOM
        /// </summary>
        [DataMember(Name="UOM", EmitDefaultValue=false)]
        public StringValue UOM { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KitAssemblyNonStockComponent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ComponentQty: ").Append(ComponentQty).Append("\n");
            sb.Append("  LineNbr: ").Append(LineNbr).Append("\n");
            sb.Append("  NonStockInventoryID: ").Append(NonStockInventoryID).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UOM: ").Append(UOM).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KitAssemblyNonStockComponent);
        }

        /// <summary>
        /// Returns true if KitAssemblyNonStockComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of KitAssemblyNonStockComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KitAssemblyNonStockComponent input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ComponentQty == input.ComponentQty ||
                    (this.ComponentQty != null &&
                    this.ComponentQty.Equals(input.ComponentQty))
                ) && base.Equals(input) && 
                (
                    this.LineNbr == input.LineNbr ||
                    (this.LineNbr != null &&
                    this.LineNbr.Equals(input.LineNbr))
                ) && base.Equals(input) && 
                (
                    this.NonStockInventoryID == input.NonStockInventoryID ||
                    (this.NonStockInventoryID != null &&
                    this.NonStockInventoryID.Equals(input.NonStockInventoryID))
                ) && base.Equals(input) && 
                (
                    this.Qty == input.Qty ||
                    (this.Qty != null &&
                    this.Qty.Equals(input.Qty))
                ) && base.Equals(input) && 
                (
                    this.ReasonCode == input.ReasonCode ||
                    (this.ReasonCode != null &&
                    this.ReasonCode.Equals(input.ReasonCode))
                ) && base.Equals(input) && 
                (
                    this.UnitCost == input.UnitCost ||
                    (this.UnitCost != null &&
                    this.UnitCost.Equals(input.UnitCost))
                ) && base.Equals(input) && 
                (
                    this.UOM == input.UOM ||
                    (this.UOM != null &&
                    this.UOM.Equals(input.UOM))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ComponentQty != null)
                    hashCode = hashCode * 59 + this.ComponentQty.GetHashCode();
                if (this.LineNbr != null)
                    hashCode = hashCode * 59 + this.LineNbr.GetHashCode();
                if (this.NonStockInventoryID != null)
                    hashCode = hashCode * 59 + this.NonStockInventoryID.GetHashCode();
                if (this.Qty != null)
                    hashCode = hashCode * 59 + this.Qty.GetHashCode();
                if (this.ReasonCode != null)
                    hashCode = hashCode * 59 + this.ReasonCode.GetHashCode();
                if (this.UnitCost != null)
                    hashCode = hashCode * 59 + this.UnitCost.GetHashCode();
                if (this.UOM != null)
                    hashCode = hashCode * 59 + this.UOM.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
