/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// EmailProcessingRow
    /// </summary>
    [DataContract]
    public partial class EmailProcessingRow : Entity,  IEquatable<EmailProcessingRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailProcessingRow" /> class.
        /// </summary>
        /// <param name="emailAccount">emailAccount.</param>
        /// <param name="from">from.</param>
        /// <param name="mailStatus">mailStatus.</param>
        /// <param name="owner">owner.</param>
        /// <param name="selected">selected.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="subject">subject.</param>
        /// <param name="to">to.</param>
        public EmailProcessingRow(StringValue emailAccount = default(StringValue), StringValue from = default(StringValue), StringValue mailStatus = default(StringValue), StringValue owner = default(StringValue), BooleanValue selected = default(BooleanValue), DateTimeValue startDate = default(DateTimeValue), StringValue subject = default(StringValue), StringValue to = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.EmailAccount = emailAccount;
            this.From = from;
            this.MailStatus = mailStatus;
            this.Owner = owner;
            this.Selected = selected;
            this.StartDate = startDate;
            this.Subject = subject;
            this.To = to;
        }
        
        /// <summary>
        /// Gets or Sets EmailAccount
        /// </summary>
        [DataMember(Name="EmailAccount", EmitDefaultValue=false)]
        public StringValue EmailAccount { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public StringValue From { get; set; }

        /// <summary>
        /// Gets or Sets MailStatus
        /// </summary>
        [DataMember(Name="MailStatus", EmitDefaultValue=false)]
        public StringValue MailStatus { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public StringValue Owner { get; set; }

        /// <summary>
        /// Gets or Sets Selected
        /// </summary>
        [DataMember(Name="Selected", EmitDefaultValue=false)]
        public BooleanValue Selected { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTimeValue StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public StringValue Subject { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public StringValue To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailProcessingRow {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  EmailAccount: ").Append(EmailAccount).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  MailStatus: ").Append(MailStatus).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailProcessingRow);
        }

        /// <summary>
        /// Returns true if EmailProcessingRow instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailProcessingRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailProcessingRow input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.EmailAccount == input.EmailAccount ||
                    (this.EmailAccount != null &&
                    this.EmailAccount.Equals(input.EmailAccount))
                ) && base.Equals(input) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && base.Equals(input) && 
                (
                    this.MailStatus == input.MailStatus ||
                    (this.MailStatus != null &&
                    this.MailStatus.Equals(input.MailStatus))
                ) && base.Equals(input) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && base.Equals(input) && 
                (
                    this.Selected == input.Selected ||
                    (this.Selected != null &&
                    this.Selected.Equals(input.Selected))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && base.Equals(input) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.EmailAccount != null)
                    hashCode = hashCode * 59 + this.EmailAccount.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.MailStatus != null)
                    hashCode = hashCode * 59 + this.MailStatus.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Selected != null)
                    hashCode = hashCode * 59 + this.Selected.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
