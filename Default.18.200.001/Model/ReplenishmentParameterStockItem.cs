/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint.Model
{
    /// <summary>
    /// ReplenishmentParameterStockItem
    /// </summary>
    [DataContract]
    public partial class ReplenishmentParameterStockItem : Entity,  IEquatable<ReplenishmentParameterStockItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplenishmentParameterStockItem" /> class.
        /// </summary>
        /// <param name="demandForecastModel">demandForecastModel.</param>
        /// <param name="forecastPeriodType">forecastPeriodType.</param>
        /// <param name="launchDate">launchDate.</param>
        /// <param name="maxQty">maxQty.</param>
        /// <param name="maxShelfLifeInDays">maxShelfLifeInDays.</param>
        /// <param name="method">method.</param>
        /// <param name="periodsToAnalyze">periodsToAnalyze.</param>
        /// <param name="reorderPoint">reorderPoint.</param>
        /// <param name="replenishmentClass">replenishmentClass.</param>
        /// <param name="replenishmentWarehouse">replenishmentWarehouse.</param>
        /// <param name="safetyStock">safetyStock.</param>
        /// <param name="seasonality">seasonality.</param>
        /// <param name="serviceLevel">serviceLevel.</param>
        /// <param name="source">source.</param>
        /// <param name="terminationDate">terminationDate.</param>
        /// <param name="transferERQ">transferERQ.</param>
        public ReplenishmentParameterStockItem(StringValue demandForecastModel = default(StringValue), StringValue forecastPeriodType = default(StringValue), DateTimeValue launchDate = default(DateTimeValue), DecimalValue maxQty = default(DecimalValue), IntValue maxShelfLifeInDays = default(IntValue), StringValue method = default(StringValue), IntValue periodsToAnalyze = default(IntValue), DecimalValue reorderPoint = default(DecimalValue), StringValue replenishmentClass = default(StringValue), StringValue replenishmentWarehouse = default(StringValue), DecimalValue safetyStock = default(DecimalValue), StringValue seasonality = default(StringValue), DecimalValue serviceLevel = default(DecimalValue), StringValue source = default(StringValue), DateTimeValue terminationDate = default(DateTimeValue), DecimalValue transferERQ = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.DemandForecastModel = demandForecastModel;
            this.ForecastPeriodType = forecastPeriodType;
            this.LaunchDate = launchDate;
            this.MaxQty = maxQty;
            this.MaxShelfLifeInDays = maxShelfLifeInDays;
            this.Method = method;
            this.PeriodsToAnalyze = periodsToAnalyze;
            this.ReorderPoint = reorderPoint;
            this.ReplenishmentClass = replenishmentClass;
            this.ReplenishmentWarehouse = replenishmentWarehouse;
            this.SafetyStock = safetyStock;
            this.Seasonality = seasonality;
            this.ServiceLevel = serviceLevel;
            this.Source = source;
            this.TerminationDate = terminationDate;
            this.TransferERQ = transferERQ;
        }
        
        /// <summary>
        /// Gets or Sets DemandForecastModel
        /// </summary>
        [DataMember(Name="DemandForecastModel", EmitDefaultValue=false)]
        public StringValue DemandForecastModel { get; set; }

        /// <summary>
        /// Gets or Sets ForecastPeriodType
        /// </summary>
        [DataMember(Name="ForecastPeriodType", EmitDefaultValue=false)]
        public StringValue ForecastPeriodType { get; set; }

        /// <summary>
        /// Gets or Sets LaunchDate
        /// </summary>
        [DataMember(Name="LaunchDate", EmitDefaultValue=false)]
        public DateTimeValue LaunchDate { get; set; }

        /// <summary>
        /// Gets or Sets MaxQty
        /// </summary>
        [DataMember(Name="MaxQty", EmitDefaultValue=false)]
        public DecimalValue MaxQty { get; set; }

        /// <summary>
        /// Gets or Sets MaxShelfLifeInDays
        /// </summary>
        [DataMember(Name="MaxShelfLifeInDays", EmitDefaultValue=false)]
        public IntValue MaxShelfLifeInDays { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="Method", EmitDefaultValue=false)]
        public StringValue Method { get; set; }

        /// <summary>
        /// Gets or Sets PeriodsToAnalyze
        /// </summary>
        [DataMember(Name="PeriodsToAnalyze", EmitDefaultValue=false)]
        public IntValue PeriodsToAnalyze { get; set; }

        /// <summary>
        /// Gets or Sets ReorderPoint
        /// </summary>
        [DataMember(Name="ReorderPoint", EmitDefaultValue=false)]
        public DecimalValue ReorderPoint { get; set; }

        /// <summary>
        /// Gets or Sets ReplenishmentClass
        /// </summary>
        [DataMember(Name="ReplenishmentClass", EmitDefaultValue=false)]
        public StringValue ReplenishmentClass { get; set; }

        /// <summary>
        /// Gets or Sets ReplenishmentWarehouse
        /// </summary>
        [DataMember(Name="ReplenishmentWarehouse", EmitDefaultValue=false)]
        public StringValue ReplenishmentWarehouse { get; set; }

        /// <summary>
        /// Gets or Sets SafetyStock
        /// </summary>
        [DataMember(Name="SafetyStock", EmitDefaultValue=false)]
        public DecimalValue SafetyStock { get; set; }

        /// <summary>
        /// Gets or Sets Seasonality
        /// </summary>
        [DataMember(Name="Seasonality", EmitDefaultValue=false)]
        public StringValue Seasonality { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevel
        /// </summary>
        [DataMember(Name="ServiceLevel", EmitDefaultValue=false)]
        public DecimalValue ServiceLevel { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public StringValue Source { get; set; }

        /// <summary>
        /// Gets or Sets TerminationDate
        /// </summary>
        [DataMember(Name="TerminationDate", EmitDefaultValue=false)]
        public DateTimeValue TerminationDate { get; set; }

        /// <summary>
        /// Gets or Sets TransferERQ
        /// </summary>
        [DataMember(Name="TransferERQ", EmitDefaultValue=false)]
        public DecimalValue TransferERQ { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplenishmentParameterStockItem {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DemandForecastModel: ").Append(DemandForecastModel).Append("\n");
            sb.Append("  ForecastPeriodType: ").Append(ForecastPeriodType).Append("\n");
            sb.Append("  LaunchDate: ").Append(LaunchDate).Append("\n");
            sb.Append("  MaxQty: ").Append(MaxQty).Append("\n");
            sb.Append("  MaxShelfLifeInDays: ").Append(MaxShelfLifeInDays).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  PeriodsToAnalyze: ").Append(PeriodsToAnalyze).Append("\n");
            sb.Append("  ReorderPoint: ").Append(ReorderPoint).Append("\n");
            sb.Append("  ReplenishmentClass: ").Append(ReplenishmentClass).Append("\n");
            sb.Append("  ReplenishmentWarehouse: ").Append(ReplenishmentWarehouse).Append("\n");
            sb.Append("  SafetyStock: ").Append(SafetyStock).Append("\n");
            sb.Append("  Seasonality: ").Append(Seasonality).Append("\n");
            sb.Append("  ServiceLevel: ").Append(ServiceLevel).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TerminationDate: ").Append(TerminationDate).Append("\n");
            sb.Append("  TransferERQ: ").Append(TransferERQ).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReplenishmentParameterStockItem);
        }

        /// <summary>
        /// Returns true if ReplenishmentParameterStockItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReplenishmentParameterStockItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplenishmentParameterStockItem input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DemandForecastModel == input.DemandForecastModel ||
                    (this.DemandForecastModel != null &&
                    this.DemandForecastModel.Equals(input.DemandForecastModel))
                ) && base.Equals(input) && 
                (
                    this.ForecastPeriodType == input.ForecastPeriodType ||
                    (this.ForecastPeriodType != null &&
                    this.ForecastPeriodType.Equals(input.ForecastPeriodType))
                ) && base.Equals(input) && 
                (
                    this.LaunchDate == input.LaunchDate ||
                    (this.LaunchDate != null &&
                    this.LaunchDate.Equals(input.LaunchDate))
                ) && base.Equals(input) && 
                (
                    this.MaxQty == input.MaxQty ||
                    (this.MaxQty != null &&
                    this.MaxQty.Equals(input.MaxQty))
                ) && base.Equals(input) && 
                (
                    this.MaxShelfLifeInDays == input.MaxShelfLifeInDays ||
                    (this.MaxShelfLifeInDays != null &&
                    this.MaxShelfLifeInDays.Equals(input.MaxShelfLifeInDays))
                ) && base.Equals(input) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && base.Equals(input) && 
                (
                    this.PeriodsToAnalyze == input.PeriodsToAnalyze ||
                    (this.PeriodsToAnalyze != null &&
                    this.PeriodsToAnalyze.Equals(input.PeriodsToAnalyze))
                ) && base.Equals(input) && 
                (
                    this.ReorderPoint == input.ReorderPoint ||
                    (this.ReorderPoint != null &&
                    this.ReorderPoint.Equals(input.ReorderPoint))
                ) && base.Equals(input) && 
                (
                    this.ReplenishmentClass == input.ReplenishmentClass ||
                    (this.ReplenishmentClass != null &&
                    this.ReplenishmentClass.Equals(input.ReplenishmentClass))
                ) && base.Equals(input) && 
                (
                    this.ReplenishmentWarehouse == input.ReplenishmentWarehouse ||
                    (this.ReplenishmentWarehouse != null &&
                    this.ReplenishmentWarehouse.Equals(input.ReplenishmentWarehouse))
                ) && base.Equals(input) && 
                (
                    this.SafetyStock == input.SafetyStock ||
                    (this.SafetyStock != null &&
                    this.SafetyStock.Equals(input.SafetyStock))
                ) && base.Equals(input) && 
                (
                    this.Seasonality == input.Seasonality ||
                    (this.Seasonality != null &&
                    this.Seasonality.Equals(input.Seasonality))
                ) && base.Equals(input) && 
                (
                    this.ServiceLevel == input.ServiceLevel ||
                    (this.ServiceLevel != null &&
                    this.ServiceLevel.Equals(input.ServiceLevel))
                ) && base.Equals(input) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && base.Equals(input) && 
                (
                    this.TerminationDate == input.TerminationDate ||
                    (this.TerminationDate != null &&
                    this.TerminationDate.Equals(input.TerminationDate))
                ) && base.Equals(input) && 
                (
                    this.TransferERQ == input.TransferERQ ||
                    (this.TransferERQ != null &&
                    this.TransferERQ.Equals(input.TransferERQ))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DemandForecastModel != null)
                    hashCode = hashCode * 59 + this.DemandForecastModel.GetHashCode();
                if (this.ForecastPeriodType != null)
                    hashCode = hashCode * 59 + this.ForecastPeriodType.GetHashCode();
                if (this.LaunchDate != null)
                    hashCode = hashCode * 59 + this.LaunchDate.GetHashCode();
                if (this.MaxQty != null)
                    hashCode = hashCode * 59 + this.MaxQty.GetHashCode();
                if (this.MaxShelfLifeInDays != null)
                    hashCode = hashCode * 59 + this.MaxShelfLifeInDays.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.PeriodsToAnalyze != null)
                    hashCode = hashCode * 59 + this.PeriodsToAnalyze.GetHashCode();
                if (this.ReorderPoint != null)
                    hashCode = hashCode * 59 + this.ReorderPoint.GetHashCode();
                if (this.ReplenishmentClass != null)
                    hashCode = hashCode * 59 + this.ReplenishmentClass.GetHashCode();
                if (this.ReplenishmentWarehouse != null)
                    hashCode = hashCode * 59 + this.ReplenishmentWarehouse.GetHashCode();
                if (this.SafetyStock != null)
                    hashCode = hashCode * 59 + this.SafetyStock.GetHashCode();
                if (this.Seasonality != null)
                    hashCode = hashCode * 59 + this.Seasonality.GetHashCode();
                if (this.ServiceLevel != null)
                    hashCode = hashCode * 59 + this.ServiceLevel.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.TerminationDate != null)
                    hashCode = hashCode * 59 + this.TerminationDate.GetHashCode();
                if (this.TransferERQ != null)
                    hashCode = hashCode * 59 + this.TransferERQ.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
