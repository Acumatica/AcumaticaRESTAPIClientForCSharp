/* 
 * Default/18.200.001
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acumatica.RESTClient.Client.OpenAPIDateConverter;

namespace Acumatica.DefaultEndpoint_18_200_001.Model
{
    /// <summary>
    /// PhysicalInventoryReview
    /// </summary>
    [DataContract]
    public partial class PhysicalInventoryReview : Entity,  IEquatable<PhysicalInventoryReview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhysicalInventoryReview" /> class.
        /// </summary>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="description">description.</param>
        /// <param name="details">details.</param>
        /// <param name="freezeDate">freezeDate.</param>
        /// <param name="referenceNbr">referenceNbr.</param>
        /// <param name="status">status.</param>
        /// <param name="totalPhysicalQty">totalPhysicalQty.</param>
        /// <param name="totalVarianceCost">totalVarianceCost.</param>
        /// <param name="totalVarianceQty">totalVarianceQty.</param>
        /// <param name="typeID">typeID.</param>
        /// <param name="warehouseID">warehouseID.</param>
        public PhysicalInventoryReview(DateTimeValue createdDateTime = default(DateTimeValue), StringValue description = default(StringValue), List<PhysicalInventoryReviewDetail> details = default(List<PhysicalInventoryReviewDetail>), DateTimeValue freezeDate = default(DateTimeValue), StringValue referenceNbr = default(StringValue), StringValue status = default(StringValue), DecimalValue totalPhysicalQty = default(DecimalValue), DecimalValue totalVarianceCost = default(DecimalValue), DecimalValue totalVarianceQty = default(DecimalValue), StringValue typeID = default(StringValue), StringValue warehouseID = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.CreatedDateTime = createdDateTime;
            this.Description = description;
            this.Details = details;
            this.FreezeDate = freezeDate;
            this.ReferenceNbr = referenceNbr;
            this.Status = status;
            this.TotalPhysicalQty = totalPhysicalQty;
            this.TotalVarianceCost = totalVarianceCost;
            this.TotalVarianceQty = totalVarianceQty;
            this.TypeID = typeID;
            this.WarehouseID = warehouseID;
        }
        
        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="Details", EmitDefaultValue=false)]
        public List<PhysicalInventoryReviewDetail> Details { get; set; }

        /// <summary>
        /// Gets or Sets FreezeDate
        /// </summary>
        [DataMember(Name="FreezeDate", EmitDefaultValue=false)]
        public DateTimeValue FreezeDate { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNbr
        /// </summary>
        [DataMember(Name="ReferenceNbr", EmitDefaultValue=false)]
        public StringValue ReferenceNbr { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TotalPhysicalQty
        /// </summary>
        [DataMember(Name="TotalPhysicalQty", EmitDefaultValue=false)]
        public DecimalValue TotalPhysicalQty { get; set; }

        /// <summary>
        /// Gets or Sets TotalVarianceCost
        /// </summary>
        [DataMember(Name="TotalVarianceCost", EmitDefaultValue=false)]
        public DecimalValue TotalVarianceCost { get; set; }

        /// <summary>
        /// Gets or Sets TotalVarianceQty
        /// </summary>
        [DataMember(Name="TotalVarianceQty", EmitDefaultValue=false)]
        public DecimalValue TotalVarianceQty { get; set; }

        /// <summary>
        /// Gets or Sets TypeID
        /// </summary>
        [DataMember(Name="TypeID", EmitDefaultValue=false)]
        public StringValue TypeID { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseID
        /// </summary>
        [DataMember(Name="WarehouseID", EmitDefaultValue=false)]
        public StringValue WarehouseID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhysicalInventoryReview {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  FreezeDate: ").Append(FreezeDate).Append("\n");
            sb.Append("  ReferenceNbr: ").Append(ReferenceNbr).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalPhysicalQty: ").Append(TotalPhysicalQty).Append("\n");
            sb.Append("  TotalVarianceCost: ").Append(TotalVarianceCost).Append("\n");
            sb.Append("  TotalVarianceQty: ").Append(TotalVarianceQty).Append("\n");
            sb.Append("  TypeID: ").Append(TypeID).Append("\n");
            sb.Append("  WarehouseID: ").Append(WarehouseID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhysicalInventoryReview);
        }

        /// <summary>
        /// Returns true if PhysicalInventoryReview instances are equal
        /// </summary>
        /// <param name="input">Instance of PhysicalInventoryReview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhysicalInventoryReview input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                ) && base.Equals(input) && 
                (
                    this.FreezeDate == input.FreezeDate ||
                    (this.FreezeDate != null &&
                    this.FreezeDate.Equals(input.FreezeDate))
                ) && base.Equals(input) && 
                (
                    this.ReferenceNbr == input.ReferenceNbr ||
                    (this.ReferenceNbr != null &&
                    this.ReferenceNbr.Equals(input.ReferenceNbr))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TotalPhysicalQty == input.TotalPhysicalQty ||
                    (this.TotalPhysicalQty != null &&
                    this.TotalPhysicalQty.Equals(input.TotalPhysicalQty))
                ) && base.Equals(input) && 
                (
                    this.TotalVarianceCost == input.TotalVarianceCost ||
                    (this.TotalVarianceCost != null &&
                    this.TotalVarianceCost.Equals(input.TotalVarianceCost))
                ) && base.Equals(input) && 
                (
                    this.TotalVarianceQty == input.TotalVarianceQty ||
                    (this.TotalVarianceQty != null &&
                    this.TotalVarianceQty.Equals(input.TotalVarianceQty))
                ) && base.Equals(input) && 
                (
                    this.TypeID == input.TypeID ||
                    (this.TypeID != null &&
                    this.TypeID.Equals(input.TypeID))
                ) && base.Equals(input) && 
                (
                    this.WarehouseID == input.WarehouseID ||
                    (this.WarehouseID != null &&
                    this.WarehouseID.Equals(input.WarehouseID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.FreezeDate != null)
                    hashCode = hashCode * 59 + this.FreezeDate.GetHashCode();
                if (this.ReferenceNbr != null)
                    hashCode = hashCode * 59 + this.ReferenceNbr.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalPhysicalQty != null)
                    hashCode = hashCode * 59 + this.TotalPhysicalQty.GetHashCode();
                if (this.TotalVarianceCost != null)
                    hashCode = hashCode * 59 + this.TotalVarianceCost.GetHashCode();
                if (this.TotalVarianceQty != null)
                    hashCode = hashCode * 59 + this.TotalVarianceQty.GetHashCode();
                if (this.TypeID != null)
                    hashCode = hashCode * 59 + this.TypeID.GetHashCode();
                if (this.WarehouseID != null)
                    hashCode = hashCode * 59 + this.WarehouseID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
