/* 
 * Some version
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;

namespace Acumatica.RESTClient.Root.Model
{
    /// <summary>
    /// Version
    /// </summary>
    [DataContract]
    public partial class Version : IEquatable<Version>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Version" /> class.
        /// </summary>
        /// <param name="acumaticaBuildVersion">acumaticaBuildVersion.</param>
        /// <param name="oemBuildVersion">oemBuildVersion.</param>
        /// <param name="databaseVersion">databaseVersion.</param>
        public Version(string acumaticaBuildVersion = default, string oemBuildVersion = default, string databaseVersion = default)
        {
            AcumaticaBuildVersion = acumaticaBuildVersion;
            OemBuildVersion = oemBuildVersion;
            DatabaseVersion = databaseVersion;
        }

        /// <summary>
        /// Gets or Sets AcumaticaBuildVersion
        /// </summary>
        [DataMember(Name = "acumaticaBuildVersion", EmitDefaultValue = false)]
        public string AcumaticaBuildVersion { get; set; }

        /// <summary>
        /// Gets or Sets OemBuildVersion
        /// </summary>
        [DataMember(Name = "oemBuildVersion", EmitDefaultValue = false)]
        public string OemBuildVersion { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseVersion
        /// </summary>
        [DataMember(Name = "databaseVersion", EmitDefaultValue = false)]
        public string DatabaseVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Version {\n");
            sb.Append("  AcumaticaBuildVersion: ").Append(AcumaticaBuildVersion).Append("\n");
            sb.Append("  OemBuildVersion: ").Append(OemBuildVersion).Append("\n");
            sb.Append("  DatabaseVersion: ").Append(DatabaseVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Version);
        }

        /// <summary>
        /// Returns true if Version instances are equal
        /// </summary>
        /// <param name="input">Instance of Version to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Version input)
        {
            if (input == null)
                return false;

            return
                (
                    AcumaticaBuildVersion == input.AcumaticaBuildVersion ||
                    AcumaticaBuildVersion != null &&
                    AcumaticaBuildVersion.Equals(input.AcumaticaBuildVersion)
                ) &&
                (
                    OemBuildVersion == input.OemBuildVersion ||
                    OemBuildVersion != null &&
                    OemBuildVersion.Equals(input.OemBuildVersion)
                ) &&
                (
                    DatabaseVersion == input.DatabaseVersion ||
                    DatabaseVersion != null &&
                    DatabaseVersion.Equals(input.DatabaseVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (AcumaticaBuildVersion != null)
                    hashCode = hashCode * 59 + AcumaticaBuildVersion.GetHashCode();
                if (OemBuildVersion != null)
                    hashCode = hashCode * 59 + OemBuildVersion.GetHashCode();
                if (DatabaseVersion != null)
                    hashCode = hashCode * 59 + DatabaseVersion.GetHashCode();
                return hashCode;
            }
        }
    }

}
