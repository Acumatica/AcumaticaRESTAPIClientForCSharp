{
  "swagger": "2.0",
  "info": {
    "title": "Default/23.200.001",
    "version": "4"
  },
  "host": "internal.acumatica.com",
  "basePath": "/entity/Default/23.200.001",
  "schemes": [
    "https"
  ],
  "paths": {
    "/SalesOrder/CancelSalesOrder": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_CancelSalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelSalesOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/ReopenSalesOrder": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_ReopenSalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReopenSalesOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/PrepareSalesInvoice": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_PrepareSalesInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrepareSalesInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/OpenSalesOrder": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_OpenSalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenSalesOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/ReleaseFromCreditHoldSalesOrder": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_ReleaseFromCreditHoldSalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseFromCreditHoldSalesOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/SalesOrderCreateReceipt": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_SalesOrderCreateReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrderCreateReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/SalesOrderCreateShipment": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_SalesOrderCreateShipment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrderCreateShipment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/AutoRecalculateDiscounts": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_AutoRecalculateDiscounts",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutoRecalculateDiscounts"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/{actionName}": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrderCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/$adHocSchema": {
      "get": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "SalesOrder_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/SalesOrder/{ids}": {
      "get": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "SalesOrder_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "SalesOrder_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/SalesOrder/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "SalesOrder_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/SalesOrder/{id}": {
      "get": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "SalesOrder_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "SalesOrder_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/SalesOrder": {
      "get": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "SalesOrder_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrder"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "SalesOrder_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          }
        }
      }
    },
    "/DiscountCode/{actionName}": {
      "post": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "DiscountCode_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscountCodeCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          }
        }
      }
    },
    "/DiscountCode/$adHocSchema": {
      "get": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "DiscountCode_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          }
        }
      }
    },
    "/DiscountCode/{ids}": {
      "get": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "DiscountCode_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "DiscountCode_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/DiscountCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "DiscountCode_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/DiscountCode/{id}": {
      "get": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "DiscountCode_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "DiscountCode_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/DiscountCode": {
      "get": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "DiscountCode_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCode"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "DiscountCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          }
        }
      }
    },
    "/EmailProcessing/ProcessEmailProcessing": {
      "post": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "EmailProcessing_InvokeAction_ProcessEmailProcessing",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessEmailProcessing"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          }
        }
      }
    },
    "/EmailProcessing/ProcessAllEmailProcessing": {
      "post": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "EmailProcessing_InvokeAction_ProcessAllEmailProcessing",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessAllEmailProcessing"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          }
        }
      }
    },
    "/EmailProcessing/{actionName}": {
      "post": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "EmailProcessing_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailProcessingCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          }
        }
      }
    },
    "/EmailProcessing/$adHocSchema": {
      "get": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "EmailProcessing_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          }
        }
      }
    },
    "/EmailProcessing/{ids}": {
      "get": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "EmailProcessing_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "EmailProcessing_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/EmailProcessing/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "EmailProcessing_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/EmailProcessing/{id}": {
      "get": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "EmailProcessing_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "EmailProcessing_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/EmailProcessing": {
      "get": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "EmailProcessing_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmailProcessing"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "EmailProcessing_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          }
        }
      }
    },
    "/TaxZone/{actionName}": {
      "post": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TaxZone_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxZoneCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          }
        }
      }
    },
    "/TaxZone/$adHocSchema": {
      "get": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TaxZone_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          }
        }
      }
    },
    "/TaxZone/{ids}": {
      "get": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TaxZone_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TaxZone_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TaxZone/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TaxZone_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/TaxZone/{id}": {
      "get": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TaxZone_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TaxZone_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TaxZone": {
      "get": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TaxZone_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxZone"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TaxZone_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          }
        }
      }
    },
    "/FinancialYear/{actionName}": {
      "post": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "FinancialYear_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialYearCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          }
        }
      }
    },
    "/FinancialYear/$adHocSchema": {
      "get": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "FinancialYear_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          }
        }
      }
    },
    "/FinancialYear/{ids}": {
      "get": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "FinancialYear_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "FinancialYear_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/FinancialYear/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "FinancialYear_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/FinancialYear/{id}": {
      "get": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "FinancialYear_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "FinancialYear_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/FinancialYear": {
      "get": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "FinancialYear_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialYear"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "FinancialYear_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          }
        }
      }
    },
    "/TaxCategory/{actionName}": {
      "post": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TaxCategory_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxCategoryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          }
        }
      }
    },
    "/TaxCategory/$adHocSchema": {
      "get": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TaxCategory_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          }
        }
      }
    },
    "/TaxCategory/{ids}": {
      "get": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TaxCategory_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TaxCategory_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TaxCategory/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TaxCategory_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/TaxCategory/{id}": {
      "get": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TaxCategory_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TaxCategory_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TaxCategory": {
      "get": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TaxCategory_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxCategory"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TaxCategory_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          }
        }
      }
    },
    "/PurchaseOrder/{actionName}": {
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PurchaseOrder_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        }
      }
    },
    "/PurchaseOrder/$adHocSchema": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PurchaseOrder_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        }
      }
    },
    "/PurchaseOrder/{ids}": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PurchaseOrder_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PurchaseOrder_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PurchaseOrder/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PurchaseOrder_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PurchaseOrder/{id}": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PurchaseOrder_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PurchaseOrder_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PurchaseOrder": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PurchaseOrder_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseOrder"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PurchaseOrder_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        }
      }
    },
    "/InventoryQuantityAvailable/{actionName}": {
      "post": {
        "tags": [
          "InventoryQuantityAvailable"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventoryQuantityAvailable_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryQuantityAvailableCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryQuantityAvailable"
            }
          }
        }
      }
    },
    "/InventoryQuantityAvailable/$adHocSchema": {
      "get": {
        "tags": [
          "InventoryQuantityAvailable"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InventoryQuantityAvailable_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InventoryQuantityAvailable"
            }
          }
        }
      }
    },
    "/InventoryQuantityAvailable/{ids}": {
      "get": {
        "tags": [
          "InventoryQuantityAvailable"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InventoryQuantityAvailable_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryQuantityAvailable"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryQuantityAvailable"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InventoryQuantityAvailable_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryQuantityAvailable/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InventoryQuantityAvailable"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InventoryQuantityAvailable_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/InventoryQuantityAvailable/{id}": {
      "get": {
        "tags": [
          "InventoryQuantityAvailable"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InventoryQuantityAvailable_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryQuantityAvailable"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryQuantityAvailable"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InventoryQuantityAvailable_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryQuantityAvailable": {
      "get": {
        "tags": [
          "InventoryQuantityAvailable"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InventoryQuantityAvailable_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryQuantityAvailable"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "InventoryQuantityAvailable"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InventoryQuantityAvailable_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryQuantityAvailable"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InventoryQuantityAvailable"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryQuantityAvailable"
            }
          }
        }
      }
    },
    "/Email/SendEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_SendEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/CreateContactFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateContactFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContactFromEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/CreateEventFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateEventFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEventFromEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/CreateLeadFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateLeadFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLeadFromEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/CreateOpportunityFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateOpportunityFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpportunityFromEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/CreateExpenseReceiptFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateExpenseReceiptFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateExpenseReceiptFromEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/CreateCaseFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateCaseFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCaseFromEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/CreateTaskFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateTaskFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTaskFromEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/RestoreDeletedEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_RestoreDeletedEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestoreDeletedEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/RestoreArchivedEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_RestoreArchivedEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestoreArchivedEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/ProcessEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_ProcessEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/CancelSendingEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CancelSendingEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelSendingEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/ArchiveEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_ArchiveEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArchiveEmail"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/{actionName}": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/$adHocSchema": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Email_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Email/{ids}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Email_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Email_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Email/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Email"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Email_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Email/{id}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Email_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Email_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Email": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Email_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Email"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Email"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Email_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        }
      }
    },
    "/Activity/CompleteActivity": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Activity_InvokeAction_CompleteActivity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteActivity"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        }
      }
    },
    "/Activity/{actionName}": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Activity_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivityCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        }
      }
    },
    "/Activity/$adHocSchema": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Activity_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        }
      }
    },
    "/Activity/{ids}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Activity_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Activity"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Activity_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Activity/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Activity"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Activity_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Activity/{id}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Activity_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Activity"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Activity_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Activity": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Activity_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Activity"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Activity"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Activity_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        }
      }
    },
    "/LotSerialClass/{actionName}": {
      "post": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "LotSerialClass_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LotSerialClassCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          }
        }
      }
    },
    "/LotSerialClass/$adHocSchema": {
      "get": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "LotSerialClass_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          }
        }
      }
    },
    "/LotSerialClass/{ids}": {
      "get": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "LotSerialClass_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "LotSerialClass_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/LotSerialClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "LotSerialClass_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/LotSerialClass/{id}": {
      "get": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "LotSerialClass_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "LotSerialClass_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/LotSerialClass": {
      "get": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "LotSerialClass_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LotSerialClass"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "LotSerialClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          }
        }
      }
    },
    "/InventoryIssue/ReleaseInventoryIssue": {
      "post": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventoryIssue_InvokeAction_ReleaseInventoryIssue",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseInventoryIssue"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryIssue"
            }
          }
        }
      }
    },
    "/InventoryIssue/{actionName}": {
      "post": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventoryIssue_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryIssueCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryIssue"
            }
          }
        }
      }
    },
    "/InventoryIssue/$adHocSchema": {
      "get": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InventoryIssue_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InventoryIssue"
            }
          }
        }
      }
    },
    "/InventoryIssue/{ids}": {
      "get": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InventoryIssue_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryIssue"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InventoryIssue_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryIssue/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InventoryIssue_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/InventoryIssue/{id}": {
      "get": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InventoryIssue_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryIssue"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InventoryIssue_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryIssue": {
      "get": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InventoryIssue_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryIssue"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "InventoryIssue"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InventoryIssue_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryIssue"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InventoryIssue"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryIssue"
            }
          }
        }
      }
    },
    "/Ledger/{actionName}": {
      "post": {
        "tags": [
          "Ledger"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Ledger_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LedgerCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Ledger"
            }
          }
        }
      }
    },
    "/Ledger/$adHocSchema": {
      "get": {
        "tags": [
          "Ledger"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Ledger_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Ledger"
            }
          }
        }
      }
    },
    "/Ledger/{ids}": {
      "get": {
        "tags": [
          "Ledger"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Ledger_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Ledger"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Ledger"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Ledger_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Ledger/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Ledger"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Ledger_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Ledger/{id}": {
      "get": {
        "tags": [
          "Ledger"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Ledger_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Ledger"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Ledger"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Ledger_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Ledger": {
      "get": {
        "tags": [
          "Ledger"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Ledger_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ledger"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Ledger"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Ledger_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ledger"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Ledger"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Ledger"
            }
          }
        }
      }
    },
    "/ServiceOrder/CompleteOrder": {
      "post": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ServiceOrder_InvokeAction_CompleteOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/CancelOrder": {
      "post": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ServiceOrder_InvokeAction_CancelOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/ReopenOrder": {
      "post": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ServiceOrder_InvokeAction_ReopenOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReopenOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/CloseOrder": {
      "post": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ServiceOrder_InvokeAction_CloseOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/UncloseOrder": {
      "post": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ServiceOrder_InvokeAction_UncloseOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UncloseOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/InvoiceOrder": {
      "post": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ServiceOrder_InvokeAction_InvoiceOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/AllowBilling": {
      "post": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ServiceOrder_InvokeAction_AllowBilling",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AllowBilling"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/RecalcExternalTax": {
      "post": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ServiceOrder_InvokeAction_RecalcExternalTax",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecalcExternalTax"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/{actionName}": {
      "post": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ServiceOrder_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOrderCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/$adHocSchema": {
      "get": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ServiceOrder_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/ServiceOrder/{ids}": {
      "get": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ServiceOrder_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ServiceOrder_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ServiceOrder/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ServiceOrder_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ServiceOrder/{id}": {
      "get": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ServiceOrder_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ServiceOrder_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ServiceOrder": {
      "get": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ServiceOrder_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceOrder"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ServiceOrder"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ServiceOrder_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ServiceOrder"
            }
          }
        }
      }
    },
    "/KitSpecification/{actionName}": {
      "post": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "KitSpecification_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KitSpecificationCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          }
        }
      }
    },
    "/KitSpecification/$adHocSchema": {
      "get": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "KitSpecification_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          }
        }
      }
    },
    "/KitSpecification/{ids}": {
      "get": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "KitSpecification_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "KitSpecification_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/KitSpecification/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "KitSpecification_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/KitSpecification/{id}": {
      "get": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "KitSpecification_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "KitSpecification_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/KitSpecification": {
      "get": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "KitSpecification_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitSpecification"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "KitSpecification_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          }
        }
      }
    },
    "/Opportunity/CreateContactFromOpportunity": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Opportunity_InvokeAction_CreateContactFromOpportunity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContactFromOpportunity"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      }
    },
    "/Opportunity/CreateOpportunityInvoice": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Opportunity_InvokeAction_CreateOpportunityInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpportunityInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      }
    },
    "/Opportunity/CreateOpportunitySalesOrder": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Opportunity_InvokeAction_CreateOpportunitySalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpportunitySalesOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      }
    },
    "/Opportunity/CreateAccountFromOpportunity": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Opportunity_InvokeAction_CreateAccountFromOpportunity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountFromOpportunity"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      }
    },
    "/Opportunity/{actionName}": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Opportunity_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpportunityCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      }
    },
    "/Opportunity/$adHocSchema": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Opportunity_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      }
    },
    "/Opportunity/{ids}": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Opportunity_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Opportunity_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Opportunity/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Opportunity_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Opportunity/{id}": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Opportunity_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Opportunity_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Opportunity": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Opportunity_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Opportunity"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Opportunity_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          }
        }
      }
    },
    "/BusinessAccount/ConvertBusinessAccountToCustomer": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_ConvertBusinessAccountToCustomer",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertBusinessAccountToCustomer"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      }
    },
    "/BusinessAccount/MarkBusinessAccountAsValidated": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_MarkBusinessAccountAsValidated",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MarkBusinessAccountAsValidated"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      }
    },
    "/BusinessAccount/ValidateBusinessAccountAddresses": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_ValidateBusinessAccountAddresses",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateBusinessAccountAddresses"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      }
    },
    "/BusinessAccount/ChangeBusinessAccountID": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_ChangeBusinessAccountID",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeBusinessAccountID"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      }
    },
    "/BusinessAccount/CheckForBusinessAccountDuplicates": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_CheckForBusinessAccountDuplicates",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckForBusinessAccountDuplicates"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      }
    },
    "/BusinessAccount/CreateContactFromBusinessAccount": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_CreateContactFromBusinessAccount",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContactFromBusinessAccount"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      }
    },
    "/BusinessAccount/{actionName}": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BusinessAccountCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      }
    },
    "/BusinessAccount/$adHocSchema": {
      "get": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "BusinessAccount_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      }
    },
    "/BusinessAccount/{ids}": {
      "get": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "BusinessAccount_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "BusinessAccount_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/BusinessAccount/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "BusinessAccount_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/BusinessAccount/{id}": {
      "get": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "BusinessAccount_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "BusinessAccount_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/BusinessAccount": {
      "get": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "BusinessAccount_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccount"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "BusinessAccount_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          }
        }
      }
    },
    "/Employee/ChangeEmployeeID": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Employee_InvokeAction_ChangeEmployeeID",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeEmployeeID"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        }
      }
    },
    "/Employee/{actionName}": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Employee_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeeCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        }
      }
    },
    "/Employee/$adHocSchema": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Employee_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        }
      }
    },
    "/Employee/{ids}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Employee_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Employee_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Employee/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Employee_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Employee/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Employee_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Employee_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Employee": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Employee_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Employee"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Employee_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        }
      }
    },
    "/Task/CompleteTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Task_InvokeAction_CompleteTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteTask"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        }
      }
    },
    "/Task/CancelActivityTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Task_InvokeAction_CancelActivityTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelActivityTask"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        }
      }
    },
    "/Task/{actionName}": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Task_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        }
      }
    },
    "/Task/$adHocSchema": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Task_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        }
      }
    },
    "/Task/{ids}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Task_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Task_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Task/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Task_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Task/{id}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Task_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Task_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Task": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Task_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Task_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        }
      }
    },
    "/EarningTypeCode/{actionName}": {
      "post": {
        "tags": [
          "EarningTypeCode"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "EarningTypeCode_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EarningTypeCodeCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EarningTypeCode"
            }
          }
        }
      }
    },
    "/EarningTypeCode/$adHocSchema": {
      "get": {
        "tags": [
          "EarningTypeCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "EarningTypeCode_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/EarningTypeCode"
            }
          }
        }
      }
    },
    "/EarningTypeCode/{ids}": {
      "get": {
        "tags": [
          "EarningTypeCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "EarningTypeCode_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EarningTypeCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EarningTypeCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "EarningTypeCode_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/EarningTypeCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "EarningTypeCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "EarningTypeCode_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/EarningTypeCode/{id}": {
      "get": {
        "tags": [
          "EarningTypeCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "EarningTypeCode_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EarningTypeCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EarningTypeCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "EarningTypeCode_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/EarningTypeCode": {
      "get": {
        "tags": [
          "EarningTypeCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "EarningTypeCode_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EarningTypeCode"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EarningTypeCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "EarningTypeCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EarningTypeCode"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/EarningTypeCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EarningTypeCode"
            }
          }
        }
      }
    },
    "/PayrollBatch/ReleaseBatch": {
      "post": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PayrollBatch_InvokeAction_ReleaseBatch",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseBatch"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayrollBatch"
            }
          }
        }
      }
    },
    "/PayrollBatch/{actionName}": {
      "post": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PayrollBatch_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayrollBatchCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayrollBatch"
            }
          }
        }
      }
    },
    "/PayrollBatch/$adHocSchema": {
      "get": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PayrollBatch_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PayrollBatch"
            }
          }
        }
      }
    },
    "/PayrollBatch/{ids}": {
      "get": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PayrollBatch_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayrollBatch"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PayrollBatch_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayrollBatch/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PayrollBatch_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PayrollBatch/{id}": {
      "get": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PayrollBatch_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayrollBatch"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PayrollBatch_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayrollBatch": {
      "get": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PayrollBatch_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayrollBatch"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PayrollBatch"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PayrollBatch_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayrollBatch"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PayrollBatch"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayrollBatch"
            }
          }
        }
      }
    },
    "/Project/RunProjectAllocation": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_RunProjectAllocation",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunProjectAllocation"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/ValidateProjectBalance": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_ValidateProjectBalance",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateProjectBalance"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/RunProjectBilling": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_RunProjectBilling",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunProjectBilling"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/ApproveProject": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_ApproveProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveProject"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/RejectProject": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_RejectProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectProject"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/LockProjectBudget": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_LockProjectBudget",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LockProjectBudget"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/UnlockProjectBudget": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_UnlockProjectBudget",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockProjectBudget"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/LockProjectCommitments": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_LockProjectCommitments",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LockProjectCommitments"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/UnlockProjectCommitments": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_UnlockProjectCommitments",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockProjectCommitments"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/ChangeProjectID": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_ChangeProjectID",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeProjectID"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/ActivateProject": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_ActivateProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivateProject"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/HoldProject": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_HoldProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HoldProject"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/CompleteProject": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_CompleteProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteProject"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/SuspendProject": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_SuspendProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuspendProject"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/CancelProject": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_CancelProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelProject"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/{actionName}": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/$adHocSchema": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Project_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Project/{ids}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Project_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Project_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Project/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Project_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Project/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Project_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Project_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Project": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Project_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Project_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        }
      }
    },
    "/Lead/CheckLeadForDuplicates": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_CheckLeadForDuplicates",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckLeadForDuplicates"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      }
    },
    "/Lead/ConvertLeadToBAccount": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_ConvertLeadToBAccount",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertLeadToBAccount"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      }
    },
    "/Lead/ConvertLeadToContact": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_ConvertLeadToContact",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertLeadToContact"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      }
    },
    "/Lead/ConvertLeadToOpportunity": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_ConvertLeadToOpportunity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertLeadToOpportunity"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      }
    },
    "/Lead/ValidateLeadAddress": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_ValidateLeadAddress",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateLeadAddress"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      }
    },
    "/Lead/MarkLeadAsValidated": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_MarkLeadAsValidated",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MarkLeadAsValidated"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      }
    },
    "/Lead/{actionName}": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      }
    },
    "/Lead/$adHocSchema": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Lead_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      }
    },
    "/Lead/{ids}": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Lead_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lead"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Lead_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Lead/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Lead"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Lead_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Lead/{id}": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Lead_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lead"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Lead_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Lead": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Lead_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Lead"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Lead"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Lead_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/SubmitExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_SubmitExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitExpenseReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/ApproveExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_ApproveExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveExpenseReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/RejectExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_RejectExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectExpenseReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/PutOnHoldExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_PutOnHoldExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutOnHoldExpenseReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/ClaimExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_ClaimExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClaimExpenseReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/{actionName}": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpenseReceiptCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/$adHocSchema": {
      "get": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ExpenseReceipt_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/{ids}": {
      "get": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ExpenseReceipt_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ExpenseReceipt_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ExpenseReceipt/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ExpenseReceipt_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ExpenseReceipt/{id}": {
      "get": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ExpenseReceipt_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ExpenseReceipt_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ExpenseReceipt": {
      "get": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ExpenseReceipt_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseReceipt"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ExpenseReceipt_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          }
        }
      }
    },
    "/CustomerPaymentMethod/{actionName}": {
      "post": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CustomerPaymentMethod_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethodCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          }
        }
      }
    },
    "/CustomerPaymentMethod/$adHocSchema": {
      "get": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CustomerPaymentMethod_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          }
        }
      }
    },
    "/CustomerPaymentMethod/{ids}": {
      "get": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CustomerPaymentMethod_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CustomerPaymentMethod_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CustomerPaymentMethod/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CustomerPaymentMethod_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/CustomerPaymentMethod/{id}": {
      "get": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CustomerPaymentMethod_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CustomerPaymentMethod_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CustomerPaymentMethod": {
      "get": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CustomerPaymentMethod_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerPaymentMethod"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CustomerPaymentMethod_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          }
        }
      }
    },
    "/LaborCostRate/{actionName}": {
      "post": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "LaborCostRate_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LaborCostRateCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          }
        }
      }
    },
    "/LaborCostRate/$adHocSchema": {
      "get": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "LaborCostRate_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          }
        }
      }
    },
    "/LaborCostRate/{ids}": {
      "get": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "LaborCostRate_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "LaborCostRate_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/LaborCostRate/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "LaborCostRate_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/LaborCostRate/{id}": {
      "get": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "LaborCostRate_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "LaborCostRate_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/LaborCostRate": {
      "get": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "LaborCostRate_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LaborCostRate"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "LaborCostRate_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          }
        }
      }
    },
    "/Invoice/ReleaseInvoice": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Invoice_InvokeAction_ReleaseInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        }
      }
    },
    "/Invoice/{actionName}": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Invoice_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        }
      }
    },
    "/Invoice/$adHocSchema": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Invoice_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        }
      }
    },
    "/Invoice/{ids}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Invoice_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invoice"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Invoice_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Invoice/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Invoice"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Invoice_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Invoice/{id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Invoice_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invoice"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Invoice_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Invoice": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Invoice_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invoice"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Invoice"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Invoice_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        }
      }
    },
    "/ShopifyStore/{actionName}": {
      "post": {
        "tags": [
          "ShopifyStore"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ShopifyStore_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShopifyStoreCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShopifyStore"
            }
          }
        }
      }
    },
    "/ShopifyStore/$adHocSchema": {
      "get": {
        "tags": [
          "ShopifyStore"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ShopifyStore_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ShopifyStore"
            }
          }
        }
      }
    },
    "/ShopifyStore/{ids}": {
      "get": {
        "tags": [
          "ShopifyStore"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ShopifyStore_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShopifyStore"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShopifyStore"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ShopifyStore_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShopifyStore/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ShopifyStore"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ShopifyStore_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ShopifyStore/{id}": {
      "get": {
        "tags": [
          "ShopifyStore"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ShopifyStore_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShopifyStore"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShopifyStore"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ShopifyStore_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShopifyStore": {
      "get": {
        "tags": [
          "ShopifyStore"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ShopifyStore_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShopifyStore"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShopifyStore"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ShopifyStore_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShopifyStore"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ShopifyStore"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShopifyStore"
            }
          }
        }
      }
    },
    "/ChangeOrderClass/{actionName}": {
      "post": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrderClass_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOrderClassCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          }
        }
      }
    },
    "/ChangeOrderClass/$adHocSchema": {
      "get": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ChangeOrderClass_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          }
        }
      }
    },
    "/ChangeOrderClass/{ids}": {
      "get": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ChangeOrderClass_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ChangeOrderClass_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ChangeOrderClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ChangeOrderClass_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ChangeOrderClass/{id}": {
      "get": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ChangeOrderClass_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ChangeOrderClass_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ChangeOrderClass": {
      "get": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ChangeOrderClass_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrderClass"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ChangeOrderClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          }
        }
      }
    },
    "/FOBPoint/{actionName}": {
      "post": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "FOBPoint_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FOBPointCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          }
        }
      }
    },
    "/FOBPoint/$adHocSchema": {
      "get": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "FOBPoint_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          }
        }
      }
    },
    "/FOBPoint/{ids}": {
      "get": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "FOBPoint_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "FOBPoint_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/FOBPoint/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "FOBPoint_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/FOBPoint/{id}": {
      "get": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "FOBPoint_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "FOBPoint_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/FOBPoint": {
      "get": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "FOBPoint_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FOBPoint"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "FOBPoint_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          }
        }
      }
    },
    "/CostCode/ChangeCostCodeID": {
      "post": {
        "tags": [
          "CostCode"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CostCode_InvokeAction_ChangeCostCodeID",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeCostCodeID"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          }
        }
      }
    },
    "/CostCode/{actionName}": {
      "post": {
        "tags": [
          "CostCode"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CostCode_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CostCodeCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          }
        }
      }
    },
    "/CostCode/$adHocSchema": {
      "get": {
        "tags": [
          "CostCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CostCode_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          }
        }
      }
    },
    "/CostCode/{ids}": {
      "get": {
        "tags": [
          "CostCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CostCode_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CostCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CostCode_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CostCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CostCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CostCode_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/CostCode/{id}": {
      "get": {
        "tags": [
          "CostCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CostCode_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CostCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CostCode_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CostCode": {
      "get": {
        "tags": [
          "CostCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CostCode_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CostCode"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CostCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CostCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          }
        }
      }
    },
    "/PayrollWCCCode/{actionName}": {
      "post": {
        "tags": [
          "PayrollWCCCode"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PayrollWCCCode_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayrollWCCCodeCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayrollWCCCode"
            }
          }
        }
      }
    },
    "/PayrollWCCCode/$adHocSchema": {
      "get": {
        "tags": [
          "PayrollWCCCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PayrollWCCCode_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PayrollWCCCode"
            }
          }
        }
      }
    },
    "/PayrollWCCCode/{ids}": {
      "get": {
        "tags": [
          "PayrollWCCCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PayrollWCCCode_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayrollWCCCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayrollWCCCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PayrollWCCCode_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayrollWCCCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PayrollWCCCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PayrollWCCCode_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PayrollWCCCode/{id}": {
      "get": {
        "tags": [
          "PayrollWCCCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PayrollWCCCode_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayrollWCCCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayrollWCCCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PayrollWCCCode_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayrollWCCCode": {
      "get": {
        "tags": [
          "PayrollWCCCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PayrollWCCCode_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayrollWCCCode"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PayrollWCCCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PayrollWCCCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayrollWCCCode"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PayrollWCCCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayrollWCCCode"
            }
          }
        }
      }
    },
    "/ProjectTransaction/ReleaseTransactions": {
      "post": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTransaction_InvokeAction_ReleaseTransactions",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseTransactions"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          }
        }
      }
    },
    "/ProjectTransaction/{actionName}": {
      "post": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTransaction_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTransactionCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          }
        }
      }
    },
    "/ProjectTransaction/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectTransaction_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          }
        }
      }
    },
    "/ProjectTransaction/{ids}": {
      "get": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectTransaction_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectTransaction_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectTransaction/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectTransaction_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ProjectTransaction/{id}": {
      "get": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectTransaction_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectTransaction_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectTransaction": {
      "get": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectTransaction_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTransaction"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectTransaction_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/ReleaseSalesPriceWorksheet": {
      "post": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesPriceWorksheet_InvokeAction_ReleaseSalesPriceWorksheet",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseSalesPriceWorksheet"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/{actionName}": {
      "post": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesPriceWorksheet_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheetCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/$adHocSchema": {
      "get": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "SalesPriceWorksheet_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/{ids}": {
      "get": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "SalesPriceWorksheet_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "SalesPriceWorksheet_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/SalesPriceWorksheet/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "SalesPriceWorksheet_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/{id}": {
      "get": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "SalesPriceWorksheet_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "SalesPriceWorksheet_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/SalesPriceWorksheet": {
      "get": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "SalesPriceWorksheet_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPriceWorksheet"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "SalesPriceWorksheet_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          }
        }
      }
    },
    "/CustomerLocation/{actionName}": {
      "post": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CustomerLocation_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerLocationCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          }
        }
      }
    },
    "/CustomerLocation/$adHocSchema": {
      "get": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CustomerLocation_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          }
        }
      }
    },
    "/CustomerLocation/{ids}": {
      "get": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CustomerLocation_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CustomerLocation_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CustomerLocation/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CustomerLocation_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/CustomerLocation/{id}": {
      "get": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CustomerLocation_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CustomerLocation_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CustomerLocation": {
      "get": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CustomerLocation_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerLocation"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CustomerLocation_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          }
        }
      }
    },
    "/WorkClassCompensationCode/{actionName}": {
      "post": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "WorkClassCompensationCode_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCodeCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          }
        }
      }
    },
    "/WorkClassCompensationCode/$adHocSchema": {
      "get": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "WorkClassCompensationCode_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          }
        }
      }
    },
    "/WorkClassCompensationCode/{ids}": {
      "get": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "WorkClassCompensationCode_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "WorkClassCompensationCode_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/WorkClassCompensationCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "WorkClassCompensationCode_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/WorkClassCompensationCode/{id}": {
      "get": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "WorkClassCompensationCode_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "WorkClassCompensationCode_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/WorkClassCompensationCode": {
      "get": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "WorkClassCompensationCode_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkClassCompensationCode"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "WorkClassCompensationCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          }
        }
      }
    },
    "/CashSale/ReleaseCashSale": {
      "post": {
        "tags": [
          "CashSale"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CashSale_InvokeAction_ReleaseCashSale",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseCashSale"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          }
        }
      }
    },
    "/CashSale/{actionName}": {
      "post": {
        "tags": [
          "CashSale"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CashSale_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CashSaleCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          }
        }
      }
    },
    "/CashSale/$adHocSchema": {
      "get": {
        "tags": [
          "CashSale"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CashSale_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          }
        }
      }
    },
    "/CashSale/{ids}": {
      "get": {
        "tags": [
          "CashSale"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CashSale_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CashSale"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CashSale_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CashSale/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CashSale"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CashSale_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/CashSale/{id}": {
      "get": {
        "tags": [
          "CashSale"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CashSale_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CashSale"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CashSale_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CashSale": {
      "get": {
        "tags": [
          "CashSale"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CashSale_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CashSale"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CashSale"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CashSale_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          }
        }
      }
    },
    "/VendorPricesInquiry/{actionName}": {
      "post": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "VendorPricesInquiry_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          }
        }
      }
    },
    "/VendorPricesInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "VendorPricesInquiry_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          }
        }
      }
    },
    "/VendorPricesInquiry/{ids}": {
      "get": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "VendorPricesInquiry_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "VendorPricesInquiry_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/VendorPricesInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "VendorPricesInquiry_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/VendorPricesInquiry/{id}": {
      "get": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "VendorPricesInquiry_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "VendorPricesInquiry_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/VendorPricesInquiry": {
      "get": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "VendorPricesInquiry_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorPricesInquiry"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "VendorPricesInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          }
        }
      }
    },
    "/Currency/{actionName}": {
      "post": {
        "tags": [
          "Currency"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Currency_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CurrencyCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        }
      }
    },
    "/Currency/$adHocSchema": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Currency_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        }
      }
    },
    "/Currency/{ids}": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Currency_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Currency"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Currency_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Currency/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Currency"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Currency_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Currency/{id}": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Currency_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Currency"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Currency_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Currency": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Currency_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Currency"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Currency"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Currency_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/ReleaseVendorPriceWorksheet": {
      "post": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "VendorPriceWorksheet_InvokeAction_ReleaseVendorPriceWorksheet",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseVendorPriceWorksheet"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/{actionName}": {
      "post": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "VendorPriceWorksheet_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheetCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/$adHocSchema": {
      "get": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "VendorPriceWorksheet_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/{ids}": {
      "get": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "VendorPriceWorksheet_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "VendorPriceWorksheet_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/VendorPriceWorksheet/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "VendorPriceWorksheet_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/{id}": {
      "get": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "VendorPriceWorksheet_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "VendorPriceWorksheet_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/VendorPriceWorksheet": {
      "get": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "VendorPriceWorksheet_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorPriceWorksheet"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "VendorPriceWorksheet_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          }
        }
      }
    },
    "/AccountGroup/{actionName}": {
      "post": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "AccountGroup_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountGroupCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          }
        }
      }
    },
    "/AccountGroup/$adHocSchema": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AccountGroup_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          }
        }
      }
    },
    "/AccountGroup/{ids}": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AccountGroup_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AccountGroup_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/AccountGroup/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AccountGroup_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/AccountGroup/{id}": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AccountGroup_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AccountGroup_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/AccountGroup": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AccountGroup_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountGroup"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AccountGroup_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          }
        }
      }
    },
    "/ShippingTerm/{actionName}": {
      "post": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ShippingTerm_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingTermCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          }
        }
      }
    },
    "/ShippingTerm/$adHocSchema": {
      "get": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ShippingTerm_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          }
        }
      }
    },
    "/ShippingTerm/{ids}": {
      "get": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ShippingTerm_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ShippingTerm_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShippingTerm/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ShippingTerm_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ShippingTerm/{id}": {
      "get": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ShippingTerm_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ShippingTerm_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShippingTerm": {
      "get": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ShippingTerm_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingTerm"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ShippingTerm_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          }
        }
      }
    },
    "/ShippingBox/{actionName}": {
      "post": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ShippingBox_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingBoxCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          }
        }
      }
    },
    "/ShippingBox/$adHocSchema": {
      "get": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ShippingBox_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          }
        }
      }
    },
    "/ShippingBox/{ids}": {
      "get": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ShippingBox_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ShippingBox_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShippingBox/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ShippingBox_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ShippingBox/{id}": {
      "get": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ShippingBox_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ShippingBox_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShippingBox": {
      "get": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ShippingBox_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingBox"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ShippingBox_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          }
        }
      }
    },
    "/ContractUsage/{actionName}": {
      "post": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ContractUsage_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContractUsageCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          }
        }
      }
    },
    "/ContractUsage/$adHocSchema": {
      "get": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ContractUsage_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          }
        }
      }
    },
    "/ContractUsage/{ids}": {
      "get": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ContractUsage_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ContractUsage_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ContractUsage/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ContractUsage_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ContractUsage/{id}": {
      "get": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ContractUsage_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ContractUsage_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ContractUsage": {
      "get": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ContractUsage_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractUsage"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ContractUsage_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          }
        }
      }
    },
    "/ShipVia/{actionName}": {
      "post": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ShipVia_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShipViaCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          }
        }
      }
    },
    "/ShipVia/$adHocSchema": {
      "get": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ShipVia_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          }
        }
      }
    },
    "/ShipVia/{ids}": {
      "get": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ShipVia_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ShipVia_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShipVia/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ShipVia_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ShipVia/{id}": {
      "get": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ShipVia_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ShipVia_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShipVia": {
      "get": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ShipVia_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipVia"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ShipVia_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          }
        }
      }
    },
    "/Shipment/ConfirmShipment": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Shipment_InvokeAction_ConfirmShipment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfirmShipment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        }
      }
    },
    "/Shipment/CorrectShipment": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Shipment_InvokeAction_CorrectShipment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorrectShipment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        }
      }
    },
    "/Shipment/UpdateIN": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Shipment_InvokeAction_UpdateIN",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateIN"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        }
      }
    },
    "/Shipment/PrepareInvoice": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Shipment_InvokeAction_PrepareInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrepareInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        }
      }
    },
    "/Shipment/{actionName}": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Shipment_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShipmentCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        }
      }
    },
    "/Shipment/$adHocSchema": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Shipment_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        }
      }
    },
    "/Shipment/{ids}": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Shipment_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Shipment"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Shipment_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Shipment/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Shipment"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Shipment_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Shipment/{id}": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Shipment_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Shipment"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Shipment_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Shipment": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Shipment_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Shipment"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Shipment"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Shipment_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          }
        }
      }
    },
    "/AccountSummaryInquiry/{actionName}": {
      "post": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "AccountSummaryInquiry_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          }
        }
      }
    },
    "/AccountSummaryInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AccountSummaryInquiry_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          }
        }
      }
    },
    "/AccountSummaryInquiry/{ids}": {
      "get": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AccountSummaryInquiry_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AccountSummaryInquiry_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/AccountSummaryInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AccountSummaryInquiry_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/AccountSummaryInquiry/{id}": {
      "get": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AccountSummaryInquiry_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AccountSummaryInquiry_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/AccountSummaryInquiry": {
      "get": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AccountSummaryInquiry_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountSummaryInquiry"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AccountSummaryInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          }
        }
      }
    },
    "/ProjectTask/ActivateProjectTask": {
      "post": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTask_InvokeAction_ActivateProjectTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivateProjectTask"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        }
      }
    },
    "/ProjectTask/CompleteProjectTask": {
      "post": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTask_InvokeAction_CompleteProjectTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteProjectTask"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        }
      }
    },
    "/ProjectTask/CancelProjectTask": {
      "post": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTask_InvokeAction_CancelProjectTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelProjectTask"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        }
      }
    },
    "/ProjectTask/HoldProjectTask": {
      "post": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTask_InvokeAction_HoldProjectTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HoldProjectTask"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        }
      }
    },
    "/ProjectTask/{actionName}": {
      "post": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTask_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTaskCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        }
      }
    },
    "/ProjectTask/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectTask_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        }
      }
    },
    "/ProjectTask/{ids}": {
      "get": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectTask_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectTask_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectTask/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectTask_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ProjectTask/{id}": {
      "get": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectTask_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectTask_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectTask": {
      "get": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectTask_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTask"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectTask_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          }
        }
      }
    },
    "/SalesPricesInquiry/{actionName}": {
      "post": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesPricesInquiry_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          }
        }
      }
    },
    "/SalesPricesInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "SalesPricesInquiry_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          }
        }
      }
    },
    "/SalesPricesInquiry/{ids}": {
      "get": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "SalesPricesInquiry_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "SalesPricesInquiry_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/SalesPricesInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "SalesPricesInquiry_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/SalesPricesInquiry/{id}": {
      "get": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "SalesPricesInquiry_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "SalesPricesInquiry_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/SalesPricesInquiry": {
      "get": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "SalesPricesInquiry_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPricesInquiry"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "SalesPricesInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          }
        }
      }
    },
    "/ExternalCommitment/{actionName}": {
      "post": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExternalCommitment_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalCommitmentCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          }
        }
      }
    },
    "/ExternalCommitment/$adHocSchema": {
      "get": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ExternalCommitment_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          }
        }
      }
    },
    "/ExternalCommitment/{ids}": {
      "get": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ExternalCommitment_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ExternalCommitment_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ExternalCommitment/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ExternalCommitment_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ExternalCommitment/{id}": {
      "get": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ExternalCommitment_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ExternalCommitment_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ExternalCommitment": {
      "get": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ExternalCommitment_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExternalCommitment"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ExternalCommitment_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          }
        }
      }
    },
    "/Customer/CreateContactFromCustomer": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Customer_InvokeAction_CreateContactFromCustomer",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContactFromCustomer"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        }
      }
    },
    "/Customer/{actionName}": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Customer_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        }
      }
    },
    "/Customer/$adHocSchema": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Customer_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        }
      }
    },
    "/Customer/{ids}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Customer_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Customer_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Customer/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Customer_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Customer/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Customer_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Customer_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Customer_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Customer_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        }
      }
    },
    "/Subcontract/ReleaseFromHold": {
      "post": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Subcontract_InvokeAction_ReleaseFromHold",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseFromHold"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Subcontract"
            }
          }
        }
      }
    },
    "/Subcontract/PutOnHold": {
      "post": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Subcontract_InvokeAction_PutOnHold",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutOnHold"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Subcontract"
            }
          }
        }
      }
    },
    "/Subcontract/{actionName}": {
      "post": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Subcontract_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubcontractCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Subcontract"
            }
          }
        }
      }
    },
    "/Subcontract/$adHocSchema": {
      "get": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Subcontract_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Subcontract"
            }
          }
        }
      }
    },
    "/Subcontract/{ids}": {
      "get": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Subcontract_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Subcontract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Subcontract_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Subcontract/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Subcontract_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Subcontract/{id}": {
      "get": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Subcontract_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Subcontract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Subcontract_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Subcontract": {
      "get": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Subcontract_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subcontract"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subcontract"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Subcontract_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subcontract"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Subcontract"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Subcontract"
            }
          }
        }
      }
    },
    "/AccountDetailsForPeriodInquiry/{actionName}": {
      "post": {
        "tags": [
          "AccountDetailsForPeriodInquiry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "AccountDetailsForPeriodInquiry_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountDetailsForPeriodInquiryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsForPeriodInquiry"
            }
          }
        }
      }
    },
    "/AccountDetailsForPeriodInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "AccountDetailsForPeriodInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AccountDetailsForPeriodInquiry_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsForPeriodInquiry"
            }
          }
        }
      }
    },
    "/AccountDetailsForPeriodInquiry/{ids}": {
      "get": {
        "tags": [
          "AccountDetailsForPeriodInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AccountDetailsForPeriodInquiry_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsForPeriodInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountDetailsForPeriodInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AccountDetailsForPeriodInquiry_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/AccountDetailsForPeriodInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AccountDetailsForPeriodInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AccountDetailsForPeriodInquiry_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/AccountDetailsForPeriodInquiry/{id}": {
      "get": {
        "tags": [
          "AccountDetailsForPeriodInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AccountDetailsForPeriodInquiry_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsForPeriodInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountDetailsForPeriodInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AccountDetailsForPeriodInquiry_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/AccountDetailsForPeriodInquiry": {
      "get": {
        "tags": [
          "AccountDetailsForPeriodInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AccountDetailsForPeriodInquiry_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountDetailsForPeriodInquiry"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountDetailsForPeriodInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AccountDetailsForPeriodInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountDetailsForPeriodInquiry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsForPeriodInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsForPeriodInquiry"
            }
          }
        }
      }
    },
    "/DeductionBenefitCode/{actionName}": {
      "post": {
        "tags": [
          "DeductionBenefitCode"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "DeductionBenefitCode_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeductionBenefitCodeCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/DeductionBenefitCode"
            }
          }
        }
      }
    },
    "/DeductionBenefitCode/$adHocSchema": {
      "get": {
        "tags": [
          "DeductionBenefitCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "DeductionBenefitCode_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/DeductionBenefitCode"
            }
          }
        }
      }
    },
    "/DeductionBenefitCode/{ids}": {
      "get": {
        "tags": [
          "DeductionBenefitCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "DeductionBenefitCode_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/DeductionBenefitCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DeductionBenefitCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "DeductionBenefitCode_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/DeductionBenefitCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "DeductionBenefitCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "DeductionBenefitCode_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/DeductionBenefitCode/{id}": {
      "get": {
        "tags": [
          "DeductionBenefitCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "DeductionBenefitCode_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/DeductionBenefitCode"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DeductionBenefitCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "DeductionBenefitCode_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/DeductionBenefitCode": {
      "get": {
        "tags": [
          "DeductionBenefitCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "DeductionBenefitCode_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeductionBenefitCode"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DeductionBenefitCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "DeductionBenefitCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeductionBenefitCode"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/DeductionBenefitCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/DeductionBenefitCode"
            }
          }
        }
      }
    },
    "/PhysicalInventoryCount/{actionName}": {
      "post": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PhysicalInventoryCount_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCountCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          }
        }
      }
    },
    "/PhysicalInventoryCount/$adHocSchema": {
      "get": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PhysicalInventoryCount_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          }
        }
      }
    },
    "/PhysicalInventoryCount/{ids}": {
      "get": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PhysicalInventoryCount_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PhysicalInventoryCount_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PhysicalInventoryCount/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PhysicalInventoryCount_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PhysicalInventoryCount/{id}": {
      "get": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PhysicalInventoryCount_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PhysicalInventoryCount_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PhysicalInventoryCount": {
      "get": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PhysicalInventoryCount_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInventoryCount"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PhysicalInventoryCount_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          }
        }
      }
    },
    "/Subaccount/{actionName}": {
      "post": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Subaccount_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubaccountCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        }
      }
    },
    "/Subaccount/$adHocSchema": {
      "get": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Subaccount_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        }
      }
    },
    "/Subaccount/{ids}": {
      "get": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Subaccount_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Subaccount_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Subaccount/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Subaccount_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Subaccount/{id}": {
      "get": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Subaccount_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Subaccount_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Subaccount": {
      "get": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Subaccount_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subaccount"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Subaccount_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          }
        }
      }
    },
    "/TimeEntry/CompleteTimeEntry": {
      "post": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TimeEntry_InvokeAction_CompleteTimeEntry",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteTimeEntry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          }
        }
      }
    },
    "/TimeEntry/OpenTimeEntry": {
      "post": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TimeEntry_InvokeAction_OpenTimeEntry",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenTimeEntry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          }
        }
      }
    },
    "/TimeEntry/{actionName}": {
      "post": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TimeEntry_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeEntryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          }
        }
      }
    },
    "/TimeEntry/$adHocSchema": {
      "get": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TimeEntry_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          }
        }
      }
    },
    "/TimeEntry/{ids}": {
      "get": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TimeEntry_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TimeEntry_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TimeEntry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TimeEntry_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/TimeEntry/{id}": {
      "get": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TimeEntry_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TimeEntry_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TimeEntry": {
      "get": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TimeEntry_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeEntry"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TimeEntry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/CancelPhysicalInventory": {
      "post": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PhysicalInventoryReview_InvokeAction_CancelPhysicalInventory",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelPhysicalInventory"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/CompletePhysicalInventory": {
      "post": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PhysicalInventoryReview_InvokeAction_CompletePhysicalInventory",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompletePhysicalInventory"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/FinishCountingPhysicalInventory": {
      "post": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PhysicalInventoryReview_InvokeAction_FinishCountingPhysicalInventory",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinishCountingPhysicalInventory"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/{actionName}": {
      "post": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PhysicalInventoryReview_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReviewCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/$adHocSchema": {
      "get": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PhysicalInventoryReview_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/{ids}": {
      "get": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PhysicalInventoryReview_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PhysicalInventoryReview_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PhysicalInventoryReview/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PhysicalInventoryReview_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/{id}": {
      "get": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PhysicalInventoryReview_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PhysicalInventoryReview_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PhysicalInventoryReview": {
      "get": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PhysicalInventoryReview_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInventoryReview"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PhysicalInventoryReview_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/ReleaseProFormaInvoice": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_ReleaseProFormaInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseProFormaInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/ApproveProFormaInvoice": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_ApproveProFormaInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveProFormaInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/RejectProFormaInvoice": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_RejectProFormaInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectProFormaInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/EmailProFormaInvoice": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_EmailProFormaInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailProFormaInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/HoldProFormaInvoice": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_HoldProFormaInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HoldProFormaInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/RemoveProFormaInvoiceFromHold": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_RemoveProFormaInvoiceFromHold",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveProFormaInvoiceFromHold"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/{actionName}": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProFormaInvoiceCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/$adHocSchema": {
      "get": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProFormaInvoice_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/{ids}": {
      "get": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProFormaInvoice_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProFormaInvoice_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProFormaInvoice/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProFormaInvoice_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ProFormaInvoice/{id}": {
      "get": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProFormaInvoice_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProFormaInvoice_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProFormaInvoice": {
      "get": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProFormaInvoice_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProFormaInvoice"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProFormaInvoice_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          }
        }
      }
    },
    "/InventoryAdjustment/ReleaseAdjustment": {
      "post": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventoryAdjustment_InvokeAction_ReleaseAdjustment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseAdjustment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryAdjustment"
            }
          }
        }
      }
    },
    "/InventoryAdjustment/{actionName}": {
      "post": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventoryAdjustment_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryAdjustmentCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryAdjustment"
            }
          }
        }
      }
    },
    "/InventoryAdjustment/$adHocSchema": {
      "get": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InventoryAdjustment_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InventoryAdjustment"
            }
          }
        }
      }
    },
    "/InventoryAdjustment/{ids}": {
      "get": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InventoryAdjustment_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryAdjustment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InventoryAdjustment_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryAdjustment/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InventoryAdjustment_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/InventoryAdjustment/{id}": {
      "get": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InventoryAdjustment_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryAdjustment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InventoryAdjustment_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryAdjustment": {
      "get": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InventoryAdjustment_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryAdjustment"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "InventoryAdjustment"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InventoryAdjustment_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryAdjustment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InventoryAdjustment"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryAdjustment"
            }
          }
        }
      }
    },
    "/ProjectTemplate/ActivateProjectTemplate": {
      "post": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTemplate_InvokeAction_ActivateProjectTemplate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivateProjectTemplate"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          }
        }
      }
    },
    "/ProjectTemplate/HoldProjectTemplate": {
      "post": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTemplate_InvokeAction_HoldProjectTemplate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HoldProjectTemplate"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          }
        }
      }
    },
    "/ProjectTemplate/{actionName}": {
      "post": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTemplate_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTemplateCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          }
        }
      }
    },
    "/ProjectTemplate/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectTemplate_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          }
        }
      }
    },
    "/ProjectTemplate/{ids}": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectTemplate_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectTemplate_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectTemplate/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectTemplate_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ProjectTemplate/{id}": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectTemplate_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectTemplate_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectTemplate": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectTemplate_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTemplate"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectTemplate_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          }
        }
      }
    },
    "/KitAssembly/ReleaseKitAssembly": {
      "post": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "KitAssembly_InvokeAction_ReleaseKitAssembly",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseKitAssembly"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          }
        }
      }
    },
    "/KitAssembly/{actionName}": {
      "post": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "KitAssembly_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KitAssemblyCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          }
        }
      }
    },
    "/KitAssembly/$adHocSchema": {
      "get": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "KitAssembly_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          }
        }
      }
    },
    "/KitAssembly/{ids}": {
      "get": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "KitAssembly_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "KitAssembly_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/KitAssembly/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "KitAssembly_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/KitAssembly/{id}": {
      "get": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "KitAssembly_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "KitAssembly_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/KitAssembly": {
      "get": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "KitAssembly_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssembly"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "KitAssembly_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          }
        }
      }
    },
    "/VendorClass/{actionName}": {
      "post": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "VendorClass_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorClassCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          }
        }
      }
    },
    "/VendorClass/$adHocSchema": {
      "get": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "VendorClass_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          }
        }
      }
    },
    "/VendorClass/{ids}": {
      "get": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "VendorClass_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "VendorClass_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/VendorClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "VendorClass_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/VendorClass/{id}": {
      "get": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "VendorClass_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "VendorClass_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/VendorClass": {
      "get": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "VendorClass_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorClass"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "VendorClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/ReleasePurchaseReceipt": {
      "post": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PurchaseReceipt_InvokeAction_ReleasePurchaseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleasePurchaseReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/CreateAPBill": {
      "post": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PurchaseReceipt_InvokeAction_CreateAPBill",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAPBill"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/{actionName}": {
      "post": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PurchaseReceipt_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseReceiptCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/$adHocSchema": {
      "get": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PurchaseReceipt_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/{ids}": {
      "get": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PurchaseReceipt_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PurchaseReceipt_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PurchaseReceipt/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PurchaseReceipt_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PurchaseReceipt/{id}": {
      "get": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PurchaseReceipt_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PurchaseReceipt_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PurchaseReceipt": {
      "get": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PurchaseReceipt_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseReceipt"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PurchaseReceipt_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          }
        }
      }
    },
    "/Warehouse/{actionName}": {
      "post": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Warehouse_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WarehouseCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        }
      }
    },
    "/Warehouse/$adHocSchema": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Warehouse_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        }
      }
    },
    "/Warehouse/{ids}": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Warehouse_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Warehouse_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Warehouse/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Warehouse_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Warehouse/{id}": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Warehouse_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Warehouse_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Warehouse": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Warehouse_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Warehouse"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Warehouse_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          }
        }
      }
    },
    "/TemplateItems/{actionName}": {
      "post": {
        "tags": [
          "TemplateItems"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TemplateItems_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateItemsCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TemplateItems"
            }
          }
        }
      }
    },
    "/TemplateItems/$adHocSchema": {
      "get": {
        "tags": [
          "TemplateItems"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TemplateItems_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TemplateItems"
            }
          }
        }
      }
    },
    "/TemplateItems/{ids}": {
      "get": {
        "tags": [
          "TemplateItems"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TemplateItems_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TemplateItems"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TemplateItems"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TemplateItems_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TemplateItems/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TemplateItems"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TemplateItems_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/TemplateItems/{id}": {
      "get": {
        "tags": [
          "TemplateItems"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TemplateItems_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TemplateItems"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TemplateItems"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TemplateItems_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TemplateItems": {
      "get": {
        "tags": [
          "TemplateItems"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TemplateItems_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TemplateItems"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TemplateItems"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TemplateItems_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateItems"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TemplateItems"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TemplateItems"
            }
          }
        }
      }
    },
    "/StorageDetailsByLocationInquiry/{actionName}": {
      "post": {
        "tags": [
          "StorageDetailsByLocationInquiry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "StorageDetailsByLocationInquiry_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StorageDetailsByLocationInquiryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsByLocationInquiry"
            }
          }
        }
      }
    },
    "/StorageDetailsByLocationInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "StorageDetailsByLocationInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "StorageDetailsByLocationInquiry_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsByLocationInquiry"
            }
          }
        }
      }
    },
    "/StorageDetailsByLocationInquiry/{ids}": {
      "get": {
        "tags": [
          "StorageDetailsByLocationInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "StorageDetailsByLocationInquiry_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsByLocationInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StorageDetailsByLocationInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "StorageDetailsByLocationInquiry_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/StorageDetailsByLocationInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "StorageDetailsByLocationInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "StorageDetailsByLocationInquiry_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/StorageDetailsByLocationInquiry/{id}": {
      "get": {
        "tags": [
          "StorageDetailsByLocationInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "StorageDetailsByLocationInquiry_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsByLocationInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StorageDetailsByLocationInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "StorageDetailsByLocationInquiry_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/StorageDetailsByLocationInquiry": {
      "get": {
        "tags": [
          "StorageDetailsByLocationInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "StorageDetailsByLocationInquiry_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageDetailsByLocationInquiry"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "StorageDetailsByLocationInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "StorageDetailsByLocationInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StorageDetailsByLocationInquiry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsByLocationInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsByLocationInquiry"
            }
          }
        }
      }
    },
    "/Carrier/{actionName}": {
      "post": {
        "tags": [
          "Carrier"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Carrier_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CarrierCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          }
        }
      }
    },
    "/Carrier/$adHocSchema": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Carrier_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          }
        }
      }
    },
    "/Carrier/{ids}": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Carrier_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Carrier"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Carrier_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Carrier/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Carrier"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Carrier_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Carrier/{id}": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Carrier_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Carrier"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Carrier_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Carrier": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Carrier_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Carrier"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Carrier"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Carrier_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          }
        }
      }
    },
    "/InventorySummaryInquiry/{actionName}": {
      "post": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventorySummaryInquiry_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          }
        }
      }
    },
    "/InventorySummaryInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InventorySummaryInquiry_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          }
        }
      }
    },
    "/InventorySummaryInquiry/{ids}": {
      "get": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InventorySummaryInquiry_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InventorySummaryInquiry_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventorySummaryInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InventorySummaryInquiry_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/InventorySummaryInquiry/{id}": {
      "get": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InventorySummaryInquiry_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InventorySummaryInquiry_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventorySummaryInquiry": {
      "get": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InventorySummaryInquiry_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventorySummaryInquiry"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InventorySummaryInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          }
        }
      }
    },
    "/SalesInvoice/ReleaseSalesInvoice": {
      "post": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesInvoice_InvokeAction_ReleaseSalesInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseSalesInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          }
        }
      }
    },
    "/SalesInvoice/{actionName}": {
      "post": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesInvoice_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesInvoiceCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          }
        }
      }
    },
    "/SalesInvoice/$adHocSchema": {
      "get": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "SalesInvoice_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          }
        }
      }
    },
    "/SalesInvoice/{ids}": {
      "get": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "SalesInvoice_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "SalesInvoice_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/SalesInvoice/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "SalesInvoice_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/SalesInvoice/{id}": {
      "get": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "SalesInvoice_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "SalesInvoice_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/SalesInvoice": {
      "get": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "SalesInvoice_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoice"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "SalesInvoice_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          }
        }
      }
    },
    "/ItemClass/{actionName}": {
      "post": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ItemClass_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemClassCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          }
        }
      }
    },
    "/ItemClass/$adHocSchema": {
      "get": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ItemClass_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          }
        }
      }
    },
    "/ItemClass/{ids}": {
      "get": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ItemClass_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ItemClass_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ItemClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ItemClass_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ItemClass/{id}": {
      "get": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ItemClass_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ItemClass_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ItemClass": {
      "get": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ItemClass_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemClass"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ItemClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          }
        }
      }
    },
    "/WorkLocation/{actionName}": {
      "post": {
        "tags": [
          "WorkLocation"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "WorkLocation_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkLocationCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/WorkLocation"
            }
          }
        }
      }
    },
    "/WorkLocation/$adHocSchema": {
      "get": {
        "tags": [
          "WorkLocation"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "WorkLocation_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/WorkLocation"
            }
          }
        }
      }
    },
    "/WorkLocation/{ids}": {
      "get": {
        "tags": [
          "WorkLocation"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "WorkLocation_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/WorkLocation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkLocation"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "WorkLocation_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/WorkLocation/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "WorkLocation"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "WorkLocation_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/WorkLocation/{id}": {
      "get": {
        "tags": [
          "WorkLocation"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "WorkLocation_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/WorkLocation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkLocation"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "WorkLocation_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/WorkLocation": {
      "get": {
        "tags": [
          "WorkLocation"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "WorkLocation_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkLocation"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkLocation"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "WorkLocation_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkLocation"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/WorkLocation"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/WorkLocation"
            }
          }
        }
      }
    },
    "/JournalTransaction/ReleaseJournalTransaction": {
      "post": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "JournalTransaction_InvokeAction_ReleaseJournalTransaction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseJournalTransaction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          }
        }
      }
    },
    "/JournalTransaction/{actionName}": {
      "post": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "JournalTransaction_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JournalTransactionCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          }
        }
      }
    },
    "/JournalTransaction/$adHocSchema": {
      "get": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "JournalTransaction_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          }
        }
      }
    },
    "/JournalTransaction/{ids}": {
      "get": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "JournalTransaction_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "JournalTransaction_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/JournalTransaction/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "JournalTransaction_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/JournalTransaction/{id}": {
      "get": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "JournalTransaction_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "JournalTransaction_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/JournalTransaction": {
      "get": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "JournalTransaction_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JournalTransaction"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "JournalTransaction_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          }
        }
      }
    },
    "/EmployeePayrollSettings/ImportEmployeeTaxes": {
      "post": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "EmployeePayrollSettings_InvokeAction_ImportEmployeeTaxes",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportEmployeeTaxes"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollSettings"
            }
          }
        }
      }
    },
    "/EmployeePayrollSettings/{actionName}": {
      "post": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "EmployeePayrollSettings_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeePayrollSettingsCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollSettings"
            }
          }
        }
      }
    },
    "/EmployeePayrollSettings/$adHocSchema": {
      "get": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "EmployeePayrollSettings_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollSettings"
            }
          }
        }
      }
    },
    "/EmployeePayrollSettings/{ids}": {
      "get": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "EmployeePayrollSettings_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollSettings"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "EmployeePayrollSettings_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/EmployeePayrollSettings/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "EmployeePayrollSettings_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/EmployeePayrollSettings/{id}": {
      "get": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "EmployeePayrollSettings_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollSettings"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "EmployeePayrollSettings_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/EmployeePayrollSettings": {
      "get": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "EmployeePayrollSettings_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeePayrollSettings"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EmployeePayrollSettings"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "EmployeePayrollSettings_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeePayrollSettings"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollSettings"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollSettings"
            }
          }
        }
      }
    },
    "/Account/{actionName}": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Account_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/Account/$adHocSchema": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Account_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/Account/{ids}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Account_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Account_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Account/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Account_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Account/{id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Account_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Account_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Account_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Account_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/NonStockItem/UpdateStandardCostNonStockItem": {
      "post": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "NonStockItem_InvokeAction_UpdateStandardCostNonStockItem",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStandardCostNonStockItem"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          }
        }
      }
    },
    "/NonStockItem/{actionName}": {
      "post": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "NonStockItem_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NonStockItemCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          }
        }
      }
    },
    "/NonStockItem/$adHocSchema": {
      "get": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "NonStockItem_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          }
        }
      }
    },
    "/NonStockItem/{ids}": {
      "get": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "NonStockItem_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "NonStockItem_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/NonStockItem/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "NonStockItem_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/NonStockItem/{id}": {
      "get": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "NonStockItem_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "NonStockItem_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/NonStockItem": {
      "get": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "NonStockItem_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonStockItem"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "NonStockItem_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          }
        }
      }
    },
    "/UnitsOfMeasure/{actionName}": {
      "post": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "UnitsOfMeasure_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasureCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          }
        }
      }
    },
    "/UnitsOfMeasure/$adHocSchema": {
      "get": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "UnitsOfMeasure_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          }
        }
      }
    },
    "/UnitsOfMeasure/{ids}": {
      "get": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "UnitsOfMeasure_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "UnitsOfMeasure_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/UnitsOfMeasure/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "UnitsOfMeasure_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/UnitsOfMeasure/{id}": {
      "get": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "UnitsOfMeasure_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "UnitsOfMeasure_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/UnitsOfMeasure": {
      "get": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "UnitsOfMeasure_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitsOfMeasure"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "UnitsOfMeasure_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          }
        }
      }
    },
    "/ExpenseClaim/ApproveExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_ApproveExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveExpenseClaim"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      }
    },
    "/ExpenseClaim/RejectExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_RejectExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectExpenseClaim"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      }
    },
    "/ExpenseClaim/SubmitExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_SubmitExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitExpenseClaim"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      }
    },
    "/ExpenseClaim/ReleaseExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_ReleaseExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseExpenseClaim"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      }
    },
    "/ExpenseClaim/PutOnHoldExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_PutOnHoldExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutOnHoldExpenseClaim"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      }
    },
    "/ExpenseClaim/{actionName}": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpenseClaimCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      }
    },
    "/ExpenseClaim/$adHocSchema": {
      "get": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ExpenseClaim_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      }
    },
    "/ExpenseClaim/{ids}": {
      "get": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ExpenseClaim_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ExpenseClaim_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ExpenseClaim/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ExpenseClaim_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ExpenseClaim/{id}": {
      "get": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ExpenseClaim_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ExpenseClaim_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ExpenseClaim": {
      "get": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ExpenseClaim_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseClaim"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ExpenseClaim_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          }
        }
      }
    },
    "/InventoryReceipt/ReleaseInventoryReceipt": {
      "post": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventoryReceipt_InvokeAction_ReleaseInventoryReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseInventoryReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          }
        }
      }
    },
    "/InventoryReceipt/{actionName}": {
      "post": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventoryReceipt_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryReceiptCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          }
        }
      }
    },
    "/InventoryReceipt/$adHocSchema": {
      "get": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InventoryReceipt_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          }
        }
      }
    },
    "/InventoryReceipt/{ids}": {
      "get": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InventoryReceipt_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InventoryReceipt_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryReceipt/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InventoryReceipt_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/InventoryReceipt/{id}": {
      "get": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InventoryReceipt_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InventoryReceipt_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryReceipt": {
      "get": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InventoryReceipt_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryReceipt"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InventoryReceipt_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          }
        }
      }
    },
    "/Contact/CheckForContactDuplicates": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_CheckForContactDuplicates",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckForContactDuplicates"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      }
    },
    "/Contact/MarkContactAsValidated": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_MarkContactAsValidated",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MarkContactAsValidated"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      }
    },
    "/Contact/ValidateContactAddress": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_ValidateContactAddress",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateContactAddress"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      }
    },
    "/Contact/CreateAccountFromContact": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_CreateAccountFromContact",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountFromContact"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      }
    },
    "/Contact/{actionName}": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContactCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      }
    },
    "/Contact/$adHocSchema": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Contact_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      }
    },
    "/Contact/{ids}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Contact_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Contact_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Contact/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Contact"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Contact_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Contact/{id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Contact_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Contact_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Contact": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Contact_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Contact_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        }
      }
    },
    "/AttributeDefinition/{actionName}": {
      "post": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "AttributeDefinition_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttributeDefinitionCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          }
        }
      }
    },
    "/AttributeDefinition/$adHocSchema": {
      "get": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AttributeDefinition_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          }
        }
      }
    },
    "/AttributeDefinition/{ids}": {
      "get": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AttributeDefinition_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AttributeDefinition_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/AttributeDefinition/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AttributeDefinition_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/AttributeDefinition/{id}": {
      "get": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AttributeDefinition_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AttributeDefinition_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/AttributeDefinition": {
      "get": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AttributeDefinition_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDefinition"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AttributeDefinition_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          }
        }
      }
    },
    "/Discount/UpdateDiscounts": {
      "post": {
        "tags": [
          "Discount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Discount_InvokeAction_UpdateDiscounts",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDiscounts"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          }
        }
      }
    },
    "/Discount/{actionName}": {
      "post": {
        "tags": [
          "Discount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Discount_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscountCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          }
        }
      }
    },
    "/Discount/$adHocSchema": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Discount_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          }
        }
      }
    },
    "/Discount/{ids}": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Discount_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Discount"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Discount_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Discount/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Discount"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Discount_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Discount/{id}": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Discount_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Discount"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Discount_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Discount": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Discount_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Discount"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Discount"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Discount_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          }
        }
      }
    },
    "/WorkCalendar/{actionName}": {
      "post": {
        "tags": [
          "WorkCalendar"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "WorkCalendar_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkCalendarCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/WorkCalendar"
            }
          }
        }
      }
    },
    "/WorkCalendar/$adHocSchema": {
      "get": {
        "tags": [
          "WorkCalendar"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "WorkCalendar_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/WorkCalendar"
            }
          }
        }
      }
    },
    "/WorkCalendar/{ids}": {
      "get": {
        "tags": [
          "WorkCalendar"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "WorkCalendar_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/WorkCalendar"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkCalendar"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "WorkCalendar_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/WorkCalendar/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "WorkCalendar"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "WorkCalendar_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/WorkCalendar/{id}": {
      "get": {
        "tags": [
          "WorkCalendar"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "WorkCalendar_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/WorkCalendar"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkCalendar"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "WorkCalendar_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/WorkCalendar": {
      "get": {
        "tags": [
          "WorkCalendar"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "WorkCalendar_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkCalendar"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkCalendar"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "WorkCalendar_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkCalendar"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/WorkCalendar"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/WorkCalendar"
            }
          }
        }
      }
    },
    "/TaxReportingSettings/{actionName}": {
      "post": {
        "tags": [
          "TaxReportingSettings"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TaxReportingSettings_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxReportingSettingsCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TaxReportingSettings"
            }
          }
        }
      }
    },
    "/TaxReportingSettings/$adHocSchema": {
      "get": {
        "tags": [
          "TaxReportingSettings"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TaxReportingSettings_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TaxReportingSettings"
            }
          }
        }
      }
    },
    "/TaxReportingSettings/{ids}": {
      "get": {
        "tags": [
          "TaxReportingSettings"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TaxReportingSettings_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxReportingSettings"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxReportingSettings"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TaxReportingSettings_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TaxReportingSettings/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TaxReportingSettings"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TaxReportingSettings_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/TaxReportingSettings/{id}": {
      "get": {
        "tags": [
          "TaxReportingSettings"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TaxReportingSettings_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxReportingSettings"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxReportingSettings"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TaxReportingSettings_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TaxReportingSettings": {
      "get": {
        "tags": [
          "TaxReportingSettings"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TaxReportingSettings_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxReportingSettings"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaxReportingSettings"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TaxReportingSettings_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxReportingSettings"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TaxReportingSettings"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TaxReportingSettings"
            }
          }
        }
      }
    },
    "/FinancialPeriod/{actionName}": {
      "post": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "FinancialPeriod_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialPeriodCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          }
        }
      }
    },
    "/FinancialPeriod/$adHocSchema": {
      "get": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "FinancialPeriod_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          }
        }
      }
    },
    "/FinancialPeriod/{ids}": {
      "get": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "FinancialPeriod_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "FinancialPeriod_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/FinancialPeriod/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "FinancialPeriod_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/FinancialPeriod/{id}": {
      "get": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "FinancialPeriod_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "FinancialPeriod_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/FinancialPeriod": {
      "get": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "FinancialPeriod_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialPeriod"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "FinancialPeriod_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          }
        }
      }
    },
    "/UnionLocal/{actionName}": {
      "post": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "UnionLocal_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnionLocalCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          }
        }
      }
    },
    "/UnionLocal/$adHocSchema": {
      "get": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "UnionLocal_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          }
        }
      }
    },
    "/UnionLocal/{ids}": {
      "get": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "UnionLocal_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "UnionLocal_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/UnionLocal/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "UnionLocal_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/UnionLocal/{id}": {
      "get": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "UnionLocal_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "UnionLocal_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/UnionLocal": {
      "get": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "UnionLocal_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnionLocal"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "UnionLocal_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          }
        }
      }
    },
    "/Tax/{actionName}": {
      "post": {
        "tags": [
          "Tax"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Tax_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          }
        }
      }
    },
    "/Tax/$adHocSchema": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Tax_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          }
        }
      }
    },
    "/Tax/{ids}": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Tax_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tax"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Tax_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Tax/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Tax"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Tax_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Tax/{id}": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Tax_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tax"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Tax_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Tax": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Tax_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tax"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tax"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Tax_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          }
        }
      }
    },
    "/PayPeriod/{actionName}": {
      "post": {
        "tags": [
          "PayPeriod"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PayPeriod_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayPeriodCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayPeriod"
            }
          }
        }
      }
    },
    "/PayPeriod/$adHocSchema": {
      "get": {
        "tags": [
          "PayPeriod"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PayPeriod_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PayPeriod"
            }
          }
        }
      }
    },
    "/PayPeriod/{ids}": {
      "get": {
        "tags": [
          "PayPeriod"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PayPeriod_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayPeriod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayPeriod"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PayPeriod_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayPeriod/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PayPeriod"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PayPeriod_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PayPeriod/{id}": {
      "get": {
        "tags": [
          "PayPeriod"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PayPeriod_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayPeriod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayPeriod"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PayPeriod_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayPeriod": {
      "get": {
        "tags": [
          "PayPeriod"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PayPeriod_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayPeriod"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PayPeriod"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PayPeriod_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayPeriod"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PayPeriod"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayPeriod"
            }
          }
        }
      }
    },
    "/Payment/CaptureCreditCardPayment": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_CaptureCreditCardPayment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CaptureCreditCardPayment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      }
    },
    "/Payment/ReleasePayment": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_ReleasePayment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleasePayment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      }
    },
    "/Payment/VoidPayment": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_VoidPayment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidPayment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      }
    },
    "/Payment/VoidCardPayment": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_VoidCardPayment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidCardPayment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      }
    },
    "/Payment/CardOperation": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_CardOperation",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CardOperation"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      }
    },
    "/Payment/{actionName}": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      }
    },
    "/Payment/$adHocSchema": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Payment_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      }
    },
    "/Payment/{ids}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Payment_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payment"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Payment_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Payment/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Payment_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Payment/{id}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Payment_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payment"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Payment_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Payment": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Payment_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Payment_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        }
      }
    },
    "/BigCommerceStores/{actionName}": {
      "post": {
        "tags": [
          "BigCommerceStores"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BigCommerceStores_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BigCommerceStoresCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BigCommerceStores"
            }
          }
        }
      }
    },
    "/BigCommerceStores/$adHocSchema": {
      "get": {
        "tags": [
          "BigCommerceStores"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "BigCommerceStores_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/BigCommerceStores"
            }
          }
        }
      }
    },
    "/BigCommerceStores/{ids}": {
      "get": {
        "tags": [
          "BigCommerceStores"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "BigCommerceStores_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/BigCommerceStores"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BigCommerceStores"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "BigCommerceStores_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/BigCommerceStores/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "BigCommerceStores"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "BigCommerceStores_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/BigCommerceStores/{id}": {
      "get": {
        "tags": [
          "BigCommerceStores"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "BigCommerceStores_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/BigCommerceStores"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BigCommerceStores"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "BigCommerceStores_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/BigCommerceStores": {
      "get": {
        "tags": [
          "BigCommerceStores"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "BigCommerceStores_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BigCommerceStores"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "BigCommerceStores"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "BigCommerceStores_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BigCommerceStores"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/BigCommerceStores"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/BigCommerceStores"
            }
          }
        }
      }
    },
    "/ItemWarehouse/{actionName}": {
      "post": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ItemWarehouse_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemWarehouseCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          }
        }
      }
    },
    "/ItemWarehouse/$adHocSchema": {
      "get": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ItemWarehouse_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          }
        }
      }
    },
    "/ItemWarehouse/{ids}": {
      "get": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ItemWarehouse_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ItemWarehouse_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ItemWarehouse/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ItemWarehouse_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ItemWarehouse/{id}": {
      "get": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ItemWarehouse_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ItemWarehouse_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ItemWarehouse": {
      "get": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ItemWarehouse_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemWarehouse"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ItemWarehouse_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          }
        }
      }
    },
    "/StorageDetailsInquiry/{actionName}": {
      "post": {
        "tags": [
          "StorageDetailsInquiry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "StorageDetailsInquiry_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StorageDetailsInquiryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsInquiry"
            }
          }
        }
      }
    },
    "/StorageDetailsInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "StorageDetailsInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "StorageDetailsInquiry_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsInquiry"
            }
          }
        }
      }
    },
    "/StorageDetailsInquiry/{ids}": {
      "get": {
        "tags": [
          "StorageDetailsInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "StorageDetailsInquiry_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StorageDetailsInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "StorageDetailsInquiry_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/StorageDetailsInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "StorageDetailsInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "StorageDetailsInquiry_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/StorageDetailsInquiry/{id}": {
      "get": {
        "tags": [
          "StorageDetailsInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "StorageDetailsInquiry_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StorageDetailsInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "StorageDetailsInquiry_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/StorageDetailsInquiry": {
      "get": {
        "tags": [
          "StorageDetailsInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "StorageDetailsInquiry_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageDetailsInquiry"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "StorageDetailsInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "StorageDetailsInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StorageDetailsInquiry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/StorageDetailsInquiry"
            }
          }
        }
      }
    },
    "/CompaniesStructure/{actionName}": {
      "post": {
        "tags": [
          "CompaniesStructure"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CompaniesStructure_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompaniesStructureCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CompaniesStructure"
            }
          }
        }
      }
    },
    "/CompaniesStructure/$adHocSchema": {
      "get": {
        "tags": [
          "CompaniesStructure"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CompaniesStructure_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CompaniesStructure"
            }
          }
        }
      }
    },
    "/CompaniesStructure/{ids}": {
      "get": {
        "tags": [
          "CompaniesStructure"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CompaniesStructure_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CompaniesStructure"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CompaniesStructure"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CompaniesStructure_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CompaniesStructure/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CompaniesStructure"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CompaniesStructure_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/CompaniesStructure/{id}": {
      "get": {
        "tags": [
          "CompaniesStructure"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CompaniesStructure_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CompaniesStructure"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CompaniesStructure"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CompaniesStructure_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CompaniesStructure": {
      "get": {
        "tags": [
          "CompaniesStructure"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CompaniesStructure_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompaniesStructure"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CompaniesStructure"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CompaniesStructure_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompaniesStructure"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CompaniesStructure"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CompaniesStructure"
            }
          }
        }
      }
    },
    "/PayGroup/{actionName}": {
      "post": {
        "tags": [
          "PayGroup"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PayGroup_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayGroupCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayGroup"
            }
          }
        }
      }
    },
    "/PayGroup/$adHocSchema": {
      "get": {
        "tags": [
          "PayGroup"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PayGroup_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PayGroup"
            }
          }
        }
      }
    },
    "/PayGroup/{ids}": {
      "get": {
        "tags": [
          "PayGroup"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PayGroup_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayGroup"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayGroup"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PayGroup_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayGroup/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PayGroup"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PayGroup_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PayGroup/{id}": {
      "get": {
        "tags": [
          "PayGroup"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PayGroup_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayGroup"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayGroup"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PayGroup_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayGroup": {
      "get": {
        "tags": [
          "PayGroup"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PayGroup_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayGroup"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PayGroup"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PayGroup_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayGroup"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PayGroup"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayGroup"
            }
          }
        }
      }
    },
    "/InventoryAllocationInquiry/{actionName}": {
      "post": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventoryAllocationInquiry_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          }
        }
      }
    },
    "/InventoryAllocationInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InventoryAllocationInquiry_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          }
        }
      }
    },
    "/InventoryAllocationInquiry/{ids}": {
      "get": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InventoryAllocationInquiry_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InventoryAllocationInquiry_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryAllocationInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InventoryAllocationInquiry_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/InventoryAllocationInquiry/{id}": {
      "get": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InventoryAllocationInquiry_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InventoryAllocationInquiry_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/InventoryAllocationInquiry": {
      "get": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InventoryAllocationInquiry_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryAllocationInquiry"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InventoryAllocationInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          }
        }
      }
    },
    "/Budget/{actionName}": {
      "post": {
        "tags": [
          "Budget"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Budget_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BudgetCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Budget"
            }
          }
        }
      }
    },
    "/Budget/$adHocSchema": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Budget_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Budget"
            }
          }
        }
      }
    },
    "/Budget/{ids}": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Budget_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Budget"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Budget"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Budget_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Budget/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Budget"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Budget_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Budget/{id}": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Budget_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Budget"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Budget"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Budget_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Budget": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Budget_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Budget"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Budget"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Budget_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Budget"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Budget"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Budget"
            }
          }
        }
      }
    },
    "/ProjectTemplateTask/{actionName}": {
      "post": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTemplateTask_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTaskCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          }
        }
      }
    },
    "/ProjectTemplateTask/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectTemplateTask_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          }
        }
      }
    },
    "/ProjectTemplateTask/{ids}": {
      "get": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectTemplateTask_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectTemplateTask_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectTemplateTask/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectTemplateTask_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ProjectTemplateTask/{id}": {
      "get": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectTemplateTask_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectTemplateTask_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectTemplateTask": {
      "get": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectTemplateTask_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTemplateTask"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectTemplateTask_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          }
        }
      }
    },
    "/ItemSalesCategory/{actionName}": {
      "post": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ItemSalesCategory_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemSalesCategoryCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          }
        }
      }
    },
    "/ItemSalesCategory/$adHocSchema": {
      "get": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ItemSalesCategory_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          }
        }
      }
    },
    "/ItemSalesCategory/{ids}": {
      "get": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ItemSalesCategory_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ItemSalesCategory_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ItemSalesCategory/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ItemSalesCategory_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ItemSalesCategory/{id}": {
      "get": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ItemSalesCategory_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ItemSalesCategory_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ItemSalesCategory": {
      "get": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ItemSalesCategory_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemSalesCategory"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ItemSalesCategory_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          }
        }
      }
    },
    "/ProjectBudget/{actionName}": {
      "post": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectBudget_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectBudgetCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          }
        }
      }
    },
    "/ProjectBudget/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectBudget_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          }
        }
      }
    },
    "/ProjectBudget/{ids}": {
      "get": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectBudget_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectBudget_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectBudget/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectBudget_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ProjectBudget/{id}": {
      "get": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectBudget_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectBudget_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ProjectBudget": {
      "get": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectBudget_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectBudget"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectBudget_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          }
        }
      }
    },
    "/PTOBank/{actionName}": {
      "post": {
        "tags": [
          "PTOBank"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PTOBank_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PTOBankCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PTOBank"
            }
          }
        }
      }
    },
    "/PTOBank/$adHocSchema": {
      "get": {
        "tags": [
          "PTOBank"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PTOBank_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PTOBank"
            }
          }
        }
      }
    },
    "/PTOBank/{ids}": {
      "get": {
        "tags": [
          "PTOBank"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PTOBank_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PTOBank"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PTOBank"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PTOBank_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PTOBank/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PTOBank"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PTOBank_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PTOBank/{id}": {
      "get": {
        "tags": [
          "PTOBank"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PTOBank_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PTOBank"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PTOBank"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PTOBank_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PTOBank": {
      "get": {
        "tags": [
          "PTOBank"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PTOBank_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PTOBank"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PTOBank"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PTOBank_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PTOBank"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PTOBank"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PTOBank"
            }
          }
        }
      }
    },
    "/EmployeePayrollClass/{actionName}": {
      "post": {
        "tags": [
          "EmployeePayrollClass"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "EmployeePayrollClass_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeePayrollClassCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollClass"
            }
          }
        }
      }
    },
    "/EmployeePayrollClass/$adHocSchema": {
      "get": {
        "tags": [
          "EmployeePayrollClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "EmployeePayrollClass_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollClass"
            }
          }
        }
      }
    },
    "/EmployeePayrollClass/{ids}": {
      "get": {
        "tags": [
          "EmployeePayrollClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "EmployeePayrollClass_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmployeePayrollClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "EmployeePayrollClass_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/EmployeePayrollClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "EmployeePayrollClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "EmployeePayrollClass_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/EmployeePayrollClass/{id}": {
      "get": {
        "tags": [
          "EmployeePayrollClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "EmployeePayrollClass_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmployeePayrollClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "EmployeePayrollClass_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/EmployeePayrollClass": {
      "get": {
        "tags": [
          "EmployeePayrollClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "EmployeePayrollClass_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeePayrollClass"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EmployeePayrollClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "EmployeePayrollClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeePayrollClass"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/EmployeePayrollClass"
            }
          }
        }
      }
    },
    "/Case/ReleaseCase": {
      "post": {
        "tags": [
          "Case"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Case_InvokeAction_ReleaseCase",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseCase"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          }
        }
      }
    },
    "/Case/AssignCase": {
      "post": {
        "tags": [
          "Case"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Case_InvokeAction_AssignCase",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignCase"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          }
        }
      }
    },
    "/Case/{actionName}": {
      "post": {
        "tags": [
          "Case"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Case_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CaseCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          }
        }
      }
    },
    "/Case/$adHocSchema": {
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Case_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          }
        }
      }
    },
    "/Case/{ids}": {
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Case_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Case"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Case_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Case/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Case"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Case_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Case/{id}": {
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Case_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Case"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Case_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Case": {
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Case_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Case"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Case"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Case_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Case"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          }
        }
      }
    },
    "/Appointment/CancelAppointment": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_CancelAppointment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelAppointment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/CloseAppointment": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_CloseAppointment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseAppointment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/CompleteAppointment": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_CompleteAppointment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteAppointment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/InvoiceAppointment": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_InvoiceAppointment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceAppointment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/AppRecalcExternalTax": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_AppRecalcExternalTax",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppRecalcExternalTax"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/PauseAppointment": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_PauseAppointment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PauseAppointment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/ReopenAppointment": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_ReopenAppointment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReopenAppointment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/StartAppointment": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_StartAppointment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartAppointment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/ResumeAppointmentMenuActions": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_ResumeAppointmentMenuActions",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResumeAppointmentMenuActions"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/UncloseAppointmentMenuActions": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_UncloseAppointmentMenuActions",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UncloseAppointmentMenuActions"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/{actionName}": {
      "post": {
        "tags": [
          "Appointment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Appointment_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/$adHocSchema": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Appointment_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Appointment/{ids}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Appointment_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Appointment_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Appointment/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Appointment"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Appointment_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Appointment/{id}": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Appointment_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Appointment"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Appointment_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Appointment": {
      "get": {
        "tags": [
          "Appointment"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Appointment_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Appointment"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Appointment"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Appointment_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        }
      }
    },
    "/Check/ReleaseCheck": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Check_InvokeAction_ReleaseCheck",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseCheck"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          }
        }
      }
    },
    "/Check/VoidCheck": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Check_InvokeAction_VoidCheck",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidCheck"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          }
        }
      }
    },
    "/Check/{actionName}": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Check_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          }
        }
      }
    },
    "/Check/$adHocSchema": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Check_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          }
        }
      }
    },
    "/Check/{ids}": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Check_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Check"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Check_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Check/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Check"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Check_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Check/{id}": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Check_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Check"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Check_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Check": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Check_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Check"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Check"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Check_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Check"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          }
        }
      }
    },
    "/ChangeOrder/ReleaseChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_ReleaseChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseChangeOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/ChangeOrder/ApproveChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_ApproveChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveChangeOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/ChangeOrder/RejectChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_RejectChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectChangeOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/ChangeOrder/EmailChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_EmailChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailChangeOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/ChangeOrder/ReverseChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_ReverseChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReverseChangeOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/ChangeOrder/HoldChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_HoldChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HoldChangeOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/ChangeOrder/RemoveChangeOrderFromHold": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_RemoveChangeOrderFromHold",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveChangeOrderFromHold"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/ChangeOrder/{actionName}": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOrderCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/ChangeOrder/$adHocSchema": {
      "get": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ChangeOrder_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/ChangeOrder/{ids}": {
      "get": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ChangeOrder_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ChangeOrder_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ChangeOrder/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ChangeOrder_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ChangeOrder/{id}": {
      "get": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ChangeOrder_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ChangeOrder_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ChangeOrder": {
      "get": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ChangeOrder_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrder"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ChangeOrder_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          }
        }
      }
    },
    "/StockItem/UpdateStandardCostStockItem": {
      "post": {
        "tags": [
          "StockItem"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "StockItem_InvokeAction_UpdateStandardCostStockItem",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStandardCostStockItem"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          }
        }
      }
    },
    "/StockItem/{actionName}": {
      "post": {
        "tags": [
          "StockItem"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "StockItem_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StockItemCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          }
        }
      }
    },
    "/StockItem/$adHocSchema": {
      "get": {
        "tags": [
          "StockItem"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "StockItem_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          }
        }
      }
    },
    "/StockItem/{ids}": {
      "get": {
        "tags": [
          "StockItem"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "StockItem_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StockItem"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "StockItem_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/StockItem/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "StockItem"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "StockItem_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/StockItem/{id}": {
      "get": {
        "tags": [
          "StockItem"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "StockItem_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StockItem"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "StockItem_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/StockItem": {
      "get": {
        "tags": [
          "StockItem"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "StockItem_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StockItem"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "StockItem"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "StockItem_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          }
        }
      }
    },
    "/CompanyFinancialPeriod/{actionName}": {
      "post": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CompanyFinancialPeriod_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriodCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          }
        }
      }
    },
    "/CompanyFinancialPeriod/$adHocSchema": {
      "get": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CompanyFinancialPeriod_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          }
        }
      }
    },
    "/CompanyFinancialPeriod/{ids}": {
      "get": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CompanyFinancialPeriod_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CompanyFinancialPeriod_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CompanyFinancialPeriod/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CompanyFinancialPeriod_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/CompanyFinancialPeriod/{id}": {
      "get": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CompanyFinancialPeriod_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CompanyFinancialPeriod_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CompanyFinancialPeriod": {
      "get": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CompanyFinancialPeriod_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyFinancialPeriod"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CompanyFinancialPeriod_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          }
        }
      }
    },
    "/ShippingZones/{actionName}": {
      "post": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ShippingZones_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingZonesCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          }
        }
      }
    },
    "/ShippingZones/$adHocSchema": {
      "get": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ShippingZones_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          }
        }
      }
    },
    "/ShippingZones/{ids}": {
      "get": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ShippingZones_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ShippingZones_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShippingZones/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ShippingZones_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/ShippingZones/{id}": {
      "get": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ShippingZones_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ShippingZones_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/ShippingZones": {
      "get": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ShippingZones_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingZones"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ShippingZones_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          }
        }
      }
    },
    "/Bill/ReleaseBill": {
      "post": {
        "tags": [
          "Bill"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Bill_InvokeAction_ReleaseBill",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseBill"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        }
      }
    },
    "/Bill/ReleaseRetainage": {
      "post": {
        "tags": [
          "Bill"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Bill_InvokeAction_ReleaseRetainage",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseRetainage"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        }
      }
    },
    "/Bill/ReverseBill": {
      "post": {
        "tags": [
          "Bill"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Bill_InvokeAction_ReverseBill",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReverseBill"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        }
      }
    },
    "/Bill/{actionName}": {
      "post": {
        "tags": [
          "Bill"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Bill_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BillCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        }
      }
    },
    "/Bill/$adHocSchema": {
      "get": {
        "tags": [
          "Bill"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Bill_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        }
      }
    },
    "/Bill/{ids}": {
      "get": {
        "tags": [
          "Bill"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Bill_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bill"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Bill_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Bill/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Bill"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Bill_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Bill/{id}": {
      "get": {
        "tags": [
          "Bill"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Bill_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bill"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Bill_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Bill": {
      "get": {
        "tags": [
          "Bill"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Bill_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bill"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bill"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Bill_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          }
        }
      }
    },
    "/Vendor/CreateContactFromVendor": {
      "post": {
        "tags": [
          "Vendor"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Vendor_InvokeAction_CreateContactFromVendor",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContactFromVendor"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          }
        }
      }
    },
    "/Vendor/{actionName}": {
      "post": {
        "tags": [
          "Vendor"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Vendor_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          }
        }
      }
    },
    "/Vendor/$adHocSchema": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Vendor_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          }
        }
      }
    },
    "/Vendor/{ids}": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Vendor_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vendor"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Vendor_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Vendor/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Vendor"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Vendor_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Vendor/{id}": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Vendor_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vendor"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Vendor_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Vendor": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Vendor_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vendor"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vendor"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Vendor_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          }
        }
      }
    },
    "/PayrollUnionLocal/{actionName}": {
      "post": {
        "tags": [
          "PayrollUnionLocal"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PayrollUnionLocal_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayrollUnionLocalCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayrollUnionLocal"
            }
          }
        }
      }
    },
    "/PayrollUnionLocal/$adHocSchema": {
      "get": {
        "tags": [
          "PayrollUnionLocal"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PayrollUnionLocal_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PayrollUnionLocal"
            }
          }
        }
      }
    },
    "/PayrollUnionLocal/{ids}": {
      "get": {
        "tags": [
          "PayrollUnionLocal"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PayrollUnionLocal_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayrollUnionLocal"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayrollUnionLocal"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PayrollUnionLocal_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayrollUnionLocal/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PayrollUnionLocal"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PayrollUnionLocal_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PayrollUnionLocal/{id}": {
      "get": {
        "tags": [
          "PayrollUnionLocal"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PayrollUnionLocal_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PayrollUnionLocal"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PayrollUnionLocal"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PayrollUnionLocal_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PayrollUnionLocal": {
      "get": {
        "tags": [
          "PayrollUnionLocal"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PayrollUnionLocal_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayrollUnionLocal"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PayrollUnionLocal"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PayrollUnionLocal_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayrollUnionLocal"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PayrollUnionLocal"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PayrollUnionLocal"
            }
          }
        }
      }
    },
    "/Salesperson/{actionName}": {
      "post": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Salesperson_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalespersonCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          }
        }
      }
    },
    "/Salesperson/$adHocSchema": {
      "get": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Salesperson_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          }
        }
      }
    },
    "/Salesperson/{ids}": {
      "get": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Salesperson_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Salesperson_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Salesperson/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Salesperson_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Salesperson/{id}": {
      "get": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Salesperson_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Salesperson_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Salesperson": {
      "get": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Salesperson_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Salesperson"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Salesperson_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          }
        }
      }
    },
    "/Event/AcceptInvitationEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_AcceptInvitationEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AcceptInvitationEvent"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/Event/CancelActivityEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_CancelActivityEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelActivityEvent"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/Event/CompleteEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_CompleteEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteEvent"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/Event/ExportCardEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_ExportCardEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportCardEvent"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/Event/RejectInvitationEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_RejectInvitationEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectInvitationEvent"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/Event/InviteAllEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_InviteAllEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteAllEvent"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/Event/InviteEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_InviteEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteEvent"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/Event/{actionName}": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EventCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/Event/$adHocSchema": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Event_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/Event/{ids}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Event_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Event_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Event/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Event_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Event_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Event_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/Event": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Event_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Event_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/PaymentMethod/{actionName}": {
      "post": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PaymentMethod_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethodCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          }
        }
      }
    },
    "/PaymentMethod/$adHocSchema": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PaymentMethod_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          }
        }
      }
    },
    "/PaymentMethod/{ids}": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PaymentMethod_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PaymentMethod_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PaymentMethod/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PaymentMethod_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/PaymentMethod/{id}": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PaymentMethod_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PaymentMethod_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/PaymentMethod": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PaymentMethod_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PaymentMethod_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          }
        }
      }
    },
    "/CustomerPriceClass/{actionName}": {
      "post": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CustomerPriceClass_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPriceClassCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          }
        }
      }
    },
    "/CustomerPriceClass/$adHocSchema": {
      "get": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CustomerPriceClass_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          }
        }
      }
    },
    "/CustomerPriceClass/{ids}": {
      "get": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CustomerPriceClass_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CustomerPriceClass_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CustomerPriceClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CustomerPriceClass_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/CustomerPriceClass/{id}": {
      "get": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CustomerPriceClass_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CustomerPriceClass_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CustomerPriceClass": {
      "get": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CustomerPriceClass_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerPriceClass"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CustomerPriceClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          }
        }
      }
    },
    "/TransferOrder/ReleaseTransferOrder": {
      "post": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TransferOrder_InvokeAction_ReleaseTransferOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseTransferOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          }
        }
      }
    },
    "/TransferOrder/{actionName}": {
      "post": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TransferOrder_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferOrderCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          }
        }
      }
    },
    "/TransferOrder/$adHocSchema": {
      "get": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TransferOrder_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          }
        }
      }
    },
    "/TransferOrder/{ids}": {
      "get": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TransferOrder_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TransferOrder_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TransferOrder/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TransferOrder_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/TransferOrder/{id}": {
      "get": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TransferOrder_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TransferOrder_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/TransferOrder": {
      "get": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TransferOrder_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransferOrder"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TransferOrder_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          }
        }
      }
    },
    "/CustomerClass/{actionName}": {
      "post": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CustomerClass_InvokeAction_CustomAction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "actionName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invocation",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerClassCustomAction"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to obtain the processed entity through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          }
        }
      }
    },
    "/CustomerClass/$adHocSchema": {
      "get": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CustomerClass_GetAdHocSchema",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          }
        }
      }
    },
    "/CustomerClass/{ids}": {
      "get": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CustomerClass_GetByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CustomerClass_DeleteByKeys",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CustomerClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CustomerClass_PutFile",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ids",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "in": "path",
            "name": "filename",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        }
      }
    },
    "/CustomerClass/{id}": {
      "get": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CustomerClass_GetById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CustomerClass_DeleteById",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "204": {
            "description": "The record is successfully deleted."
          }
        }
      }
    },
    "/CustomerClass": {
      "get": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CustomerClass_GetList",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of records to be skipped from the list of returned records.",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of records to be returned from the system.",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerClass"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CustomerClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "$select",
            "description": "The fields of the entity to be returned from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$filter",
            "description": "The conditions that determine which records should be selected from the system.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The linked and detail entities that should be expanded.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "$custom",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "type": "string"
          },
          {
            "in": "body",
            "name": "entity",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "412": {
            "description": "Either the header of the request specifies that the entity has to be inserted but an entity with these keys already exists in the database and cannot be inserted, or the header specifies that the entity has to be updated but there is no entity with these keys in the database.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "422": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ACAInfoDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CoverageType": {
              "$ref": "#/definitions/StringValue"
            },
            "HealthPlanType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ACAInformation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ACAInfoDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ACAInfoDetail"
              }
            },
            "MinIndividualContribution": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "AcceptInvitationEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "Account": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountCD": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountID": {
              "$ref": "#/definitions/IntValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ChartOfAccountsOrder": {
              "$ref": "#/definitions/IntValue"
            },
            "ConsolidationAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PostOption": {
              "$ref": "#/definitions/StringValue"
            },
            "RequireUnits": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RevaluationRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "Secured": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UseDefaultSubaccount": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "AccountCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Account"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "AccountDetailsForPeriodInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "FromPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountDetailsForPeriodInquiryDetail"
              }
            },
            "ToPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "IncludeUnposted": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IncludeUnreleased": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "AccountDetailsForPeriodInquiryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/AccountDetailsForPeriodInquiry"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "AccountDetailsForPeriodInquiryDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "BatchNumber": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreditAmountInBaseCurrency": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerVendor": {
              "$ref": "#/definitions/StringValue"
            },
            "DebitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DebitAmountInBaseCurrency": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "PeriodID": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNumber": {
              "$ref": "#/definitions/StringValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionType": {
              "$ref": "#/definitions/StringValue"
            },
            "Posted": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "AccountGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroupID": {
              "$ref": "#/definitions/StringValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "DefaultAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Expense": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/ShortValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountGroupCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/AccountGroup"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "AccountSummaryInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "Period": {
              "$ref": "#/definitions/StringValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountSummaryRow"
              }
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountSummaryInquiryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/AccountSummaryInquiry"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "AccountSummaryRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "BeginningBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ConsolidationAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyBeginningBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyCreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyDebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyEndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyPtdTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastActivity": {
              "$ref": "#/definitions/StringValue"
            },
            "LedgerID": {
              "$ref": "#/definitions/IntValue"
            },
            "PtdTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ActivateProject": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "ActivateProjectTask": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTask"
        }
      }
    },
    "ActivateProjectTemplate": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTemplate"
        }
      }
    },
    "Activity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Body": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "Task": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivity": {
              "$ref": "#/definitions/TimeActivity"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedByID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RelatedEntityType": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedEntityNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "RelatedEntityDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ActivityCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Activity"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ActivityDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreatedByID": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Address": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AddressLine1": {
              "$ref": "#/definitions/StringValue"
            },
            "AddressLine2": {
              "$ref": "#/definitions/StringValue"
            },
            "City": {
              "$ref": "#/definitions/StringValue"
            },
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "PostalCode": {
              "$ref": "#/definitions/StringValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "Validated": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "AllowBilling": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ServiceOrder"
        }
      }
    },
    "AppAttributes": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attribute": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AppDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AppointmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ComponentID": {
              "$ref": "#/definitions/StringValue"
            },
            "ComponentLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CoveredQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CuryUnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EquipmentAction": {
              "$ref": "#/definitions/StringValue"
            },
            "EquipmentActionComment": {
              "$ref": "#/definitions/StringValue"
            },
            "EstimatedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EstimatedDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "EstimatedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExtPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "LineStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "LineType": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualPrice": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MarkforPO": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ModelEquipmentLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "OverageQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverageUnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PickupDeliveryAction": {
              "$ref": "#/definitions/StringValue"
            },
            "PickupDeliveryLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "PickupDeliveryServiceID": {
              "$ref": "#/definitions/StringValue"
            },
            "POCompleted": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PONbr": {
              "$ref": "#/definitions/StringValue"
            },
            "POStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaidItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedDocNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceContractItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ServiceOrderLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/IntValue"
            },
            "StaffMemberID": {
              "$ref": "#/definitions/StringValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TargetEquipmentID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "Warranty": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "AppFinancialSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillingCustomer": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingCycle": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingLocation": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Commissionable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomerTaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "RunBillingFor": {
              "$ref": "#/definitions/StringValue"
            },
            "Salesperson": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCalculationMode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AppLogs": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AddtoActualDuration": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AppointmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Approved": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillableLabor": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DetailLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Duration": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningType": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LaborItemID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LogLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "LogLineStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ManageTimeManually": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "StaffMember": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "StartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TimeCardRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TrackTime": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Travel": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "AppOtherInformation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocumentType": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "IssueReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "RecurrenceDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "RouteID": {
              "$ref": "#/definitions/StringValue"
            },
            "RouteNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceScheduleID": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceServiceContractID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AppPrepayments": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "AppliedtoOrders": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AvailableBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/IntValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceAppointmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AppProfitability": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualQuantity": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillableQuantity": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExtCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EstimatedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EstimatedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "LineType": {
              "$ref": "#/definitions/StringValue"
            },
            "Profit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProfitPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "StaffMember": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "AppRecalcExternalTax": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "AppResourceEquipment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AppointmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Comment": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EquipmentID": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AppStaff": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AppointmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DetailLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningType": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "PrimaryDriver": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "RouteDriver": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "StaffMember": {
              "$ref": "#/definitions/StringValue"
            },
            "StaffType": {
              "$ref": "#/definitions/StringValue"
            },
            "TrackTime": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "AppTaxDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AppointmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "IncludeinVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AppTotals": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActualTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AppointmentBillableTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AppointmentTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillableLaborTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillableTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EstimatedTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PrepaymentApplied": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PrepaymentReceived": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PrepaymentRemaining": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ServiceOrderBillableUnpaidBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ServiceOrderTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ServiceOrderUnpaidBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATExemptTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATTaxableTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ApplicableWage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BenefitIncreasingApplWage": {
              "$ref": "#/definitions/BenefitIncreasingApplWage"
            },
            "DeductionsDecreasingApplWage": {
              "$ref": "#/definitions/DeductionDecreasingApplWage"
            },
            "EarningIncreasingApplWage": {
              "$ref": "#/definitions/EarningIncreasingApplWage"
            },
            "EmployeeTaxesDecreasingApplWage": {
              "$ref": "#/definitions/TaxesDecreasingApplWage"
            },
            "EmployerTaxesIncreasingApplWage": {
              "$ref": "#/definitions/EmployerTaxesIncreasingApplWage"
            }
          }
        }
      ]
    },
    "Appointment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActualDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualEndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ActualEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ActualHandleManually": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ActualServiceDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualStartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ActualStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "AppointmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AppointmentTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppAttributes"
              }
            },
            "BranchLocation": {
              "$ref": "#/definitions/StringValue"
            },
            "Confirmed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppDetails"
              }
            },
            "EstimatedServiceDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "FinancialSettings": {
              "$ref": "#/definitions/AppFinancialSettings"
            },
            "Finished": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "Logs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppLogs"
              }
            },
            "OptimizationResult": {
              "$ref": "#/definitions/StringValue"
            },
            "OtherInformation": {
              "$ref": "#/definitions/AppOtherInformation"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Prepayments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppPrepayments"
              }
            },
            "Profit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Profitability": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppProfitability"
              }
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ResourceEquipment": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppResourceEquipment"
              }
            },
            "ScheduledDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "ScheduledEndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ScheduledEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ScheduledHandleManually": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ScheduledStartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ScheduledStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ServiceOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "Staff": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppStaff"
              }
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AppTaxDetails"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Totals": {
              "$ref": "#/definitions/AppTotals"
            },
            "UnreachedCustomer": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ValidatedbyDispatcher": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WaitingforPurchasedItems": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WorkflowStage": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AppointmentCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "Approval": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApprovedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "ApprovedByName": {
              "$ref": "#/definitions/StringValue"
            },
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "ApproverName": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ApproveChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "ApproveExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "ApproveExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "ApproveProFormaInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "ApproveProject": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "ArchiveEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "AssignCase": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Case"
        }
      }
    },
    "AttributeDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AttributeID": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlType": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EntryMask": {
              "$ref": "#/definitions/StringValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RegExp": {
              "$ref": "#/definitions/StringValue"
            },
            "Values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDefinitionValue"
              }
            }
          }
        }
      ]
    },
    "AttributeDefinitionCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/AttributeDefinition"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "AttributeDefinitionValue": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Disabled": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/ShortValue"
            },
            "ValueID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AttributeValue": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AttributeID": {
              "$ref": "#/definitions/StringValue"
            },
            "AttributeDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            },
            "ValueDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AutoRecalculateDiscounts": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "BCRoleAssignment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "RoleAssignmentID": {
              "$ref": "#/definitions/IntValue"
            },
            "BAccountID": {
              "$ref": "#/definitions/IntValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationCD": {
              "$ref": "#/definitions/StringValue"
            },
            "Role": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "BatchDeductionOrBenefitDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BatchNumber": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BenefitCalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ContributionType": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DeductionCalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Enabled": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IsGarnishment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "BatchEarningDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AllowCopy": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CertifiedJob": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Code": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Employee": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "Hours": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualRate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "Rate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExcelRecordID": {
              "$ref": "#/definitions/StringValue"
            },
            "ShiftCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Task": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivity": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocal": {
              "$ref": "#/definitions/StringValue"
            },
            "Units": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitType": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BatchOvertimeRules": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplyOvertimeRulesfortheDocument": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OvertimeRulesDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BatchOvertimeRulesDetail"
              }
            }
          }
        }
      ]
    },
    "BatchOvertimeRulesDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DayofWeek": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DisbursingEarningType": {
              "$ref": "#/definitions/StringValue"
            },
            "Enabled": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Multiplier": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OvertimeRule": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "ThresholdforOvertimehours": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocal": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BenefitIncreasingApplWage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BenefitIncreasingApplWageDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BenefitIncreasingApplWageDetail"
              }
            },
            "InclusionType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BenefitIncreasingApplWageDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BenefitCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "BigCommerceStores": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccessToken": {
              "$ref": "#/definitions/StringValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "APIPath": {
              "$ref": "#/definitions/StringValue"
            },
            "ClientID": {
              "$ref": "#/definitions/StringValue"
            },
            "Connector": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StoreAdminPath": {
              "$ref": "#/definitions/StringValue"
            },
            "StoreName": {
              "$ref": "#/definitions/StringValue"
            },
            "WebDAVPassword": {
              "$ref": "#/definitions/StringValue"
            },
            "WebDAVPath": {
              "$ref": "#/definitions/StringValue"
            },
            "WebDAVUsername": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BigCommerceStoresCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BigCommerceStores"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "Bill": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Applications": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BillApplicationDetail"
              }
            },
            "ApprovedForPayment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BillDetail"
              }
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BillTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            },
            "IsTaxValid": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "BillApplicationDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BillCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Bill"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "BillDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "NonBillable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "POLine": {
              "$ref": "#/definitions/IntValue"
            },
            "POOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "POOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "POReceiptLine": {
              "$ref": "#/definitions/IntValue"
            },
            "POReceiptType": {
              "$ref": "#/definitions/StringValue"
            },
            "POReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BillTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "BillToSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillToAddress": {
              "$ref": "#/definitions/Address"
            },
            "BillToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "BillToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomerLocation": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BooleanValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "BoxStockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BoxID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "MaxQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Budget": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ComparetoBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "ComparetoLedger": {
              "$ref": "#/definitions/StringValue"
            },
            "ComparetoYear": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BudgetDetail"
              }
            },
            "FinancialYear": {
              "$ref": "#/definitions/StringValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "SubaccountFilter": {
              "$ref": "#/definitions/StringValue"
            },
            "TreeNodeFilter": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BudgetCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Budget"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "BudgetDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DistributedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FinancialYear": {
              "$ref": "#/definitions/StringValue"
            },
            "GroupID": {
              "$ref": "#/definitions/GuidValue"
            },
            "LastModifiedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "LedgerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Node": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Period01": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period02": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period03": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period04": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period05": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period06": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period07": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period08": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period09": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period10": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period11": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period12": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Period13": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "Campaigns": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CampaignDetail"
              }
            },
            "Cases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountCaseDetail"
              }
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "Contacts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountContact"
              }
            },
            "Contracts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountContract"
              }
            },
            "DefaultLocationSettings": {
              "$ref": "#/definitions/BusinessAccountDefaultLocationSetting"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "Duplicates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DuplicateDetail"
              }
            },
            "LastIncomingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastOutgoingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountLocation"
              }
            },
            "MainAddress": {
              "$ref": "#/definitions/Address"
            },
            "MainAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MainContact": {
              "$ref": "#/definitions/BusinessAccountMainContact"
            },
            "MarketingLists": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketingListDetail"
              }
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "Opportunities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountOpportunityDetail"
              }
            },
            "Orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountOrder"
              }
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PrimaryContact": {
              "$ref": "#/definitions/Contact"
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "ShippingAddress": {
              "$ref": "#/definitions/Address"
            },
            "ShippingAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingContact": {
              "$ref": "#/definitions/BusinessAccountShippingContact"
            },
            "SourceCampaign": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "EnableCurrencyOverride": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "BusinessAccountCaseDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClosingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Contract": {
              "$ref": "#/definitions/StringValue"
            },
            "DateReported": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Estimation": {
              "$ref": "#/definitions/StringValue"
            },
            "InitialResponse": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Severity": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountClassAttributeDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AttributeID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultValue": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/ShortValue"
            }
          }
        }
      ]
    },
    "BusinessAccountContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "City": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountContract": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContractID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "BusinessAccountDefaultLocationSetting": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "Insurance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LeadTimeInDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderPriority": {
              "$ref": "#/definitions/ShortValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRegistrationID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "City": {
              "$ref": "#/definitions/StringValue"
            },
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountMainContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "LanguageOrLocale": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Web": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountOpportunityDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Estimation": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Probability": {
              "$ref": "#/definitions/IntValue"
            },
            "Stage": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Total": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RequestedOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ScheduledShipment": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShippingZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountPaymentInstructionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/IntValue"
            },
            "PaymentInstructionsID": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountShippingContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ByteValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "CalendarSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Friday": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FridayEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FridayStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FriUnpaidBreakTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Monday": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MondayEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MondayStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MonUnpaidBreakTime": {
              "$ref": "#/definitions/StringValue"
            },
            "SatUnpaidBreakTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Saturday": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaturdayEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "SaturdayStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Sunday": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SundayEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "SundayStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "SunUnpaidBreakTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Thursday": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ThursdayEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ThursdayStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ThuUnpaidBreakTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Tuesday": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TuesdayEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TuesdayStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TueUnpaidBreakTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Wednesday": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WednesdayEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WednesdayStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WedUnpaidBreakTime": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CampaignDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CampaignID": {
              "$ref": "#/definitions/StringValue"
            },
            "CampaignName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "Stage": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CancelActivityEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "CancelActivityTask": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Task"
        }
      }
    },
    "CancelAppointment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "CancelOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ServiceOrder"
        }
      }
    },
    "CancelPhysicalInventory": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PhysicalInventoryReview"
        }
      }
    },
    "CancelProject": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "CancelProjectTask": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTask"
        }
      }
    },
    "CancelSalesOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "CancelSendingEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CaptureCreditCardPayment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        }
      }
    },
    "CardOperation": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "TranType": {
              "$ref": "#/definitions/StringValue"
            },
            "TranNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AuthNumber": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtProfileId": {
              "$ref": "#/definitions/StringValue"
            },
            "TranDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OrigTranNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      }
    },
    "Carrier": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CarrierID": {
              "$ref": "#/definitions/StringValue"
            },
            "CarrierUnits": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarrierCustomerAccount"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PlugInParameters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarrierPluginParameter"
              }
            },
            "PlugInType": {
              "$ref": "#/definitions/StringValue"
            },
            "Centimeter": {
              "$ref": "#/definitions/StringValue"
            },
            "Inch": {
              "$ref": "#/definitions/StringValue"
            },
            "Kilogram": {
              "$ref": "#/definitions/StringValue"
            },
            "Pound": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CarrierCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Carrier"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CarrierCustomerAccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CarrierAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerName": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "PostalCode": {
              "$ref": "#/definitions/StringValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "CarrierPluginParameter": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "PluginID": {
              "$ref": "#/definitions/StringValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Case": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/IntValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/IntValue"
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClosingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ContactDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "Contract": {
              "$ref": "#/definitions/StringValue"
            },
            "DateReported": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InitialResponse": {
              "$ref": "#/definitions/StringValue"
            },
            "LastActivityDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastIncomingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastOutgoingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OvertimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "Priority": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedCases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CaseRelatedCase"
              }
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "ResolutionTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Severity": {
              "$ref": "#/definitions/StringValue"
            },
            "SLA": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "CaseCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Case"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CaseDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClosingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DateReported": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Estimation": {
              "$ref": "#/definitions/StringValue"
            },
            "InitialResponse": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Severity": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CaseRelatedCase": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentCaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "RelationType": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CashSale": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CashSaleDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CashSaleCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CashSale"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CashSaleDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtendedPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "CategoryStockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CategoryID": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "ChangeBusinessAccountID": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ChangeCostCodeID": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CostCode"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "CostCodeID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ChangeEmployeeID": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Employee"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ChangeOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApprovalDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "ChangeDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Class": {
              "$ref": "#/definitions/StringValue"
            },
            "Commitments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrderCommitment"
              }
            },
            "CommitmentsChangeTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CompletionDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ContractTimeChangeDays": {
              "$ref": "#/definitions/IntValue"
            },
            "CostBudget": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrderCostBudget"
              }
            },
            "CostBudgetChangeTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DetailedDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "GrossMargin": {
              "$ref": "#/definitions/DecimalValue"
            },
            "GrossMarginAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OriginalCORefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "RevenueBudget": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrderRevenueBudget"
              }
            },
            "RevenueBudgetChangeTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevenueChangeNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ReverseStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ChangeOrderClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountClassAttributeDetail"
              }
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "Commitments": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostBudget": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RevenueBudget": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ChangeOrderClassCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrderClass"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ChangeOrderCommitment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AmountinBaseCurrency": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "OpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "POLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "PONbr": {
              "$ref": "#/definitions/StringValue"
            },
            "PotentiallyRevisedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PotentiallyRevisedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            },
            "POType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ChangeOrderCostBudget": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedReceivedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrentCommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrentCommittedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OtherDraftCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PreviouslyApprovedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PreviouslyApprovedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalPotentiallyRevisedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ChangeOrderCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ChangeOrderRevenueBudget": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "OtherDraftCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PreviouslyApprovedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PreviouslyApprovedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalPotentiallyRevisedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ChangeProjectID": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "Check": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckDetail"
              }
            },
            "History": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckHistoryDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PaymentAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UnappliedBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "CheckCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Check"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CheckDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DocLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CheckForBusinessAccountDuplicates": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        }
      }
    },
    "CheckForContactDuplicates": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "CheckHistoryDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountTaken": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CheckLeadForDuplicates": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        }
      }
    },
    "ClaimExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "CloseAppointment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "CloseOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ServiceOrder"
        }
      }
    },
    "Commissions": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DefaultSalesperson": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesPersons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPersonDetail"
              }
            }
          }
        }
      ]
    },
    "CompaniesStructure": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompaniesStructureDetail"
              }
            }
          }
        }
      ]
    },
    "CompaniesStructureCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CompaniesStructure"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CompaniesStructureDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchCountry": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchName": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchStatus": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CompanyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyStatus": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CompanyType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CompanyFinancialPeriod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Company": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialPeriodDetail"
              }
            },
            "FinancialYear": {
              "$ref": "#/definitions/StringValue"
            },
            "NbrOfPeriods": {
              "$ref": "#/definitions/ShortValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "CompanyFinancialPeriodCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CompanyFinancialPeriod"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CompensationDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EarningCode": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/StringValue"
            },
            "PayRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "UnitOfPay": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CompleteActivity": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "CompleteAppointment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "CompleteEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "CompleteOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ServiceOrder"
        }
      }
    },
    "CompletePhysicalInventory": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PhysicalInventoryReview"
        }
      }
    },
    "CompleteProject": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "CompleteProjectTask": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTask"
        }
      }
    },
    "CompleteTask": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Task"
        }
      }
    },
    "CompleteTimeEntry": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TimeEntry"
        }
      }
    },
    "ConfirmShipment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Shipment"
        }
      }
    },
    "Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "Address": {
              "$ref": "#/definitions/Address"
            },
            "OverrideAccountAddress": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Campaigns": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CampaignDetail"
              }
            },
            "Cases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CaseDetail"
              }
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "ContactMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ConvertedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "DateOfBirth": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "DoNotCall": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotFax": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotMail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "DuplicateFound": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Duplicates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactDuplicateDetail"
              }
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "FaxType": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "Gender": {
              "$ref": "#/definitions/StringValue"
            },
            "Image": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "LanguageOrLocale": {
              "$ref": "#/definitions/StringValue"
            },
            "LastIncomingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastOutgoingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MaritalStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "MarketingLists": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketingListDetail"
              }
            },
            "MiddleName": {
              "$ref": "#/definitions/StringValue"
            },
            "NoMarketing": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NoMassMail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Notifications": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactNotification"
              }
            },
            "Opportunities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpportunityDetail"
              }
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3Type": {
              "$ref": "#/definitions/StringValue"
            },
            "QualificationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "RoleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BCRoleAssignment"
              }
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceCampaign": {
              "$ref": "#/definitions/StringValue"
            },
            "SpouseOrPartnerName": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Synchronize": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Title": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UserInfo": {
              "$ref": "#/definitions/ContactUserInfo"
            },
            "WebSite": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "FullName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ContactCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ContactDuplicateDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountType": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ContactNotification": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Bcc": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Format": {
              "$ref": "#/definitions/StringValue"
            },
            "MailingID": {
              "$ref": "#/definitions/StringValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "NotificationID": {
              "$ref": "#/definitions/IntValue"
            },
            "Report": {
              "$ref": "#/definitions/StringValue"
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ContactRoles": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "RoleDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "RoleName": {
              "$ref": "#/definitions/StringValue"
            },
            "Selected": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UserType": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "ContactUserInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "GeneratePassword": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Login": {
              "$ref": "#/definitions/StringValue"
            },
            "Password": {
              "$ref": "#/definitions/StringValue"
            },
            "Roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactRoles"
              }
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "UserType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ContractUsage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BilledTransactions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractUsageTransactionDetail"
              }
            },
            "ContractID": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "UnbilledTransactions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractUsageTransactionDetail"
              }
            }
          }
        }
      ]
    },
    "ContractUsageCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ContractUsage"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ContractUsageTransactionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransactionID": {
              "$ref": "#/definitions/LongValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ConvertBusinessAccountToCustomer": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        }
      }
    },
    "ConvertLeadToBAccount": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountClass": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ConvertLeadToContact": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ConvertLeadToOpportunity": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "OpportunitySubject": {
              "$ref": "#/definitions/StringValue"
            },
            "OpportunityCloseDate": {
              "$ref": "#/definitions/StringValue"
            },
            "OpportunityClass": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CorrectShipment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Shipment"
        }
      }
    },
    "CostCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CostCodeID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "CostCodeCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CostCode"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CreateAPBill": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PurchaseReceipt"
        }
      }
    },
    "CreateAccountFromContact": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountClass": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CreateAccountFromOpportunity": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Opportunity"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            },
            "LinkContactToAccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountClass": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CreateCaseFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateContactFromBusinessAccount": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CreateContactFromCustomer": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Customer"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CreateContactFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateContactFromOpportunity": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Opportunity"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CreateContactFromVendor": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Vendor"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CreateEventFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateExpenseReceiptFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateLeadFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateOpportunityFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateOpportunityInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Opportunity"
        }
      }
    },
    "CreateOpportunitySalesOrder": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Opportunity"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "RecalculatePricesandDiscounts": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      }
    },
    "CreateTaskFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreditCardProcessingDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TransactionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TransactionStatus": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CreditCardTransactionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TranNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TranType": {
              "$ref": "#/definitions/StringValue"
            },
            "AuthNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TranDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExtProfileId": {
              "$ref": "#/definitions/StringValue"
            },
            "NeedValidation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrigTranNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CardType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CreditVerificationRules": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreditDaysPastDue": {
              "$ref": "#/definitions/ShortValue"
            },
            "CreditLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreditVerification": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstDueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OpenOrdersBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RemainingCreditLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnreleasedBalance": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "Currency": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencySymbol": {
              "$ref": "#/definitions/StringValue"
            },
            "DecimalPrecision": {
              "$ref": "#/definitions/ShortValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "UseForAccounting": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "CurrencyCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Currency"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CustomBooleanField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "boolean"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomByteField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "int32",
              "type": "integer"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomDateTimeField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "date-time",
              "type": "string"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomDecimalField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "double",
              "type": "number"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomDoubleField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "double",
              "type": "number"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomField": {
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "CustomGuidField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "uuid",
              "type": "string"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomIntField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "int32",
              "type": "integer"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomLongField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "int64",
              "type": "integer"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomShortField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "int32",
              "type": "integer"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomStringField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "error": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Customer": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ApplyOverdueCharges": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "AutoApplyPayments": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BAccountID": {
              "$ref": "#/definitions/IntValue"
            },
            "BillingAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillingContact": {
              "$ref": "#/definitions/Contact"
            },
            "BillingContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Contacts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerContact"
              }
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreditVerificationRules": {
              "$ref": "#/definitions/CreditVerificationRules"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerClass": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "EnableCurrencyOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableRateOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableWriteOffs": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LeadTimedays": {
              "$ref": "#/definitions/ShortValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "MainContact": {
              "$ref": "#/definitions/Contact"
            },
            "MultiCurrencyStatements": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderPriority": {
              "$ref": "#/definitions/ShortValue"
            },
            "ParentRecord": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentInstructions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountPaymentInstructionDetail"
              }
            },
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "PrimaryContact": {
              "$ref": "#/definitions/Contact"
            },
            "PrimaryContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "PrintDunningLetters": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrintInvoices": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrintStatements": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Salespersons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerSalesPerson"
              }
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendDunningLettersbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendInvoicesbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendStatementsbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingContact": {
              "$ref": "#/definitions/Contact"
            },
            "ShippingContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZoneID": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "StatementCycleID": {
              "$ref": "#/definitions/StringValue"
            },
            "StatementType": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRegistrationID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "WriteOffLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RestrictVisibilityTo": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "EntityUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExemptionNumber": {
              "$ref": "#/definitions/StringValue"
            },
            "IsGuestCustomer": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomerCategory": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CustomerClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplyOverdueCharges": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ARAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ARSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountClassAttributeDetail"
              }
            },
            "AutoApplyPayments": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CashDiscountAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscountSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "COGSAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "COGSSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreditDaysPastDue": {
              "$ref": "#/definitions/ShortValue"
            },
            "CreditLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreditVerification": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultLocationIDfromBranch": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DefaultRestrictionGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "EnableCurrencyOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableRateOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableWriteOffs": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EntityUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "GroupDocumentDiscountLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MiscAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "MiscSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "MultiCurrencyStatements": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverdueChargeID": {
              "$ref": "#/definitions/StringValue"
            },
            "OverLimitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaymentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaymentSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PrintDunningLetters": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrintInvoices": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrintStatements": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RequireEntityUsageType": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RequireTaxZone": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SendDunningLettersbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendInvoicesbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendStatementsByEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "StatementCycleID": {
              "$ref": "#/definitions/StringValue"
            },
            "StatementType": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZoneID": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "UnrealizedGainAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "UnrealizedGainSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "UnrealizedLossAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "UnrealizedLossSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "WriteOffLimit": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "CustomerClassCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CustomerClass"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CustomerContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Contact": {
              "$ref": "#/definitions/Contact"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "CustomerCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Customer"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CustomerLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Calendar": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DefaultProject": {
              "$ref": "#/definitions/StringValue"
            },
            "EntityUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "FedExGroundCollect": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "Insurance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LeadTimeDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "LocationContact": {
              "$ref": "#/definitions/Contact"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderPriority": {
              "$ref": "#/definitions/ShortValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RoleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BCRoleAssignment"
              }
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExemptionNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRegistrationID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "CustomerLocationCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CustomerLocation"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CustomerPaymentMethod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CardAccountNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerProfileID": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerPaymentMethodDetail"
              }
            },
            "InstanceID": {
              "$ref": "#/definitions/IntValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ProcCenterID": {
              "$ref": "#/definitions/StringValue"
            },
            "CardType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CustomerPaymentMethodCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CustomerPaymentMethod"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CustomerPaymentMethodDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CustomerPriceClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "CustomerPriceClassCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CustomerPriceClass"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "CustomerSalesPerson": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Commission": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DateTimeValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "date-time",
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "DecimalValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "double",
          "type": "number"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "DeductionBenefitCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ACAApplicable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ACAInformation": {
              "$ref": "#/definitions/ACAInformation"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AffectsTaxCalculation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ApplicableWage": {
              "$ref": "#/definitions/ApplicableWage"
            },
            "AssociatedWith": {
              "$ref": "#/definitions/StringValue"
            },
            "ContributionType": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionBenefitCodeID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeDeduction": {
              "$ref": "#/definitions/EmployeeDeduction"
            },
            "EmployerContribution": {
              "$ref": "#/definitions/EmployerContribution"
            },
            "GLAccounts": {
              "$ref": "#/definitions/DeductionOrBenefitCodeGLAccounts"
            },
            "InvoiceDescrSource": {
              "$ref": "#/definitions/StringValue"
            },
            "IsGarnishment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PayableBenefit": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShowApplicableWageTab": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxSettingsCA": {
              "$ref": "#/definitions/TaxSettingsCA"
            },
            "TaxSettingsUS": {
              "$ref": "#/definitions/TaxSettingsUS"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorInvoiceDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCode": {
              "$ref": "#/definitions/DeductionBenefitWCCCode"
            }
          }
        }
      ]
    },
    "DeductionBenefitCodeCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/DeductionBenefitCode"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "DeductionBenefitWCCCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCodeRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WCCCodeRateDetail"
              }
            }
          }
        }
      ]
    },
    "DeductionDecreasingApplWage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductionIncreasingApplWageDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeductionDecreasingApplWageDetail"
              }
            },
            "InclusionType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DeductionDecreasingApplWageDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductionCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "DeductionOrBenefitCodeGLAccounts": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BenefitExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DeductionOrBenefitTaxDetailCA": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Benefitincreasestaxablewage": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Deductiondecreasestaxablewage": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DeductionOrBenefitTaxDetailUS": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DeductionsAndBenefits": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductionAndBenefitUseClassDefaults": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DeductionsAndBenefitsDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeDeductionOrBenefitDetail"
              }
            },
            "DeductionSplitMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "MaxPercOfNetPayForAllGarnishm": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "DefaultTaskForGLAccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultTask": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DirectDepositDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountNumber": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountType": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BankName": {
              "$ref": "#/definitions/StringValue"
            },
            "BankRoutingNumber": {
              "$ref": "#/definitions/StringValue"
            },
            "DepositSequenceNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "GetsRemainder": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Percent": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "Discount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BreakBy": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerPriceClasses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCustomerPriceClassesDetail"
              }
            },
            "Customers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCustomerDetail"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountBreakpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountBreakpointDetail"
              }
            },
            "DiscountBy": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ItemPriceClasses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountItemPriceClassesDetail"
              }
            },
            "Items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountItemDetail"
              }
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Promotional": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ProrateDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Sequence": {
              "$ref": "#/definitions/StringValue"
            },
            "ShowFreeItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Warehouses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountWarehouseDetail"
              }
            }
          }
        }
      ]
    },
    "DiscountBreakpointDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountDetailID": {
              "$ref": "#/definitions/IntValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastBreakAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastBreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastDiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastDiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastFreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingBreakAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingBreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PendingDiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingDiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingFreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "DiscountCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicableTo": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountCodeID": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "DiscountCodeCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/DiscountCode"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "DiscountCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Discount"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "DiscountCustomerDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DiscountCustomerPriceClassesDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DiscountItemDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DiscountItemPriceClassesDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DiscountWarehouseDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DocContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DoubleValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "double",
          "type": "number"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "DuplicateDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountType": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "DuplicateContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "EntityType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EarningCodeGLAccounts": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BenefitExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningsAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningsSub": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseSub": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EarningCodeProjectSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillableProject": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DefaultProjectCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultProjectTask": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EarningCodeTaxDetailCA": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Taxability": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EarningCodeTaxDetailUS": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TaxCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EarningIncreasingApplWage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "EarningIncreasingApplWageDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EarningIncreasingApplWageDetail"
              }
            },
            "InclusionType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EarningIncreasingApplWageDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningTypeCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningTypeCode": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "EarningTypeCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccrueTimeOff": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "ContributestoWCCCalculation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningTypeCodeID": {
              "$ref": "#/definitions/StringValue"
            },
            "GLAccounts": {
              "$ref": "#/definitions/EarningCodeGLAccounts"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Multiplier": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectSettings": {
              "$ref": "#/definitions/EarningCodeProjectSettings"
            },
            "PublicHoliday": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RegularTimeTypeCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxAndReportingCA": {
              "$ref": "#/definitions/TaxAndReportingCA"
            },
            "TaxAndReportingUS": {
              "$ref": "#/definitions/TaxAndReportingUS"
            }
          }
        }
      ]
    },
    "EarningTypeCodeCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EarningTypeCode"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "Email": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Bcc": {
              "$ref": "#/definitions/StringValue"
            },
            "Body": {
              "$ref": "#/definitions/StringValue"
            },
            "Cc": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "From": {
              "$ref": "#/definitions/StringValue"
            },
            "FromEmailAccountDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "FromEmailAccountID": {
              "$ref": "#/definitions/IntValue"
            },
            "Incoming": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MailStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Parent": {
              "$ref": "#/definitions/GuidValue"
            },
            "ParentSummary": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivity": {
              "$ref": "#/definitions/TimeActivity"
            },
            "To": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedByID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "RelatedEntityType": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedEntityNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "RelatedEntityDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmailChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "EmailCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "EmailProFormaInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "EmailProcessing": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/IntValue"
            },
            "AccountEmailAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "AssignedToMe": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AssignedToOwner": {
              "$ref": "#/definitions/StringValue"
            },
            "IncludeFailed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Result": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmailProcessingRow"
              }
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmailProcessingCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EmailProcessing"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "EmailProcessingRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "EmailAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "From": {
              "$ref": "#/definitions/StringValue"
            },
            "MailStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Selected": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "To": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Employee": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "ContactInfo": {
              "$ref": "#/definitions/Contact"
            },
            "Delegates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeDelegate"
              }
            },
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeSettings": {
              "$ref": "#/definitions/EmployeeSettings"
            },
            "EmploymentHistory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmploymentHistoryRecord"
              }
            },
            "FinancialSettings": {
              "$ref": "#/definitions/EmployeeFinancialSettings"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeClassPTOBankDefault": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccrualLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AccrualMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CarryoverAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CarryoverType": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DisbursingType": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EmployeeClass": {
              "$ref": "#/definitions/StringValue"
            },
            "FrontLoadingAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "HoursPerYear": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PTOBank": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeClassWorkLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DefaultWorkLocation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Employee"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "EmployeeDeduction": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApplicableEarnings": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "MaximumAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaximumFrequency": {
              "$ref": "#/definitions/StringValue"
            },
            "Percent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReportingTypeCA": {
              "$ref": "#/definitions/StringValue"
            },
            "ReportingTypeUS": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeDeductionOrBenefitDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ContributionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ContributionMax": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ContributionMaximumFrequency": {
              "$ref": "#/definitions/StringValue"
            },
            "ContributionPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DeductionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DeductionCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionMax": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DeductionMaximumFrequency": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "GarnishmentDetails": {
              "$ref": "#/definitions/GarnishmentDetails"
            },
            "IsGarnish": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Sequence": {
              "$ref": "#/definitions/IntValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "UseContributionDefaults": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseDeductionDefaults": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "EmployeeDelegate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Delegate": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "DelegationOf": {
              "$ref": "#/definitions/StringValue"
            },
            "StartsOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpiresOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "IsActive": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "EmployeeFinancialSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "APAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "APSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentInstructions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountPaymentInstructionDetail"
              }
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaymentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaymentSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeGLAccounts": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BenefitExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningsAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningsSub": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOAssetAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOAssetSub": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeGeneralInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Calendar": {
              "$ref": "#/definitions/StringValue"
            },
            "CalendarClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CertifiedProjectHoursperYear": {
              "$ref": "#/definitions/IntValue"
            },
            "DefaultUnion": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultWCCCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ExemptFromCertReporting": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExemptFromCertReportingClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExemptFromOvertimeRules": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExemptFromOvertimeRulesClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NetPayMinClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NetPayMinimum": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverrideHoursPerYearForCertClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideHrsPerYearForCertProjects": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PayGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "PayGroupClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UnionClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseClassDefaultValueHoursPerYearForCertifiedUseDflt": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WCCCodeClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WeeksPerYearClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WorkingHoursPerWeek": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WorkingHoursPerYear": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WorkingWeeksPerYear": {
              "$ref": "#/definitions/ByteValue"
            }
          }
        }
      ]
    },
    "EmployeePaidTimeOff": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "PaidTimeOffDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeePaidTimeOffDetail"
              }
            },
            "UsePTOBanksfromEmployeeClass": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "EmployeePaidTimeOffDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccrualLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AccrualMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AmountAccrued": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AmountAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AmountUsed": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CarryoverAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CarryoverType": {
              "$ref": "#/definitions/StringValue"
            },
            "CreateFinancialTransaction": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DisbursingType": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FrontLoadingAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "HoursAccrued": {
              "$ref": "#/definitions/DecimalValue"
            },
            "HoursAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "HoursPerYear": {
              "$ref": "#/definitions/DecimalValue"
            },
            "HoursUsed": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PTOBank": {
              "$ref": "#/definitions/StringValue"
            },
            "UseClassDefaultValues": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "EmployeePaycheckEarningDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CertifiedJob": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Code": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Hours": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualRate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "Rate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShiftCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Task": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocal": {
              "$ref": "#/definitions/StringValue"
            },
            "Units": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitType": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeePaycheckEarnings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Employee": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeType": {
              "$ref": "#/definitions/StringValue"
            },
            "Hours": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ManualAmount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RegularAmounttoBePaid": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "EmployeePaycheckSummary": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Employee": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeePaycheckEarnings": {
              "$ref": "#/definitions/EmployeePaycheckEarnings"
            },
            "Hours": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PaycheckRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Rate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VoidPaycheckRef": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeePayrollClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeePayrollClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PayrollDefaults": {
              "$ref": "#/definitions/EmployeePayrollClassDefaults"
            },
            "PTODefaults": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeClassPTOBankDefault"
              }
            }
          }
        }
      ]
    },
    "EmployeePayrollClassCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EmployeePayrollClass"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "EmployeePayrollClassDefaults": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CertifiedProjectHoursperYear": {
              "$ref": "#/definitions/IntValue"
            },
            "DefaultCalendar": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultUnion": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultWCCCode": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeType": {
              "$ref": "#/definitions/StringValue"
            },
            "ExemptFromCertifiedReporting": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExemptFromOvertimeRules": {
              "$ref": "#/definitions/BooleanValue"
            },
            "HoursPerYearForCertified": {
              "$ref": "#/definitions/StringValue"
            },
            "MaximumPercentofNetPayforallGarnishments": {
              "$ref": "#/definitions/DecimalValue"
            },
            "NetPayMinimum": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverrideHoursPerYearforCertProject": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PayGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "UsePayrollWorkLocationfromProject": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WorkingHoursPerWeek": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WorkingHoursPerYear": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WorkingWeeksPerYear": {
              "$ref": "#/definitions/ByteValue"
            },
            "WorkLocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeClassWorkLocation"
              }
            }
          }
        }
      ]
    },
    "EmployeePayrollSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AddressInfo": {
              "$ref": "#/definitions/Address"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "Compensation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompensationDetail"
              }
            },
            "DeductionsAndBenefits": {
              "$ref": "#/definitions/DeductionsAndBenefits"
            },
            "DirectDepositDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DirectDepositDetail"
              }
            },
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeType": {
              "$ref": "#/definitions/StringValue"
            },
            "EmploymentDates": {
              "$ref": "#/definitions/EmploymentDates"
            },
            "EmploymentRecords": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmploymentRecord"
              }
            },
            "GeneralInfo": {
              "$ref": "#/definitions/EmployeeGeneralInfo"
            },
            "GLAccounts": {
              "$ref": "#/definitions/EmployeeGLAccounts"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PaidTimeOff": {
              "$ref": "#/definitions/EmployeePaidTimeOff"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Taxes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeTaxDetail"
              }
            },
            "TaxSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxSettingDetail"
              }
            },
            "EmployeeTypeClassDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WorkLocations": {
              "$ref": "#/definitions/EmployeeWorkLocations"
            }
          }
        }
      ]
    },
    "EmployeePayrollSettingsCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EmployeePayrollSettings"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "EmployeeSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "Calendar": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "DepartmentID": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeClass": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "EnableCurrencyOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableRateOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "RegularHoursValidation": {
              "$ref": "#/definitions/StringValue"
            },
            "ReportsTo": {
              "$ref": "#/definitions/StringValue"
            },
            "RouteEmails": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Salesperson": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeCardIsRequired": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UnionLocalID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCodeSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxCodeSetting"
              }
            },
            "TaxDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeWorkLocationDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DefaultWorkLocation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeWorkLocations": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "UseClassDefaultValueUsePayrollProjectWorkLocationUseDflt": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UsePayrollWorkLocationfromProject": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WorkLocationClassDefaults": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WorkLocationDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeWorkLocationDetail"
              }
            }
          }
        }
      ]
    },
    "EmployerContribution": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApplicableEarnings": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "CertifiedReportingType": {
              "$ref": "#/definitions/StringValue"
            },
            "ContributestoGrossCalculation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MaximumAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaximumFrequency": {
              "$ref": "#/definitions/StringValue"
            },
            "NoFinancialTransaction": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Percent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReportingTypeCA": {
              "$ref": "#/definitions/StringValue"
            },
            "ReportingTypeUS": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployerTaxesIncreasingApplWage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "EmployerTaxesIncreasingApplWageDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployerTaxesIncreasingApplWageDetail"
              }
            },
            "InclusionType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployerTaxesIncreasingApplWageDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmploymentDates": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "HireDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TerminationDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "EmploymentHistoryRecord": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "PositionID": {
              "$ref": "#/definitions/StringValue"
            },
            "RehireEligible": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "StartReason": {
              "$ref": "#/definitions/StringValue"
            },
            "Terminated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TerminationReason": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmploymentRecord": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FinalPayment": {
              "$ref": "#/definitions/GuidValue"
            },
            "Position": {
              "$ref": "#/definitions/StringValue"
            },
            "RehireEligible": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "StartReason": {
              "$ref": "#/definitions/StringValue"
            },
            "Terminated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TerminationReason": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Entity": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "rowNumber": {
          "format": "int64",
          "type": "integer"
        },
        "note": {
          "$ref": "#/definitions/StringValue"
        },
        "custom": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/CustomField"
            }
          }
        },
        "error": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileLink"
          }
        }
      }
    },
    "Event": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllDay": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attendees": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventAttendee"
              }
            },
            "Body": {
              "$ref": "#/definitions/StringValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Priority": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedActivities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "Reminder": {
              "$ref": "#/definitions/ReminderDetail"
            },
            "ShowAs": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivity": {
              "$ref": "#/definitions/EventTimeActivity"
            },
            "CreatedByID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RelatedEntityType": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedEntityNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "RelatedEntityDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EventAttendee": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Comment": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "EventNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "InvitationStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Key": {
              "$ref": "#/definitions/StringValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "NameAttendeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "EventCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "EventTimeActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseClaim": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApprovalDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ApprovalDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClaimedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "ClaimTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DepartmentID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseClaimDetails"
              }
            },
            "FinancialDetails": {
              "$ref": "#/definitions/ExpenseClaimFinancialDetail"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "ReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseClaimTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATExemptTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATTaxableTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ExpenseClaimAPDocument": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseClaimCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ExpenseClaimDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AmountInClaimCurrency": {
              "$ref": "#/definitions/DecimalValue"
            },
            "APRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ARRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ClaimAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeePart": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseItemID": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "NetAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "TipAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseClaimFinancialDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "APDocuments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseClaimAPDocument"
              }
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "PosttoPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseClaimTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductibleTaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpenseAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "IncludeinVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseReceipt": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ClaimAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ClaimedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpenseItemID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ReceiptDetails": {
              "$ref": "#/definitions/ExpenseReceiptDetails"
            },
            "ReceiptID": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseReceiptTaxDetails"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ExpenseReceiptCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ExpenseReceiptDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrancyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeePart": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseClaimID": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseClaimStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseReceiptTaxDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductibleTaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpenseAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "IncludeInVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExportCardEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "ExternalCommitment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "CommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedReceivedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OriginalCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedDocument": {
              "$ref": "#/definitions/StringValue"
            },
            "RevisedCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExternalCommitmentCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExternalCommitment"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "FOBPoint": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "FOBPointID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "FOBPointCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/FOBPoint"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "FileLink": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "href": {
          "format": "uri",
          "type": "string"
        }
      }
    },
    "FinancialPeriod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialPeriodDetail"
              }
            },
            "FinancialYear": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NbrOfPeriods": {
              "$ref": "#/definitions/ShortValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "UserDefinedPeriods": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "FinancialPeriodCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/FinancialPeriod"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "FinancialPeriodDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdjustmentPeriod": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInAP": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInAR": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInCA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInFA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInIN": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FinancialPeriodID": {
              "$ref": "#/definitions/StringValue"
            },
            "LengthInDays": {
              "$ref": "#/definitions/IntValue"
            },
            "PeriodNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "FinancialSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillSeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscountDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerTaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EntityUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InvoiceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OverrideTaxZone": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "FinancialYear": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdjustToPeriodStart": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BelongsToNextYear": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DayOfWeek": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialYearPeriodDetail"
              }
            },
            "FinancialYearStartsOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FirstFinancialYear": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstPeriodStartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "HasAdjustmentPeriod": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LengthOfFinancialPeriodInDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "NbrOfFinancialPeriods": {
              "$ref": "#/definitions/ShortValue"
            },
            "PeriodsStartDayOfWeek": {
              "$ref": "#/definitions/StringValue"
            },
            "PeriodType": {
              "$ref": "#/definitions/StringValue"
            },
            "UserDefinedPeriods": {
              "$ref": "#/definitions/BooleanValue"
            },
            "YearEndCalculationMethod": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "FinancialYearCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/FinancialYear"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "FinancialYearPeriodDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PeriodNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "FinishCountingPhysicalInventory": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PhysicalInventoryReview"
        }
      }
    },
    "GarnishmentDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "GarnCourtDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "GarnCourtName": {
              "$ref": "#/definitions/StringValue"
            },
            "GarnDocRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "GarnOrigAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "GarnPaidAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "GarnVendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "GarnVendorInvDescr": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "GuidValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "uuid",
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "HoldChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "HoldProFormaInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "HoldProject": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "HoldProjectTask": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTask"
        }
      }
    },
    "HoldProjectTemplate": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTemplate"
        }
      }
    },
    "HttpError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "exceptionMessage": {
          "type": "string"
        },
        "exceptionType": {
          "type": "string"
        },
        "stackTrace": {
          "type": "string"
        },
        "modelState": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "messageDetail": {
          "type": "string"
        }
      },
      "additionalProperties": {
        "type": "object"
      }
    },
    "ImportEmployeeTaxes": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EmployeePayrollSettings"
        }
      }
    },
    "IntValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "InventoryAdjustment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryAdjustmentDetail"
              }
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "InventoryAdjustmentCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventoryAdjustment"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "InventoryAdjustmentDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CostLayerType": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SpecialOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryAllocationInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Available": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AvailableForIssue": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AvailableForShipping": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BaseUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "InTransit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InTransitToSO": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryIssues": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryReceipts": {
              "$ref": "#/definitions/DecimalValue"
            },
            "KitAssemblyDemand": {
              "$ref": "#/definitions/DecimalValue"
            },
            "KitAssemblySupply": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "OnHand": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OnLocationNotAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchaseForSO": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchaseForSOPrepared": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchaseOrders": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchasePrepared": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchaseReceipts": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReceiptsForSO": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryAllocationRow"
              }
            },
            "SOAllocated": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOBackOrdered": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOBooked": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOPrepared": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOShipped": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOToPurchase": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalAddition": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalDeduction": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryAllocationInquiryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventoryAllocationInquiry"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "InventoryAllocationRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllocationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "AllocationType": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "Expired": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "InventoryFileUrls": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "FileType": {
              "$ref": "#/definitions/StringValue"
            },
            "FileURL": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "InventoryIssue": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ControlAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ControlQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryIssueDetail"
              }
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "InventoryIssueCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventoryIssue"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "InventoryIssueDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryIssueDetailAllocation"
              }
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CostLayerType": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExtCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExtPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNumber": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "SpecialOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TranType": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryIssueDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SplitLineNumber": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryItemCrossReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AlternateID": {
              "$ref": "#/definitions/StringValue"
            },
            "AlternateType": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorOrCustomer": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryItemUOMConversion": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ConversionFactor": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FromUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "MultiplyOrDivide": {
              "$ref": "#/definitions/StringValue"
            },
            "ToUOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryQuantityAvailable": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryQuantityAvailableDetail"
              }
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "InventoryQuantityAvailableCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventoryQuantityAvailable"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "InventoryQuantityAvailableDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "QtyAvailable": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "InventoryReceipt": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ControlCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ControlQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryReceiptDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TransferNbr": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryReceiptCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventoryReceipt"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "InventoryReceiptDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryReceiptDetailAllocation"
              }
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CostLayerType": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExtCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNumber": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "POReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SpecialOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryReceiptDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SplitLineNumber": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventorySummaryInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ExpandByLotSerialNbr": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventorySummaryRow"
              }
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventorySummaryInquiryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventorySummaryInquiry"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "InventorySummaryRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "EstimatedTotalCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EstimatedUnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "QtyAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyAvailableForShipment": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyNotAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyOnHand": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InviteAllEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "InviteEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "Invoice": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApplicationsCreditMemo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceApplicationsCreditMemo"
              }
            },
            "ApplicationsDefault": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceApplicationsDefault"
              }
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillingPrinted": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "BillToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceDetail"
              }
            },
            "DiscountDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceDiscountDetail"
              }
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LinkARAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LinkBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "ShipToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceTaxDetail"
              }
            },
            "IsTaxValid": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceApplicationsCreditMemo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceApplicationsDefault": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountTaken": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceAppointment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "InvoiceCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Invoice"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "InvoiceDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExtendedPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceDiscountDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExternalDiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "RetainedDiscount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SequenceID": {
              "$ref": "#/definitions/StringValue"
            },
            "SkipDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ServiceOrder"
        }
      }
    },
    "InvoiceTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ItemClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemClassAtrribute"
              }
            },
            "AvailabilityCalculationRule": {
              "$ref": "#/definitions/StringValue"
            },
            "BaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "CountryOfOrigin": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LotSerialClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PostingClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "StockItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TariffCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ValuationMethod": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ItemClassAtrribute": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AttributeID": {
              "$ref": "#/definitions/StringValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/ShortValue"
            }
          }
        }
      ]
    },
    "ItemClassCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ItemClass"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ItemPriceClassesDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ItemSalesCategory": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CategoryID": {
              "$ref": "#/definitions/IntValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemSalesCategoryMember"
              }
            },
            "ParentCategoryID": {
              "$ref": "#/definitions/IntValue"
            },
            "Path": {
              "$ref": "#/definitions/StringValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/IntValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "ItemSalesCategoryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ItemSalesCategory"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ItemSalesCategoryMember": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemStatus": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ItemWarehouse": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DefaultIssueFrom": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultReceiptTo": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultSubitem": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventorySubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MaxQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverrideInventoryAccountSubaccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverridePreferredVendor": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverridePrice": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideReplenishmentSettings": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideServiceLevel": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideStandardCost": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideProductManager": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideMaxQty": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideReorderPoint": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideSafetyStock": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PreferredLocation": {
              "$ref": "#/definitions/StringValue"
            },
            "PreferredVendor": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductManager": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ReorderPoint": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReplenishmentClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentSource": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentWarehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "SafetyStock": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Seasonality": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceLevel": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ItemWarehouseCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ItemWarehouse"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ItemsDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "JournalTransaction": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JournalTransactionDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LedgerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "JournalTransactionCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/JournalTransaction"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "JournalTransactionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DebitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "IsNonPM": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "NonBillable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTransactionID": {
              "$ref": "#/definitions/LongValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorOrCustomer": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssembly": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssemblyAllocation"
              }
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "KitInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "NonStockComponents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssemblyNonStockComponent"
              }
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Revision": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "StockComponents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssemblyStockComponent"
              }
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssemblyAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssemblyCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/KitAssembly"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "KitAssemblyNonStockComponent": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "NonStockInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssemblyStockComponent": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssemblyStockComponentAllocation"
              }
            },
            "ComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "StockInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssemblyStockComponentAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitNonStockComponent": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllowComponentQtyVariance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "NonStockInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitSpecification": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "IsNonStock": {
              "$ref": "#/definitions/BooleanValue"
            },
            "KitInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NonStockComponents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitNonStockComponent"
              }
            },
            "RevisionID": {
              "$ref": "#/definitions/StringValue"
            },
            "StockComponents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitStockComponent"
              }
            }
          }
        }
      ]
    },
    "KitSpecificationCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/KitSpecification"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "KitStockComponent": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllowComponentQtyVariance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "StockInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "LaborCostRate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Employee": {
              "$ref": "#/definitions/StringValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "LaborRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocal": {
              "$ref": "#/definitions/StringValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LaborRate"
              }
            }
          }
        }
      ]
    },
    "LaborCostRateCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/LaborCostRate"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "LaborRate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AnnualRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "HourlyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LaborRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "RegularHoursPerWeek": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TypeOfEmployment": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocalID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Lead": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "Address": {
              "$ref": "#/definitions/Address"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Campaigns": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CampaignDetail"
              }
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "DoNotCall": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotFax": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotMail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "DuplicateFound": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Duplicates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DuplicateDetail"
              }
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "FaxType": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "LanguageOrLocale": {
              "$ref": "#/definitions/StringValue"
            },
            "LastIncomingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastOutgoingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LeadClass": {
              "$ref": "#/definitions/StringValue"
            },
            "LeadDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "LeadID": {
              "$ref": "#/definitions/IntValue"
            },
            "MarketingLists": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketingListDetail"
              }
            },
            "NoMarketing": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NoMassMail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceCampaign": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Title": {
              "$ref": "#/definitions/StringValue"
            },
            "WebSite": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "RefContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "ConvertedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "QualificationDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "LeadCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "Ledger": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Branches": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LedgerBranches"
              }
            },
            "Companies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LedgerCompanies"
              }
            },
            "ConsolidationSource": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LedgerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "LedgerBranches": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchName": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "LedgerCompanies": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Company": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "LedgerCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Ledger"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "LockProjectBudget": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "LockProjectCommitments": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "LongValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "int64",
          "type": "integer"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "LotSerialClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AssignmentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "IssueMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Segments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LotSerialClassSegment"
              }
            },
            "TrackExpirationDate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TrackingMethod": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "LotSerialClassCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/LotSerialClass"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "LotSerialClassSegment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "SegmentNbr": {
              "$ref": "#/definitions/ShortValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "MarkBusinessAccountAsValidated": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        }
      }
    },
    "MarkContactAsValidated": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "MarkLeadAsValidated": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        }
      }
    },
    "MarketingListDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "DynamicList": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Format": {
              "$ref": "#/definitions/StringValue"
            },
            "ListName": {
              "$ref": "#/definitions/StringValue"
            },
            "MarketingListID": {
              "$ref": "#/definitions/IntValue"
            },
            "Subscribed": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "MatrixItems": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DefaultPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "MSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ItemStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ExportToExternal": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "NonStockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BaseUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "CrossReferences": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryItemCrossReference"
              }
            },
            "CurrentCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DefaultPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DeferralAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DeferralSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseAccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseAccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "IsKit": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ItemClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PendingCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingCostDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "POAccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "POAccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PostingClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchaseUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "ReasonCodeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "RequireReceipt": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RequireShipment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesCategories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonStockItemSalesCategory"
              }
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonStockItemVendorDetail"
              }
            },
            "Volume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VolumeUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Weight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WeightUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "CurySpecificMSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurySpecificPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Availability": {
              "$ref": "#/definitions/StringValue"
            },
            "ExportToExternal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Categories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryStockItem"
              }
            },
            "Content": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrentStdCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CustomURL": {
              "$ref": "#/definitions/StringValue"
            },
            "DimensionWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FileUrls": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryFileUrls"
              }
            },
            "MetaDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "MetaKeywords": {
              "$ref": "#/definitions/StringValue"
            },
            "MSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "PageTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "SearchKeywords": {
              "$ref": "#/definitions/StringValue"
            },
            "TemplateItemID": {
              "$ref": "#/definitions/StringValue"
            },
            "Visibility": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "NonStockItemCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/NonStockItem"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "NonStockItemSalesCategory": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CategoryID": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "NonStockItemVendorDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorName": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "OpenSalesOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "OpenTimeEntry": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TimeEntry"
        }
      }
    },
    "Opportunity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "Address": {
              "$ref": "#/definitions/Address"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "ContactInformation": {
              "$ref": "#/definitions/OpportunityContact"
            },
            "ConvertedLeadDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "ConvertedLeadID": {
              "$ref": "#/definitions/IntValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyViewState": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Details": {
              "$ref": "#/definitions/StringValue"
            },
            "Discount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Discounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpportunityDiscount"
              }
            },
            "Estimation": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualAmount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OpportunityID": {
              "$ref": "#/definitions/StringValue"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Products": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpportunityProduct"
              }
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceCampaign": {
              "$ref": "#/definitions/StringValue"
            },
            "Stage": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpportunityTaxDetail"
              }
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Total": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WeightTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "OpportunityContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "FaxType": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Position": {
              "$ref": "#/definitions/StringValue"
            },
            "Title": {
              "$ref": "#/definitions/StringValue"
            },
            "WebSite": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "OpportunityCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Opportunity"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "OpportunityDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Estimation": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Probability": {
              "$ref": "#/definitions/IntValue"
            },
            "Stage": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Total": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "OpportunityDiscount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DiscountableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SequenceID": {
              "$ref": "#/definitions/StringValue"
            },
            "SkipDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "OpportunityProduct": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Discount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountSequence": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OpportunityProductID": {
              "$ref": "#/definitions/IntValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "SkipLineDiscounts": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "OpportunityTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "IncludeInVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "OrderRisks": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Message": {
              "$ref": "#/definitions/StringValue"
            },
            "Recommendation": {
              "$ref": "#/definitions/StringValue"
            },
            "Score": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "PTOBank": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccrualLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AccrualMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrueonCertifiedJobOnly": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AllowNegativeBalance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BankStartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CanOnlyDisbursefromCarryover": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CarryoverAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CarryoverType": {
              "$ref": "#/definitions/StringValue"
            },
            "CreateFinTransactions": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DefaultAccrualPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DefaultDisbursingType": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DisbursingEarningCode": {
              "$ref": "#/definitions/StringValue"
            },
            "FrontLoadingAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "GLAccounts": {
              "$ref": "#/definitions/PTOBankGLAccounts"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OnSettlement": {
              "$ref": "#/definitions/StringValue"
            },
            "PayCarryoverafterMonths": {
              "$ref": "#/definitions/IntValue"
            },
            "PTOBankID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PTOBankCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PTOBank"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PTOBankGLAccounts": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AssetAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "AssetSub": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "LiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LiabilitySub": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PauseAppointment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "PayGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BenefitExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningsAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningsSub": {
              "$ref": "#/definitions/StringValue"
            },
            "IsDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PayGroupID": {
              "$ref": "#/definitions/StringValue"
            },
            "PayGroupName": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOAssetAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOAssetSub": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PTOLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseSub": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxLiabilityAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxLiabilitySub": {
              "$ref": "#/definitions/StringValue"
            },
            "UserRole": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PayGroupCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PayGroup"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PayPeriod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NumberofPeriods": {
              "$ref": "#/definitions/ShortValue"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PayGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentPeriods": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentPeriod"
              }
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Year": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PayPeriodCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PayPeriod"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "Payment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ApplicationHistory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentApplicationHistoryDetail"
              }
            },
            "AppliedToDocuments": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CardAccountNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Charges": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentCharge"
              }
            },
            "CreditCardProcessingInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreditCardProcessingDetail"
              }
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocumentsToApply": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IsCCPayment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrdersToApply": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentOrderDetail"
              }
            },
            "PaymentAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProcessingCenterID": {
              "$ref": "#/definitions/StringValue"
            },
            "SaveCard": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreditCardTransactionInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreditCardTransactionDetail"
              }
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigTransaction": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "IsNewCard": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "AvailableBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AppliedToOrders": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "PaymentApplicationHistoryDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdjustedDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustedRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustingDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustingRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustmentNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "AdjustsVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApplicationPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BalanceWriteOff": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscountBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CashDiscountTaken": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "VATCreditMemo": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PaymentCharge": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "EntryTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SubID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PaymentCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PaymentDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BalanceWriteOff": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountTaken": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "WriteOffReasonCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PaymentMethod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AllowedCashAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethodAllowedCashAccountDetail"
              }
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "IntegratedProcessing": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MeansOfPayment": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentMethodID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProcessingCenters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethodProcessingCenterDetail"
              }
            },
            "RequireRemittanceInformationforCashAccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseInAP": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseInAR": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseInPR": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SetPaymentDatetoBankTransactionDate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SettingsForPR": {
              "$ref": "#/definitions/SettingsForPR"
            }
          }
        }
      ]
    },
    "PaymentMethodAllowedCashAccountDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "APDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "APLastRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "APSuggestNextNbr": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ARDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ARDefaultForRefund": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ARLastRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ARSuggestNextNbr": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BatchLastRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "UseInAP": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseInAR": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "UseInPR": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "PaymentMethodCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PaymentMethod"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PaymentMethodProcessingCenterDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ProcCenterID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PaymentOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AppliedToOrder": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PaymentPeriod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FinYear": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PayPeriodID": {
              "$ref": "#/definitions/StringValue"
            },
            "PeriodNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransactionDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "PayrollBatch": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BatchID": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionsAndBenefitsDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BatchDeductionOrBenefitDetail"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BatchEarningDetail"
              }
            },
            "EmployeeSummary": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeePaycheckSummary"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NumberofEmployees": {
              "$ref": "#/definitions/IntValue"
            },
            "OvertimeRules": {
              "$ref": "#/definitions/BatchOvertimeRules"
            },
            "PayGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "PayPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalEarnings": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalHourQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PayrollType": {
              "$ref": "#/definitions/StringValue"
            },
            "PeriodEnd": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PeriodStart": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "PayrollBatchCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PayrollBatch"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PayrollUnionLocal": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DeductionsAndBenefits": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnionDeductionOrBenefitDetail"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnionEarningRateDetail"
              }
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "PayrollUnionLocalID": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PayrollUnionLocalCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PayrollUnionLocal"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PayrollWCCCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WCCCode"
              }
            }
          }
        }
      ]
    },
    "PayrollWCCCodeCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PayrollWCCCode"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PhysicalInventoryCount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInventoryCountDetail"
              }
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PhysicalInventoryCountCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PhysicalInventoryCount"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PhysicalInventoryCountDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BookQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "PhysicalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PhysicalInventoryReview": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInventoryReviewDetail"
              }
            },
            "FreezeDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalPhysicalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalVarianceCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalVarianceQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PhysicalInventoryReviewCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PhysicalInventoryReview"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PhysicalInventoryReviewDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BookQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExtendedVarianceCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "PhysicalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TagNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VarianceQty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "PrepareInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Shipment"
        }
      }
    },
    "PrepareSalesInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "ProFormaFinancialDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ARDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ARRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscountDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerTaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProFormaInvoice": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountDue": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApprovalDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "BillingSettings": {
              "$ref": "#/definitions/BillToSettings"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "FinancialDetails": {
              "$ref": "#/definitions/ProFormaFinancialDetails"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InvoiceDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InvoiceTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ProgressBilling": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProgressBilling"
              }
            },
            "ProgressBillingTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "RetainageTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProFormaTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TimeAndMaterial": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeAndMaterial"
              }
            },
            "TimeAndMaterialTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProFormaInvoiceCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ProFormaTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "RetainedTax": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainedTaxable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProcessAllEmailProcessing": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EmailProcessing"
        }
      }
    },
    "ProcessEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "ProcessEmailProcessing": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EmailProcessing"
        }
      }
    },
    "ProgressBilling": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AmountToInvoice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrentInvoiced": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DeferralCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DraftInvoicesAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "PreviouslyInvoiced": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Retainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainageAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StoredMaterial": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalCompleted": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "Project": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActivityHistory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectActivity"
              }
            },
            "ApprovalDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "Assets": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "Balances": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectBalance"
              }
            },
            "BillingAndAllocationSettings": {
              "$ref": "#/definitions/ProjectBillingAndAllocationSettings"
            },
            "BillToSettings": {
              "$ref": "#/definitions/BillToSettings"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Employees": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEmployee"
              }
            },
            "Equipments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEquipment"
              }
            },
            "Expenses": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "GLAccounts": {
              "$ref": "#/definitions/ProjectGLAccount"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Income": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Invoices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectProFormaDetails"
              }
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Liabilities": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectProperties": {
              "$ref": "#/definitions/ProjectProperties"
            },
            "ProjectTemplateID": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocals": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectUnionLocal"
              }
            },
            "VisibilitySettings": {
              "$ref": "#/definitions/VisibilitySettings"
            },
            "Retainage": {
              "$ref": "#/definitions/ProjectRetainage"
            },
            "ProjectAddress": {
              "$ref": "#/definitions/ProjectAddress"
            }
          }
        }
      ]
    },
    "ProjectActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectAddress": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AddressLine1": {
              "$ref": "#/definitions/StringValue"
            },
            "City": {
              "$ref": "#/definitions/StringValue"
            },
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "PostalCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Latitude": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Longitude": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectBalance": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualOpenCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BudgetedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Performance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VarianceAmount": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectBillingAndAllocationSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllocationRule": {
              "$ref": "#/definitions/StringValue"
            },
            "AutomaticallyReleaseARDocuments": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillingPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CreateProFormaOnBilling": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastBillingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NextBillingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RateTable": {
              "$ref": "#/definitions/StringValue"
            },
            "RunAllocationOnReleaseOfProjectTransactions": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "UseTMRevenueBudgetLimits": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillingCurrency": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectBudget": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualPlusOpenCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AutoCompleted": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BudgetedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BudgetedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedReceivedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Completed": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostAtCompletion": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CostToComplete": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DraftInvoicesAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastCostAtCompletion": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastCostToComplete": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastPercentageOfCompletion": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingInvoiceAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PercentageOfCompletion": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Performance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Retainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevenueTask": {
              "$ref": "#/definitions/IntValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "VarianceAmount": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectBudgetCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectBudget"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ProjectCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ProjectEmployee": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Department": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectEquipment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EquipmentID": {
              "$ref": "#/definitions/StringValue"
            },
            "RunRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RunRateItem": {
              "$ref": "#/definitions/StringValue"
            },
            "SetupRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SetupRateItem": {
              "$ref": "#/definitions/StringValue"
            },
            "SuspendRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SuspendRateItem": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectGLAccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultCostAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultCostSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultTaskForGLAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DefaultTaskForGLAccount"
              }
            }
          }
        }
      ]
    },
    "ProjectProFormaDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ARDocDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ARDocDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "ARDocOriginalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ARDocStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ARDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ARReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OpenARBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalRetainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaidRetainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProFormaDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProFormaReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "RetainageInvoice": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnpaidRetainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnreleasedRetainage": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CertifiedJob": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ChangeOrderWorkflow": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastRevenueChangeNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectManager": {
              "$ref": "#/definitions/StringValue"
            },
            "RestrictEmployees": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RestrictEquipment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RevenueBudgetLevel": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TrackProductionData": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostBudgetLevel": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivityApprover": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectCurrency": {
              "$ref": "#/definitions/StringValue"
            },
            "RateType": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryTrackingMode": {
              "$ref": "#/definitions/StringValue"
            },
            "CostTaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "RevenueTaxZone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectRetainage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "RetainageMode": {
              "$ref": "#/definitions/StringValue"
            },
            "IncludeCO": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseSteps": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CapPct": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CapAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainagePct": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ContractTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CompletedPct": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectTask": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActivityHistory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectActivity"
              }
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BillingAndAllocationSettings": {
              "$ref": "#/definitions/ProjectTaskBillingAndAllocationSettings"
            },
            "CRMLink": {
              "$ref": "#/definitions/ProjectTaskToCRMLink"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DefaultValues": {
              "$ref": "#/definitions/ProjectTaskDefaultValues"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Properties": {
              "$ref": "#/definitions/ProjectTaskProperties"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "VisibilitySettings": {
              "$ref": "#/definitions/VisibilitySettings"
            }
          }
        }
      ]
    },
    "ProjectTaskBillingAndAllocationSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllocationRule": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingOption": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "BillSeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "RateTable": {
              "$ref": "#/definitions/StringValue"
            },
            "WIPAccountGroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectTaskCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTask"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ProjectTaskDefaultValues": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultCostAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultCostSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectTaskProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "Completed": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CompletionMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PlannedEndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PlannedStartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "ProjectTaskToCRMLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountedCampaign": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectTemplate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BillingAndAllocationSettings": {
              "$ref": "#/definitions/ProjectBillingAndAllocationSettings"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Employees": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEmployee"
              }
            },
            "Equipments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEquipment"
              }
            },
            "GLAccounts": {
              "$ref": "#/definitions/ProjectGLAccount"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProjectProperties": {
              "$ref": "#/definitions/ProjectProperties"
            },
            "ProjectTemplateID": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "VisibilitySettings": {
              "$ref": "#/definitions/VisibilitySettings"
            }
          }
        }
      ]
    },
    "ProjectTemplateCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTemplate"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ProjectTemplateTask": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BillingAndAllocationSettings": {
              "$ref": "#/definitions/ProjectTaskBillingAndAllocationSettings"
            },
            "DefaultValues": {
              "$ref": "#/definitions/ProjectTaskDefaultValues"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProjectTemplateID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTemplateTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Properties": {
              "$ref": "#/definitions/ProjectTemplateTaskProperties"
            },
            "VisibilitySettings": {
              "$ref": "#/definitions/VisibilitySettings"
            }
          }
        }
      ]
    },
    "ProjectTemplateTaskCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTemplateTask"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ProjectTemplateTaskProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "AutomaticallyIncludeInProject": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CompletionMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ProjectTransaction": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTransactionDetail"
              }
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalDocNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalBillableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectTransactionCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTransaction"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ProjectTransactionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountGroupDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "Allocated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Billed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DebitAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DebitSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningType": {
              "$ref": "#/definitions/StringValue"
            },
            "Employee": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "FinPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "Multiplier": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransactionID": {
              "$ref": "#/definitions/LongValue"
            },
            "UnitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "UseBillableQtyInAmountFormula": {
              "$ref": "#/definitions/BooleanValue"
            },
            "VendorOrCustomer": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectUnionLocal": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocalID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyEffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseOrderDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IsTaxValid": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "PromisedOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShippingInstructions": {
              "$ref": "#/definitions/ShippingInstructions"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseOrderTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorTaxZone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseOrderCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PurchaseOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PurchaseOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AlternateID": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Cancelled": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Completed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CompleteOn": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LineType": {
              "$ref": "#/definitions/StringValue"
            },
            "MaxReceiptPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinReceiptPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigPONbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigPOType": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Promised": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "QtyOnReceipts": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReceiptAction": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceivedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Requested": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseOrderTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "RetainedTaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainedTaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "PurchaseReceipt": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "BillDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreateBill": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyEffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseReceiptDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ProcessReturnWithOriginalCost": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UnbilledQuantity": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseReceiptCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PurchaseReceipt"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "PurchaseReceiptDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseReceiptDetailAllocation"
              }
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EditableUnitCost": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EstimatedINExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FinalINExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LineType": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "POLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "POOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "POOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "POReceiptLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "POReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceiptQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferOrderLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "TransferOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseReceiptDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "PurchaseSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "POSiteID": {
              "$ref": "#/definitions/StringValue"
            },
            "POSource": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchasingDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "POOrderLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "POOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "POOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "Selected": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "PutOnHold": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Subcontract"
        }
      }
    },
    "PutOnHoldExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "PutOnHoldExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "RecalcExternalTax": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ServiceOrder"
        }
      }
    },
    "RejectChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "RejectExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "RejectExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "RejectInvitationEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "RejectProFormaInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "RejectProject": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "RelationDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AddToCc": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ContactDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "Document": {
              "$ref": "#/definitions/GuidValue"
            },
            "DocumentTargetNoteIDDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "Primary": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RelationID": {
              "$ref": "#/definitions/IntValue"
            },
            "Role": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "DocumentDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "ReleaseAdjustment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventoryAdjustment"
        }
      }
    },
    "ReleaseBatch": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PayrollBatch"
        }
      }
    },
    "ReleaseBill": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Bill"
        }
      }
    },
    "ReleaseCase": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Case"
        }
      }
    },
    "ReleaseCashSale": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CashSale"
        }
      }
    },
    "ReleaseChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "ReleaseCheck": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Check"
        }
      }
    },
    "ReleaseExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "ReleaseFromCreditHoldSalesOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "ReleaseFromHold": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Subcontract"
        }
      }
    },
    "ReleaseInventoryIssue": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventoryIssue"
        }
      }
    },
    "ReleaseInventoryReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventoryReceipt"
        }
      }
    },
    "ReleaseInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "ReleaseJournalTransaction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/JournalTransaction"
        }
      }
    },
    "ReleaseKitAssembly": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/KitAssembly"
        }
      }
    },
    "ReleasePayment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        }
      }
    },
    "ReleaseProFormaInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "ReleasePurchaseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PurchaseReceipt"
        }
      }
    },
    "ReleaseRetainage": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Bill"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "AmtToRelease": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ReleaseSalesInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesInvoice"
        }
      }
    },
    "ReleaseSalesPriceWorksheet": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesPriceWorksheet"
        }
      }
    },
    "ReleaseTransactions": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTransaction"
        }
      }
    },
    "ReleaseTransferOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TransferOrder"
        }
      }
    },
    "ReleaseVendorPriceWorksheet": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/VendorPriceWorksheet"
        }
      }
    },
    "ReminderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "IsActive": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RemindAtDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RemindAtTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "RemoveChangeOrderFromHold": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "RemoveProFormaInvoiceFromHold": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "ReopenAppointment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "ReopenOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ServiceOrder"
        }
      }
    },
    "ReopenSalesOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "ReplenishmentParameterStockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DemandForecastModel": {
              "$ref": "#/definitions/StringValue"
            },
            "ForecastPeriodType": {
              "$ref": "#/definitions/StringValue"
            },
            "LaunchDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MaxQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxShelfLifeInDays": {
              "$ref": "#/definitions/IntValue"
            },
            "Method": {
              "$ref": "#/definitions/StringValue"
            },
            "PeriodsToAnalyze": {
              "$ref": "#/definitions/IntValue"
            },
            "ReorderPoint": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReplenishmentClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentWarehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "SafetyStock": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Seasonality": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceLevel": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            },
            "TerminationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransferERQ": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ReportingGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "GroupType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "RestoreArchivedEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "RestoreDeletedEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "ResumeAppointmentMenuActions": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "ReverseBill": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Bill"
        }
      }
    },
    "ReverseChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "RunProjectAllocation": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "RunProjectBilling": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "SalesInvoice": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApplicationsCreditMemo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceApplicationCreditMemo"
              }
            },
            "ApplicationsInvoice": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceApplicationInvoice"
              }
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillingSettings": {
              "$ref": "#/definitions/BillToSettings"
            },
            "CashDiscount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Commissions": {
              "$ref": "#/definitions/SalesInvoiceCommissions"
            },
            "CreditHold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceDetail"
              }
            },
            "DetailTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceDiscountDetails"
              }
            },
            "DiscountTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "IsTaxValid": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FinancialDetails": {
              "$ref": "#/definitions/SalesInvoiceFinancialDetails"
            },
            "FreightDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceFreightDetail"
              }
            },
            "FreightPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PaymentTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "VATExemptTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATTaxableTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceApplicationCreditMemo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceApplicationInvoice": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdjustedDocReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustingDocReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustmentNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountTaken": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "DocumentType": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PaymentPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceCommissions": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CommissionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalesPersons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceSalesPersonDetail"
              }
            },
            "TotalCommissionableAmount": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesInvoice"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "SalesInvoiceDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigInvLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OrigInvNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigInvType": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescr": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceDiscountDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExternalDiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "SequenceID": {
              "$ref": "#/definitions/StringValue"
            },
            "SkipDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceFinancialDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerTaxZone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceFreightDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PremiumFreightAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentType": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalFreightAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Volume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Weight": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceSalesPersonDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CommissionableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommissionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommissionPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Approved": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "BillToAddress": {
              "$ref": "#/definitions/Address"
            },
            "BillToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillToAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "BillToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Commissions": {
              "$ref": "#/definitions/Commissions"
            },
            "ContactID": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreditHold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DestinationWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrderDetail"
              }
            },
            "DisableAutomaticDiscountUpdate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DisableAutomaticTaxCalculation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DiscountDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrdersDiscountDetails"
              }
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "FinancialSettings": {
              "$ref": "#/definitions/FinancialSettings"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IsTaxValid": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModified": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "MaxRiskScore": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderRisks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderRisks"
              }
            },
            "OrderTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Payments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrderPayment"
              }
            },
            "PreferredWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "RequestedOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Shipments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrderShipment"
              }
            },
            "ShippingSettings": {
              "$ref": "#/definitions/ShippingSettings"
            },
            "ShipToAddress": {
              "$ref": "#/definitions/Address"
            },
            "ShipToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "ShipToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Totals": {
              "$ref": "#/definitions/Totals"
            },
            "VATExemptTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATTaxableTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExternalOrderOriginal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExternalRefundRef": {
              "$ref": "#/definitions/StringValue"
            },
            "WillCall": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "UsrExternalOrderOriginal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExternalOrderOrigin": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalOrderSource": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCalcMode": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "SalesOrderCreateReceipt": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "ShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "SalesOrderCreateShipment": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "ShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "SalesOrderCreditCardTransactionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AuthNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtProfileId": {
              "$ref": "#/definitions/StringValue"
            },
            "NeedValidation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TranDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TranNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TranType": {
              "$ref": "#/definitions/StringValue"
            },
            "CardType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesOrderCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "SalesOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrderDetailAllocation"
              }
            },
            "AlternateID": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AutoCreateIssue": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AverageCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Commissionable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Completed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountedUnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExtendedPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "InvoiceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDate": {
              "$ref": "#/definitions/StringValue"
            },
            "LineDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LineType": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MarkForPO": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Operation": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OvershipThreshold": {
              "$ref": "#/definitions/DecimalValue"
            },
            "POSource": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchaseWarehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasingDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchasingDetail"
              }
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "QtyOnShipments": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "RequestedOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            },
            "SchedOrderDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShipOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipToLocation": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "UnbilledAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UndershipThreshold": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "AssociatedOrderLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "GiftMessage": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualPrice": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesOrderDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AllocWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Completed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomerOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyOnShipments": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyReceived": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RelatedDocument": {
              "$ref": "#/definitions/StringValue"
            },
            "SchedOrderDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShipOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "SplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesOrderPayment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "AppliedToOrder": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Authorize": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CardAccountNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Capture": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditCardTransactionInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrderCreditCardTransactionDetail"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OrigTransactionNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ProcessingCenterID": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Refund": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaveCard": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferredtoInvoice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ValidateCCRefundOrigTransaction": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "SalesOrderShipment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OrderNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "ShippingNoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "SalesOrdersDiscountDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExternalDiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SequenceID": {
              "$ref": "#/definitions/StringValue"
            },
            "SkipDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesPersonDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CommissionableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommissionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommissionPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesPriceDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Price": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PriceCode": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceType": {
              "$ref": "#/definitions/StringValue"
            },
            "Promotion": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "Tax": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCalculationMode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesPriceWorksheet": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OverwriteOverlappingPrices": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesPrices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPricesWorksheetDetail"
              }
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesPriceWorksheetCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesPriceWorksheet"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "SalesPricesInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "EffectiveAsOf": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceCode": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceManager": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceManagerIsMe": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PriceType": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceWorkgroupIsMine": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SalesPriceDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPriceDetail"
              }
            },
            "TaxCalculationMode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesPricesInquiryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesPricesInquiry"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "SalesPricesWorksheetDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineID": {
              "$ref": "#/definitions/IntValue"
            },
            "PendingPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PriceCode": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SourcePrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Tax": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Salesperson": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DefaultCommission": {
              "$ref": "#/definitions/DecimalValue"
            },
            "IsActive": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalespersonCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Salesperson"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "SendEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "ServiceOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Address": {
              "$ref": "#/definitions/SrvOrdAddress"
            },
            "AppointmentDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "Appointments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SrvOrdAppointments"
              }
            },
            "AppointmentsNeeded": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SrvOrdAttributes"
              }
            },
            "BillableTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BranchLocation": {
              "$ref": "#/definitions/StringValue"
            },
            "Contact": {
              "$ref": "#/definitions/SrvOrdContact"
            },
            "ContractInfo": {
              "$ref": "#/definitions/SrvOrdContractInfo"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DefaultProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultStaff": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SrvOrdDefaultStaff"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SrvOrdDetails"
              }
            },
            "EstimatedDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalReference": {
              "$ref": "#/definitions/StringValue"
            },
            "FinancialDetails": {
              "$ref": "#/definitions/SrvOrdFinancialDetails"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "OtherInformation": {
              "$ref": "#/definitions/SrvOrdOtherInformation"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Prepayments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SrvOrdPrepayments"
              }
            },
            "Priority": {
              "$ref": "#/definitions/StringValue"
            },
            "Problem": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "Severity": {
              "$ref": "#/definitions/StringValue"
            },
            "SLA": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "SLATime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Supervisor": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SrvOrdTaxDetails"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Totals": {
              "$ref": "#/definitions/SrvOrdTotals"
            },
            "WaitingforPurchasedItems": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WorkflowStage": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ServiceOrderCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ServiceOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "SettingsForPR": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ExportScenario": {
              "$ref": "#/definitions/StringValue"
            },
            "PRProcessing": {
              "$ref": "#/definitions/StringValue"
            },
            "Report": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShipToSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ShipToAddress": {
              "$ref": "#/definitions/Address"
            },
            "ShipToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "ShipToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Validated": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ShipVia": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Calendar": {
              "$ref": "#/definitions/StringValue"
            },
            "CarrierID": {
              "$ref": "#/definitions/StringValue"
            },
            "CommonCarrier": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipViaFreightRate"
              }
            },
            "FreightSalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightSalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Packages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingBox"
              }
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShipViaCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ShipVia"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ShipViaFreightRate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Rate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Volume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Weight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ZoneID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Shipment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyViewState": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreateNewShipmentForEveryOrder": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentDetail"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "OverrideFreightPrice": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FreightPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "GroundCollect": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Insurance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "Operation": {
              "$ref": "#/definitions/StringValue"
            },
            "Orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentOrderDetail"
              }
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "PackageCount": {
              "$ref": "#/definitions/IntValue"
            },
            "Packages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentPackage"
              }
            },
            "PackageWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Picked": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippingSettings": {
              "$ref": "#/definitions/ShipToSettings"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZoneID": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "ToWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UseCustomersAccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupID": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "ShipmentCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Shipment"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ShipmentDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentDetailAllocation"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShipmentDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "SplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShipmentOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceType": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderNoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "ShipmentPackage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BoxID": {
              "$ref": "#/definitions/StringValue"
            },
            "CODAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Confirmed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomRefNbr1": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomRefNbr2": {
              "$ref": "#/definitions/StringValue"
            },
            "DeclaredValue": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "TrackingNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Weight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Length": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Width": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Height": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PackageContents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentPackageDetail"
              }
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            }
          }
        }
      ]
    },
    "ShipmentPackageDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "Quantity": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShipmentSplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShippingBox": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActiveByDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BoxID": {
              "$ref": "#/definitions/StringValue"
            },
            "BoxWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CarriersPackage": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Height": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Length": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VolumeUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WeightUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Width": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LinearUOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShippingBoxCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ShippingBox"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ShippingInstructions": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ShippingDestinationType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingLocation": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipTo": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipToAddress": {
              "$ref": "#/definitions/Address"
            },
            "ShipToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "ShipToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShippingSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CancelByDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Canceled": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "GroundCollect": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Insurance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PreferredWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Priority": {
              "$ref": "#/definitions/ShortValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ScheduledShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipSeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "ShopForRates": {
              "$ref": "#/definitions/ShopForRates"
            },
            "UseCustomersAccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FreightPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCostIsuptodate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FreightTaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverrideFreightPrice": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PackageWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PremiumFreight": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ShippingTerm": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingTermDetail"
              }
            },
            "TermID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShippingTermCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ShippingTerm"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ShippingTermDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InvoiceAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineHandling": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "ShippingandHandling": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ShippingZones": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ZoneID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShippingZonesCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ShippingZones"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ShopForRates": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "IsManualPackage": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PackageWeight": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ShopifyStore": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccessToken": {
              "$ref": "#/definitions/StringValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "APIKey": {
              "$ref": "#/definitions/StringValue"
            },
            "APIPassword": {
              "$ref": "#/definitions/StringValue"
            },
            "Connector": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SharedSecret": {
              "$ref": "#/definitions/StringValue"
            },
            "StoreAdminURL": {
              "$ref": "#/definitions/StringValue"
            },
            "StoreName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShopifyStoreCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ShopifyStore"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "ShortValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "SrvOrdAddress": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AddressLine1": {
              "$ref": "#/definitions/StringValue"
            },
            "AddressLine2": {
              "$ref": "#/definitions/StringValue"
            },
            "City": {
              "$ref": "#/definitions/StringValue"
            },
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "PostalCode": {
              "$ref": "#/definitions/StringValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdAppointments": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AppointmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Confirmed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ScheduledEndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ScheduledEndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ScheduledStartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ScheduledStartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdAttributes": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attribute": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdContractInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ContractPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceContract": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdDefaultStaff": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Comment": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "ServiceLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "StaffMemberID": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AppointmentAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AppointmentCount": {
              "$ref": "#/definitions/IntValue"
            },
            "AppointmentDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "AppointmentEstimatedDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "AppointmentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ComponentID": {
              "$ref": "#/definitions/StringValue"
            },
            "ComponentLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CoveredQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EquipmentAction": {
              "$ref": "#/definitions/StringValue"
            },
            "EquipmentActionComment": {
              "$ref": "#/definitions/StringValue"
            },
            "EstimatedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EstimatedDuration": {
              "$ref": "#/definitions/StringValue"
            },
            "EstimatedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExtPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastReference": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "LineStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "LineType": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualPrice": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MarkforPO": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ModelEquipmentLineRef": {
              "$ref": "#/definitions/StringValue"
            },
            "OverageQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverageUnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "POCompleted": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PONbr": {
              "$ref": "#/definitions/StringValue"
            },
            "POStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaidItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ServiceContractItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ServiceOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/IntValue"
            },
            "StaffMemberID": {
              "$ref": "#/definitions/StringValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TargetEquipmentID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "Warranty": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "SrvOrdFinancialDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillingCustomer": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingCycle": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingLocation": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Commissionable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomerTaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "RunBillingFor": {
              "$ref": "#/definitions/StringValue"
            },
            "Salesperson": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCalculationMode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdOtherInformation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BatchNumber": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocumentType": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "IssueReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdPrepayments": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "AppliedtoOrders": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AvailableBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/IntValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceAppointmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdTaxDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "IncludeinVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ServiceOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SrvOrdTotals": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AppointmentTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillableTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EstimatedTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PrepaymentApplied": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PrepaymentReceived": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PrepaymentRemaining": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ServiceOrderBillableUnpaidBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ServiceOrderTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ServiceOrderUnpaidBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATExemptTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATTaxableTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "StartAppointment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "StockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ABCCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "AutoIncrementalValue": {
              "$ref": "#/definitions/StringValue"
            },
            "AverageCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Boxes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BoxStockItem"
              }
            },
            "Categories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryStockItem"
              }
            },
            "COGSAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "COGSSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Content": {
              "$ref": "#/definitions/StringValue"
            },
            "CountryOfOrigin": {
              "$ref": "#/definitions/StringValue"
            },
            "CrossReferences": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryItemCrossReference"
              }
            },
            "CurrentStdCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DefaultIssueLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DefaultReceiptLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultSubitem": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "DeferralAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DeferralSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DimensionVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DimensionWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ImageUrl": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventorySubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "IsAKit": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ItemClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemType": {
              "$ref": "#/definitions/StringValue"
            },
            "LandedCostVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LandedCostVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LastCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModified": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastStdCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LotSerialClass": {
              "$ref": "#/definitions/StringValue"
            },
            "Markup": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinMarkup": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PackagingOption": {
              "$ref": "#/definitions/StringValue"
            },
            "PackSeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PendingStdCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "POAccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "POAccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PostingClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceManager": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductManager": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "ReasonCodeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentParameters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplenishmentParameterStockItem"
              }
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostRevaluationAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostRevaluationSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SubjectToCommission": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TariffCode": {
              "$ref": "#/definitions/StringValue"
            },
            "UOMConversions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryItemUOMConversion"
              }
            },
            "UseOnEntry": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ValuationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StockItemVendorDetail"
              }
            },
            "VolumeUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StockItemWarehouseDetail"
              }
            },
            "WeightUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "CurySpecificMSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurySpecificPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Availability": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomURL": {
              "$ref": "#/definitions/StringValue"
            },
            "ExportToExternal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FileURLs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryFileUrls"
              }
            },
            "MetaDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "MetaKeywords": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "PageTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "SearchKeywords": {
              "$ref": "#/definitions/StringValue"
            },
            "TemplateItemID": {
              "$ref": "#/definitions/StringValue"
            },
            "Visibility": {
              "$ref": "#/definitions/StringValue"
            },
            "NotAvailable": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "StockItemCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/StockItem"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "StockItemVendorDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AddLeadTimeDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EOQ": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastVendorPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LeadTimeDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSize": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxOrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinOrderFrequencyInDays": {
              "$ref": "#/definitions/IntValue"
            },
            "MinOrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PurchaseUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorName": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "StockItemWarehouseDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DailyDemandForecast": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DailyDemandForecastErrorSTDEV": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DefaultIssueLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultReceiptLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventorySubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "IsDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastForecastDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverridePreferredVendor": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideReplenishmentSettings": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideStdCost": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PreferredVendor": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ProductManager": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "QtyOnHand": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReplenishmentSource": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentWarehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "Seasonality": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceLevel": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "StorageDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "QtyAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyAvailableforIssue": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyHardAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateofWarehouseQty": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "QtyOnHand": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "StorageDetailByLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "QtyAvailableinLocation": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyAvailableforIssueinLocation": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyAvailableforShippinginLocation": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateofLocationQty": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "QtyOnHandinLocation": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyAvailableinWarehouse": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyAvailableforIssueinWarehouse": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyAvailableforShippinginWarehouse": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateofWarehouseQty": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "QtyOnHandinWarehouse": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "StorageDetailsByLocationInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "SplitByLocation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StorageDetailsByLocation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageDetailByLocation"
              }
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "StorageDetailsByLocationInquiryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/StorageDetailsByLocationInquiry"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "StorageDetailsInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "StorageDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StorageDetail"
              }
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "StorageDetailsInquiryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/StorageDetailsInquiry"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "StringValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "Subaccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Secured": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SubaccountCD": {
              "$ref": "#/definitions/StringValue"
            },
            "SubaccountID": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "SubaccountCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Subaccount"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "Subcontract": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "SubcontractNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyEffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            },
            "LineTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainageTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SubcontractTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ControlTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorTaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ApplyRetainage": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RetainagePct": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DoNotEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotPrint": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Emailed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Printed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubcontractDetail"
              }
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubcontractTaxDetail"
              }
            },
            "VendorAddressInfo": {
              "$ref": "#/definitions/SubcontractVendorAddressInfo"
            },
            "VendorContactInfo": {
              "$ref": "#/definitions/SubcontractVendorContactInfo"
            }
          }
        }
      ]
    },
    "SubcontractCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Subcontract"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "SubcontractDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AlternateID": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "Canceled": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Closed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Completed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountPct": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountSequence": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "ManualCost": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaidAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PrepaidQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "Task": {
              "$ref": "#/definitions/StringValue"
            },
            "Requested": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RetainageAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainagePct": {
              "$ref": "#/definitions/DecimalValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SubcontractTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "RetainedTax": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainedTaxable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SubcontractVendorAddressInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AddressLine1": {
              "$ref": "#/definitions/StringValue"
            },
            "AddressLine2": {
              "$ref": "#/definitions/StringValue"
            },
            "City": {
              "$ref": "#/definitions/StringValue"
            },
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PostalCode": {
              "$ref": "#/definitions/StringValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SubcontractVendorContactInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Phone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SubmitExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "SubmitExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "SuspendProject": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "Task": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Body": {
              "$ref": "#/definitions/StringValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "CompletedAt": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CompletionPercentage": {
              "$ref": "#/definitions/IntValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Parent": {
              "$ref": "#/definitions/GuidValue"
            },
            "ParentSummary": {
              "$ref": "#/definitions/StringValue"
            },
            "Priority": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedActivities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "RelatedTasks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskRelatedTask"
              }
            },
            "Reminder": {
              "$ref": "#/definitions/ReminderDetail"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivity": {
              "$ref": "#/definitions/TaskTimeActivity"
            },
            "WorkgroupID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedByID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RelatedEntityType": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedEntityNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "RelatedEntityDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaskCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Task"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "TaskRelatedTask": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CompletedAt": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaskTimeActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Tax": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CalculateOn": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DeductibleVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EnterFromTaxBill": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExcludeFromTaxonTaxCalculation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IncludeInVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IncludeInVATTaxableTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NotValidAfter": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxAgency": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxClaimableAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxClaimableSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxPayableAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxPayableSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxSchedule": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxScheduleDetail"
              }
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            },
            "Zones": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxZoneDetail"
              }
            }
          }
        }
      ]
    },
    "TaxAndReportingCA": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ReportingType": {
              "$ref": "#/definitions/StringValue"
            },
            "SupplementalIncome": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxDetailsCA": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EarningCodeTaxDetailCA"
              }
            },
            "WageType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxAndReportingUS": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ReportingType": {
              "$ref": "#/definitions/StringValue"
            },
            "SubjecttoTaxes": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetailsUS": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EarningCodeTaxDetailUS"
              }
            },
            "WageType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxCategory": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxCategoryTaxDetail"
              }
            },
            "ExcludeListedTaxes": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxCategoryID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxCategoryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TaxCategory"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "TaxCategoryTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CalculateOn": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxCodeSetting": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdditionalInformation": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyNotes": {
              "$ref": "#/definitions/StringValue"
            },
            "FormBox": {
              "$ref": "#/definitions/StringValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Tax"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "TaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CustomerTaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "IncludeInVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxReportingSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ReportingGroups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReportingGroup"
              }
            },
            "TaxAgency": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxReportingSettingsCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TaxReportingSettings"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "TaxScheduleDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductibleTaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxTaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinTaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReportingGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "RevisionID": {
              "$ref": "#/definitions/IntValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "TaxSettingDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdditionalInformation": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyNotes": {
              "$ref": "#/definitions/StringValue"
            },
            "FormBox": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Setting": {
              "$ref": "#/definitions/StringValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "UseDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UsedforGovernmentReporting": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UsedforTaxCalculation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxSettingsCA": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CodeType": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetailsCA": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeductionOrBenefitTaxDetailCA"
              }
            }
          }
        }
      ]
    },
    "TaxSettingsUS": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllowSupplementalElection": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CodeType": {
              "$ref": "#/definitions/StringValue"
            },
            "ImpactonTaxableWage": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetailsUS": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeductionOrBenefitTaxDetailUS"
              }
            }
          }
        }
      ]
    },
    "TaxZone": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicableTaxes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxZoneApplicableTaxDetail"
              }
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxZoneID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxZoneApplicableTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxZoneCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TaxZone"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "TaxZoneDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DefaultTaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZoneID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxesDecreasingApplWage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "EmployeeTaxesDecreasingApplWageDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxesDecreasingApplWageDetail"
              }
            },
            "InclusionType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxesDecreasingApplWageDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TemplateItemVendorDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorName": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "TemplateItems": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "SalesUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "CurySpecificMSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurySpecificPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ItemClass": {
              "$ref": "#/definitions/StringValue"
            },
            "Availability": {
              "$ref": "#/definitions/StringValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Categories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryStockItem"
              }
            },
            "Content": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrentStdCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CustomURL": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultIssueLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DimensionWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExportToExternal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FileURLs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryFileUrls"
              }
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "IsStockItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ItemStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModified": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Matrix": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MatrixItems"
              }
            },
            "MetaDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "MSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PageTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "SearchKeywords": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "Visibility": {
              "$ref": "#/definitions/StringValue"
            },
            "WeightUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "MetaKeywords": {
              "$ref": "#/definitions/StringValue"
            },
            "RequireShipment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NotAvailable": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TemplateItemVendorDetail"
              }
            }
          }
        }
      ]
    },
    "TemplateItemsCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TemplateItems"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "TimeActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningType": {
              "$ref": "#/definitions/StringValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "TrackTime": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "TimeAndMaterial": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountToInvoice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BilledAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BilledQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DeferralCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "MaxAvailableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxLimitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverLimitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "QtyToInvoice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Retainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainageAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TimeEntry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApprovalStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "CertifiedJob": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CostRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EarningType": {
              "$ref": "#/definitions/StringValue"
            },
            "Employee": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "Time": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TimeEntryID": {
              "$ref": "#/definitions/GuidValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocal": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TimeEntryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TimeEntry"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "Totals": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DiscountTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineTotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MiscTotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnbilledAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnbilledQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnpaidBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Freight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCostIsuptodate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FreightTaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PackageWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PremiumFreight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverrideFreightAmount": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "TransferOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransferOrderDetail"
              }
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "FromWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ToWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TransferOrderCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TransferOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "TransferOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransferOrderDetailAllocation"
              }
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FromLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "SpecialOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "ToLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "ToCostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ToCostLayerType": {
              "$ref": "#/definitions/StringValue"
            },
            "ToProject": {
              "$ref": "#/definitions/StringValue"
            },
            "ToProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "ToSpecialOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TransferOrderDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SplitLineNumber": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "UncloseAppointmentMenuActions": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Appointment"
        }
      }
    },
    "UncloseOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ServiceOrder"
        }
      }
    },
    "UnionDeductionOrBenefitDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ContributionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ContributionCalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ContributionPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ContributionType": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DeductionAndBenefitCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionCalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "UnionEarningRateDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WageRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "UnionLocal": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocalID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "UnionLocalCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/UnionLocal"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "UnitsOfMeasure": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ConversionFactor": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FromUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MultiplyOrDivide": {
              "$ref": "#/definitions/StringValue"
            },
            "ToUOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "UnitsOfMeasureCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/UnitsOfMeasure"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "UnlockProjectBudget": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "UnlockProjectCommitments": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "UpdateDiscounts": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Discount"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      }
    },
    "UpdateIN": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Shipment"
        }
      }
    },
    "UpdateStandardCostNonStockItem": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/NonStockItem"
        }
      }
    },
    "UpdateStandardCostStockItem": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/StockItem"
        }
      }
    },
    "ValidateBusinessAccountAddresses": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        }
      }
    },
    "ValidateContactAddress": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "ValidateLeadAddress": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        }
      }
    },
    "ValidateProjectBalance": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "Vendor": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountRef": {
              "$ref": "#/definitions/StringValue"
            },
            "APAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "APSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Contacts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerContact"
              }
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "EnableCurrencyOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableRateOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "F1099Box": {
              "$ref": "#/definitions/StringValue"
            },
            "F1099Vendor": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FATCA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "ForeignEntity": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LandedCostVendor": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LeadTimedays": {
              "$ref": "#/definitions/ShortValue"
            },
            "LegalName": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "MainContact": {
              "$ref": "#/definitions/Contact"
            },
            "MaxReceipt": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinReceipt": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentBy": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentInstructions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountPaymentInstructionDetail"
              }
            },
            "PaymentLeadTimedays": {
              "$ref": "#/definitions/ShortValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaySeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrimaryContact": {
              "$ref": "#/definitions/Contact"
            },
            "PrintOrders": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReceiptAction": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceivingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "RemittanceAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RemittanceContact": {
              "$ref": "#/definitions/Contact"
            },
            "RemittanceContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendOrdersbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingContact": {
              "$ref": "#/definitions/Contact"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCalculationMode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRegistrationID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "ThresholdReceipt": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VendorClass": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorIsLaborUnion": {
              "$ref": "#/definitions/BooleanValue"
            },
            "VendorIsTaxAgency": {
              "$ref": "#/definitions/BooleanValue"
            },
            "VendorName": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "VendorClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountClassAttributeDetail"
              }
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "VendorClassCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/VendorClass"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "VendorCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Vendor"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "VendorPriceDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Price": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Promotional": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "VendorPriceWorksheet": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OverwriteOverlappingPrices": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Promotional": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorSalesPrices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorPriceWorksheetDetail"
              }
            }
          }
        }
      ]
    },
    "VendorPriceWorksheetCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/VendorPriceWorksheet"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "VendorPriceWorksheetDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineID": {
              "$ref": "#/definitions/IntValue"
            },
            "PendingPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SourcePrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Tax": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "VendorPricesInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductManager": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorPriceDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorPriceDetail"
              }
            }
          }
        }
      ]
    },
    "VendorPricesInquiryCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/VendorPricesInquiry"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "VisibilitySettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AP": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AR": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CRM": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Expenses": {
              "$ref": "#/definitions/BooleanValue"
            },
            "GL": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IN": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PO": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SO": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TimeEntries": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "VoidCardPayment": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "TranType": {
              "$ref": "#/definitions/StringValue"
            },
            "TranNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtProfileId": {
              "$ref": "#/definitions/StringValue"
            },
            "TranDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NeedValidation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrigTranNbr": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "VoidCheck": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Check"
        }
      }
    },
    "VoidPayment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        }
      }
    },
    "WCCCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WCCCode": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCodeCostCodeSources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WCCCodeCostCodeSource"
              }
            },
            "WCCCodeLaborItemSources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WCCCodeLaborItemSource"
              }
            },
            "WCCCodeMaxInsurableWages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WCCCodeMaxInsurableWage"
              }
            },
            "WCCCodeProjectSources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WCCCodeProjectSource"
              }
            },
            "WCCCodeRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WCCCodeRate"
              }
            }
          }
        }
      ]
    },
    "WCCCodeCostCodeSource": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CostCodeFrom": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCodeTo": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "WorkCodeID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WCCCodeLaborItemSource": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WorkCodeID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WCCCodeMaxInsurableWage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductionandBenefitCode": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "Wage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WCCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WCCCodeMaxInsurableWageDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductionandBenefitCode": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Wage": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "WCCCodeProjectSource": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkCodeID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WCCCodeRate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BenefitCalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "BenefitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionCalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkCodeID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WCCCodeRateDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/GuidValue"
            },
            "BenefitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "DeductionRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WCCCode": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCodeMaxInsurableWages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WCCCodeMaxInsurableWageDetail"
              }
            }
          }
        }
      ]
    },
    "Warehouse": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "COGSExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "COGSExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DropShipLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightChargeAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightChargeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventorySubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LandedCostVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LandedCostVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WarehouseLocation"
              }
            },
            "MiscChargeAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "MiscChargeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "NonStockPickingLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "OverrideInventoryAccountSubaccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "POAccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "POAccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ReasonCodeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceivingLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "RMALocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostRevaluationAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostRevaluationSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "UseItemDefaultLocationForPicking": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WarehouseCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Warehouse"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "WarehouseLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AssemblyAllowed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "PickPriority": {
              "$ref": "#/definitions/ShortValue"
            },
            "ReceiptsAllowed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SalesAllowed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TransfersAllowed": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "WorkCalendar": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CalendarExceptions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkCalendarExceptionDetail"
              }
            },
            "CalendarSettings": {
              "$ref": "#/definitions/CalendarSettings"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeZone": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkCalendarID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WorkCalendarCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/WorkCalendar"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "WorkCalendarExceptionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DayOfWeek": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "StartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "UnpaidBreakTime": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkDay": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "WorkClassCompensationCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCodeFrom": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCodeTo": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WorkClassCompensationCodeCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/WorkClassCompensationCode"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    },
    "WorkLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AddressInfo": {
              "$ref": "#/definitions/Address"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "UseAddressfromBranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkLocationName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WorkLocationCustomAction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/WorkLocation"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "custom": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CustomField"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Account",
      "description": "(GL202500)"
    },
    {
      "name": "AccountDetailsForPeriodInquiry",
      "description": "(GL404001)"
    },
    {
      "name": "AccountGroup",
      "description": "(PM201000)"
    },
    {
      "name": "AccountSummaryInquiry",
      "description": "(GL401000)"
    },
    {
      "name": "Activity",
      "description": "Activity (CR306010)"
    },
    {
      "name": "Appointment",
      "description": "(FS300200)"
    },
    {
      "name": "AttributeDefinition",
      "description": "(CS205000)"
    },
    {
      "name": "BigCommerceStores",
      "description": "(BC201000)"
    },
    {
      "name": "Bill",
      "description": "(AP301000)"
    },
    {
      "name": "Budget",
      "description": "(GL302010)"
    },
    {
      "name": "BusinessAccount",
      "description": "Business Accounts (CR303000)"
    },
    {
      "name": "Carrier",
      "description": "(CS207700)"
    },
    {
      "name": "Case",
      "description": "Cases (CR306000)"
    },
    {
      "name": "CashSale",
      "description": "(AR304000)"
    },
    {
      "name": "ChangeOrder",
      "description": "(PM308000)"
    },
    {
      "name": "ChangeOrderClass",
      "description": "(PM203000)"
    },
    {
      "name": "Check",
      "description": "(AP302000)"
    },
    {
      "name": "CompaniesStructure",
      "description": "(CS401000)"
    },
    {
      "name": "CompanyFinancialPeriod",
      "description": "(GL201100)"
    },
    {
      "name": "Contact",
      "description": "Contacts (CR302000)"
    },
    {
      "name": "ContractUsage",
      "description": "(CT303000)"
    },
    {
      "name": "CostCode",
      "description": "(PM209500)"
    },
    {
      "name": "Currency",
      "description": "(CM202000)"
    },
    {
      "name": "Customer",
      "description": "(AR303000)"
    },
    {
      "name": "CustomerClass",
      "description": "(AR201000)"
    },
    {
      "name": "CustomerLocation",
      "description": "(AR303020)"
    },
    {
      "name": "CustomerPaymentMethod",
      "description": "(AR303010)"
    },
    {
      "name": "CustomerPriceClass",
      "description": "(AR208000)"
    },
    {
      "name": "DeductionBenefitCode",
      "description": "(PR101060)"
    },
    {
      "name": "Discount",
      "description": "(AR209500)"
    },
    {
      "name": "DiscountCode",
      "description": "(AR209000)"
    },
    {
      "name": "EarningTypeCode",
      "description": "(PR102000)"
    },
    {
      "name": "Email",
      "description": "Email Activity (CR306015)"
    },
    {
      "name": "EmailProcessing",
      "description": "Emails Pending Processing (SM507000)"
    },
    {
      "name": "Employee",
      "description": "(EP203000)"
    },
    {
      "name": "EmployeePayrollClass",
      "description": "(PR202000)"
    },
    {
      "name": "EmployeePayrollSettings",
      "description": "(PR203000)"
    },
    {
      "name": "Event",
      "description": "Event (CR306030)"
    },
    {
      "name": "ExpenseClaim",
      "description": "Expense Claim (EP301000)"
    },
    {
      "name": "ExpenseReceipt",
      "description": "Expense Receipt (EP301020)"
    },
    {
      "name": "ExternalCommitment",
      "description": "(PM209000)"
    },
    {
      "name": "FinancialPeriod",
      "description": "(GL201000)"
    },
    {
      "name": "FinancialYear",
      "description": "(GL101000)"
    },
    {
      "name": "FOBPoint",
      "description": "(CS208500)"
    },
    {
      "name": "InventoryAdjustment",
      "description": "Adjustments (IN303000)"
    },
    {
      "name": "InventoryAllocationInquiry",
      "description": "Inventory Allocation Details (IN402000)"
    },
    {
      "name": "InventoryIssue",
      "description": "Issues (IN302000)"
    },
    {
      "name": "InventoryQuantityAvailable",
      "description": "(GI640590)"
    },
    {
      "name": "InventoryReceipt",
      "description": "Receipts (IN301000)"
    },
    {
      "name": "InventorySummaryInquiry",
      "description": "Inventory Summary (IN401000)"
    },
    {
      "name": "Invoice",
      "description": "(AR301000)"
    },
    {
      "name": "ItemClass",
      "description": "(IN201000)"
    },
    {
      "name": "ItemSalesCategory",
      "description": "(IN204060)"
    },
    {
      "name": "ItemWarehouse",
      "description": "Item Warehouse  Details (IN204500)"
    },
    {
      "name": "JournalTransaction",
      "description": "(GL301000)"
    },
    {
      "name": "KitAssembly",
      "description": "Kit Assembly (IN307000)"
    },
    {
      "name": "KitSpecification",
      "description": "Kit Specifications (IN209500)"
    },
    {
      "name": "LaborCostRate",
      "description": "(PM209900)"
    },
    {
      "name": "Lead",
      "description": "Leads (CR301000)"
    },
    {
      "name": "Ledger",
      "description": "(GL201500)"
    },
    {
      "name": "LotSerialClass",
      "description": "(IN207000)"
    },
    {
      "name": "NonStockItem",
      "description": "Non-Stock Items (IN202000)"
    },
    {
      "name": "Opportunity",
      "description": "Opportunities (CR304000)"
    },
    {
      "name": "PayGroup",
      "description": "(PR205000)"
    },
    {
      "name": "Payment",
      "description": "(AR302000)"
    },
    {
      "name": "PaymentMethod",
      "description": "(CA204000)"
    },
    {
      "name": "PayPeriod",
      "description": "(PR201000)"
    },
    {
      "name": "PayrollBatch",
      "description": "(PR301000)"
    },
    {
      "name": "PayrollUnionLocal",
      "description": "(PR209700)"
    },
    {
      "name": "PayrollWCCCode",
      "description": "(PR209800)"
    },
    {
      "name": "PhysicalInventoryCount",
      "description": "Physical Inventory Count (IN305010)"
    },
    {
      "name": "PhysicalInventoryReview",
      "description": "Physical Inventory Review (IN305000)"
    },
    {
      "name": "ProFormaInvoice",
      "description": "(PM307000)"
    },
    {
      "name": "Project",
      "description": "(PM301000)"
    },
    {
      "name": "ProjectBudget",
      "description": "(PM309000)"
    },
    {
      "name": "ProjectTask",
      "description": "(PM302000)"
    },
    {
      "name": "ProjectTemplate",
      "description": "(PM208000)"
    },
    {
      "name": "ProjectTemplateTask",
      "description": "(PM208010)"
    },
    {
      "name": "ProjectTransaction",
      "description": "(PM304000)"
    },
    {
      "name": "PTOBank",
      "description": "(PR204000)"
    },
    {
      "name": "PurchaseOrder",
      "description": "(PO301000)"
    },
    {
      "name": "PurchaseReceipt",
      "description": "(PO302000)"
    },
    {
      "name": "SalesInvoice",
      "description": "Invoices (SO303000)"
    },
    {
      "name": "SalesOrder",
      "description": "Sales Orders (SO301000)"
    },
    {
      "name": "Salesperson",
      "description": "(AR205000)"
    },
    {
      "name": "SalesPricesInquiry",
      "description": "(AR202000)"
    },
    {
      "name": "SalesPriceWorksheet",
      "description": "(AR202010)"
    },
    {
      "name": "ServiceOrder",
      "description": "(FS300100)"
    },
    {
      "name": "Shipment",
      "description": "Shipments (SO302000)"
    },
    {
      "name": "ShippingBox",
      "description": "(CS207600)"
    },
    {
      "name": "ShippingTerm",
      "description": "(CS208000)"
    },
    {
      "name": "ShippingZones",
      "description": "(CS207510)"
    },
    {
      "name": "ShipVia",
      "description": "(CS207500)"
    },
    {
      "name": "ShopifyStore",
      "description": "(BC201010)"
    },
    {
      "name": "StockItem",
      "description": "Stock Items (IN202500)"
    },
    {
      "name": "StorageDetailsByLocationInquiry",
      "description": "(IN408055)"
    },
    {
      "name": "StorageDetailsInquiry",
      "description": "(IN408050)"
    },
    {
      "name": "Subaccount",
      "description": "(GL203000)"
    },
    {
      "name": "Subcontract",
      "description": "(SC301000)"
    },
    {
      "name": "Task",
      "description": "Task (CR306020)"
    },
    {
      "name": "Tax",
      "description": "(TX205000)"
    },
    {
      "name": "TaxCategory",
      "description": "(TX205500)"
    },
    {
      "name": "TaxReportingSettings",
      "description": "(TX205100)"
    },
    {
      "name": "TaxZone",
      "description": "(TX206000)"
    },
    {
      "name": "TemplateItems",
      "description": "(IN203000)"
    },
    {
      "name": "TimeEntry",
      "description": "(PM209100)"
    },
    {
      "name": "TransferOrder",
      "description": "Transfers (IN304000)"
    },
    {
      "name": "UnionLocal",
      "description": "(PM209700)"
    },
    {
      "name": "UnitsOfMeasure",
      "description": "Units of Measure (CS203100)"
    },
    {
      "name": "Vendor",
      "description": "(AP303000)"
    },
    {
      "name": "VendorClass",
      "description": "(AP201000)"
    },
    {
      "name": "VendorPricesInquiry",
      "description": "(AP202000)"
    },
    {
      "name": "VendorPriceWorksheet",
      "description": "(AP202010)"
    },
    {
      "name": "Warehouse",
      "description": "Warehouses (IN204000)"
    },
    {
      "name": "WorkCalendar",
      "description": "(CS209000)"
    },
    {
      "name": "WorkClassCompensationCode",
      "description": "(PM209800)"
    },
    {
      "name": "WorkLocation",
      "description": "(PR101040)"
    }
  ]
}