{
  "swagger": "2.0",
  "info": {
    "version": "3",
    "title": "Default/18.200.001"
  },
  "host": "localhost",
  "basePath": "/beta/entity/Default/18.200.001",
  "schemes": [
    "http"
  ],
  "paths": {
    "/Account/$adHocSchema": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Account_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Account/{ids}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Account_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Account_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Account/{id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Account_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Account_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Account/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Account_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Account_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Account_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountByPeriodInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "AccountByPeriodInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AccountByPeriodInquiry_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AccountByPeriodInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountByPeriodInquiry/{ids}": {
      "get": {
        "tags": [
          "AccountByPeriodInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AccountByPeriodInquiry_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountByPeriodInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountByPeriodInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AccountByPeriodInquiry_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountByPeriodInquiry/{id}": {
      "get": {
        "tags": [
          "AccountByPeriodInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AccountByPeriodInquiry_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountByPeriodInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountByPeriodInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AccountByPeriodInquiry_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountByPeriodInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AccountByPeriodInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AccountByPeriodInquiry_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountByPeriodInquiry": {
      "get": {
        "tags": [
          "AccountByPeriodInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AccountByPeriodInquiry_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountByPeriodInquiry"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountByPeriodInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AccountByPeriodInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountByPeriodInquiry"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AccountByPeriodInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountBySubaccountInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "AccountBySubaccountInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AccountBySubaccountInquiry_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AccountBySubaccountInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountBySubaccountInquiry/{ids}": {
      "get": {
        "tags": [
          "AccountBySubaccountInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AccountBySubaccountInquiry_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountBySubaccountInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountBySubaccountInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AccountBySubaccountInquiry_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountBySubaccountInquiry/{id}": {
      "get": {
        "tags": [
          "AccountBySubaccountInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AccountBySubaccountInquiry_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountBySubaccountInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountBySubaccountInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AccountBySubaccountInquiry_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountBySubaccountInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AccountBySubaccountInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AccountBySubaccountInquiry_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountBySubaccountInquiry": {
      "get": {
        "tags": [
          "AccountBySubaccountInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AccountBySubaccountInquiry_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountBySubaccountInquiry"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountBySubaccountInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AccountBySubaccountInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountBySubaccountInquiry"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AccountBySubaccountInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountDetailsInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "AccountDetailsInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AccountDetailsInquiry_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountDetailsInquiry/{ids}": {
      "get": {
        "tags": [
          "AccountDetailsInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AccountDetailsInquiry_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountDetailsInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AccountDetailsInquiry_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountDetailsInquiry/{id}": {
      "get": {
        "tags": [
          "AccountDetailsInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AccountDetailsInquiry_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountDetailsInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AccountDetailsInquiry_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountDetailsInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AccountDetailsInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AccountDetailsInquiry_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountDetailsInquiry": {
      "get": {
        "tags": [
          "AccountDetailsInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AccountDetailsInquiry_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountDetailsInquiry"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountDetailsInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AccountDetailsInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountDetailsInquiry"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AccountDetailsInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountGroup/$adHocSchema": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AccountGroup_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountGroup/{ids}": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AccountGroup_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AccountGroup_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountGroup/{id}": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AccountGroup_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AccountGroup_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountGroup/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AccountGroup_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountGroup": {
      "get": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AccountGroup_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountGroup"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountGroup"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AccountGroup_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AccountGroup"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountLocation/$adHocSchema": {
      "get": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AccountLocation_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AccountLocation"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountLocation/{ids}": {
      "get": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AccountLocation_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountLocation"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AccountLocation_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountLocation/{id}": {
      "get": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AccountLocation_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountLocation"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AccountLocation_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountLocation/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AccountLocation_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountLocation": {
      "get": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AccountLocation_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountLocation"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountLocation"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AccountLocation_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountLocation"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AccountLocation"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountSummaryInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AccountSummaryInquiry_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountSummaryInquiry/{ids}": {
      "get": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AccountSummaryInquiry_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AccountSummaryInquiry_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountSummaryInquiry/{id}": {
      "get": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AccountSummaryInquiry_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AccountSummaryInquiry_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountSummaryInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AccountSummaryInquiry_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AccountSummaryInquiry": {
      "get": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AccountSummaryInquiry_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountSummaryInquiry"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccountSummaryInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AccountSummaryInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AccountSummaryInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Activity/$adHocSchema": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Activity_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Activity/{ids}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Activity_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Activity"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Activity_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Activity/{id}": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Activity_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Activity"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Activity_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Activity/CompleteActivity": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Activity_InvokeAction_CompleteActivity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteActivity",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Activity/LinkEntityToActivity": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Activity_InvokeAction_LinkEntityToActivity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkEntityToActivity",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Activity/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Activity"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Activity_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Activity": {
      "get": {
        "tags": [
          "Activity"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Activity_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Activity"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Activity"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Activity_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Adjustment/$adHocSchema": {
      "get": {
        "tags": [
          "Adjustment"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Adjustment_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Adjustment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Adjustment/{ids}": {
      "get": {
        "tags": [
          "Adjustment"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Adjustment_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Adjustment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Adjustment"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Adjustment_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Adjustment/{id}": {
      "get": {
        "tags": [
          "Adjustment"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Adjustment_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Adjustment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Adjustment"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Adjustment_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Adjustment/ReleaseAdjustment": {
      "post": {
        "tags": [
          "Adjustment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Adjustment_InvokeAction_ReleaseAdjustment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseAdjustment",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Adjustment/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Adjustment"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Adjustment_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Adjustment": {
      "get": {
        "tags": [
          "Adjustment"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Adjustment_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Adjustment"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Adjustment"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Adjustment_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Adjustment"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Adjustment"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AllocationRule/$adHocSchema": {
      "get": {
        "tags": [
          "AllocationRule"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AllocationRule_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AllocationRule"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AllocationRule/{ids}": {
      "get": {
        "tags": [
          "AllocationRule"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AllocationRule_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AllocationRule"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AllocationRule"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AllocationRule_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AllocationRule/{id}": {
      "get": {
        "tags": [
          "AllocationRule"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AllocationRule_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AllocationRule"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AllocationRule"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AllocationRule_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AllocationRule/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AllocationRule"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AllocationRule_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AllocationRule": {
      "get": {
        "tags": [
          "AllocationRule"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AllocationRule_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllocationRule"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AllocationRule"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AllocationRule_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AllocationRule"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AllocationRule"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AttributeDefinition/$adHocSchema": {
      "get": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "AttributeDefinition_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AttributeDefinition/{ids}": {
      "get": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "AttributeDefinition_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "AttributeDefinition_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AttributeDefinition/{id}": {
      "get": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "AttributeDefinition_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "AttributeDefinition_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AttributeDefinition/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "AttributeDefinition_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/AttributeDefinition": {
      "get": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "AttributeDefinition_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDefinition"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "AttributeDefinition"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "AttributeDefinition_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/AttributeDefinition"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Bill/$adHocSchema": {
      "get": {
        "tags": [
          "Bill"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Bill_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Bill/{ids}": {
      "get": {
        "tags": [
          "Bill"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Bill_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bill"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Bill_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Bill/{id}": {
      "get": {
        "tags": [
          "Bill"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Bill_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bill"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Bill_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Bill/ReleaseBill": {
      "post": {
        "tags": [
          "Bill"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Bill_InvokeAction_ReleaseBill",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseBill",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Bill/ReverseBill": {
      "post": {
        "tags": [
          "Bill"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Bill_InvokeAction_ReverseBill",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReverseBill",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Bill/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Bill"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Bill_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Bill": {
      "get": {
        "tags": [
          "Bill"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Bill_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bill"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bill"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Bill_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Bill"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/$adHocSchema": {
      "get": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "BusinessAccount_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/{ids}": {
      "get": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "BusinessAccount_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "BusinessAccount_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/{id}": {
      "get": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "BusinessAccount_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "BusinessAccount_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/ConvertBusinessAccountToCustomer": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_ConvertBusinessAccountToCustomer",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertBusinessAccountToCustomer",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/ConvertBusinessAccountToVendor": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_ConvertBusinessAccountToVendor",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertBusinessAccountToVendor",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/MarkBusinessAccountAsValidated": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_MarkBusinessAccountAsValidated",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MarkBusinessAccountAsValidated",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/ValidateBusinessAccountAddresses": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_ValidateBusinessAccountAddresses",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateBusinessAccountAddresses",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/ChangeBusinessAccountID": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_ChangeBusinessAccountID",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeBusinessAccountID",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/CheckForBusinessAccountDuplicates": {
      "post": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "BusinessAccount_InvokeAction_CheckForBusinessAccountDuplicates",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckForBusinessAccountDuplicates",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "BusinessAccount_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/BusinessAccount": {
      "get": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "BusinessAccount_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccount"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "BusinessAccount"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "BusinessAccount_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/BusinessAccount"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Carrier/$adHocSchema": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Carrier_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Carrier/{ids}": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Carrier_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Carrier"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Carrier_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Carrier/{id}": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Carrier_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Carrier"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Carrier_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Carrier/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Carrier"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Carrier_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Carrier": {
      "get": {
        "tags": [
          "Carrier"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Carrier_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Carrier"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Carrier"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Carrier_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Carrier"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Case/$adHocSchema": {
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Case_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Case/{ids}": {
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Case_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Case"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Case_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Case/{id}": {
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Case_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Case"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Case_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Case/ReleaseCase": {
      "post": {
        "tags": [
          "Case"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Case_InvokeAction_ReleaseCase",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseCase",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Case/TakeCase": {
      "post": {
        "tags": [
          "Case"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Case_InvokeAction_TakeCase",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TakeCase",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Case/AssignCase": {
      "post": {
        "tags": [
          "Case"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Case_InvokeAction_AssignCase",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssignCase",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Case/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Case"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Case_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Case": {
      "get": {
        "tags": [
          "Case"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Case_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Case"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Case"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Case_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Case"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Case"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CashSale/$adHocSchema": {
      "get": {
        "tags": [
          "CashSale"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CashSale_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CashSale/{ids}": {
      "get": {
        "tags": [
          "CashSale"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CashSale_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CashSale"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CashSale_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CashSale/{id}": {
      "get": {
        "tags": [
          "CashSale"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CashSale_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CashSale"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CashSale_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CashSale/ReleaseCashSale": {
      "post": {
        "tags": [
          "CashSale"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CashSale_InvokeAction_ReleaseCashSale",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseCashSale",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CashSale/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CashSale"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CashSale_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CashSale": {
      "get": {
        "tags": [
          "CashSale"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CashSale_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CashSale"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "CashSale"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CashSale_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CashSale"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder/$adHocSchema": {
      "get": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ChangeOrder_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder/{ids}": {
      "get": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ChangeOrder_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ChangeOrder_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder/{id}": {
      "get": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ChangeOrder_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ChangeOrder_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder/ReleaseChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_ReleaseChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseChangeOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder/ApproveChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_ApproveChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveChangeOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder/RejectChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_RejectChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectChangeOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder/EmailChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_EmailChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailChangeOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder/ReverseChangeOrder": {
      "post": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ChangeOrder_InvokeAction_ReverseChangeOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReverseChangeOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ChangeOrder_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrder": {
      "get": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ChangeOrder_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrder"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ChangeOrder"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ChangeOrder_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrder"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrderClass/$adHocSchema": {
      "get": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ChangeOrderClass_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrderClass/{ids}": {
      "get": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ChangeOrderClass_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ChangeOrderClass_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrderClass/{id}": {
      "get": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ChangeOrderClass_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ChangeOrderClass_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrderClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ChangeOrderClass_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ChangeOrderClass": {
      "get": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ChangeOrderClass_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrderClass"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ChangeOrderClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ChangeOrderClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ChangeOrderClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Check/$adHocSchema": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Check_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Check/{ids}": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Check_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Check"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Check_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Check/{id}": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Check_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Check"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Check_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Check/ReleaseCheck": {
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Check_InvokeAction_ReleaseCheck",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseCheck",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Check/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Check"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Check_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Check": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Check_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Check"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Check"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Check_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Check"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Check"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CommonTask/$adHocSchema": {
      "get": {
        "tags": [
          "CommonTask"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CommonTask_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CommonTask"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CommonTask/{ids}": {
      "get": {
        "tags": [
          "CommonTask"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CommonTask_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CommonTask"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CommonTask"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CommonTask_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CommonTask/{id}": {
      "get": {
        "tags": [
          "CommonTask"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CommonTask_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CommonTask"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CommonTask"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CommonTask_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CommonTask/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CommonTask"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CommonTask_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CommonTask": {
      "get": {
        "tags": [
          "CommonTask"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CommonTask_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommonTask"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "CommonTask"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CommonTask_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommonTask"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CommonTask"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CompanyFinancialPeriod/$adHocSchema": {
      "get": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CompanyFinancialPeriod_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CompanyFinancialPeriod/{ids}": {
      "get": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CompanyFinancialPeriod_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CompanyFinancialPeriod_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CompanyFinancialPeriod/{id}": {
      "get": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CompanyFinancialPeriod_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CompanyFinancialPeriod_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CompanyFinancialPeriod/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CompanyFinancialPeriod_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CompanyFinancialPeriod": {
      "get": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CompanyFinancialPeriod_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyFinancialPeriod"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "CompanyFinancialPeriod"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CompanyFinancialPeriod_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CompanyFinancialPeriod"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/$adHocSchema": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Contact_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/{ids}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Contact_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Contact_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/{id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Contact_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Contact_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/CheckForContactDuplicates": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_CheckForContactDuplicates",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckForContactDuplicates",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/ConvertContactToBusinessAccount": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_ConvertContactToBusinessAccount",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertContactToBusinessAccount",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/CopyFromCompany": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_CopyFromCompany",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyFromCompany",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/MarkContactAsValidated": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_MarkContactAsValidated",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MarkContactAsValidated",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/ValidateContactAddress": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_ValidateContactAddress",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateContactAddress",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/CloseContactAsDuplicate": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Contact_InvokeAction_CloseContactAsDuplicate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseContactAsDuplicate",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Contact"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Contact_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Contact": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Contact_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Contact_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ContractUsage/$adHocSchema": {
      "get": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ContractUsage_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ContractUsage/{ids}": {
      "get": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ContractUsage_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ContractUsage_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ContractUsage/{id}": {
      "get": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ContractUsage_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ContractUsage_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ContractUsage/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ContractUsage_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ContractUsage": {
      "get": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ContractUsage_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractUsage"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ContractUsage"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ContractUsage_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ContractUsage"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CostCode/$adHocSchema": {
      "get": {
        "tags": [
          "CostCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CostCode_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CostCode/{ids}": {
      "get": {
        "tags": [
          "CostCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CostCode_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CostCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CostCode_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CostCode/{id}": {
      "get": {
        "tags": [
          "CostCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CostCode_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CostCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CostCode_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CostCode/ChangeCostCodeID": {
      "post": {
        "tags": [
          "CostCode"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "CostCode_InvokeAction_ChangeCostCodeID",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeCostCodeID",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CostCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CostCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CostCode_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CostCode": {
      "get": {
        "tags": [
          "CostCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CostCode_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CostCode"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "CostCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CostCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CostCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Currency/$adHocSchema": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Currency_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Currency/{ids}": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Currency_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Currency"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Currency_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Currency/{id}": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Currency_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Currency"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Currency_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Currency/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Currency"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Currency_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Currency": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Currency_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Currency"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Currency"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Currency_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Currency"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Customer/$adHocSchema": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Customer_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Customer/{ids}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Customer_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Customer_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Customer/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Customer_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Customer_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Customer/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Customer_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Customer_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Customer_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerClass/$adHocSchema": {
      "get": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CustomerClass_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerClass/{ids}": {
      "get": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CustomerClass_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CustomerClass_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerClass/{id}": {
      "get": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CustomerClass_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CustomerClass_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CustomerClass_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerClass": {
      "get": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CustomerClass_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerClass"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CustomerClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CustomerClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerLocation/$adHocSchema": {
      "get": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CustomerLocation_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerLocation/{ids}": {
      "get": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CustomerLocation_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CustomerLocation_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerLocation/{id}": {
      "get": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CustomerLocation_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CustomerLocation_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerLocation/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CustomerLocation_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerLocation": {
      "get": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CustomerLocation_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerLocation"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerLocation"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CustomerLocation_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CustomerLocation"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPaymentMethod/$adHocSchema": {
      "get": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CustomerPaymentMethod_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPaymentMethod/{ids}": {
      "get": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CustomerPaymentMethod_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CustomerPaymentMethod_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPaymentMethod/{id}": {
      "get": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CustomerPaymentMethod_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CustomerPaymentMethod_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPaymentMethod/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CustomerPaymentMethod_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPaymentMethod": {
      "get": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CustomerPaymentMethod_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerPaymentMethod"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerPaymentMethod"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CustomerPaymentMethod_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentMethod"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPriceClass/$adHocSchema": {
      "get": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "CustomerPriceClass_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPriceClass/{ids}": {
      "get": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "CustomerPriceClass_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "CustomerPriceClass_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPriceClass/{id}": {
      "get": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "CustomerPriceClass_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "CustomerPriceClass_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPriceClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "CustomerPriceClass_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/CustomerPriceClass": {
      "get": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "CustomerPriceClass_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerPriceClass"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomerPriceClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "CustomerPriceClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/CustomerPriceClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Discount/$adHocSchema": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Discount_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Discount/{ids}": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Discount_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Discount"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Discount_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Discount/{id}": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Discount_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Discount"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Discount_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Discount/UpdateDiscounts": {
      "post": {
        "tags": [
          "Discount"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Discount_InvokeAction_UpdateDiscounts",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDiscounts",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Discount/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Discount"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Discount_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Discount": {
      "get": {
        "tags": [
          "Discount"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Discount_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Discount"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Discount"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Discount_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Discount"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/DiscountCode/$adHocSchema": {
      "get": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "DiscountCode_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/DiscountCode/{ids}": {
      "get": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "DiscountCode_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "DiscountCode_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/DiscountCode/{id}": {
      "get": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "DiscountCode_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "DiscountCode_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/DiscountCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "DiscountCode_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/DiscountCode": {
      "get": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "DiscountCode_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCode"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "DiscountCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "DiscountCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/DiscountCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/$adHocSchema": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Email_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/{ids}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Email_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Email_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/{id}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Email_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Email_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/SendEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_SendEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/CreateContactFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateContactFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContactFromEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/CreateEventFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateEventFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEventFromEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/CreateLeadFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateLeadFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLeadFromEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/CreateOpportunityFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateOpportunityFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpportunityFromEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/CreateExpenseReceiptFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateExpenseReceiptFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateExpenseReceiptFromEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/CreateCaseFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateCaseFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCaseFromEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/CreateTaskFromEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CreateTaskFromEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTaskFromEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/RestoreDeletedEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_RestoreDeletedEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestoreDeletedEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/RestoreArchivedEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_RestoreArchivedEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestoreArchivedEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/ProcessEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_ProcessEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/DownloadEmlFileEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_DownloadEmlFileEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DownloadEmlFileEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/CancelSendingEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_CancelSendingEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelSendingEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/ArchiveEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_ArchiveEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArchiveEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/LinkEntityToEmail": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Email_InvokeAction_LinkEntityToEmail",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkEntityToEmail",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Email"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Email_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Email": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Email_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Email"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Email"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Email_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Email"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/EmailProcessing/$adHocSchema": {
      "get": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "EmailProcessing_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/EmailProcessing/{ids}": {
      "get": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "EmailProcessing_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "EmailProcessing_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/EmailProcessing/{id}": {
      "get": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "EmailProcessing_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "EmailProcessing_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/EmailProcessing/ProcessEmailProcessing": {
      "post": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "EmailProcessing_InvokeAction_ProcessEmailProcessing",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessEmailProcessing",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/EmailProcessing/ProcessAllEmailProcessing": {
      "post": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "EmailProcessing_InvokeAction_ProcessAllEmailProcessing",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessAllEmailProcessing",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/EmailProcessing/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "EmailProcessing_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/EmailProcessing": {
      "get": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "EmailProcessing_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmailProcessing"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "EmailProcessing"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "EmailProcessing_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/EmailProcessing"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Employee/$adHocSchema": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Employee_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Employee/{ids}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Employee_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Employee_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Employee/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Employee_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Employee_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Employee/ChangeEmployeeID": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Employee_InvokeAction_ChangeEmployeeID",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeEmployeeID",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Employee/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Employee_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Employee": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Employee_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Employee"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Employee"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Employee_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/$adHocSchema": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Event_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/{ids}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Event_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Event_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Event_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Event_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/AcceptInvitationEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_AcceptInvitationEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AcceptInvitationEvent",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/CancelActivityEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_CancelActivityEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelActivityEvent",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/CompleteEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_CompleteEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteEvent",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/CompleteAndFollowUpEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_CompleteAndFollowUpEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteAndFollowUpEvent",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/ExportCardEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_ExportCardEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExportCardEvent",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/RejectInvitationEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_RejectInvitationEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectInvitationEvent",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/InviteAllEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_InviteAllEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteAllEvent",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/InviteEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_InviteEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteEvent",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/LinkEntityToEvent": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Event_InvokeAction_LinkEntityToEvent",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkEntityToEvent",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Event_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Event": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Event_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Event_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim/$adHocSchema": {
      "get": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ExpenseClaim_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim/{ids}": {
      "get": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ExpenseClaim_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ExpenseClaim_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim/{id}": {
      "get": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ExpenseClaim_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ExpenseClaim_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim/ApproveExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_ApproveExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveExpenseClaim",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim/RejectExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_RejectExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectExpenseClaim",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim/SubmitExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_SubmitExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitExpenseClaim",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim/ReleaseExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_ReleaseExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseExpenseClaim",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim/PutOnHoldExpenseClaim": {
      "post": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseClaim_InvokeAction_PutOnHoldExpenseClaim",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutOnHoldExpenseClaim",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ExpenseClaim_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseClaim": {
      "get": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ExpenseClaim_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseClaim"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExpenseClaim"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ExpenseClaim_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ExpenseClaim"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/$adHocSchema": {
      "get": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ExpenseReceipt_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/{ids}": {
      "get": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ExpenseReceipt_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ExpenseReceipt_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/{id}": {
      "get": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ExpenseReceipt_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ExpenseReceipt_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/SubmitExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_SubmitExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitExpenseReceipt",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/ApproveExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_ApproveExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveExpenseReceipt",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/RejectExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_RejectExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectExpenseReceipt",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/PutOnHoldExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_PutOnHoldExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PutOnHoldExpenseReceipt",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/ClaimExpenseReceipt": {
      "post": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ExpenseReceipt_InvokeAction_ClaimExpenseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClaimExpenseReceipt",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ExpenseReceipt_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExpenseReceipt": {
      "get": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ExpenseReceipt_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseReceipt"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExpenseReceipt"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ExpenseReceipt_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ExpenseReceipt"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExternalCommitment/$adHocSchema": {
      "get": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ExternalCommitment_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExternalCommitment/{ids}": {
      "get": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ExternalCommitment_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ExternalCommitment_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExternalCommitment/{id}": {
      "get": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ExternalCommitment_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ExternalCommitment_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExternalCommitment/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ExternalCommitment_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ExternalCommitment": {
      "get": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ExternalCommitment_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExternalCommitment"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ExternalCommitment"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ExternalCommitment_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ExternalCommitment"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialPeriod/$adHocSchema": {
      "get": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "FinancialPeriod_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialPeriod/{ids}": {
      "get": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "FinancialPeriod_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "FinancialPeriod_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialPeriod/{id}": {
      "get": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "FinancialPeriod_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "FinancialPeriod_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialPeriod/GeneratePeriods": {
      "post": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "FinancialPeriod_InvokeAction_GeneratePeriods",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GeneratePeriods",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialPeriod/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "FinancialPeriod_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialPeriod": {
      "get": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "FinancialPeriod_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialPeriod"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "FinancialPeriod"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "FinancialPeriod_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/FinancialPeriod"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialYear/$adHocSchema": {
      "get": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "FinancialYear_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialYear/{ids}": {
      "get": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "FinancialYear_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "FinancialYear_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialYear/{id}": {
      "get": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "FinancialYear_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "FinancialYear_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialYear/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "FinancialYear_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FinancialYear": {
      "get": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "FinancialYear_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialYear"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "FinancialYear"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "FinancialYear_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/FinancialYear"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FOBPoint/$adHocSchema": {
      "get": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "FOBPoint_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FOBPoint/{ids}": {
      "get": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "FOBPoint_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "FOBPoint_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FOBPoint/{id}": {
      "get": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "FOBPoint_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "FOBPoint_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FOBPoint/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "FOBPoint_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/FOBPoint": {
      "get": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "FOBPoint_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FOBPoint"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "FOBPoint"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "FOBPoint_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/FOBPoint"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InterBranchAccountMapping/$adHocSchema": {
      "get": {
        "tags": [
          "InterBranchAccountMapping"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InterBranchAccountMapping_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InterBranchAccountMapping"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InterBranchAccountMapping/{ids}": {
      "get": {
        "tags": [
          "InterBranchAccountMapping"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InterBranchAccountMapping_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InterBranchAccountMapping"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InterBranchAccountMapping"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InterBranchAccountMapping_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InterBranchAccountMapping/{id}": {
      "get": {
        "tags": [
          "InterBranchAccountMapping"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InterBranchAccountMapping_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InterBranchAccountMapping"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InterBranchAccountMapping"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InterBranchAccountMapping_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InterBranchAccountMapping/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InterBranchAccountMapping"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InterBranchAccountMapping_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InterBranchAccountMapping": {
      "get": {
        "tags": [
          "InterBranchAccountMapping"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InterBranchAccountMapping_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InterBranchAccountMapping"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "InterBranchAccountMapping"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InterBranchAccountMapping_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InterBranchAccountMapping"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InterBranchAccountMapping"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryAllocationInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InventoryAllocationInquiry_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryAllocationInquiry/{ids}": {
      "get": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InventoryAllocationInquiry_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InventoryAllocationInquiry_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryAllocationInquiry/{id}": {
      "get": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InventoryAllocationInquiry_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InventoryAllocationInquiry_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryAllocationInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InventoryAllocationInquiry_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryAllocationInquiry": {
      "get": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InventoryAllocationInquiry_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryAllocationInquiry"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "InventoryAllocationInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InventoryAllocationInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InventoryAllocationInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryReceipt/$adHocSchema": {
      "get": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InventoryReceipt_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryReceipt/{ids}": {
      "get": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InventoryReceipt_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InventoryReceipt_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryReceipt/{id}": {
      "get": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InventoryReceipt_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InventoryReceipt_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryReceipt/ReleaseInventoryReceipt": {
      "post": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "InventoryReceipt_InvokeAction_ReleaseInventoryReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseInventoryReceipt",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryReceipt/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InventoryReceipt_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventoryReceipt": {
      "get": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InventoryReceipt_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryReceipt"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "InventoryReceipt"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InventoryReceipt_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InventoryReceipt"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventorySummaryInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "InventorySummaryInquiry_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventorySummaryInquiry/{ids}": {
      "get": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "InventorySummaryInquiry_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "InventorySummaryInquiry_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventorySummaryInquiry/{id}": {
      "get": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "InventorySummaryInquiry_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "InventorySummaryInquiry_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventorySummaryInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "InventorySummaryInquiry_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/InventorySummaryInquiry": {
      "get": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "InventorySummaryInquiry_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventorySummaryInquiry"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "InventorySummaryInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "InventorySummaryInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/InventorySummaryInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Invoice/$adHocSchema": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Invoice_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Invoice/{ids}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Invoice_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invoice"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Invoice_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Invoice/{id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Invoice_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invoice"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Invoice_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Invoice/ReleaseInvoice": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Invoice_InvokeAction_ReleaseInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Invoice/ReverseInvoice": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Invoice_InvokeAction_ReverseInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReverseInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Invoice/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Invoice"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Invoice_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Invoice": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Invoice_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invoice"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Invoice"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Invoice_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemClass/$adHocSchema": {
      "get": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ItemClass_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemClass/{ids}": {
      "get": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ItemClass_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ItemClass_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemClass/{id}": {
      "get": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ItemClass_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ItemClass_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ItemClass_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemClass": {
      "get": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ItemClass_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemClass"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ItemClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ItemClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ItemClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemSalesCategory/$adHocSchema": {
      "get": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ItemSalesCategory_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemSalesCategory/{ids}": {
      "get": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ItemSalesCategory_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ItemSalesCategory_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemSalesCategory/{id}": {
      "get": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ItemSalesCategory_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ItemSalesCategory_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemSalesCategory/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ItemSalesCategory_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemSalesCategory": {
      "get": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ItemSalesCategory_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemSalesCategory"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ItemSalesCategory"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ItemSalesCategory_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ItemSalesCategory"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemWarehouse/$adHocSchema": {
      "get": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ItemWarehouse_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemWarehouse/{ids}": {
      "get": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ItemWarehouse_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ItemWarehouse_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemWarehouse/{id}": {
      "get": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ItemWarehouse_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ItemWarehouse_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemWarehouse/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ItemWarehouse_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ItemWarehouse": {
      "get": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ItemWarehouse_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemWarehouse"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ItemWarehouse"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ItemWarehouse_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ItemWarehouse"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalTransaction/$adHocSchema": {
      "get": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "JournalTransaction_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalTransaction/{ids}": {
      "get": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "JournalTransaction_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "JournalTransaction_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalTransaction/{id}": {
      "get": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "JournalTransaction_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "JournalTransaction_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalTransaction/ReleaseJournalTransaction": {
      "post": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "JournalTransaction_InvokeAction_ReleaseJournalTransaction",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseJournalTransaction",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalTransaction/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "JournalTransaction_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalTransaction": {
      "get": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "JournalTransaction_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JournalTransaction"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "JournalTransaction"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "JournalTransaction_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/JournalTransaction"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalVoucher/$adHocSchema": {
      "get": {
        "tags": [
          "JournalVoucher"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "JournalVoucher_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/JournalVoucher"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalVoucher/{ids}": {
      "get": {
        "tags": [
          "JournalVoucher"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "JournalVoucher_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/JournalVoucher"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JournalVoucher"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "JournalVoucher_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalVoucher/{id}": {
      "get": {
        "tags": [
          "JournalVoucher"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "JournalVoucher_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/JournalVoucher"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JournalVoucher"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "JournalVoucher_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalVoucher/ReleaseJournalVoucher": {
      "post": {
        "tags": [
          "JournalVoucher"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "JournalVoucher_InvokeAction_ReleaseJournalVoucher",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseJournalVoucher",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalVoucher/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "JournalVoucher"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "JournalVoucher_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/JournalVoucher": {
      "get": {
        "tags": [
          "JournalVoucher"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "JournalVoucher_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JournalVoucher"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "JournalVoucher"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "JournalVoucher_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JournalVoucher"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/JournalVoucher"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitAssembly/$adHocSchema": {
      "get": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "KitAssembly_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitAssembly/{ids}": {
      "get": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "KitAssembly_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "KitAssembly_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitAssembly/{id}": {
      "get": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "KitAssembly_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "KitAssembly_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitAssembly/ReleaseKitAssembly": {
      "post": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "KitAssembly_InvokeAction_ReleaseKitAssembly",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseKitAssembly",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitAssembly/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "KitAssembly_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitAssembly": {
      "get": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "KitAssembly_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssembly"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "KitAssembly"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "KitAssembly_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/KitAssembly"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitSpecification/$adHocSchema": {
      "get": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "KitSpecification_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitSpecification/{ids}": {
      "get": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "KitSpecification_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "KitSpecification_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitSpecification/{id}": {
      "get": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "KitSpecification_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "KitSpecification_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitSpecification/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "KitSpecification_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/KitSpecification": {
      "get": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "KitSpecification_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitSpecification"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "KitSpecification"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "KitSpecification_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/KitSpecification"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LaborCostRate/$adHocSchema": {
      "get": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "LaborCostRate_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LaborCostRate/{ids}": {
      "get": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "LaborCostRate_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "LaborCostRate_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LaborCostRate/{id}": {
      "get": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "LaborCostRate_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "LaborCostRate_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LaborCostRate/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "LaborCostRate_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LaborCostRate": {
      "get": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "LaborCostRate_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LaborCostRate"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "LaborCostRate"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "LaborCostRate_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/LaborCostRate"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/$adHocSchema": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Lead_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/{ids}": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Lead_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lead"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Lead_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/{id}": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Lead_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Lead"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Lead_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/CheckLeadForDuplicates": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_CheckLeadForDuplicates",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckLeadForDuplicates",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/CloseLeadAsDuplicate": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_CloseLeadAsDuplicate",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloseLeadAsDuplicate",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/ConvertLeadToBAccount": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_ConvertLeadToBAccount",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertLeadToBAccount",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/ConvertLeadToContact": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_ConvertLeadToContact",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertLeadToContact",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/ConvertLeadToOpportunity": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_ConvertLeadToOpportunity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConvertLeadToOpportunity",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/ValidateLeadAddress": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_ValidateLeadAddress",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateLeadAddress",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/MarkLeadAsValidated": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Lead_InvokeAction_MarkLeadAsValidated",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MarkLeadAsValidated",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Lead"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Lead_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Lead": {
      "get": {
        "tags": [
          "Lead"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Lead_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Lead"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Lead"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Lead_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Lead"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LotSerialClass/$adHocSchema": {
      "get": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "LotSerialClass_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LotSerialClass/{ids}": {
      "get": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "LotSerialClass_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "LotSerialClass_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LotSerialClass/{id}": {
      "get": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "LotSerialClass_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "LotSerialClass_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LotSerialClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "LotSerialClass_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/LotSerialClass": {
      "get": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "LotSerialClass_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LotSerialClass"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "LotSerialClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "LotSerialClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/LotSerialClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ManageFinancialPeriods/$adHocSchema": {
      "get": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ManageFinancialPeriods_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ManageFinancialPeriods"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ManageFinancialPeriods/{ids}": {
      "get": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ManageFinancialPeriods_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ManageFinancialPeriods"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ManageFinancialPeriods_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ManageFinancialPeriods/{id}": {
      "get": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ManageFinancialPeriods_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ManageFinancialPeriods"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ManageFinancialPeriods_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ManageFinancialPeriods/ProcessManageFinancialPeriods": {
      "post": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ManageFinancialPeriods_InvokeAction_ProcessManageFinancialPeriods",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessManageFinancialPeriods",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ManageFinancialPeriods/ProcessAllManageFinancialPeriods": {
      "post": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ManageFinancialPeriods_InvokeAction_ProcessAllManageFinancialPeriods",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessAllManageFinancialPeriods",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ManageFinancialPeriods/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ManageFinancialPeriods_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ManageFinancialPeriods": {
      "get": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ManageFinancialPeriods_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ManageFinancialPeriods"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ManageFinancialPeriods"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ManageFinancialPeriods_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManageFinancialPeriods"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ManageFinancialPeriods"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/NonStockItem/$adHocSchema": {
      "get": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "NonStockItem_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/NonStockItem/{ids}": {
      "get": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "NonStockItem_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "NonStockItem_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/NonStockItem/{id}": {
      "get": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "NonStockItem_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "NonStockItem_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/NonStockItem/UpdateStandardCostNonStockItem": {
      "post": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "NonStockItem_InvokeAction_UpdateStandardCostNonStockItem",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStandardCostNonStockItem",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/NonStockItem/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "NonStockItem_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/NonStockItem": {
      "get": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "NonStockItem_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonStockItem"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "NonStockItem"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "NonStockItem_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/NonStockItem"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Opportunity/$adHocSchema": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Opportunity_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Opportunity/{ids}": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Opportunity_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Opportunity_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Opportunity/{id}": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Opportunity_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Opportunity_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Opportunity/CreateAccountFromOpportunity": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Opportunity_InvokeAction_CreateAccountFromOpportunity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAccountFromOpportunity",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Opportunity/CreateContactFromOpportunity": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Opportunity_InvokeAction_CreateContactFromOpportunity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContactFromOpportunity",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Opportunity/CreateOpportunityInvoice": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Opportunity_InvokeAction_CreateOpportunityInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpportunityInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Opportunity/CreateOpportunitySalesOrder": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Opportunity_InvokeAction_CreateOpportunitySalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOpportunitySalesOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Opportunity/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Opportunity_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Opportunity": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Opportunity_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Opportunity"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Opportunity_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Opportunity"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment/$adHocSchema": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Payment_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment/{ids}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Payment_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payment"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Payment_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment/{id}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Payment_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payment"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Payment_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment/CaptureCreditCardPayment": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_CaptureCreditCardPayment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CaptureCreditCardPayment",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment/ReleasePayment": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_ReleasePayment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleasePayment",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment/VoidPayment": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_VoidPayment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoidPayment",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment/PaymentLoadDocuments": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_PaymentLoadDocuments",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentLoadDocuments",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment/PaymentLoadOrders": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Payment_InvokeAction_PaymentLoadOrders",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentLoadOrders",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Payment_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Payment": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Payment_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payment"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Payment_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PaymentMethod/$adHocSchema": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PaymentMethod_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PaymentMethod/{ids}": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PaymentMethod_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PaymentMethod_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PaymentMethod/{id}": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PaymentMethod_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PaymentMethod_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PaymentMethod/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PaymentMethod_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PaymentMethod": {
      "get": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PaymentMethod_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PaymentMethod"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PaymentMethod_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PaymentMethod"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryCount/$adHocSchema": {
      "get": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PhysicalInventoryCount_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryCount/{ids}": {
      "get": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PhysicalInventoryCount_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PhysicalInventoryCount_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryCount/{id}": {
      "get": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PhysicalInventoryCount_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PhysicalInventoryCount_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryCount/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PhysicalInventoryCount_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryCount": {
      "get": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PhysicalInventoryCount_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInventoryCount"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PhysicalInventoryCount"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PhysicalInventoryCount_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryCount"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/$adHocSchema": {
      "get": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PhysicalInventoryReview_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/{ids}": {
      "get": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PhysicalInventoryReview_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PhysicalInventoryReview_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/{id}": {
      "get": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PhysicalInventoryReview_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PhysicalInventoryReview_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/CancelPhysicalInventory": {
      "post": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PhysicalInventoryReview_InvokeAction_CancelPhysicalInventory",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelPhysicalInventory",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/CompletePhysicalInventory": {
      "post": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PhysicalInventoryReview_InvokeAction_CompletePhysicalInventory",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompletePhysicalInventory",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/FinishCountingPhysicalInventory": {
      "post": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PhysicalInventoryReview_InvokeAction_FinishCountingPhysicalInventory",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FinishCountingPhysicalInventory",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PhysicalInventoryReview_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PhysicalInventoryReview": {
      "get": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PhysicalInventoryReview_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInventoryReview"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PhysicalInventoryReview"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PhysicalInventoryReview_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PhysicalInventoryReview"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/$adHocSchema": {
      "get": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProFormaInvoice_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/{ids}": {
      "get": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProFormaInvoice_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProFormaInvoice_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/{id}": {
      "get": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProFormaInvoice_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProFormaInvoice_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/ReleaseProFormaInvoice": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_ReleaseProFormaInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseProFormaInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/ApproveProFormaInvoice": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_ApproveProFormaInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveProFormaInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/RejectProFormaInvoice": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_RejectProFormaInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectProFormaInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/EmailProFormaInvoice": {
      "post": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProFormaInvoice_InvokeAction_EmailProFormaInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailProFormaInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProFormaInvoice/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProFormaInvoice_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProFormaInvoice": {
      "get": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProFormaInvoice_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProFormaInvoice"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProFormaInvoice"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProFormaInvoice_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProFormaInvoice"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/$adHocSchema": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Project_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/{ids}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Project_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Project_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Project_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Project_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/RunProjectAllocation": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_RunProjectAllocation",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunProjectAllocation",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/ValidateProjectBalance": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_ValidateProjectBalance",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValidateProjectBalance",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/RunProjectBilling": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_RunProjectBilling",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RunProjectBilling",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/ApproveProject": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_ApproveProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveProject",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/RejectProject": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_RejectProject",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectProject",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/LockProjectBudget": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_LockProjectBudget",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LockProjectBudget",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/UnlockProjectBudget": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_UnlockProjectBudget",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockProjectBudget",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/LockProjectCommitments": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_LockProjectCommitments",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LockProjectCommitments",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/UnlockProjectCommitments": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_UnlockProjectCommitments",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnlockProjectCommitments",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/ChangeProjectID": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Project_InvokeAction_ChangeProjectID",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeProjectID",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Project_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Project": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Project_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Project_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBilling/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectBilling_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectBilling"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBilling/{ids}": {
      "get": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectBilling_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectBilling"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectBilling_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBilling/{id}": {
      "get": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectBilling_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectBilling"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectBilling_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBilling/ProjectBillingProcess": {
      "post": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectBilling_InvokeAction_ProjectBillingProcess",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectBillingProcess",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBilling/ProjectBillingProcessAll": {
      "post": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectBilling_InvokeAction_ProjectBillingProcessAll",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectBillingProcessAll",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBilling/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectBilling_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBilling": {
      "get": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectBilling_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectBilling"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectBilling"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectBilling_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectBilling"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectBilling"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBillingRules/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectBillingRules"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectBillingRules_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectBillingRules"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBillingRules/{ids}": {
      "get": {
        "tags": [
          "ProjectBillingRules"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectBillingRules_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectBillingRules"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectBillingRules"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectBillingRules_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBillingRules/{id}": {
      "get": {
        "tags": [
          "ProjectBillingRules"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectBillingRules_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectBillingRules"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectBillingRules"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectBillingRules_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBillingRules/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectBillingRules"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectBillingRules_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBillingRules": {
      "get": {
        "tags": [
          "ProjectBillingRules"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectBillingRules_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectBillingRules"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectBillingRules"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectBillingRules_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectBillingRules"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectBillingRules"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBudget/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectBudget_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBudget/{ids}": {
      "get": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectBudget_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectBudget_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBudget/{id}": {
      "get": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectBudget_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectBudget_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBudget/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectBudget_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectBudget": {
      "get": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectBudget_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectBudget"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectBudget"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectBudget_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectBudget"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTask/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectTask_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTask/{ids}": {
      "get": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectTask_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectTask_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTask/{id}": {
      "get": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectTask_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectTask_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTask/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectTask_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTask": {
      "get": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectTask_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTask"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectTask"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectTask_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectTask"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplate/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectTemplate_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplate/{ids}": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectTemplate_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectTemplate_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplate/{id}": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectTemplate_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectTemplate_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplate/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectTemplate_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplate": {
      "get": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectTemplate_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTemplate"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectTemplate"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectTemplate_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplate"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplateTask/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectTemplateTask_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplateTask/{ids}": {
      "get": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectTemplateTask_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectTemplateTask_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplateTask/{id}": {
      "get": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectTemplateTask_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectTemplateTask_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplateTask/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectTemplateTask_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTemplateTask": {
      "get": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectTemplateTask_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTemplateTask"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectTemplateTask"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectTemplateTask_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectTemplateTask"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTransaction/$adHocSchema": {
      "get": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ProjectTransaction_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTransaction/{ids}": {
      "get": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ProjectTransaction_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ProjectTransaction_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTransaction/{id}": {
      "get": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ProjectTransaction_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ProjectTransaction_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTransaction/ReleaseTransactions": {
      "post": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "ProjectTransaction_InvokeAction_ReleaseTransactions",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseTransactions",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTransaction/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ProjectTransaction_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ProjectTransaction": {
      "get": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ProjectTransaction_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTransaction"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectTransaction"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ProjectTransaction_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ProjectTransaction"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseOrder/$adHocSchema": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PurchaseOrder_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseOrder/{ids}": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PurchaseOrder_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PurchaseOrder_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseOrder/{id}": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PurchaseOrder_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PurchaseOrder_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseOrder/EnterPOReceipt": {
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PurchaseOrder_InvokeAction_EnterPOReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnterPOReceipt",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseOrder/EnterAPBill": {
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PurchaseOrder_InvokeAction_EnterAPBill",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnterAPBill",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseOrder/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PurchaseOrder_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseOrder": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PurchaseOrder_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseOrder"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PurchaseOrder_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/$adHocSchema": {
      "get": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "PurchaseReceipt_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/{ids}": {
      "get": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "PurchaseReceipt_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "PurchaseReceipt_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/{id}": {
      "get": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "PurchaseReceipt_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "PurchaseReceipt_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/ReleasePurchaseReceipt": {
      "post": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PurchaseReceipt_InvokeAction_ReleasePurchaseReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleasePurchaseReceipt",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/CreateAPBill": {
      "post": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "PurchaseReceipt_InvokeAction_CreateAPBill",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAPBill",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseReceipt/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "PurchaseReceipt_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/PurchaseReceipt": {
      "get": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "PurchaseReceipt_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseReceipt"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PurchaseReceipt"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "PurchaseReceipt_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/PurchaseReceipt"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ReportingSettings/$adHocSchema": {
      "get": {
        "tags": [
          "ReportingSettings"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ReportingSettings_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ReportingSettings"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ReportingSettings/{ids}": {
      "get": {
        "tags": [
          "ReportingSettings"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ReportingSettings_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ReportingSettings"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ReportingSettings"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ReportingSettings_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ReportingSettings/{id}": {
      "get": {
        "tags": [
          "ReportingSettings"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ReportingSettings_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ReportingSettings"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ReportingSettings"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ReportingSettings_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ReportingSettings/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ReportingSettings"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ReportingSettings_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ReportingSettings": {
      "get": {
        "tags": [
          "ReportingSettings"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ReportingSettings_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReportingSettings"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ReportingSettings"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ReportingSettings_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportingSettings"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ReportingSettings"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesInvoice/$adHocSchema": {
      "get": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "SalesInvoice_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesInvoice/{ids}": {
      "get": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "SalesInvoice_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "SalesInvoice_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesInvoice/{id}": {
      "get": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "SalesInvoice_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "SalesInvoice_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesInvoice/ReleaseSalesInvoice": {
      "post": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesInvoice_InvokeAction_ReleaseSalesInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseSalesInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesInvoice/SalesInvoiceAddOrder": {
      "post": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesInvoice_InvokeAction_SalesInvoiceAddOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesInvoiceAddOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesInvoice/SalesInvoiceAutoApply": {
      "post": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesInvoice_InvokeAction_SalesInvoiceAutoApply",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesInvoiceAutoApply",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesInvoice/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "SalesInvoice_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesInvoice": {
      "get": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "SalesInvoice_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoice"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SalesInvoice"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "SalesInvoice_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/SalesInvoice"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/$adHocSchema": {
      "get": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "SalesOrder_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/{ids}": {
      "get": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "SalesOrder_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "SalesOrder_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/{id}": {
      "get": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "SalesOrder_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "SalesOrder_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/CancelSalesOrder": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_CancelSalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelSalesOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/ReopenSalesOrder": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_ReopenSalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReopenSalesOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/PrepareSalesInvoice": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_PrepareSalesInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrepareSalesInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/OpenSalesOrder": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_OpenSalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenSalesOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/ReleaseFromCreditHoldSalesOrder": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_ReleaseFromCreditHoldSalesOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseFromCreditHoldSalesOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/SalesOrderAddInvoice": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_SalesOrderAddInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrderAddInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/SalesOrderAddStockItem": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_SalesOrderAddStockItem",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrderAddStockItem",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/SalesOrderCreatePurchaseOrder": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_SalesOrderCreatePurchaseOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrderCreatePurchaseOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/SalesOrderCreateReceipt": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_SalesOrderCreateReceipt",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrderCreateReceipt",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/SalesOrderCreateShipment": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_SalesOrderCreateShipment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrderCreateShipment",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/AutoRecalculateDiscounts": {
      "post": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesOrder_InvokeAction_AutoRecalculateDiscounts",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutoRecalculateDiscounts",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "SalesOrder_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesOrder": {
      "get": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "SalesOrder_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrder"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SalesOrder"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "SalesOrder_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/SalesOrder"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Salesperson/$adHocSchema": {
      "get": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Salesperson_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Salesperson/{ids}": {
      "get": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Salesperson_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Salesperson_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Salesperson/{id}": {
      "get": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Salesperson_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Salesperson_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Salesperson/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Salesperson_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Salesperson": {
      "get": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Salesperson_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Salesperson"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Salesperson"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Salesperson_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Salesperson"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPricesInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "SalesPricesInquiry_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPricesInquiry/{ids}": {
      "get": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "SalesPricesInquiry_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "SalesPricesInquiry_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPricesInquiry/{id}": {
      "get": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "SalesPricesInquiry_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "SalesPricesInquiry_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPricesInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "SalesPricesInquiry_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPricesInquiry": {
      "get": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "SalesPricesInquiry_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPricesInquiry"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SalesPricesInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "SalesPricesInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/SalesPricesInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/$adHocSchema": {
      "get": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "SalesPriceWorksheet_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/{ids}": {
      "get": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "SalesPriceWorksheet_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "SalesPriceWorksheet_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/{id}": {
      "get": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "SalesPriceWorksheet_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "SalesPriceWorksheet_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/ReleaseSalesPriceWorksheet": {
      "post": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "SalesPriceWorksheet_InvokeAction_ReleaseSalesPriceWorksheet",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseSalesPriceWorksheet",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "SalesPriceWorksheet_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/SalesPriceWorksheet": {
      "get": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "SalesPriceWorksheet_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPriceWorksheet"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "SalesPriceWorksheet"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "SalesPriceWorksheet_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/SalesPriceWorksheet"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Shipment/$adHocSchema": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Shipment_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Shipment/{ids}": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Shipment_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Shipment"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Shipment_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Shipment/{id}": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Shipment_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Shipment"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Shipment_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Shipment/ConfirmShipment": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Shipment_InvokeAction_ConfirmShipment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfirmShipment",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Shipment/CorrectShipment": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Shipment_InvokeAction_CorrectShipment",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CorrectShipment",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Shipment/UpdateIN": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Shipment_InvokeAction_UpdateIN",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateIN",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Shipment/PrepareInvoice": {
      "post": {
        "tags": [
          "Shipment"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Shipment_InvokeAction_PrepareInvoice",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrepareInvoice",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Shipment/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Shipment"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Shipment_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Shipment": {
      "get": {
        "tags": [
          "Shipment"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Shipment_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Shipment"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Shipment"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Shipment_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingBox/$adHocSchema": {
      "get": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ShippingBox_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingBox/{ids}": {
      "get": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ShippingBox_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ShippingBox_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingBox/{id}": {
      "get": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ShippingBox_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ShippingBox_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingBox/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ShippingBox_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingBox": {
      "get": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ShippingBox_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingBox"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShippingBox"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ShippingBox_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ShippingBox"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingTerm/$adHocSchema": {
      "get": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ShippingTerm_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingTerm/{ids}": {
      "get": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ShippingTerm_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ShippingTerm_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingTerm/{id}": {
      "get": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ShippingTerm_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ShippingTerm_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingTerm/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ShippingTerm_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingTerm": {
      "get": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ShippingTerm_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingTerm"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShippingTerm"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ShippingTerm_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ShippingTerm"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingZones/$adHocSchema": {
      "get": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ShippingZones_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingZones/{ids}": {
      "get": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ShippingZones_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ShippingZones_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingZones/{id}": {
      "get": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ShippingZones_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ShippingZones_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingZones/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ShippingZones_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShippingZones": {
      "get": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ShippingZones_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingZones"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShippingZones"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ShippingZones_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ShippingZones"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShipVia/$adHocSchema": {
      "get": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "ShipVia_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShipVia/{ids}": {
      "get": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "ShipVia_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "ShipVia_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShipVia/{id}": {
      "get": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "ShipVia_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "ShipVia_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShipVia/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "ShipVia_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/ShipVia": {
      "get": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "ShipVia_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipVia"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShipVia"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "ShipVia_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/ShipVia"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StatementCycle/$adHocSchema": {
      "get": {
        "tags": [
          "StatementCycle"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "StatementCycle_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/StatementCycle"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StatementCycle/{ids}": {
      "get": {
        "tags": [
          "StatementCycle"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "StatementCycle_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StatementCycle"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StatementCycle"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "StatementCycle_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StatementCycle/{id}": {
      "get": {
        "tags": [
          "StatementCycle"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "StatementCycle_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StatementCycle"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StatementCycle"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "StatementCycle_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StatementCycle/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "StatementCycle"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "StatementCycle_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StatementCycle": {
      "get": {
        "tags": [
          "StatementCycle"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "StatementCycle_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StatementCycle"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "StatementCycle"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "StatementCycle_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StatementCycle"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/StatementCycle"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StockItem/$adHocSchema": {
      "get": {
        "tags": [
          "StockItem"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "StockItem_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StockItem/{ids}": {
      "get": {
        "tags": [
          "StockItem"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "StockItem_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StockItem"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "StockItem_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StockItem/{id}": {
      "get": {
        "tags": [
          "StockItem"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "StockItem_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StockItem"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "StockItem_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StockItem/UpdateStandardCostStockItem": {
      "post": {
        "tags": [
          "StockItem"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "StockItem_InvokeAction_UpdateStandardCostStockItem",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStandardCostStockItem",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StockItem/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "StockItem"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "StockItem_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/StockItem": {
      "get": {
        "tags": [
          "StockItem"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "StockItem_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StockItem"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "StockItem"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "StockItem_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/StockItem"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Subaccount/$adHocSchema": {
      "get": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Subaccount_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Subaccount/{ids}": {
      "get": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Subaccount_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Subaccount_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Subaccount/{id}": {
      "get": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Subaccount_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Subaccount_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Subaccount/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Subaccount_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Subaccount": {
      "get": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Subaccount_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subaccount"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subaccount"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Subaccount_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Subaccount"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Task/$adHocSchema": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Task_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Task/{ids}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Task_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Task_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Task/{id}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Task_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Task"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Task_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Task/CompleteTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Task_InvokeAction_CompleteTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteTask",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Task/CompleteAndFollowUpTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Task_InvokeAction_CompleteAndFollowUpTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteAndFollowUpTask",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Task/CancelActivityTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Task_InvokeAction_CancelActivityTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelActivityTask",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Task/LinkEntityToTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "Task_InvokeAction_LinkEntityToTask",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkEntityToTask",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Task/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Task_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Task": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Task_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Task"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Task_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Tax/$adHocSchema": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Tax_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Tax/{ids}": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Tax_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tax"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Tax_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Tax/{id}": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Tax_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tax"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Tax_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Tax/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Tax"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Tax_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Tax": {
      "get": {
        "tags": [
          "Tax"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Tax_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tax"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tax"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Tax_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Tax"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxCategory/$adHocSchema": {
      "get": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TaxCategory_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxCategory/{ids}": {
      "get": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TaxCategory_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TaxCategory_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxCategory/{id}": {
      "get": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TaxCategory_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TaxCategory_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxCategory/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TaxCategory_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxCategory": {
      "get": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TaxCategory_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxCategory"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaxCategory"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TaxCategory_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TaxCategory"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxZone/$adHocSchema": {
      "get": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TaxZone_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxZone/{ids}": {
      "get": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TaxZone_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TaxZone_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxZone/{id}": {
      "get": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TaxZone_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TaxZone_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxZone/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TaxZone_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TaxZone": {
      "get": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TaxZone_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxZone"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaxZone"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TaxZone_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TaxZone"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TimeEntry/$adHocSchema": {
      "get": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TimeEntry_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TimeEntry/{ids}": {
      "get": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TimeEntry_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TimeEntry_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TimeEntry/{id}": {
      "get": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TimeEntry_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TimeEntry_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TimeEntry/CompleteTimeEntry": {
      "post": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TimeEntry_InvokeAction_CompleteTimeEntry",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompleteTimeEntry",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TimeEntry/OpenTimeEntry": {
      "post": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TimeEntry_InvokeAction_OpenTimeEntry",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenTimeEntry",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TimeEntry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TimeEntry_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TimeEntry": {
      "get": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TimeEntry_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeEntry"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TimeEntry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TimeEntry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TimeEntry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TransferOrder/$adHocSchema": {
      "get": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TransferOrder_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TransferOrder/{ids}": {
      "get": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TransferOrder_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TransferOrder_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TransferOrder/{id}": {
      "get": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TransferOrder_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TransferOrder_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TransferOrder/ReleaseTransferOrder": {
      "post": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TransferOrder_InvokeAction_ReleaseTransferOrder",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseTransferOrder",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TransferOrder/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TransferOrder_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TransferOrder": {
      "get": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TransferOrder_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransferOrder"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TransferOrder"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TransferOrder_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TransferOrder"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TrialBalance/$adHocSchema": {
      "get": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "TrialBalance_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/TrialBalance"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TrialBalance/{ids}": {
      "get": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "TrialBalance_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TrialBalance"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "TrialBalance_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TrialBalance/{id}": {
      "get": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "TrialBalance_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/TrialBalance"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "TrialBalance_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TrialBalance/TrialBalanceProcess": {
      "post": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TrialBalance_InvokeAction_TrialBalanceProcess",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrialBalanceProcess",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TrialBalance/TrialBalanceProcessAll": {
      "post": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TrialBalance_InvokeAction_TrialBalanceProcessAll",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrialBalanceProcessAll",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TrialBalance/ReleaseTrialBalance": {
      "post": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "TrialBalance_InvokeAction_ReleaseTrialBalance",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseTrialBalance",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TrialBalance/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "TrialBalance_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/TrialBalance": {
      "get": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "TrialBalance_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TrialBalance"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "TrialBalance"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "TrialBalance_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrialBalance"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/TrialBalance"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnionLocal/$adHocSchema": {
      "get": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "UnionLocal_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnionLocal/{ids}": {
      "get": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "UnionLocal_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "UnionLocal_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnionLocal/{id}": {
      "get": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "UnionLocal_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "UnionLocal_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnionLocal/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "UnionLocal_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnionLocal": {
      "get": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "UnionLocal_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnionLocal"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "UnionLocal"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "UnionLocal_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/UnionLocal"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnitsOfMeasure/$adHocSchema": {
      "get": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "UnitsOfMeasure_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnitsOfMeasure/{ids}": {
      "get": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "UnitsOfMeasure_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "UnitsOfMeasure_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnitsOfMeasure/{id}": {
      "get": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "UnitsOfMeasure_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "UnitsOfMeasure_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnitsOfMeasure/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "UnitsOfMeasure_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/UnitsOfMeasure": {
      "get": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "UnitsOfMeasure_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitsOfMeasure"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "UnitsOfMeasure"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "UnitsOfMeasure_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/UnitsOfMeasure"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Vendor/$adHocSchema": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Vendor_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Vendor/{ids}": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Vendor_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vendor"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Vendor_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Vendor/{id}": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Vendor_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vendor"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Vendor_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Vendor/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Vendor"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Vendor_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Vendor": {
      "get": {
        "tags": [
          "Vendor"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Vendor_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vendor"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vendor"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Vendor_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Vendor"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorClass/$adHocSchema": {
      "get": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "VendorClass_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorClass/{ids}": {
      "get": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "VendorClass_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "VendorClass_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorClass/{id}": {
      "get": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "VendorClass_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "VendorClass_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorClass/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "VendorClass_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorClass": {
      "get": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "VendorClass_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorClass"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VendorClass"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "VendorClass_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/VendorClass"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPricesInquiry/$adHocSchema": {
      "get": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "VendorPricesInquiry_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPricesInquiry/{ids}": {
      "get": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "VendorPricesInquiry_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "VendorPricesInquiry_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPricesInquiry/{id}": {
      "get": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "VendorPricesInquiry_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "VendorPricesInquiry_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPricesInquiry/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "VendorPricesInquiry_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPricesInquiry": {
      "get": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "VendorPricesInquiry_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorPricesInquiry"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VendorPricesInquiry"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "VendorPricesInquiry_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/VendorPricesInquiry"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/$adHocSchema": {
      "get": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "VendorPriceWorksheet_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/{ids}": {
      "get": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "VendorPriceWorksheet_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "VendorPriceWorksheet_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/{id}": {
      "get": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "VendorPriceWorksheet_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "VendorPriceWorksheet_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/ReleaseVendorPriceWorksheet": {
      "post": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Performs an action in the system.",
        "operationId": "VendorPriceWorksheet_InvokeAction_ReleaseVendorPriceWorksheet",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "invocation",
            "in": "body",
            "description": "The record to which the action should be applied and the parameters of the action.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseVendorPriceWorksheet",
              "type": "object"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The operation is in progress.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to check the status of the operation through the GET HTTP method.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "204": {
            "description": "The operation that was initiated by the action is completed."
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "VendorPriceWorksheet_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VendorPriceWorksheet": {
      "get": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "VendorPriceWorksheet_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorPriceWorksheet"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VendorPriceWorksheet"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "VendorPriceWorksheet_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/VendorPriceWorksheet"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VoucherEntryCode/$adHocSchema": {
      "get": {
        "tags": [
          "VoucherEntryCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "VoucherEntryCode_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/VoucherEntryCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VoucherEntryCode/{ids}": {
      "get": {
        "tags": [
          "VoucherEntryCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "VoucherEntryCode_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VoucherEntryCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VoucherEntryCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "VoucherEntryCode_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VoucherEntryCode/{id}": {
      "get": {
        "tags": [
          "VoucherEntryCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "VoucherEntryCode_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/VoucherEntryCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VoucherEntryCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "VoucherEntryCode_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VoucherEntryCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "VoucherEntryCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "VoucherEntryCode_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/VoucherEntryCode": {
      "get": {
        "tags": [
          "VoucherEntryCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "VoucherEntryCode_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VoucherEntryCode"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "VoucherEntryCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "VoucherEntryCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoucherEntryCode"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/VoucherEntryCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Warehouse/$adHocSchema": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "Warehouse_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Warehouse/{ids}": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "Warehouse_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "Warehouse_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Warehouse/{id}": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "Warehouse_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "Warehouse_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Warehouse/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "Warehouse_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/Warehouse": {
      "get": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "Warehouse_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Warehouse"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "Warehouse_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/Warehouse"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/WorkClassCompensationCode/$adHocSchema": {
      "get": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Retrieves the schema of custom fields of the entity from the system.",
        "operationId": "WorkClassCompensationCode_GetAdHocSchema",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "The field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/WorkClassCompensationCode/{ids}": {
      "get": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Retrieves a record by the values of its key fields from the system.",
        "operationId": "WorkClassCompensationCode_GetByKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Deletes the record by the values of its key fields.",
        "operationId": "WorkClassCompensationCode_DeleteByKeys",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/WorkClassCompensationCode/{id}": {
      "get": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Retrieves a record by the value of the session entity ID from the system.",
        "operationId": "WorkClassCompensationCode_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested record.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Deletes the record by its session identifier.",
        "operationId": "WorkClassCompensationCode_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The session ID of the record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "The record is successfully deleted."
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/WorkClassCompensationCode/{ids}/files/{filename}": {
      "put": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Attaches a file to a record.",
        "operationId": "WorkClassCompensationCode_PutFile",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The values of the key fields of the record.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "pipes"
          },
          {
            "name": "filename",
            "in": "path",
            "description": "The name of the file that you are going to attach with the extension.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "The file is successfully attached.",
            "headers": {
              "Location": {
                "description": "A URL that can be used to retrieve the file from the system.",
                "type": "string",
                "format": "uri"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    },
    "/WorkClassCompensationCode": {
      "get": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Retrieves records that satisfy the specified conditions from the system.",
        "operationId": "WorkClassCompensationCode_GetList",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of records to be skipped from the list of returned records.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of records to be returned from the system.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of records that satisfy the specified conditions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkClassCompensationCode"
              }
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkClassCompensationCode"
        ],
        "summary": "Creates a record or updates an existing record.",
        "operationId": "WorkClassCompensationCode_PutEntity",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "entity",
            "in": "body",
            "description": "The record to be passed to the system.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The fields of the entity to be returned from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The conditions that determine which records should be selected from the system.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "The linked and detail entities that should be expanded.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$custom",
            "in": "query",
            "description": "The fields that are not defined in the contract of the endpoint to be returned from the system.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The created or updated record.",
            "schema": {
              "$ref": "#/definitions/WorkClassCompensationCode"
            }
          },
          "400": {
            "description": "The data specified in the request is invalid.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "401": {
            "description": "The user is not logged in to the system.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/HttpError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "LongValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "StringValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "CustomStringField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomDecimalField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "double",
              "type": "number"
            }
          }
        }
      ]
    },
    "CustomDateTimeField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "date-time",
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomBooleanField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "CustomIntField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      ]
    },
    "CustomLongField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      ]
    },
    "CustomShortField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      ]
    },
    "CustomByteField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      ]
    },
    "CustomDoubleField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "double",
              "type": "number"
            }
          }
        }
      ]
    },
    "CustomGuidField": {
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "format": "uuid",
              "type": "string"
            }
          }
        }
      ]
    },
    "CustomField": {
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "DecimalValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "DateTimeValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "BooleanValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean"
        }
      }
    },
    "IntValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ShortValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ByteValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "DoubleValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "GuidValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "FileLink": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "href": {
          "format": "uri",
          "type": "string"
        }
      }
    },
    "Entity": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string"
        },
        "rowNumber": {
          "format": "int64",
          "type": "integer"
        },
        "note": {
          "type": "string"
        },
        "custom": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/CustomField"
            }
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileLink"
          }
        }
      }
    },
    "HttpError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageDetail": {
          "type": "string"
        },
        "exceptionMessage": {
          "type": "string"
        },
        "exceptionType": {
          "type": "string"
        },
        "stackTrace": {
          "type": "string"
        },
        "modelState": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": {
        "type": "object"
      }
    },
    "Account": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountCD": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountID": {
              "$ref": "#/definitions/IntValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ChartOfAccountsOrder": {
              "$ref": "#/definitions/IntValue"
            },
            "ConsolidationAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PostOption": {
              "$ref": "#/definitions/StringValue"
            },
            "RequireUnits": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RevaluationRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "Secured": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UseDefaultSubaccount": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "AccountByPeriodInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "FinancialYear": {
              "$ref": "#/definitions/StringValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountByPeriodRow"
              }
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountByPeriodRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BeginingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyBeginingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyCreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyDebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyEndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyPtdTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LedgerID": {
              "$ref": "#/definitions/IntValue"
            },
            "Period": {
              "$ref": "#/definitions/StringValue"
            },
            "PtdTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "AccountBySubaccountInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "Period": {
              "$ref": "#/definitions/StringValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountBySubaccountRow"
              }
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountBySubaccountRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BeginingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyBeginingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyCreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyDebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyEndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyPtdTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LedgerID": {
              "$ref": "#/definitions/IntValue"
            },
            "PtdTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountDetailsInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "BeginingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "EndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FromDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FromPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "IncludeReclassified": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IncludeUnposted": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IncludeUnreleased": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "PeriodEndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PeriodStartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountDetailsRow"
              }
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ToDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ToPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Turnover": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "AccountDetailsRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "BeginingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyBeginingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyCreditAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyDebitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyEndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "DebitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "IncludedinReclassHistory": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "Period": {
              "$ref": "#/definitions/StringValue"
            },
            "ReclassBatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Selected": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "VendorOrCustomer": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroupID": {
              "$ref": "#/definitions/StringValue"
            },
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDetail"
              }
            },
            "DefaultAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Expense": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/ShortValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Address": {
              "$ref": "#/definitions/Address"
            },
            "AddressSameAsMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ARAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ARSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "Calendar": {
              "$ref": "#/definitions/StringValue"
            },
            "Cases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CaseDetail"
              }
            },
            "Contact": {
              "$ref": "#/definitions/AccountLocationContact"
            },
            "DefaultProject": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "EntityUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "FedExGroundCollect": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Insurance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LeadTimeInDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "Opportunities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpportunityDetail"
              }
            },
            "OrderPriority": {
              "$ref": "#/definitions/ShortValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SameAsDefaultLocation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExemptionNumber": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRegistrationID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountLocationContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "FaxType": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "SameAsMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WebSite": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountSummaryInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "Period": {
              "$ref": "#/definitions/StringValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountSummaryRow"
              }
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AccountSummaryRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "BeginingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ConsolidationAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyBeginingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyCreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyDebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyEndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyPtdTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndingBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastActivity": {
              "$ref": "#/definitions/StringValue"
            },
            "LedgerID": {
              "$ref": "#/definitions/IntValue"
            },
            "PtdTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Activity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Body": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedEntityDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "Task": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivity": {
              "$ref": "#/definitions/TimeActivity"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ActivityDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ClassIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedAt": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreatorID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatorUsername": {
              "$ref": "#/definitions/StringValue"
            },
            "IsCompleteIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "PriorityIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReminderIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Address": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AddressLine1": {
              "$ref": "#/definitions/StringValue"
            },
            "AddressLine2": {
              "$ref": "#/definitions/StringValue"
            },
            "City": {
              "$ref": "#/definitions/StringValue"
            },
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "PostalCode": {
              "$ref": "#/definitions/StringValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "Validated": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "Adjustment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdjustmentDetail"
              }
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "AdjustmentDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AllocationRule": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllocationRuleID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Approval": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApprovedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "ApprovedByName": {
              "$ref": "#/definitions/StringValue"
            },
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "ApproverName": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AttributeDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AttributeID": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlType": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EntryMask": {
              "$ref": "#/definitions/StringValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RegExp": {
              "$ref": "#/definitions/StringValue"
            },
            "Values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDefinitionValue"
              }
            }
          }
        }
      ]
    },
    "AttributeDefinitionValue": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Disabled": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/ShortValue"
            },
            "ValueID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AttributeDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attribute": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "AttributeValue": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AttributeID": {
              "$ref": "#/definitions/StringValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Bill": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Applications": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BillApplicationDetail"
              }
            },
            "ApprovedForPayment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BillDetail"
              }
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BillTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BillApplicationDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BillDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "NonBillable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "POLine": {
              "$ref": "#/definitions/IntValue"
            },
            "POOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "POOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "POReceiptLine": {
              "$ref": "#/definitions/IntValue"
            },
            "POReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BillTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "BillToSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillToAddress": {
              "$ref": "#/definitions/Address"
            },
            "BillToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "BillToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomerLocation": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BoxStockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BoxID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "MaxQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountActivityDetail"
              }
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDetail"
              }
            },
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "Campaigns": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CampaignDetail"
              }
            },
            "Cases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountCaseDetail"
              }
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "Contacts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountContact"
              }
            },
            "Contracts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountContract"
              }
            },
            "DefaultLocationSettings": {
              "$ref": "#/definitions/BusinessAccountDefaultLocationSetting"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "Duplicates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DuplicateDetail"
              }
            },
            "LastIncomingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastOutgoingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountLocation"
              }
            },
            "MainAddress": {
              "$ref": "#/definitions/Address"
            },
            "MainAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MainContact": {
              "$ref": "#/definitions/BusinessAccountMainContact"
            },
            "MarketingLists": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountMarketingListDetail"
              }
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "Opportunities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountOpportunityDetail"
              }
            },
            "Orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountOrder"
              }
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "ShippingAddress": {
              "$ref": "#/definitions/Address"
            },
            "ShippingAddressSameAsMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingContact": {
              "$ref": "#/definitions/BusinessAccountShippingContact"
            },
            "SourceCampaign": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountActivityDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ClassIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedAt": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreatorID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatorUsername": {
              "$ref": "#/definitions/StringValue"
            },
            "IsCompleteIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "PriorityIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "RelatedEntityDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReminderIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountCaseDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClosingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Contract": {
              "$ref": "#/definitions/StringValue"
            },
            "DateReported": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Estimation": {
              "$ref": "#/definitions/StringValue"
            },
            "InitialResponse": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Severity": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountClassAttributeDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AttributeID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultValue": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/ShortValue"
            }
          }
        }
      ]
    },
    "BusinessAccountContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "City": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountContract": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContractID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountDefaultLocationSetting": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "Insurance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LeadTimeInDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderPriority": {
              "$ref": "#/definitions/ShortValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRegistrationID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "City": {
              "$ref": "#/definitions/StringValue"
            },
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "State": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountMainContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "LanguageOrLocale": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Web": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountMarketingListDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "DynamicList": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Format": {
              "$ref": "#/definitions/StringValue"
            },
            "ListName": {
              "$ref": "#/definitions/StringValue"
            },
            "MarketingListID": {
              "$ref": "#/definitions/IntValue"
            },
            "MemberName": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Subscribed": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "BusinessAccountOpportunityDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Estimation": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Probability": {
              "$ref": "#/definitions/IntValue"
            },
            "Stage": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Total": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RequestedOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ScheduledShipment": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShippingZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountPaymentInstructionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/IntValue"
            },
            "PaymentInstructionsID": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "BusinessAccountShippingContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "SameasMain": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "CampaignDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CampaignID": {
              "$ref": "#/definitions/StringValue"
            },
            "CampaignName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "Stage": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Carrier": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CarrierID": {
              "$ref": "#/definitions/StringValue"
            },
            "CarrierUnitOfWeight": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarrierCustomerAccount"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PlugInParameters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarrierPluginParameter"
              }
            },
            "PlugInType": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CarrierCustomerAccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CarrierAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerName": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "PostalCode": {
              "$ref": "#/definitions/StringValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "CarrierPluginParameter": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "PluginID": {
              "$ref": "#/definitions/StringValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Case": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CaseActivityDetail"
              }
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDetail"
              }
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/IntValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/IntValue"
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClosingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ContactDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "Contract": {
              "$ref": "#/definitions/StringValue"
            },
            "DateReported": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InitialResponse": {
              "$ref": "#/definitions/StringValue"
            },
            "LastActivityDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastIncomingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastOutgoingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OvertimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "Priority": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedCases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CaseRelatedCase"
              }
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "ResolutionTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Severity": {
              "$ref": "#/definitions/StringValue"
            },
            "SLA": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CaseActivityDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedAt": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreatedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "IsCompleteIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "PriorityIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReminderIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CaseDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClosingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DateReported": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Estimation": {
              "$ref": "#/definitions/StringValue"
            },
            "InitialResponse": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Severity": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CaseRelatedCase": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentCaseID": {
              "$ref": "#/definitions/IntValue"
            },
            "RelationType": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CashSale": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CashSaleDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CashSaleDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtendedPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "CategoryStockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CategoryID": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "ChangeOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApprovalDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "ChangeDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Class": {
              "$ref": "#/definitions/StringValue"
            },
            "Commitments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrderCommitment"
              }
            },
            "CommitmentsChangeTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CompletionDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ContractTimeChangeDays": {
              "$ref": "#/definitions/IntValue"
            },
            "CostBudget": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrderCostBudget"
              }
            },
            "CostBudgetChangeTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DetailedDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "GrossMargin": {
              "$ref": "#/definitions/DecimalValue"
            },
            "GrossMarginAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OriginalCORefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "RevenueBudget": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChangeOrderRevenueBudget"
              }
            },
            "RevenueBudgetChangeTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevenueChangeNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ReverseStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ChangeOrderClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountClassAttributeDetail"
              }
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "Commitments": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostBudget": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RevenueBudget": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ChangeOrderCommitment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AmountinBaseCurrency": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "OpenAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "POLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "PONbr": {
              "$ref": "#/definitions/StringValue"
            },
            "PotentiallyRevisedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PotentiallyRevisedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ChangeOrderCostBudget": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedReceivedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrentCommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrentCommittedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OtherDraftCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PreviouslyApprovedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PreviouslyApprovedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalPotentiallyRevisedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ChangeOrderRevenueBudget": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Completed": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DraftInvoicesAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OtherDraftCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PreviouslyApprovedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PreviouslyApprovedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalPotentiallyRevisedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Check": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckDetail"
              }
            },
            "History": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckHistoryDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PaymentAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UnappliedBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CheckDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CheckHistoryDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountTaken": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Commissions": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DefaultSalesperson": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesPersons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPersonDetail"
              }
            }
          }
        }
      ]
    },
    "CommonTask": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BillingAndAllocationSettings": {
              "$ref": "#/definitions/ProjectTaskBillingAndAllocationSettings"
            },
            "CommonTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultValues": {
              "$ref": "#/definitions/ProjectTaskDefaultValues"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Properties": {
              "$ref": "#/definitions/ProjectTaskProperties"
            },
            "VisibilitySettings": {
              "$ref": "#/definitions/VisibilitySettings"
            }
          }
        }
      ]
    },
    "CompanyFinancialPeriod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Company": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialPeriodDetail"
              }
            },
            "FinancialYear": {
              "$ref": "#/definitions/StringValue"
            },
            "NbrOfPeriods": {
              "$ref": "#/definitions/ShortValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "Address": {
              "$ref": "#/definitions/Address"
            },
            "AddressIsSameAsInAccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDetail"
              }
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Campaigns": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CampaignDetail"
              }
            },
            "Cases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CaseDetail"
              }
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "ContactMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ConvertedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "DateOfBirth": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "DoNotCall": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotFax": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotMail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "DuplicateFound": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Duplicates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactDuplicateDetail"
              }
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "FaxType": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "Gender": {
              "$ref": "#/definitions/StringValue"
            },
            "Image": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "LanguageOrLocale": {
              "$ref": "#/definitions/StringValue"
            },
            "LastIncomingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastOutgoingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MaritalStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "MarketingLists": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketingListDetail"
              }
            },
            "MiddleName": {
              "$ref": "#/definitions/StringValue"
            },
            "NoMarketing": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NoMassMail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Notifications": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactNotification"
              }
            },
            "Opportunities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpportunityDetail"
              }
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3Type": {
              "$ref": "#/definitions/StringValue"
            },
            "QualificationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceCampaign": {
              "$ref": "#/definitions/StringValue"
            },
            "SpouseOrPartnerName": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Synchronize": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Title": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UserInfo": {
              "$ref": "#/definitions/ContactUserInfo"
            },
            "WebSite": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ContactDuplicateDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountType": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ContactNotification": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Bcc": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Format": {
              "$ref": "#/definitions/StringValue"
            },
            "MailingID": {
              "$ref": "#/definitions/StringValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "NotificationID": {
              "$ref": "#/definitions/IntValue"
            },
            "Report": {
              "$ref": "#/definitions/StringValue"
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ContactRoles": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "RoleDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "RoleName": {
              "$ref": "#/definitions/StringValue"
            },
            "Selected": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UserType": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "ContactUserInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "GeneratePassword": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Login": {
              "$ref": "#/definitions/StringValue"
            },
            "Password": {
              "$ref": "#/definitions/StringValue"
            },
            "Roles": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactRoles"
              }
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "UserType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ContractUsage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BilledTransactions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractUsageTransactionDetail"
              }
            },
            "ContractID": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "UnbilledTransactions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContractUsageTransactionDetail"
              }
            }
          }
        }
      ]
    },
    "ContractUsageTransactionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CaseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransactionID": {
              "$ref": "#/definitions/LongValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CostCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CostCodeID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "CreditCardProcessingDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TransactionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TransactionStatus": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CreditVerificationRules": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreditDaysPastDue": {
              "$ref": "#/definitions/ShortValue"
            },
            "CreditLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreditVerification": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstDueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OpenOrdersBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RemainingCreditLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnreleasedBalance": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "Currency": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencySymbol": {
              "$ref": "#/definitions/StringValue"
            },
            "DecimalPrecision": {
              "$ref": "#/definitions/ShortValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "UseForAccounting": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "Customer": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ApplyOverdueCharges": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDetail"
              }
            },
            "AutoApplyPayments": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillingAddressSameAsMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillingContact": {
              "$ref": "#/definitions/Contact"
            },
            "BillingContactSameAsMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Contacts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerContact"
              }
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreditVerificationRules": {
              "$ref": "#/definitions/CreditVerificationRules"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerClass": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerName": {
              "$ref": "#/definitions/StringValue"
            },
            "EnableCurrencyOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableRateOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableWriteOffs": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LeadTimedays": {
              "$ref": "#/definitions/ShortValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "MainContact": {
              "$ref": "#/definitions/Contact"
            },
            "MultiCurrencyStatements": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderPriority": {
              "$ref": "#/definitions/ShortValue"
            },
            "ParentRecord": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentInstructions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountPaymentInstructionDetail"
              }
            },
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "PrintDunningLetters": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrintInvoices": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrintStatements": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Salespersons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerSalesPerson"
              }
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendDunningLettersbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendInvoicesbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendStatementsbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingAddressSameAsMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingContact": {
              "$ref": "#/definitions/Contact"
            },
            "ShippingContactSameAsMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZoneID": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "StatementCycleID": {
              "$ref": "#/definitions/StringValue"
            },
            "StatementType": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRegistrationID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "WriteOffLimit": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "CustomerClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplyOverdueCharges": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ARAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ARSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountClassAttributeDetail"
              }
            },
            "AutoApplyPayments": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CashDiscountAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscountSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "COGSAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "COGSSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Country": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreditDaysPastDue": {
              "$ref": "#/definitions/ShortValue"
            },
            "CreditLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreditVerification": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultLocationIDfromBranch": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DefaultRestrictionGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "EnableCurrencyOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableRateOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableWriteOffs": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EntityUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "GroupDocumentDiscountLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MiscAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "MiscSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "MultiCurrencyStatements": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverdueChargeID": {
              "$ref": "#/definitions/StringValue"
            },
            "OverLimitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaymentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaymentSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PrintDunningLetters": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrintInvoices": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrintStatements": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RequireEntityUsageType": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RequireTaxZone": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SendDunningLettersbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendInvoicesbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendStatementsByEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "StatementCycleID": {
              "$ref": "#/definitions/StringValue"
            },
            "StatementType": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZoneID": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "UnrealizedGainAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "UnrealizedGainSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "UnrealizedLossAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "UnrealizedLossSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "WriteOffLimit": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "CustomerContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Contact": {
              "$ref": "#/definitions/Contact"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "CustomerLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AddressSameAsMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Calendar": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactSameAsMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultProject": {
              "$ref": "#/definitions/StringValue"
            },
            "EntityUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "FedExGroundCollect": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "Insurance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LeadTimeDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "LocationContact": {
              "$ref": "#/definitions/Contact"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderPriority": {
              "$ref": "#/definitions/ShortValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExemptionNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRegistrationID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CustomerPaymentMethod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CardAccountNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerProfileID": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerPaymentMethodDetail"
              }
            },
            "InstanceID": {
              "$ref": "#/definitions/IntValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ProcCenterID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CustomerPaymentMethodDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CustomerPriceClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CustomerSalesPerson": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Commission": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DefaultTaskForGLAccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultTask": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Discount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BreakBy": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerPriceClasses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCustomerPriceClassesDetail"
              }
            },
            "Customers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountCustomerDetail"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountBreakpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountBreakpointDetail"
              }
            },
            "DiscountBy": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ItemPriceClasses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountItemPriceClassesDetail"
              }
            },
            "Items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountItemDetail"
              }
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Promotional": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ProrateDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Sequence": {
              "$ref": "#/definitions/StringValue"
            },
            "ShowFreeItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Warehouses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiscountWarehouseDetail"
              }
            }
          }
        }
      ]
    },
    "DiscountBreakpointDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountDetailID": {
              "$ref": "#/definitions/IntValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastBreakAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastBreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastDiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastDiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastFreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingBreakAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingBreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PendingDiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingDiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingFreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "DiscountCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicableTo": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountCodeID": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "DiscountCustomerDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DiscountCustomerPriceClassesDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DiscountItemDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DiscountItemPriceClassesDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DiscountWarehouseDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DocContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "DuplicateDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccountType": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "DuplicateContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "EntityType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Email": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Bcc": {
              "$ref": "#/definitions/StringValue"
            },
            "Body": {
              "$ref": "#/definitions/StringValue"
            },
            "Cc": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "From": {
              "$ref": "#/definitions/StringValue"
            },
            "FromEmailAccountDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "FromEmailAccountID": {
              "$ref": "#/definitions/IntValue"
            },
            "Incoming": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MailStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Parent": {
              "$ref": "#/definitions/GuidValue"
            },
            "ParentSummary": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedEntityDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "StartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivity": {
              "$ref": "#/definitions/TimeActivity"
            },
            "To": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmailProcessing": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/IntValue"
            },
            "AccountEmailAccountID": {
              "$ref": "#/definitions/StringValue"
            },
            "AssignedToMe": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AssignedToOwner": {
              "$ref": "#/definitions/StringValue"
            },
            "IncludeFailed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Result": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmailProcessingRow"
              }
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmailProcessingRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "EmailAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "From": {
              "$ref": "#/definitions/StringValue"
            },
            "MailStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Selected": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "To": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Employee": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDetail"
              }
            },
            "ContactInfo": {
              "$ref": "#/definitions/Contact"
            },
            "Delegates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeDelegate"
              }
            },
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeSettings": {
              "$ref": "#/definitions/EmployeeSettings"
            },
            "EmploymentHistory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmploymentHistoryRecord"
              }
            },
            "FinancialSettings": {
              "$ref": "#/definitions/EmployeeFinancialSettings"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeDelegate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Delegate": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeFinancialSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "APAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "APSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentInstructions": {
              "$ref": "#/definitions/BusinessAccountPaymentInstructionDetail"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaymentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepaymentSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmployeeSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "Calendar": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "DepartmentID": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeClass": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "EnableCurrencyOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableRateOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "RegularHoursValidation": {
              "$ref": "#/definitions/StringValue"
            },
            "ReportsTo": {
              "$ref": "#/definitions/StringValue"
            },
            "RouteEmails": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Salesperson": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeCardIsRequired": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UnionLocalID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EmploymentHistoryRecord": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "PositionID": {
              "$ref": "#/definitions/StringValue"
            },
            "RehireEligible": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "StartReason": {
              "$ref": "#/definitions/StringValue"
            },
            "Terminated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TerminationReason": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Event": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllDay": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Attendees": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventAttendee"
              }
            },
            "Body": {
              "$ref": "#/definitions/StringValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EndTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Priority": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedActivities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventRelatedActivity"
              }
            },
            "RelatedEntityDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "Reminder": {
              "$ref": "#/definitions/ReminderDetail"
            },
            "ShowAs": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "StartTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivity": {
              "$ref": "#/definitions/EventTimeActivity"
            }
          }
        }
      ]
    },
    "EventAttendee": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Comment": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "EventNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "InvitationStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Key": {
              "$ref": "#/definitions/StringValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "NameAttendeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "EventRelatedActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "EventTimeActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseClaim": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApprovalDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ApprovalDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "ClaimedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "ClaimTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DepartmentID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseClaimDetails"
              }
            },
            "FinancialDetails": {
              "$ref": "#/definitions/ExpenseClaimFinancialDetail"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "ReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseClaimTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATExemptTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATTaxableTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ExpenseClaimAPDocument": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseClaimDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AmountInClaimCurrency": {
              "$ref": "#/definitions/DecimalValue"
            },
            "APRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ARRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ClaimAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeePart": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseItemID": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "NetAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "TipAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseClaimFinancialDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "APDocuments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseClaimAPDocument"
              }
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "PosttoPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseClaimTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductibleTaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpenseAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "IncludeinVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseReceipt": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ClaimAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ClaimedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpenseItemID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ReceiptDetails": {
              "$ref": "#/definitions/ExpenseReceiptDetails"
            },
            "ReceiptID": {
              "$ref": "#/definitions/IntValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseReceiptTaxDetails"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ExpenseReceiptDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrancyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeePart": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseClaimID": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseClaimStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExpenseReceiptTaxDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductibleTaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpenseAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "IncludeInVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ExternalCommitment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "CommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedReceivedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OriginalCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedDocument": {
              "$ref": "#/definitions/StringValue"
            },
            "RevisedCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "FinancialPeriod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialPeriodDetail"
              }
            },
            "FinancialYear": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NbrOfPeriods": {
              "$ref": "#/definitions/ShortValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "UserDefinedPeriods": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "FinancialPeriodDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdjustmentPeriod": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInAP": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInAR": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInCA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInFA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedInIN": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FinancialPeriodID": {
              "$ref": "#/definitions/StringValue"
            },
            "LengthInDays": {
              "$ref": "#/definitions/IntValue"
            },
            "PeriodNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "FinancialSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillSeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscountDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerTaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EntityUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InvoiceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OverrideTaxZone": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "FinancialYear": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdjustToPeriodStart": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BelongsToNextYear": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DayOfWeek": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FinancialYearPeriodDetail"
              }
            },
            "FinancialYearStartsOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FirstFinancialYear": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstPeriodStartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "HasAdjustmentPeriod": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LengthOfFinancialPeriodInDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "NbrOfFinancialPeriods": {
              "$ref": "#/definitions/ShortValue"
            },
            "PeriodsStartDayOfWeek": {
              "$ref": "#/definitions/StringValue"
            },
            "PeriodType": {
              "$ref": "#/definitions/StringValue"
            },
            "UserDefinedPeriods": {
              "$ref": "#/definitions/BooleanValue"
            },
            "YearEndCalculationMethod": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "FinancialYearPeriodDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PeriodNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "FOBPoint": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "FOBPointID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InterBranchAccountMapping": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "OriginatingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "PostingLedger": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionsInDestinationBranch": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InterBranchAccountMappingTransactionInDestinationBranchDetail"
              }
            },
            "TransactionsInSourceBranch": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InterBranchAccountMappingTransactionInSourceBranchDetail"
              }
            }
          }
        }
      ]
    },
    "InterBranchAccountMappingTransactionInDestinationBranchDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountFrom": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountTo": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/IntValue"
            },
            "DestinationBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OffsetAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "OffsetSubaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InterBranchAccountMappingTransactionInSourceBranchDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountFrom": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountTo": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/IntValue"
            },
            "DestinationBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OffsetAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "OffsetSubaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryAllocationInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Available": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AvailableForIssue": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AvailableForShipping": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BaseUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "InTransit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InTransitToSO": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryIssues": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryReceipts": {
              "$ref": "#/definitions/DecimalValue"
            },
            "KitAssemblyDemand": {
              "$ref": "#/definitions/DecimalValue"
            },
            "KitAssemblySupply": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "OnHand": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OnLocationNotAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchaseForSO": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchaseForSOPrepared": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchaseOrders": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchasePrepared": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PurchaseReceipts": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReceiptsForSO": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryAllocationRow"
              }
            },
            "SOAllocated": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOBackOrdered": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOBooked": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOPrepared": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOShipped": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SOToPurchase": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalAddition": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalDeduction": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryAllocationRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllocationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "AllocationType": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "Expired": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "InventoryItemCrossReference": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AlternateID": {
              "$ref": "#/definitions/StringValue"
            },
            "AlternateType": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorOrCustomer": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryItemUOMConversion": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ConversionFactor": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FromUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "MultiplyOrDivide": {
              "$ref": "#/definitions/StringValue"
            },
            "ToUOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryReceipt": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ControlCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ControlQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryReceiptDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TransferNbr": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryReceiptDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryReceiptDetailAllocation"
              }
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExtCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNumber": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventoryReceiptDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SplitLineNumber": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventorySummaryInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ExpandByLotSerialNbr": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "Results": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventorySummaryRow"
              }
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InventorySummaryRow": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "EstimatedTotalCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "EstimatedUnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "QtyAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyAvailableForShipment": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyNotAvailable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyOnHand": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Invoice": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApplicationsCreditMemo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceApplicationsCreditMemo"
              }
            },
            "ApplicationsDefault": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceApplicationsDefault"
              }
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillingPrinted": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceDetail"
              }
            },
            "DiscountDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceDiscountDetail"
              }
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LinkARAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LinkBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceApplicationsCreditMemo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceApplicationsDefault": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountTaken": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExtendedPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceDiscountDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExternalDiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "RetainedDiscount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SequenceID": {
              "$ref": "#/definitions/StringValue"
            },
            "SkipDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "InvoiceTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ItemClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemClassAtrribute"
              }
            },
            "AvailabilityCalculationRule": {
              "$ref": "#/definitions/StringValue"
            },
            "BaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LotSerialClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PostingClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "StockItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxCategoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ValuationMethod": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ItemClassAtrribute": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AttributeID": {
              "$ref": "#/definitions/StringValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SortOrder": {
              "$ref": "#/definitions/ShortValue"
            }
          }
        }
      ]
    },
    "ItemPriceClassesDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "PriceClassID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ItemSalesCategory": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CategoryID": {
              "$ref": "#/definitions/IntValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemSalesCategoryMember"
              }
            },
            "ParentCategoryID": {
              "$ref": "#/definitions/IntValue"
            },
            "Path": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ItemSalesCategoryMember": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemStatus": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ItemsDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ItemWarehouse": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DefaultIssueFrom": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultReceiptTo": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultSubitem": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventorySubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverrideInventoryAccountSubaccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverridePreferredVendor": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverridePrice": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideReplenishmentSettings": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideServiceLevelOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideStandardCost": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PreferredLocation": {
              "$ref": "#/definitions/StringValue"
            },
            "PreferredVendor": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductManager": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentSource": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentWarehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "Seasonality": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceLevel": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "JournalTransaction": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JournalTransactionDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LedgerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "JournalTransactionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DebitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "IsNonPM": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "NonBillable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTransactionID": {
              "$ref": "#/definitions/LongValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorOrCustomer": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "JournalVoucher": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "DebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JournalVoucherDetail"
              }
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "GLTransactions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JournalVoucherGLTransaction"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "JournalVoucherDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "APDocumentsToApply": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JournalVoucherDetailAPDocumentToApply"
              }
            },
            "ARDocumentsToApply": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JournalVoucherDetailARDocumentToApply"
              }
            },
            "BatchModule": {
              "$ref": "#/definitions/StringValue"
            },
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "CardAccountNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "CardAccountNbrCardAccountNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreditAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DebitAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DebitSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DocCreated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DocTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EntryTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "GroupTransactionID": {
              "$ref": "#/definitions/IntValue"
            },
            "IncludedTaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Split": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SubtotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TransactionCode": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorOrCustomer": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "JournalVoucherDetailAPDocumentToApply": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            },
            "WithTax": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WithTaxBalance": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "JournalVoucherDetailARDocumentToApply": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BalanceWriteOff": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "WriteOffLimit": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WriteOffReasonCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "JournalVoucherGLTransaction": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "DebitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssembly": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssemblyAllocation"
              }
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "KitInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "NonStockComponents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssemblyNonStockComponent"
              }
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Revision": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "StockComponents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssemblyStockComponent"
              }
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssemblyAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssemblyNonStockComponent": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "NonStockInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssemblyStockComponent": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitAssemblyStockComponentAllocation"
              }
            },
            "ComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "StockInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitAssemblyStockComponentAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitNonStockComponent": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllowComponentQtyVariance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "NonStockInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "KitSpecification": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "IsNonStock": {
              "$ref": "#/definitions/BooleanValue"
            },
            "KitInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "NonStockComponents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitNonStockComponent"
              }
            },
            "RevisionID": {
              "$ref": "#/definitions/StringValue"
            },
            "StockComponents": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KitStockComponent"
              }
            }
          }
        }
      ]
    },
    "KitStockComponent": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllowComponentQtyVariance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinComponentQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "StockInventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "LaborCostRate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AnnualRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "HourlyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LaborRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "RegularHoursPerWeek": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TypeOfEmployment": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocalID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Lead": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "Address": {
              "$ref": "#/definitions/Address"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDetail"
              }
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Campaigns": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CampaignDetail"
              }
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "DoNotCall": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotFax": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DoNotMail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Duplicate": {
              "$ref": "#/definitions/StringValue"
            },
            "DuplicateFound": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Duplicates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DuplicateDetail"
              }
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "FaxType": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "JobTitle": {
              "$ref": "#/definitions/StringValue"
            },
            "LanguageOrLocale": {
              "$ref": "#/definitions/StringValue"
            },
            "LastIncomingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastOutgoingActivity": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LeadClass": {
              "$ref": "#/definitions/StringValue"
            },
            "LeadDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "LeadID": {
              "$ref": "#/definitions/IntValue"
            },
            "MarketingLists": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketingListDetail"
              }
            },
            "NoMarketing": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NoMassMail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceCampaign": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Title": {
              "$ref": "#/definitions/StringValue"
            },
            "WebSite": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "LotSerialClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AssignmentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "IssueMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Segments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LotSerialClassSegment"
              }
            },
            "TrackExpirationDate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TrackingMethod": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "LotSerialClassSegment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "SegmentNbr": {
              "$ref": "#/definitions/ShortValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ManageFinancialPeriods": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActionToPerform": {
              "$ref": "#/definitions/StringValue"
            },
            "Company": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ManageFinancialPeriodsDetail"
              }
            },
            "FromYear": {
              "$ref": "#/definitions/StringValue"
            },
            "ReopenFinancialPeriodsinAllModules": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ToYear": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ManageFinancialPeriodsDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ClosedinAP": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedinAR": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedinCA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedinFA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ClosedinIN": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DescriptionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "FinancialPeriodID": {
              "$ref": "#/definitions/StringValue"
            },
            "Selected": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "MarketingListDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "DynamicList": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Format": {
              "$ref": "#/definitions/StringValue"
            },
            "ListName": {
              "$ref": "#/definitions/StringValue"
            },
            "MarketingListID": {
              "$ref": "#/definitions/IntValue"
            },
            "Subscribed": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "NonStockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonStockItemAttribute"
              }
            },
            "BaseUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "CrossReferences": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryItemCrossReference"
              }
            },
            "CurrentCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DefaultPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DeferralAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DeferralSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseAccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseAccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "IsKit": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ItemClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PendingCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingCostDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "POAccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "POAccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PostingClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchaseUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "ReasonCodeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "RequireReceipt": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RequireShipment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesCategories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonStockItemSalesCategory"
              }
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NonStockItemVendorDetail"
              }
            },
            "Volume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VolumeUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Weight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WeightUOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "NonStockItemAttribute": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attribute": {
              "$ref": "#/definitions/StringValue"
            },
            "Required": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "NonStockItemSalesCategory": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CategoryID": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "NonStockItemVendorDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Opportunity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Activities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActivityDetail"
              }
            },
            "Address": {
              "$ref": "#/definitions/Address"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDetail"
              }
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "BusinessAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "ContactInformation": {
              "$ref": "#/definitions/OpportunityContact"
            },
            "ConvertedLeadDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "ConvertedLeadID": {
              "$ref": "#/definitions/IntValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyViewState": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Details": {
              "$ref": "#/definitions/StringValue"
            },
            "Discount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Discounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpportunityDiscount"
              }
            },
            "Estimation": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualAmount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OpportunityID": {
              "$ref": "#/definitions/StringValue"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "OwnerEmployeeName": {
              "$ref": "#/definitions/StringValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Products": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpportunityProduct"
              }
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "Reason": {
              "$ref": "#/definitions/StringValue"
            },
            "Relations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationDetail"
              }
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            },
            "SourceCampaign": {
              "$ref": "#/definitions/StringValue"
            },
            "Stage": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OpportunityTaxDetail"
              }
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Total": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WeightTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "WorkgroupDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "OpportunityContact": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attention": {
              "$ref": "#/definitions/StringValue"
            },
            "CompanyName": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Fax": {
              "$ref": "#/definitions/StringValue"
            },
            "FaxType": {
              "$ref": "#/definitions/StringValue"
            },
            "FirstName": {
              "$ref": "#/definitions/StringValue"
            },
            "LastName": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone1Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone2Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3": {
              "$ref": "#/definitions/StringValue"
            },
            "Phone3Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Position": {
              "$ref": "#/definitions/StringValue"
            },
            "Title": {
              "$ref": "#/definitions/StringValue"
            },
            "WebSite": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "OpportunityDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "Estimation": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Probability": {
              "$ref": "#/definitions/IntValue"
            },
            "Stage": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            },
            "Total": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "OpportunityDiscount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DiscountableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SequenceID": {
              "$ref": "#/definitions/StringValue"
            },
            "SkipDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "OpportunityProduct": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Discount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountSequence": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OpportunityProductID": {
              "$ref": "#/definitions/IntValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "OpportunityTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "IncludeInVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Payment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ApplicationHistory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentApplicationHistoryDetail"
              }
            },
            "AppliedToDocuments": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CardAccountNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditCardProcessingInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreditCardProcessingDetail"
              }
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocumentsToApply": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrdersToApply": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentOrderDetail"
              }
            },
            "PaymentAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PaymentApplicationHistoryDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdjustedDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustedRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustingDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustingRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustmentNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "AdjustsVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApplicationPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BalanceWriteOff": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscountBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CashDiscountTaken": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "DisplayRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "VATCreditMemo": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PaymentDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BalanceWriteOff": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "WriteOffReasonCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PaymentMethod": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AllowedCashAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethodAllowedCashAccountDetail"
              }
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "IntegratedProcessing": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MeansOfPayment": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentMethodID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProcessingCenters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethodProcessingCenterDetail"
              }
            },
            "RequireRemittanceInformationforCashAccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseInAP": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseInAR": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "PaymentMethodAllowedCashAccountDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "APDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "APLastRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "APSuggestNextNbr": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ARDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ARDefaultForRefund": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ARLastRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ARSuggestNextNbr": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BatchLastRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "UseInAP": {
              "$ref": "#/definitions/BooleanValue"
            },
            "UseInAR": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "PaymentMethodProcessingCenterDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "ProcCenterID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PaymentOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AppliedToOrder": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Payments": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AppliedToOrder": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferredtoInvoice": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "PhysicalInventoryCount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInventoryCountDetail"
              }
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PhysicalInventoryCountDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BookQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "PhysicalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PhysicalInventoryReview": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhysicalInventoryReviewDetail"
              }
            },
            "FreezeDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalPhysicalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalVarianceCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalVarianceQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PhysicalInventoryReviewDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BookQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExtendedVarianceCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "PhysicalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TagNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VarianceQty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProFormaFinancialDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ARDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ARRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscountDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CustomerTaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerUsageType": {
              "$ref": "#/definitions/StringValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProFormaInvoice": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountDue": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApprovalDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "BillingSettings": {
              "$ref": "#/definitions/BillToSettings"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "FinancialDetails": {
              "$ref": "#/definitions/ProFormaFinancialDetails"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InvoiceDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InvoiceTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ProgressBilling": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProgressBilling"
              }
            },
            "ProgressBillingTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "RetainageTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProFormaTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TimeAndMaterial": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeAndMaterial"
              }
            },
            "TimeAndMaterialTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProFormaTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "RetainedTax": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainedTaxable": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProgressBilling": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AmountToInvoice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrentInvoiced": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DeferralCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DraftInvoicesAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "PreviouslyInvoiced": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Retainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainageAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StoredMaterial": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalCompleted": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "Project": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActivityHistory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectActivity"
              }
            },
            "ApprovalDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "Assets": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "Balances": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectBalance"
              }
            },
            "BillingAndAllocationSettings": {
              "$ref": "#/definitions/ProjectBillingAndAllocationSettings"
            },
            "BillToSettings": {
              "$ref": "#/definitions/BillToSettings"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Employees": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEmployee"
              }
            },
            "Equipments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEquipment"
              }
            },
            "Expenses": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "GLAccounts": {
              "$ref": "#/definitions/ProjectGLAccount"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Income": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Invoices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectProFormaDetails"
              }
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Liabilities": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectProperties": {
              "$ref": "#/definitions/ProjectProperties"
            },
            "ProjectTemplateID": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocals": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectUnionLocal"
              }
            },
            "VisibilitySettings": {
              "$ref": "#/definitions/VisibilitySettings"
            }
          }
        }
      ]
    },
    "ProjectActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectBalance": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualOpenCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BudgetedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Performance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VarianceAmount": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectBilling": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerClass": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectBillingDetails"
              }
            },
            "InvoiceDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTemplate": {
              "$ref": "#/definitions/StringValue"
            },
            "StatementCycle": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectBillingAndAllocationSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllocationRule": {
              "$ref": "#/definitions/StringValue"
            },
            "AutomaticallyReleaseARDocuments": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillingPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CreateProFormaOnBilling": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastBillingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NextBillingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RateTable": {
              "$ref": "#/definitions/StringValue"
            },
            "Retainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RunAllocationOnReleaseOfProjectTransactions": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "UseTMRevenueBudgetLimits": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ProjectBillingDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerName": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "From": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastBillingDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "Selected": {
              "$ref": "#/definitions/BooleanValue"
            },
            "To": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "ProjectBillingRules": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillingRuleID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectBudget": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ActualAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualPlusOpenCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ActualQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "AutoCompleted": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BudgetedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BudgetedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedCOQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedInvoicedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedOpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommittedReceivedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Completed": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostAtCompletion": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CostToComplete": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DraftInvoicesAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastCostAtCompletion": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastCostToComplete": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastPercentageOfCompletion": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PendingInvoiceAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PercentageOfCompletion": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Performance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Retainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevenueTask": {
              "$ref": "#/definitions/IntValue"
            },
            "RevisedBudgetedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedBudgetedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RevisedCommittedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "VarianceAmount": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectEmployee": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Department": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectEquipment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EquipmentID": {
              "$ref": "#/definitions/StringValue"
            },
            "RunRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RunRateItem": {
              "$ref": "#/definitions/StringValue"
            },
            "SetupRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SetupRateItem": {
              "$ref": "#/definitions/StringValue"
            },
            "SuspendRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SuspendRateItem": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectGLAccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultTaskForGLAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DefaultTaskForGLAccount"
              }
            }
          }
        }
      ]
    },
    "ProjectProFormaDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ARDocDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ARDocDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "ARDocOriginalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ARDocStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ARDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ARReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OpenARBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OriginalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalRetainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaidRetainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProFormaDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProFormaReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "RetainageInvoice": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnpaidRetainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnreleasedRetainage": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CertifiedJob": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ChangeOrderWorkflow": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastRevenueChangeNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectManager": {
              "$ref": "#/definitions/StringValue"
            },
            "RestrictEmployees": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RestrictEquipment": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RevenueBudgetLevel": {
              "$ref": "#/definitions/StringValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TrackProductionData": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ProjectTask": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActivityHistory": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectActivity"
              }
            },
            "Attribute": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BillingAndAllocationSettings": {
              "$ref": "#/definitions/ProjectTaskBillingAndAllocationSettings"
            },
            "CRMLink": {
              "$ref": "#/definitions/ProjectTaskToCRMLink"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DefaultValues": {
              "$ref": "#/definitions/ProjectTaskDefaultValues"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Properties": {
              "$ref": "#/definitions/ProjectTaskProperties"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "VisibilitySettings": {
              "$ref": "#/definitions/VisibilitySettings"
            }
          }
        }
      ]
    },
    "ProjectTaskBillingAndAllocationSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AllocationRule": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingOption": {
              "$ref": "#/definitions/StringValue"
            },
            "BillingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "BillSeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "RateTable": {
              "$ref": "#/definitions/StringValue"
            },
            "WIPAccountGroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectTaskDefaultValues": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectTaskProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "Completed": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CompletionMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PlannedEndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PlannedStartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "ProjectTaskToCRMLink": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountedCampaign": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectTemplate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BillingAndAllocationSettings": {
              "$ref": "#/definitions/ProjectBillingAndAllocationSettings"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Employees": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEmployee"
              }
            },
            "Equipments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectEquipment"
              }
            },
            "GLAccounts": {
              "$ref": "#/definitions/ProjectGLAccount"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProjectProperties": {
              "$ref": "#/definitions/ProjectProperties"
            },
            "ProjectTemplateID": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "VisibilitySettings": {
              "$ref": "#/definitions/VisibilitySettings"
            }
          }
        }
      ]
    },
    "ProjectTemplateTask": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "BillingAndAllocationSettings": {
              "$ref": "#/definitions/ProjectTaskBillingAndAllocationSettings"
            },
            "DefaultValues": {
              "$ref": "#/definitions/ProjectTaskDefaultValues"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ProjectTemplateID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTemplateTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Properties": {
              "$ref": "#/definitions/ProjectTemplateTaskProperties"
            },
            "VisibilitySettings": {
              "$ref": "#/definitions/VisibilitySettings"
            }
          }
        }
      ]
    },
    "ProjectTemplateTaskProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "AutomaticallyIncludeInProject": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CompletionMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ProjectTransaction": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectTransactionDetail"
              }
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalDocNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalBillableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ProjectTransactionDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountGroupDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "Allocated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Billed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreditSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DebitAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DebitSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningType": {
              "$ref": "#/definitions/StringValue"
            },
            "Employee": {
              "$ref": "#/definitions/StringValue"
            },
            "EndDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "FinPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "Multiplier": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransactionID": {
              "$ref": "#/definitions/LongValue"
            },
            "UnitRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "UseBillableQtyInAmountFormula": {
              "$ref": "#/definitions/BooleanValue"
            },
            "VendorOrCustomer": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ProjectUnionLocal": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocalID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseOrderDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LineTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "PromisedOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShippingInstructions": {
              "$ref": "#/definitions/ShippingInstructions"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseOrderTaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorTaxZone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AlternateID": {
              "$ref": "#/definitions/StringValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Cancelled": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Completed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CompleteOn": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LineType": {
              "$ref": "#/definitions/StringValue"
            },
            "MaxReceiptPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinReceiptPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigPONbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigPOType": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Promised": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "QtyOnReceipts": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReceiptAction": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceivedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Requested": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseOrderTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "RetainedTaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainedTaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "PurchaseReceipt": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ControlQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreateBill": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseReceiptDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UnbilledQuantity": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseReceiptDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "AccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseReceiptDetailAllocation"
              }
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExtendedCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LineType": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "POLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "POOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "POOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceiptQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferOrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "PurchaseReceiptDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReceiptNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "PurchaseSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "POSiteID": {
              "$ref": "#/definitions/StringValue"
            },
            "POSource": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "RelationDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "AddToCc": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ContactDisplayName": {
              "$ref": "#/definitions/StringValue"
            },
            "ContactID": {
              "$ref": "#/definitions/IntValue"
            },
            "Document": {
              "$ref": "#/definitions/GuidValue"
            },
            "DocumentTargetNoteIDDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "Email": {
              "$ref": "#/definitions/StringValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "Primary": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RelationID": {
              "$ref": "#/definitions/IntValue"
            },
            "Role": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ReminderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "IsActive": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RemindAtDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RemindAtTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "ReplenishmentParameterStockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DemandForecastModel": {
              "$ref": "#/definitions/StringValue"
            },
            "ForecastPeriodType": {
              "$ref": "#/definitions/StringValue"
            },
            "LaunchDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MaxQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxShelfLifeInDays": {
              "$ref": "#/definitions/IntValue"
            },
            "Method": {
              "$ref": "#/definitions/StringValue"
            },
            "PeriodsToAnalyze": {
              "$ref": "#/definitions/IntValue"
            },
            "ReorderPoint": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReplenishmentClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentWarehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "SafetyStock": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Seasonality": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceLevel": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Source": {
              "$ref": "#/definitions/StringValue"
            },
            "TerminationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TransferERQ": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ReportingGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "GroupType": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ReportingSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ReportingGroups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReportingGroup"
              }
            },
            "TaxAgency": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoice": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ApplicationsCreditMemo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceApplicationCreditMemo"
              }
            },
            "ApplicationsInvoice": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceApplicationInvoice"
              }
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BillingSettings": {
              "$ref": "#/definitions/BillToSettings"
            },
            "CashDiscount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Commissions": {
              "$ref": "#/definitions/SalesInvoiceCommissions"
            },
            "CreditHold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceDetail"
              }
            },
            "DiscountDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceDiscountDetails"
              }
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FinancialDetails": {
              "$ref": "#/definitions/SalesInvoiceFinancialDetails"
            },
            "FreightDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceFreightDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceTaxDetail"
              }
            },
            "Totals": {
              "$ref": "#/definitions/SalesInvoiceTotals"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "VATExemptTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATTaxableTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceApplicationCreditMemo": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceApplicationInvoice": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AdjustedDocReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustingDocReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "AdjustmentNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "AmountPaid": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Balance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CashDiscountTaken": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Currency": {
              "$ref": "#/definitions/StringValue"
            },
            "Customer": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DocType": {
              "$ref": "#/definitions/StringValue"
            },
            "DocumentType": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PaymentPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceCommissions": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CommissionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalesPersons": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesInvoiceSalesPersonDetail"
              }
            },
            "TotalCommissionableAmount": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Amount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BranchID": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigInvLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OrigInvNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrigInvType": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TransactionDescr": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceDiscountDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExternalDiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "SequenceID": {
              "$ref": "#/definitions/StringValue"
            },
            "SkipDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceFinancialDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerTaxZone": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceFreightDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PremiumFreightAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentType": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalFreightAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Volume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Weight": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceSalesPersonDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CommissionableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommissionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommissionPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesInvoiceTotals": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DiscountTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Freight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MiscTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PaymentTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "SalesOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Approved": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "BillToAddress": {
              "$ref": "#/definitions/Address"
            },
            "BillToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillToAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "BillToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Commissions": {
              "$ref": "#/definitions/Commissions"
            },
            "ControlTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreditHold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomerOrder": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DestinationWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrderDetail"
              }
            },
            "DisableAutomaticDiscountUpdate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "DiscountDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrdersDiscountDetails"
              }
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "FinancialSettings": {
              "$ref": "#/definitions/FinancialSettings"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IsTaxValid": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModified": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "NewCard": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentCardIdentifier": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentProfileID": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentRef": {
              "$ref": "#/definitions/StringValue"
            },
            "Payments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payments"
              }
            },
            "PreAuthorizationNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "PreAuthorizedAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PreferredWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RequestedOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Shipments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrderShipment"
              }
            },
            "ShippingSettings": {
              "$ref": "#/definitions/ShippingSettings"
            },
            "ShipToAddress": {
              "$ref": "#/definitions/Address"
            },
            "ShipToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "ShipToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxDetail"
              }
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Totals": {
              "$ref": "#/definitions/Totals"
            },
            "VATExemptTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VATTaxableTotal": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "SalesOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Account": {
              "$ref": "#/definitions/StringValue"
            },
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOrderDetailAllocation"
              }
            },
            "AlternateID": {
              "$ref": "#/definitions/StringValue"
            },
            "AutoCreateIssue": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AverageCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CalculateDiscountsOnImport": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Commissionable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Completed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountedUnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExtendedPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDate": {
              "$ref": "#/definitions/StringValue"
            },
            "LineDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LineType": {
              "$ref": "#/definitions/StringValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "MarkForPO": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Operation": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OvershipThreshold": {
              "$ref": "#/definitions/DecimalValue"
            },
            "POSource": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasingSettings": {
              "$ref": "#/definitions/PurchaseSettings"
            },
            "QtyOnShipments": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "RequestedOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "UnbilledAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UndershipThreshold": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesOrderDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AllocWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Completed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyOnShipments": {
              "$ref": "#/definitions/DecimalValue"
            },
            "QtyReceived": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RelatedDocument": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipOn": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "SplitLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesOrdersDiscountDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountableQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ExternalDiscountCode": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/StringValue"
            },
            "FreeItemQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ManualDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SequenceID": {
              "$ref": "#/definitions/StringValue"
            },
            "SkipDiscount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesOrderShipment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Salesperson": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DefaultCommission": {
              "$ref": "#/definitions/DecimalValue"
            },
            "IsActive": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Name": {
              "$ref": "#/definitions/StringValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesPersonDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CommissionableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommissionAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CommissionPercent": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalespersonID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesPriceDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Price": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PriceCode": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceType": {
              "$ref": "#/definitions/StringValue"
            },
            "Promotion": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "Tax": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesPricesInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "EffectiveAsOf": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceCode": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceManager": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceManagerIsMe": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PriceType": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceWorkgroupIsMine": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SalesPriceDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPriceDetail"
              }
            }
          }
        }
      ]
    },
    "SalesPricesWorksheetDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineID": {
              "$ref": "#/definitions/IntValue"
            },
            "PendingPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PriceCode": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SourcePrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Tax": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "SalesPriceWorksheet": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OverwriteOverlappingPrices": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesPrices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesPricesWorksheetDetail"
              }
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Shipment": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BaseCurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyRateTypeID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyViewState": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomerID": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentDetail"
              }
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCurrency": {
              "$ref": "#/definitions/StringValue"
            },
            "GroundCollect": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Insurance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "Operation": {
              "$ref": "#/definitions/StringValue"
            },
            "Orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentOrderDetail"
              }
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "PackageCount": {
              "$ref": "#/definitions/IntValue"
            },
            "Packages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentPackage"
              }
            },
            "PackageWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReciprocalRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippingSettings": {
              "$ref": "#/definitions/ShipToSettings"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZoneID": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "ToWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UseCustomersAccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "WorkgroupID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShipmentDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentDetailAllocation"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FreeItem": {
              "$ref": "#/definitions/BooleanValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OpenQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderLineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "OriginalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShipmentDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShipmentOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryDocType": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "InvoiceType": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipmentType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippedQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ShippedWeight": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ShipmentPackage": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BoxID": {
              "$ref": "#/definitions/StringValue"
            },
            "CODAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Confirmed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CustomRefNbr1": {
              "$ref": "#/definitions/StringValue"
            },
            "CustomRefNbr2": {
              "$ref": "#/definitions/StringValue"
            },
            "DeclaredValue": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "TrackingNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Weight": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ShippingBox": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ActiveByDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BoxID": {
              "$ref": "#/definitions/StringValue"
            },
            "BoxWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CarriersPackage": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Height": {
              "$ref": "#/definitions/IntValue"
            },
            "Length": {
              "$ref": "#/definitions/IntValue"
            },
            "MaxVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VolumeUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WeightUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Width": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "ShippingInstructions": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ShippingDestinationType": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingLocation": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipTo": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipToAddress": {
              "$ref": "#/definitions/Address"
            },
            "ShipToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToAddressValidated": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "ShipToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShippingSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CancelByDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Canceled": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "GroundCollect": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Insurance": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PreferredWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Priority": {
              "$ref": "#/definitions/ShortValue"
            },
            "ResidentialDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SaturdayDelivery": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ScheduledShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ShippingRule": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingZone": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipSeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "ShopForRates": {
              "$ref": "#/definitions/ShopForRates"
            },
            "UseCustomersAccount": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ShippingTerm": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingTermDetail"
              }
            },
            "TermID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShippingTermDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "InvoiceAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineHandling": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "ShippingandHandling": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "ShippingZones": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ZoneID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShipToSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ShipToAddress": {
              "$ref": "#/definitions/Address"
            },
            "ShipToAddressOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShipToContact": {
              "$ref": "#/definitions/DocContact"
            },
            "ShipToContactOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Validated": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "ShipVia": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CalculationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "Calendar": {
              "$ref": "#/definitions/StringValue"
            },
            "CarrierID": {
              "$ref": "#/definitions/StringValue"
            },
            "CommonCarrier": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipViaFreightRate"
              }
            },
            "FreightSalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightSalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Packages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingBox"
              }
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShipViaFreightRate": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "Rate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Volume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Weight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ZoneID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "ShopForRates": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "IsManualPackage": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OrderWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PackageWeight": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "StatementCycle": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AgingPeriod1EndDay": {
              "$ref": "#/definitions/ShortValue"
            },
            "AgingPeriod1Message": {
              "$ref": "#/definitions/StringValue"
            },
            "AgingPeriod2EndDay": {
              "$ref": "#/definitions/ShortValue"
            },
            "AgingPeriod2Message": {
              "$ref": "#/definitions/StringValue"
            },
            "AgingPeriod3EndDay": {
              "$ref": "#/definitions/ShortValue"
            },
            "AgingPeriod3Message": {
              "$ref": "#/definitions/StringValue"
            },
            "AgingPeriod4Message": {
              "$ref": "#/definitions/StringValue"
            },
            "ApplyOverdueCharges": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CycleID": {
              "$ref": "#/definitions/StringValue"
            },
            "DayOfMonth": {
              "$ref": "#/definitions/ShortValue"
            },
            "DayOfMonth1": {
              "$ref": "#/definitions/ShortValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastStatementDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OverdueChargeID": {
              "$ref": "#/definitions/StringValue"
            },
            "PrepareOn": {
              "$ref": "#/definitions/StringValue"
            },
            "RequireOverdueChargesCalculationBeforeStatement": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RequirePaymentApplicationBeforeStatementProcessing": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "StockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ABCCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeValue"
              }
            },
            "AutoIncrementalValue": {
              "$ref": "#/definitions/StringValue"
            },
            "AverageCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Boxes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BoxStockItem"
              }
            },
            "Categories": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryStockItem"
              }
            },
            "COGSAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "COGSSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Content": {
              "$ref": "#/definitions/StringValue"
            },
            "CrossReferences": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryItemCrossReference"
              }
            },
            "CurrentStdCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DefaultIssueLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DefaultReceiptLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultSubitem": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "DeferralAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DeferralSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DimensionVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DimensionWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DiscountAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ImageUrl": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventorySubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "IsAKit": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ItemClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemType": {
              "$ref": "#/definitions/StringValue"
            },
            "LandedCostVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LandedCostVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LastCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastModified": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LastStdCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LotSerialClass": {
              "$ref": "#/definitions/StringValue"
            },
            "Markup": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinMarkup": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MSRP": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PackagingOption": {
              "$ref": "#/definitions/StringValue"
            },
            "PackSeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PendingStdCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "POAccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "POAccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PostingClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceClass": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceManager": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductManager": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchaseUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "ReasonCodeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentParameters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReplenishmentParameterStockItem"
              }
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostRevaluationAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostRevaluationSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SubItems": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubItemStockItem"
              }
            },
            "SubjectToCommission": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "UOMConversions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryItemUOMConversion"
              }
            },
            "UseOnEntry": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ValuationMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StockItemVendorDetail"
              }
            },
            "VolumeUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StockItemWarehouseDetail"
              }
            },
            "WeightUOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "StockItemVendorDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AddLeadTimeDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Default": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EOQ": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LastVendorPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "LeadTimeDays": {
              "$ref": "#/definitions/ShortValue"
            },
            "Location": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSize": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxOrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinOrderFrequencyInDays": {
              "$ref": "#/definitions/IntValue"
            },
            "MinOrderQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PurchaseUnit": {
              "$ref": "#/definitions/StringValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorName": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "StockItemWarehouseDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DailyDemandForecast": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DailyDemandForecastErrorSTDEV": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DefaultIssueLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "DefaultReceiptLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventorySubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "IsDefault": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastForecastDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Override": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverridePreferredVendor": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideReplenishmentSettings": {
              "$ref": "#/definitions/BooleanValue"
            },
            "OverrideStdCost": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PreferredVendor": {
              "$ref": "#/definitions/StringValue"
            },
            "PriceOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ProductManager": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "QtyOnHand": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReplenishmentSource": {
              "$ref": "#/definitions/StringValue"
            },
            "ReplenishmentWarehouse": {
              "$ref": "#/definitions/StringValue"
            },
            "Seasonality": {
              "$ref": "#/definitions/StringValue"
            },
            "ServiceLevel": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Subaccount": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Secured": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SubaccountCD": {
              "$ref": "#/definitions/StringValue"
            },
            "SubaccountID": {
              "$ref": "#/definitions/IntValue"
            }
          }
        }
      ]
    },
    "SubItemStockItem": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "SegmentID": {
              "$ref": "#/definitions/ShortValue"
            },
            "Value": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Task": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Body": {
              "$ref": "#/definitions/StringValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "CompletedAt": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CompletionPercentage": {
              "$ref": "#/definitions/IntValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Internal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "Parent": {
              "$ref": "#/definitions/GuidValue"
            },
            "ParentSummary": {
              "$ref": "#/definitions/StringValue"
            },
            "Priority": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedActivities": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskRelatedActivity"
              }
            },
            "RelatedEntityDescription": {
              "$ref": "#/definitions/StringValue"
            },
            "RelatedTasks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskRelatedTask"
              }
            },
            "Reminder": {
              "$ref": "#/definitions/ReminderDetail"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeActivity": {
              "$ref": "#/definitions/TaskTimeActivity"
            },
            "WorkgroupID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaskRelatedActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "Category": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedAt": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreatedBy": {
              "$ref": "#/definitions/StringValue"
            },
            "IsCompleteIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "NoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "Owner": {
              "$ref": "#/definitions/StringValue"
            },
            "PriorityIcon": {
              "$ref": "#/definitions/StringValue"
            },
            "RefNoteID": {
              "$ref": "#/definitions/GuidValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "Workgroup": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaskRelatedTask": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CompletedAt": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DueDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Subject": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaskTimeActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Tax": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CalculateOn": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscount": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DeductibleVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EnterFromTaxBill": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ExcludeFromTaxonTaxCalculation": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IncludeInVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IncludeInVATTaxableTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "NotValidAfter": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxAgency": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxClaimableAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxClaimableSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxPayableAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxPayableSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxSchedule": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxScheduleDetail"
              }
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            },
            "Zones": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxZoneDetail"
              }
            }
          }
        }
      ]
    },
    "TaxCategory": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxCategoryTaxDetail"
              }
            },
            "ExcludeListedTaxes": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxCategoryID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxCategoryTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CalculateOn": {
              "$ref": "#/definitions/StringValue"
            },
            "CashDiscount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "IncludeInVATExemptTotal": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "OrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "PendingVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "ReverseVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "StatisticalVAT": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxScheduleDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DeductibleTaxRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxTaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinTaxableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReportingGroup": {
              "$ref": "#/definitions/StringValue"
            },
            "RevisionID": {
              "$ref": "#/definitions/IntValue"
            },
            "StartDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRate": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "TaxZone": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApplicableTaxes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxZoneApplicableTaxDetail"
              }
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TaxZoneID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxZoneApplicableTaxDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TaxZoneDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DefaultTaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZoneID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TimeActivity": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "EarningType": {
              "$ref": "#/definitions/StringValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "Project": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTask": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Released": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "TrackTime": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "TimeAndMaterial": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AmountToInvoice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BilledAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "BilledQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "DeferralCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "MaxAvailableAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MaxLimitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OverLimitAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "QtyToInvoice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Retainage": {
              "$ref": "#/definitions/DecimalValue"
            },
            "RetainageAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "UnitPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TimeEntry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ApprovalStatus": {
              "$ref": "#/definitions/StringValue"
            },
            "Approver": {
              "$ref": "#/definitions/StringValue"
            },
            "Billable": {
              "$ref": "#/definitions/BooleanValue"
            },
            "BillableOvertime": {
              "$ref": "#/definitions/StringValue"
            },
            "BillableTime": {
              "$ref": "#/definitions/StringValue"
            },
            "CertifiedJob": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCode": {
              "$ref": "#/definitions/StringValue"
            },
            "CostRate": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "EarningType": {
              "$ref": "#/definitions/StringValue"
            },
            "Employee": {
              "$ref": "#/definitions/StringValue"
            },
            "ExternalRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "LaborItem": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Overtime": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            },
            "ProjectTaskID": {
              "$ref": "#/definitions/StringValue"
            },
            "Summary": {
              "$ref": "#/definitions/StringValue"
            },
            "Time": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "TimeEntryID": {
              "$ref": "#/definitions/GuidValue"
            },
            "TimeSpent": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocal": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Totals": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "DiscountTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Freight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCost": {
              "$ref": "#/definitions/DecimalValue"
            },
            "FreightCostIsuptodate": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FreightTaxCategory": {
              "$ref": "#/definitions/StringValue"
            },
            "LineTotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MiscTotalAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderVolume": {
              "$ref": "#/definitions/DecimalValue"
            },
            "OrderWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PackageWeight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "PremiumFreight": {
              "$ref": "#/definitions/DecimalValue"
            },
            "TaxTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnbilledAmount": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnbilledQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "UnpaidBalance": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "TransferOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransferOrderDetail"
              }
            },
            "ExternalRef": {
              "$ref": "#/definitions/StringValue"
            },
            "FromWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PostPeriod": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TotalQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ToWarehouseID": {
              "$ref": "#/definitions/StringValue"
            },
            "TransferType": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TransferOrderDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Allocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransferOrderDetailAllocation"
              }
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FromLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineNbr": {
              "$ref": "#/definitions/IntValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReasonCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            },
            "ToLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TransferOrderDetailAllocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "LotSerialNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Qty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "SplitLineNumber": {
              "$ref": "#/definitions/IntValue"
            },
            "Subitem": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TrialBalance": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BatchNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Branch": {
              "$ref": "#/definitions/StringValue"
            },
            "ControlTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CreditTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "DebitTotal": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TrialBalanceDetail"
              }
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ImportDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ImportNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Ledger": {
              "$ref": "#/definitions/StringValue"
            },
            "Period": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "TrialBalanceDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CurrencyYTDBalance": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "ImportedAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ImportedSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Line": {
              "$ref": "#/definitions/IntValue"
            },
            "MapNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "MappedAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "MappedSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Selected": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            },
            "YTDBalance": {
              "$ref": "#/definitions/DecimalValue"
            }
          }
        }
      ]
    },
    "UnionLocal": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "UnionLocalID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "UnitsOfMeasure": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "ConversionFactor": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "FromUOM": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MultiplyOrDivide": {
              "$ref": "#/definitions/StringValue"
            },
            "ToUOM": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Vendor": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AccountRef": {
              "$ref": "#/definitions/StringValue"
            },
            "APAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "APSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttributeDetail"
              }
            },
            "CashAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Contacts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomerContact"
              }
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "CurrencyRateType": {
              "$ref": "#/definitions/StringValue"
            },
            "EnableCurrencyOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "EnableRateOverride": {
              "$ref": "#/definitions/BooleanValue"
            },
            "F1099Box": {
              "$ref": "#/definitions/StringValue"
            },
            "F1099Vendor": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FATCA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "FOBPoint": {
              "$ref": "#/definitions/StringValue"
            },
            "ForeignEntity": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LandedCostVendor": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LeadTimedays": {
              "$ref": "#/definitions/ShortValue"
            },
            "LocationName": {
              "$ref": "#/definitions/StringValue"
            },
            "MainContact": {
              "$ref": "#/definitions/Contact"
            },
            "MaxReceipt": {
              "$ref": "#/definitions/DecimalValue"
            },
            "MinReceipt": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ParentAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentBy": {
              "$ref": "#/definitions/StringValue"
            },
            "PaymentInstructions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountPaymentInstructionDetail"
              }
            },
            "PaymentLeadTimedays": {
              "$ref": "#/definitions/ShortValue"
            },
            "PaymentMethod": {
              "$ref": "#/definitions/StringValue"
            },
            "PaySeparately": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PrintOrders": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReceiptAction": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceivingBranch": {
              "$ref": "#/definitions/StringValue"
            },
            "RemittanceAddressSameasMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RemittanceContact": {
              "$ref": "#/definitions/Contact"
            },
            "RemittanceContactSameasMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SendOrdersbyEmail": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippersContactSameasMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingAddressSameasMain": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ShippingContact": {
              "$ref": "#/definitions/Contact"
            },
            "ShippingTerms": {
              "$ref": "#/definitions/StringValue"
            },
            "ShipVia": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxCalculationMode": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxRegistrationID": {
              "$ref": "#/definitions/StringValue"
            },
            "TaxZone": {
              "$ref": "#/definitions/StringValue"
            },
            "Terms": {
              "$ref": "#/definitions/StringValue"
            },
            "ThresholdReceipt": {
              "$ref": "#/definitions/DecimalValue"
            },
            "VendorClass": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorID": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorIsLaborUnion": {
              "$ref": "#/definitions/BooleanValue"
            },
            "VendorIsTaxAgency": {
              "$ref": "#/definitions/BooleanValue"
            },
            "VendorName": {
              "$ref": "#/definitions/StringValue"
            },
            "Warehouse": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "VendorClass": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Attributes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BusinessAccountClassAttributeDetail"
              }
            },
            "ClassID": {
              "$ref": "#/definitions/StringValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      ]
    },
    "VendorPriceDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Price": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Promotional": {
              "$ref": "#/definitions/BooleanValue"
            },
            "RecordID": {
              "$ref": "#/definitions/IntValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorName": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "VendorPricesInquiry": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "ItemClass": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductManager": {
              "$ref": "#/definitions/StringValue"
            },
            "ProductWorkgroup": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorPriceDetails": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorPriceDetail"
              }
            }
          }
        }
      ]
    },
    "VendorPriceWorksheet": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "CreatedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "EffectiveDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "ExpirationDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "Hold": {
              "$ref": "#/definitions/BooleanValue"
            },
            "LastModifiedDateTime": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "OverwriteOverlappingPrices": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Promotional": {
              "$ref": "#/definitions/BooleanValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "Status": {
              "$ref": "#/definitions/StringValue"
            },
            "VendorSalesPrices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VendorPriceWorksheetDetail"
              }
            }
          }
        }
      ]
    },
    "VendorPriceWorksheetDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "BreakQty": {
              "$ref": "#/definitions/DecimalValue"
            },
            "CurrencyID": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryID": {
              "$ref": "#/definitions/StringValue"
            },
            "LineID": {
              "$ref": "#/definitions/IntValue"
            },
            "PendingPrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "SourcePrice": {
              "$ref": "#/definitions/DecimalValue"
            },
            "Tax": {
              "$ref": "#/definitions/StringValue"
            },
            "UOM": {
              "$ref": "#/definitions/StringValue"
            },
            "Vendor": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "VisibilitySettings": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "AP": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AR": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CA": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CRM": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Expenses": {
              "$ref": "#/definitions/BooleanValue"
            },
            "GL": {
              "$ref": "#/definitions/BooleanValue"
            },
            "IN": {
              "$ref": "#/definitions/BooleanValue"
            },
            "PO": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SO": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TimeEntries": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "VoucherEntryCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "Module": {
              "$ref": "#/definitions/StringValue"
            },
            "ModuleTransactionType": {
              "$ref": "#/definitions/StringValue"
            },
            "UniqueTransactionCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "Warehouse": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "COGSExpenseAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "COGSExpenseSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DiscountSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "DropShipLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightChargeAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "FreightChargeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventoryAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "InventorySubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LandedCostVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "LandedCostVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "Locations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WarehouseLocation"
              }
            },
            "MiscChargeAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "MiscChargeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "OverrideInventoryAccountSubaccount": {
              "$ref": "#/definitions/BooleanValue"
            },
            "POAccrualAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "POAccrualSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "PurchasePriceVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ReasonCodeSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ReceivingLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "RMALocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "SalesSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "ShippingLocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostRevaluationAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostRevaluationSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostVarianceAccount": {
              "$ref": "#/definitions/StringValue"
            },
            "StandardCostVarianceSubaccount": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "WarehouseLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "AssemblyAllowed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "LocationID": {
              "$ref": "#/definitions/StringValue"
            },
            "PickPriority": {
              "$ref": "#/definitions/ShortValue"
            },
            "ReceiptsAllowed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "SalesAllowed": {
              "$ref": "#/definitions/BooleanValue"
            },
            "TransfersAllowed": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      ]
    },
    "WorkClassCompensationCode": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "Active": {
              "$ref": "#/definitions/BooleanValue"
            },
            "CostCodeFrom": {
              "$ref": "#/definitions/StringValue"
            },
            "CostCodeTo": {
              "$ref": "#/definitions/StringValue"
            },
            "Description": {
              "$ref": "#/definitions/StringValue"
            },
            "WCCCode": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      ]
    },
    "CompleteActivity": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "LinkEntityToActivity": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Activity"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "RelatedEntity": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ReleaseAdjustment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Adjustment"
        }
      }
    },
    "ReleaseBill": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Bill"
        }
      }
    },
    "ReverseBill": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Bill"
        }
      }
    },
    "ConvertBusinessAccountToCustomer": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        }
      }
    },
    "ConvertBusinessAccountToVendor": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        }
      }
    },
    "MarkBusinessAccountAsValidated": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        }
      }
    },
    "ValidateBusinessAccountAddresses": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        }
      }
    },
    "ChangeBusinessAccountID": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "BusinessAccountID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CheckForBusinessAccountDuplicates": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/BusinessAccount"
        }
      }
    },
    "ReleaseCase": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Case"
        }
      }
    },
    "TakeCase": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Case"
        }
      }
    },
    "AssignCase": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Case"
        }
      }
    },
    "ReleaseCashSale": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CashSale"
        }
      }
    },
    "ReleaseChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "ApproveChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "RejectChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "EmailChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "ReverseChangeOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ChangeOrder"
        }
      }
    },
    "ReleaseCheck": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Check"
        }
      }
    },
    "CheckForContactDuplicates": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "ConvertContactToBusinessAccount": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "AccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BAccountID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CopyFromCompany": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "MarkContactAsValidated": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "ValidateContactAddress": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "CloseContactAsDuplicate": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "ChangeCostCodeID": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/CostCode"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "CostCodeID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "UpdateDiscounts": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Discount"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "Date": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      }
    },
    "SendEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateContactFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateEventFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateLeadFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateOpportunityFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateExpenseReceiptFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateCaseFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CreateTaskFromEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "RestoreDeletedEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "RestoreArchivedEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "ProcessEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "DownloadEmlFileEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "CancelSendingEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "ArchiveEmail": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        }
      }
    },
    "LinkEntityToEmail": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Email"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "RelatedEntity": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ProcessEmailProcessing": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EmailProcessing"
        }
      }
    },
    "ProcessAllEmailProcessing": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EmailProcessing"
        }
      }
    },
    "ChangeEmployeeID": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Employee"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "EmployeeID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "AcceptInvitationEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "CancelActivityEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "CompleteEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "CompleteAndFollowUpEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "ExportCardEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "RejectInvitationEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "InviteAllEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "InviteEvent": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        }
      }
    },
    "LinkEntityToEvent": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Event"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "RelatedEntity": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ApproveExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "RejectExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "SubmitExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "ReleaseExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "PutOnHoldExpenseClaim": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseClaim"
        }
      }
    },
    "SubmitExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "ApproveExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "RejectExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "PutOnHoldExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "ClaimExpenseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ExpenseReceipt"
        }
      }
    },
    "GeneratePeriods": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/FinancialPeriod"
        }
      }
    },
    "ReleaseInventoryReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/InventoryReceipt"
        }
      }
    },
    "ReleaseInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "ReverseInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "ReleaseJournalTransaction": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/JournalTransaction"
        }
      }
    },
    "ReleaseJournalVoucher": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/JournalVoucher"
        }
      }
    },
    "ReleaseKitAssembly": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/KitAssembly"
        }
      }
    },
    "CheckLeadForDuplicates": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        }
      }
    },
    "CloseLeadAsDuplicate": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        }
      }
    },
    "ConvertLeadToBAccount": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "AccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BAccountID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ConvertLeadToContact": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        }
      }
    },
    "ConvertLeadToOpportunity": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        }
      }
    },
    "ValidateLeadAddress": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        }
      }
    },
    "MarkLeadAsValidated": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Lead"
        }
      }
    },
    "ProcessManageFinancialPeriods": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ManageFinancialPeriods"
        }
      }
    },
    "ProcessAllManageFinancialPeriods": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ManageFinancialPeriods"
        }
      }
    },
    "UpdateStandardCostNonStockItem": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/NonStockItem"
        }
      }
    },
    "CreateAccountFromOpportunity": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Opportunity"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "AccountClass": {
              "$ref": "#/definitions/StringValue"
            },
            "AccountName": {
              "$ref": "#/definitions/StringValue"
            },
            "BAccountID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CreateContactFromOpportunity": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Opportunity"
        }
      }
    },
    "CreateOpportunityInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Opportunity"
        }
      }
    },
    "CreateOpportunitySalesOrder": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Opportunity"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "OrderType": {
              "$ref": "#/definitions/StringValue"
            },
            "RecalculatePricesandDiscounts": {
              "$ref": "#/definitions/BooleanValue"
            }
          }
        }
      }
    },
    "CaptureCreditCardPayment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        }
      }
    },
    "ReleasePayment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        }
      }
    },
    "VoidPayment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        }
      }
    },
    "PaymentLoadDocuments": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "EndRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "FromDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "LoadChildDocuments": {
              "$ref": "#/definitions/StringValue"
            },
            "MaxDocs": {
              "$ref": "#/definitions/IntValue"
            },
            "OrderBy": {
              "$ref": "#/definitions/StringValue"
            },
            "StartRefNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TillDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      }
    },
    "PaymentLoadOrders": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Payment"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "EndOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "FromDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "MaxDocs": {
              "$ref": "#/definitions/IntValue"
            },
            "SOOrderBy": {
              "$ref": "#/definitions/StringValue"
            },
            "StartOrderNbr": {
              "$ref": "#/definitions/StringValue"
            },
            "TillDate": {
              "$ref": "#/definitions/DateTimeValue"
            }
          }
        }
      }
    },
    "CancelPhysicalInventory": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PhysicalInventoryReview"
        }
      }
    },
    "CompletePhysicalInventory": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PhysicalInventoryReview"
        }
      }
    },
    "FinishCountingPhysicalInventory": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PhysicalInventoryReview"
        }
      }
    },
    "ReleaseProFormaInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "ApproveProFormaInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "RejectProFormaInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "EmailProFormaInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProFormaInvoice"
        }
      }
    },
    "RunProjectAllocation": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "ValidateProjectBalance": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "RunProjectBilling": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "ApproveProject": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "RejectProject": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "LockProjectBudget": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "UnlockProjectBudget": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "LockProjectCommitments": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "UnlockProjectCommitments": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "ChangeProjectID": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Project"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "ProjectID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "ProjectBillingProcess": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectBilling"
        }
      }
    },
    "ProjectBillingProcessAll": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectBilling"
        }
      }
    },
    "ReleaseTransactions": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/ProjectTransaction"
        }
      }
    },
    "EnterPOReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PurchaseOrder"
        }
      }
    },
    "EnterAPBill": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PurchaseOrder"
        }
      }
    },
    "ReleasePurchaseReceipt": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PurchaseReceipt"
        }
      }
    },
    "CreateAPBill": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/PurchaseReceipt"
        }
      }
    },
    "ReleaseSalesInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesInvoice"
        }
      }
    },
    "SalesInvoiceAddOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesInvoice"
        }
      }
    },
    "SalesInvoiceAutoApply": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesInvoice"
        }
      }
    },
    "CancelSalesOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "ReopenSalesOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "PrepareSalesInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "OpenSalesOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "ReleaseFromCreditHoldSalesOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "SalesOrderAddInvoice": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "DocumentType": {
              "$ref": "#/definitions/StringValue"
            },
            "ReferenceNbr": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "SalesOrderAddStockItem": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "BarCode": {
              "$ref": "#/definitions/StringValue"
            },
            "Inventory": {
              "$ref": "#/definitions/StringValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "SalesOrderCreatePurchaseOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "SalesOrderCreateReceipt": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "ShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "SalesOrderCreateShipment": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "ShipmentDate": {
              "$ref": "#/definitions/DateTimeValue"
            },
            "WarehouseID": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "AutoRecalculateDiscounts": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesOrder"
        }
      }
    },
    "ReleaseSalesPriceWorksheet": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/SalesPriceWorksheet"
        }
      }
    },
    "ConfirmShipment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Shipment"
        }
      }
    },
    "CorrectShipment": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Shipment"
        }
      }
    },
    "UpdateIN": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Shipment"
        }
      }
    },
    "PrepareInvoice": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Shipment"
        }
      }
    },
    "UpdateStandardCostStockItem": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/StockItem"
        }
      }
    },
    "CompleteTask": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Task"
        }
      }
    },
    "CompleteAndFollowUpTask": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Task"
        }
      }
    },
    "CancelActivityTask": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Task"
        }
      }
    },
    "LinkEntityToTask": {
      "required": [
        "entity",
        "parameters"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/Task"
        },
        "parameters": {
          "description": "The parameters of the action.",
          "type": "object",
          "properties": {
            "RelatedEntity": {
              "$ref": "#/definitions/StringValue"
            },
            "Type": {
              "$ref": "#/definitions/StringValue"
            }
          }
        }
      }
    },
    "CompleteTimeEntry": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TimeEntry"
        }
      }
    },
    "OpenTimeEntry": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TimeEntry"
        }
      }
    },
    "ReleaseTransferOrder": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TransferOrder"
        }
      }
    },
    "TrialBalanceProcess": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TrialBalance"
        }
      }
    },
    "TrialBalanceProcessAll": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TrialBalance"
        }
      }
    },
    "ReleaseTrialBalance": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/TrialBalance"
        }
      }
    },
    "ReleaseVendorPriceWorksheet": {
      "required": [
        "entity"
      ],
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/VendorPriceWorksheet"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Account",
      "description": "Chart of Accounts (GL202500)"
    },
    {
      "name": "AccountByPeriodInquiry",
      "description": "Account by Period (GL402000)"
    },
    {
      "name": "AccountBySubaccountInquiry",
      "description": "Account by Subaccount (GL403000)"
    },
    {
      "name": "AccountDetailsInquiry",
      "description": "Account Details (GL404000)"
    },
    {
      "name": "AccountGroup",
      "description": "Account Groups (PM201000)"
    },
    {
      "name": "AccountLocation",
      "description": "Account Locations (CR303010)"
    },
    {
      "name": "AccountSummaryInquiry",
      "description": "Account Summary (GL401000)"
    },
    {
      "name": "Activity",
      "description": "Activity (CR306010)"
    },
    {
      "name": "Adjustment",
      "description": "Adjustments (IN303000)"
    },
    {
      "name": "AllocationRule",
      "description": "Allocation Rules (PM207500)"
    },
    {
      "name": "AttributeDefinition",
      "description": "Attributes (CS205000)"
    },
    {
      "name": "Bill",
      "description": "Bills and Adjustments (AP301000)"
    },
    {
      "name": "BusinessAccount",
      "description": "Business Accounts (CR303000)"
    },
    {
      "name": "Carrier",
      "description": "Carriers (CS207700)"
    },
    {
      "name": "Case",
      "description": "Cases (CR306000)"
    },
    {
      "name": "CashSale",
      "description": "Cash Sales (AR304000)"
    },
    {
      "name": "ChangeOrder",
      "description": "Change Orders (PM308000)"
    },
    {
      "name": "ChangeOrderClass",
      "description": "Change Order Classes (PM203000)"
    },
    {
      "name": "Check",
      "description": "Checks and Payments (AP302000)"
    },
    {
      "name": "CommonTask",
      "description": "Common Tasks (PM208030)"
    },
    {
      "name": "CompanyFinancialPeriod",
      "description": "(GL201100)"
    },
    {
      "name": "Contact",
      "description": "Contacts (CR302000)"
    },
    {
      "name": "ContractUsage",
      "description": "Contract Usage (CT303000)"
    },
    {
      "name": "CostCode",
      "description": "Cost Codes (PM209500)"
    },
    {
      "name": "Currency",
      "description": "Currencies (CM202000)"
    },
    {
      "name": "Customer",
      "description": "Customers (AR303000)"
    },
    {
      "name": "CustomerClass",
      "description": "Customer Classes (AR201000)"
    },
    {
      "name": "CustomerLocation",
      "description": "Customer Locations (AR303020)"
    },
    {
      "name": "CustomerPaymentMethod",
      "description": "Customer Payment Methods (AR303010)"
    },
    {
      "name": "CustomerPriceClass",
      "description": "Customer Price Classes (AR208000)"
    },
    {
      "name": "Discount",
      "description": "Discounts (AR209500)"
    },
    {
      "name": "DiscountCode",
      "description": "Discount Codes (AR209000)"
    },
    {
      "name": "Email",
      "description": "Email Activity (CR306015)"
    },
    {
      "name": "EmailProcessing",
      "description": "Emails Pending Processing (SM507000)"
    },
    {
      "name": "Employee",
      "description": "Employees (EP203000)"
    },
    {
      "name": "Event",
      "description": "Event (CR306030)"
    },
    {
      "name": "ExpenseClaim",
      "description": "Expense Claim (EP301000)"
    },
    {
      "name": "ExpenseReceipt",
      "description": "Expense Receipt (EP301020)"
    },
    {
      "name": "ExternalCommitment",
      "description": "External Commitments (PM209000)"
    },
    {
      "name": "FinancialPeriod",
      "description": "Master Financial Calendar (GL201000)"
    },
    {
      "name": "FinancialYear",
      "description": "Financial Year (GL101000)"
    },
    {
      "name": "FOBPoint",
      "description": "FOB Points (CS208500)"
    },
    {
      "name": "InterBranchAccountMapping",
      "description": "Inter-Branch Account Mapping (GL101010)"
    },
    {
      "name": "InventoryAllocationInquiry",
      "description": "Inventory Allocation Details (IN402000)"
    },
    {
      "name": "InventoryReceipt",
      "description": "Receipts (IN301000)"
    },
    {
      "name": "InventorySummaryInquiry",
      "description": "Inventory Summary (IN401000)"
    },
    {
      "name": "Invoice",
      "description": "Invoices and Memos (AR301000)"
    },
    {
      "name": "ItemClass",
      "description": "Item Classes (IN201000)"
    },
    {
      "name": "ItemSalesCategory",
      "description": "Item Sales Categories (IN204060)"
    },
    {
      "name": "ItemWarehouse",
      "description": "Item Warehouse  Details (IN204500)"
    },
    {
      "name": "JournalTransaction",
      "description": "Journal Transactions (GL301000)"
    },
    {
      "name": "JournalVoucher",
      "description": "Journal Vouchers (GL304000)"
    },
    {
      "name": "KitAssembly",
      "description": "Kit Assembly (IN307000)"
    },
    {
      "name": "KitSpecification",
      "description": "Kit Specifications (IN209500)"
    },
    {
      "name": "LaborCostRate",
      "description": "Labor Cost Rates (PM209900)"
    },
    {
      "name": "Lead",
      "description": "Leads (CR301000)"
    },
    {
      "name": "LotSerialClass",
      "description": "Lot/Serial Classes (IN207000)"
    },
    {
      "name": "ManageFinancialPeriods",
      "description": "Manage Financial Periods (GL503000)"
    },
    {
      "name": "NonStockItem",
      "description": "Non-Stock Items (IN202000)"
    },
    {
      "name": "Opportunity",
      "description": "Opportunities (CR304000)"
    },
    {
      "name": "Payment",
      "description": "Payments and Applications (AR302000)"
    },
    {
      "name": "PaymentMethod",
      "description": "Payment Methods (CA204000)"
    },
    {
      "name": "PhysicalInventoryCount",
      "description": "Physical Inventory Count (IN305010)"
    },
    {
      "name": "PhysicalInventoryReview",
      "description": "Physical Inventory Review (IN305000)"
    },
    {
      "name": "ProFormaInvoice",
      "description": "Pro Forma Invoices (PM307000)"
    },
    {
      "name": "Project",
      "description": "Projects (PM301000)"
    },
    {
      "name": "ProjectBilling",
      "description": "Run Project Billing (PM503000)"
    },
    {
      "name": "ProjectBillingRules",
      "description": "Billing Rules (PM207000)"
    },
    {
      "name": "ProjectBudget",
      "description": "Project Budget (PM309000)"
    },
    {
      "name": "ProjectTask",
      "description": "Project Tasks (PM302000)"
    },
    {
      "name": "ProjectTemplate",
      "description": "Project Templates (PM208000)"
    },
    {
      "name": "ProjectTemplateTask",
      "description": "Project Template Tasks (PM208010)"
    },
    {
      "name": "ProjectTransaction",
      "description": "Project Transactions (PM304000)"
    },
    {
      "name": "PurchaseOrder",
      "description": "Purchase Orders (PO301000)"
    },
    {
      "name": "PurchaseReceipt",
      "description": "Purchase Receipts (PO302000)"
    },
    {
      "name": "ReportingSettings",
      "description": "Reporting Settings (TX205100)"
    },
    {
      "name": "SalesInvoice",
      "description": "Invoices (SO303000)"
    },
    {
      "name": "SalesOrder",
      "description": "Sales Orders (SO301000)"
    },
    {
      "name": "Salesperson",
      "description": "Salespersons (AR205000)"
    },
    {
      "name": "SalesPricesInquiry",
      "description": "Sales Prices (AR202000)"
    },
    {
      "name": "SalesPriceWorksheet",
      "description": "Sales Price Worksheets (AR202010)"
    },
    {
      "name": "Shipment",
      "description": "Shipments (SO302000)"
    },
    {
      "name": "ShippingBox",
      "description": "Boxes (CS207600)"
    },
    {
      "name": "ShippingTerm",
      "description": "Shipping Terms (CS208000)"
    },
    {
      "name": "ShippingZones",
      "description": "Shipping Zones (CS207510)"
    },
    {
      "name": "ShipVia",
      "description": "Ship via Codes (CS207500)"
    },
    {
      "name": "StatementCycle",
      "description": "Statement Cycles (AR202800)"
    },
    {
      "name": "StockItem",
      "description": "Stock Items (IN202500)"
    },
    {
      "name": "Subaccount",
      "description": "Subaccounts (GL203000)"
    },
    {
      "name": "Task",
      "description": "Task (CR306020)"
    },
    {
      "name": "Tax",
      "description": "Taxes (TX205000)"
    },
    {
      "name": "TaxCategory",
      "description": "Tax Categories (TX205500)"
    },
    {
      "name": "TaxZone",
      "description": "Tax Zones (TX206000)"
    },
    {
      "name": "TimeEntry",
      "description": "Time Entry (PM209100)"
    },
    {
      "name": "TransferOrder",
      "description": "Transfers (IN304000)"
    },
    {
      "name": "TrialBalance",
      "description": "Trial Balance (GL303010)"
    },
    {
      "name": "UnionLocal",
      "description": "Union Locals (PM209700)"
    },
    {
      "name": "UnitsOfMeasure",
      "description": "Units of Measure (CS203100)"
    },
    {
      "name": "Vendor",
      "description": "Vendors (AP303000)"
    },
    {
      "name": "VendorClass",
      "description": "Vendor Classes (AP201000)"
    },
    {
      "name": "VendorPricesInquiry",
      "description": "Vendor Prices (AP202000)"
    },
    {
      "name": "VendorPriceWorksheet",
      "description": "Vendor Price Worksheets (AP202010)"
    },
    {
      "name": "VoucherEntryCode",
      "description": "Voucher Entry Codes (GL106000)"
    },
    {
      "name": "Warehouse",
      "description": "Warehouses (IN204000)"
    },
    {
      "name": "WorkClassCompensationCode",
      "description": "Work Class Compensation Codes (PM209800)"
    }
  ]
}