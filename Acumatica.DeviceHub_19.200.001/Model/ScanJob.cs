/* 
 * DeviceHub/19.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using Acumatica.RESTClient.Model;

namespace Acumatica.DeviceHub_19_200_001.Model
{
    /// <summary>
    /// ScanJob
    /// </summary>
    [DataContract]
    public partial class ScanJob : Entity,  IEquatable<ScanJob>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScanJob" /> class.
        /// </summary>
        /// <param name="error">error.</param>
        /// <param name="errorTrace">errorTrace.</param>
        /// <param name="scanJobID">scanJobID.</param>
        /// <param name="deviceHub">deviceHub.</param>
        /// <param name="scanner">scanner.</param>
        /// <param name="status">status.</param>
        public ScanJob(StringValue error = default(StringValue), StringValue errorTrace = default(StringValue), IntValue scanJobID = default(IntValue), StringValue deviceHub = default(StringValue), StringValue scanner = default(StringValue), StringValue status = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Error = error;
            this.ErrorTrace = errorTrace;
            this.ScanJobID = scanJobID;
            this.DeviceHub = deviceHub;
            this.Scanner = scanner;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="Error", EmitDefaultValue=false)]
        public StringValue Error { get; set; }

        /// <summary>
        /// Gets or Sets ErrorTrace
        /// </summary>
        [DataMember(Name="ErrorTrace", EmitDefaultValue=false)]
        public StringValue ErrorTrace { get; set; }

        /// <summary>
        /// Gets or Sets ScanJobID
        /// </summary>
        [DataMember(Name="ScanJobID", EmitDefaultValue=false)]
        public IntValue ScanJobID { get; set; }

        /// <summary>
        /// Gets or Sets DeviceHub
        /// </summary>
        [DataMember(Name="DeviceHub", EmitDefaultValue=false)]
        public StringValue DeviceHub { get; set; }

        /// <summary>
        /// Gets or Sets Scanner
        /// </summary>
        [DataMember(Name="Scanner", EmitDefaultValue=false)]
        public StringValue Scanner { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScanJob {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ErrorTrace: ").Append(ErrorTrace).Append("\n");
            sb.Append("  ScanJobID: ").Append(ScanJobID).Append("\n");
            sb.Append("  DeviceHub: ").Append(DeviceHub).Append("\n");
            sb.Append("  Scanner: ").Append(Scanner).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScanJob);
        }

        /// <summary>
        /// Returns true if ScanJob instances are equal
        /// </summary>
        /// <param name="input">Instance of ScanJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScanJob input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && base.Equals(input) && 
                (
                    this.ErrorTrace == input.ErrorTrace ||
                    (this.ErrorTrace != null &&
                    this.ErrorTrace.Equals(input.ErrorTrace))
                ) && base.Equals(input) && 
                (
                    this.ScanJobID == input.ScanJobID ||
                    (this.ScanJobID != null &&
                    this.ScanJobID.Equals(input.ScanJobID))
                ) && base.Equals(input) && 
                (
                    this.DeviceHub == input.DeviceHub ||
                    (this.DeviceHub != null &&
                    this.DeviceHub.Equals(input.DeviceHub))
                ) && base.Equals(input) && 
                (
                    this.Scanner == input.Scanner ||
                    (this.Scanner != null &&
                    this.Scanner.Equals(input.Scanner))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.ErrorTrace != null)
                    hashCode = hashCode * 59 + this.ErrorTrace.GetHashCode();
                if (this.ScanJobID != null)
                    hashCode = hashCode * 59 + this.ScanJobID.GetHashCode();
                if (this.DeviceHub != null)
                    hashCode = hashCode * 59 + this.DeviceHub.GetHashCode();
                if (this.Scanner != null)
                    hashCode = hashCode * 59 + this.Scanner.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
