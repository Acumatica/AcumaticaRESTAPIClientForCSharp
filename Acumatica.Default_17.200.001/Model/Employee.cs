/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// Employee
    /// </summary>
    [DataContract]
    public partial class Employee : Entity,  IEquatable<Employee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee" /> class.
        /// </summary>
        /// <param name="branchID">branchID.</param>
        /// <param name="contact">contact.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="departmentID">departmentID.</param>
        /// <param name="employeeClassID">employeeClassID.</param>
        /// <param name="employeeCost">employeeCost.</param>
        /// <param name="employeeID">employeeID.</param>
        /// <param name="employmentHistory">employmentHistory.</param>
        /// <param name="name">name.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="reportsToID">reportsToID.</param>
        /// <param name="status">status.</param>
        public Employee(StringValue branchID = default(StringValue), Contact contact = default(Contact), StringValue currencyID = default(StringValue), DateTimeValue dateOfBirth = default(DateTimeValue), StringValue departmentID = default(StringValue), StringValue employeeClassID = default(StringValue), List<EmployeeCostRecord> employeeCost = default(List<EmployeeCostRecord>), StringValue employeeID = default(StringValue), List<EmploymentHistoryRecord> employmentHistory = default(List<EmploymentHistoryRecord>), StringValue name = default(StringValue), StringValue paymentMethod = default(StringValue), StringValue reportsToID = default(StringValue), StringValue status = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BranchID = branchID;
            this.Contact = contact;
            this.CurrencyID = currencyID;
            this.DateOfBirth = dateOfBirth;
            this.DepartmentID = departmentID;
            this.EmployeeClassID = employeeClassID;
            this.EmployeeCost = employeeCost;
            this.EmployeeID = employeeID;
            this.EmploymentHistory = employmentHistory;
            this.Name = name;
            this.PaymentMethod = paymentMethod;
            this.ReportsToID = reportsToID;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets BranchID
        /// </summary>
        [DataMember(Name="BranchID", EmitDefaultValue=false)]
        public StringValue BranchID { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="Contact", EmitDefaultValue=false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="DateOfBirth", EmitDefaultValue=false)]
        public DateTimeValue DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentID
        /// </summary>
        [DataMember(Name="DepartmentID", EmitDefaultValue=false)]
        public StringValue DepartmentID { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeClassID
        /// </summary>
        [DataMember(Name="EmployeeClassID", EmitDefaultValue=false)]
        public StringValue EmployeeClassID { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeCost
        /// </summary>
        [DataMember(Name="EmployeeCost", EmitDefaultValue=false)]
        public List<EmployeeCostRecord> EmployeeCost { get; set; }

        /// <summary>
        /// Gets or Sets EmployeeID
        /// </summary>
        [DataMember(Name="EmployeeID", EmitDefaultValue=false)]
        public StringValue EmployeeID { get; set; }

        /// <summary>
        /// Gets or Sets EmploymentHistory
        /// </summary>
        [DataMember(Name="EmploymentHistory", EmitDefaultValue=false)]
        public List<EmploymentHistoryRecord> EmploymentHistory { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public StringValue Name { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public StringValue PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets ReportsToID
        /// </summary>
        [DataMember(Name="ReportsToID", EmitDefaultValue=false)]
        public StringValue ReportsToID { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Employee {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BranchID: ").Append(BranchID).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DepartmentID: ").Append(DepartmentID).Append("\n");
            sb.Append("  EmployeeClassID: ").Append(EmployeeClassID).Append("\n");
            sb.Append("  EmployeeCost: ").Append(EmployeeCost).Append("\n");
            sb.Append("  EmployeeID: ").Append(EmployeeID).Append("\n");
            sb.Append("  EmploymentHistory: ").Append(EmploymentHistory).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  ReportsToID: ").Append(ReportsToID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Employee);
        }

        /// <summary>
        /// Returns true if Employee instances are equal
        /// </summary>
        /// <param name="input">Instance of Employee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Employee input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BranchID == input.BranchID ||
                    (this.BranchID != null &&
                    this.BranchID.Equals(input.BranchID))
                ) && base.Equals(input) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && base.Equals(input) && 
                (
                    this.DepartmentID == input.DepartmentID ||
                    (this.DepartmentID != null &&
                    this.DepartmentID.Equals(input.DepartmentID))
                ) && base.Equals(input) && 
                (
                    this.EmployeeClassID == input.EmployeeClassID ||
                    (this.EmployeeClassID != null &&
                    this.EmployeeClassID.Equals(input.EmployeeClassID))
                ) && base.Equals(input) && 
                (
                    this.EmployeeCost == input.EmployeeCost ||
                    this.EmployeeCost != null &&
                    this.EmployeeCost.SequenceEqual(input.EmployeeCost)
                ) && base.Equals(input) && 
                (
                    this.EmployeeID == input.EmployeeID ||
                    (this.EmployeeID != null &&
                    this.EmployeeID.Equals(input.EmployeeID))
                ) && base.Equals(input) && 
                (
                    this.EmploymentHistory == input.EmploymentHistory ||
                    this.EmploymentHistory != null &&
                    this.EmploymentHistory.SequenceEqual(input.EmploymentHistory)
                ) && base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && base.Equals(input) && 
                (
                    this.ReportsToID == input.ReportsToID ||
                    (this.ReportsToID != null &&
                    this.ReportsToID.Equals(input.ReportsToID))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BranchID != null)
                    hashCode = hashCode * 59 + this.BranchID.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.DepartmentID != null)
                    hashCode = hashCode * 59 + this.DepartmentID.GetHashCode();
                if (this.EmployeeClassID != null)
                    hashCode = hashCode * 59 + this.EmployeeClassID.GetHashCode();
                if (this.EmployeeCost != null)
                    hashCode = hashCode * 59 + this.EmployeeCost.GetHashCode();
                if (this.EmployeeID != null)
                    hashCode = hashCode * 59 + this.EmployeeID.GetHashCode();
                if (this.EmploymentHistory != null)
                    hashCode = hashCode * 59 + this.EmploymentHistory.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.ReportsToID != null)
                    hashCode = hashCode * 59 + this.ReportsToID.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
