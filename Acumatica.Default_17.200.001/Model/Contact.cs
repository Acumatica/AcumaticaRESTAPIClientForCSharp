/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// Contact
    /// </summary>
    [DataContract]
    public partial class Contact : Entity,  IEquatable<Contact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="activities">activities.</param>
        /// <param name="address">address.</param>
        /// <param name="addressIsSameAsInAccount">addressIsSameAsInAccount.</param>
        /// <param name="addressValidated">addressValidated.</param>
        /// <param name="attention">attention.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="businessAccount">businessAccount.</param>
        /// <param name="campaigns">campaigns.</param>
        /// <param name="cases">cases.</param>
        /// <param name="companyName">companyName.</param>
        /// <param name="contactClass">contactClass.</param>
        /// <param name="contactID">contactID.</param>
        /// <param name="contactMethod">contactMethod.</param>
        /// <param name="convertedBy">convertedBy.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="doNotCall">doNotCall.</param>
        /// <param name="doNotEmail">doNotEmail.</param>
        /// <param name="doNotFax">doNotFax.</param>
        /// <param name="doNotMail">doNotMail.</param>
        /// <param name="duplicate">duplicate.</param>
        /// <param name="duplicateFound">duplicateFound.</param>
        /// <param name="duplicates">duplicates.</param>
        /// <param name="email">email.</param>
        /// <param name="fax">fax.</param>
        /// <param name="faxType">faxType.</param>
        /// <param name="firstName">firstName.</param>
        /// <param name="gender">gender.</param>
        /// <param name="image">image.</param>
        /// <param name="jobTitle">jobTitle.</param>
        /// <param name="languageOrLocale">languageOrLocale.</param>
        /// <param name="lastIncomingActivity">lastIncomingActivity.</param>
        /// <param name="lastName">lastName.</param>
        /// <param name="lastOutgoingActivity">lastOutgoingActivity.</param>
        /// <param name="maritalStatus">maritalStatus.</param>
        /// <param name="marketingLists">marketingLists.</param>
        /// <param name="middleName">middleName.</param>
        /// <param name="noMarketing">noMarketing.</param>
        /// <param name="noMassMail">noMassMail.</param>
        /// <param name="notifications">notifications.</param>
        /// <param name="opportunities">opportunities.</param>
        /// <param name="owner">owner.</param>
        /// <param name="ownerEmployeeName">ownerEmployeeName.</param>
        /// <param name="parentAccount">parentAccount.</param>
        /// <param name="phone1">phone1.</param>
        /// <param name="phone1Type">phone1Type.</param>
        /// <param name="phone2">phone2.</param>
        /// <param name="phone2Type">phone2Type.</param>
        /// <param name="phone3">phone3.</param>
        /// <param name="phone3Type">phone3Type.</param>
        /// <param name="qualificationDate">qualificationDate.</param>
        /// <param name="reason">reason.</param>
        /// <param name="relations">relations.</param>
        /// <param name="source">source.</param>
        /// <param name="sourceCampaign">sourceCampaign.</param>
        /// <param name="spouseOrPartnerName">spouseOrPartnerName.</param>
        /// <param name="status">status.</param>
        /// <param name="synchronize">synchronize.</param>
        /// <param name="title">title.</param>
        /// <param name="type">type.</param>
        /// <param name="userInfo">userInfo.</param>
        /// <param name="webSite">webSite.</param>
        /// <param name="workgroup">workgroup.</param>
        /// <param name="workgroupDescription">workgroupDescription.</param>
        public Contact(BooleanValue active = default(BooleanValue), List<ActivityDetail> activities = default(List<ActivityDetail>), Address address = default(Address), BooleanValue addressIsSameAsInAccount = default(BooleanValue), BooleanValue addressValidated = default(BooleanValue), StringValue attention = default(StringValue), List<AttributeDetail> attributes = default(List<AttributeDetail>), StringValue businessAccount = default(StringValue), List<CampaignDetail> campaigns = default(List<CampaignDetail>), List<CaseDetail> cases = default(List<CaseDetail>), StringValue companyName = default(StringValue), StringValue contactClass = default(StringValue), IntValue contactID = default(IntValue), StringValue contactMethod = default(StringValue), StringValue convertedBy = default(StringValue), DateTimeValue dateOfBirth = default(DateTimeValue), StringValue displayName = default(StringValue), BooleanValue doNotCall = default(BooleanValue), BooleanValue doNotEmail = default(BooleanValue), BooleanValue doNotFax = default(BooleanValue), BooleanValue doNotMail = default(BooleanValue), StringValue duplicate = default(StringValue), BooleanValue duplicateFound = default(BooleanValue), List<ContactDuplicateDetail> duplicates = default(List<ContactDuplicateDetail>), StringValue email = default(StringValue), StringValue fax = default(StringValue), StringValue faxType = default(StringValue), StringValue firstName = default(StringValue), StringValue gender = default(StringValue), StringValue image = default(StringValue), StringValue jobTitle = default(StringValue), StringValue languageOrLocale = default(StringValue), DateTimeValue lastIncomingActivity = default(DateTimeValue), StringValue lastName = default(StringValue), DateTimeValue lastOutgoingActivity = default(DateTimeValue), StringValue maritalStatus = default(StringValue), List<MarketingListDetail> marketingLists = default(List<MarketingListDetail>), StringValue middleName = default(StringValue), BooleanValue noMarketing = default(BooleanValue), BooleanValue noMassMail = default(BooleanValue), List<ContactNotification> notifications = default(List<ContactNotification>), List<OpportunityDetail> opportunities = default(List<OpportunityDetail>), StringValue owner = default(StringValue), StringValue ownerEmployeeName = default(StringValue), StringValue parentAccount = default(StringValue), StringValue phone1 = default(StringValue), StringValue phone1Type = default(StringValue), StringValue phone2 = default(StringValue), StringValue phone2Type = default(StringValue), StringValue phone3 = default(StringValue), StringValue phone3Type = default(StringValue), DateTimeValue qualificationDate = default(DateTimeValue), StringValue reason = default(StringValue), List<RelationDetail> relations = default(List<RelationDetail>), StringValue source = default(StringValue), StringValue sourceCampaign = default(StringValue), StringValue spouseOrPartnerName = default(StringValue), StringValue status = default(StringValue), BooleanValue synchronize = default(BooleanValue), StringValue title = default(StringValue), StringValue type = default(StringValue), ContactUserInfo userInfo = default(ContactUserInfo), StringValue webSite = default(StringValue), StringValue workgroup = default(StringValue), StringValue workgroupDescription = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Active = active;
            this.Activities = activities;
            this.Address = address;
            this.AddressIsSameAsInAccount = addressIsSameAsInAccount;
            this.AddressValidated = addressValidated;
            this.Attention = attention;
            this.Attributes = attributes;
            this.BusinessAccount = businessAccount;
            this.Campaigns = campaigns;
            this.Cases = cases;
            this.CompanyName = companyName;
            this.ContactClass = contactClass;
            this.ContactID = contactID;
            this.ContactMethod = contactMethod;
            this.ConvertedBy = convertedBy;
            this.DateOfBirth = dateOfBirth;
            this.DisplayName = displayName;
            this.DoNotCall = doNotCall;
            this.DoNotEmail = doNotEmail;
            this.DoNotFax = doNotFax;
            this.DoNotMail = doNotMail;
            this.Duplicate = duplicate;
            this.DuplicateFound = duplicateFound;
            this.Duplicates = duplicates;
            this.Email = email;
            this.Fax = fax;
            this.FaxType = faxType;
            this.FirstName = firstName;
            this.Gender = gender;
            this.Image = image;
            this.JobTitle = jobTitle;
            this.LanguageOrLocale = languageOrLocale;
            this.LastIncomingActivity = lastIncomingActivity;
            this.LastName = lastName;
            this.LastOutgoingActivity = lastOutgoingActivity;
            this.MaritalStatus = maritalStatus;
            this.MarketingLists = marketingLists;
            this.MiddleName = middleName;
            this.NoMarketing = noMarketing;
            this.NoMassMail = noMassMail;
            this.Notifications = notifications;
            this.Opportunities = opportunities;
            this.Owner = owner;
            this.OwnerEmployeeName = ownerEmployeeName;
            this.ParentAccount = parentAccount;
            this.Phone1 = phone1;
            this.Phone1Type = phone1Type;
            this.Phone2 = phone2;
            this.Phone2Type = phone2Type;
            this.Phone3 = phone3;
            this.Phone3Type = phone3Type;
            this.QualificationDate = qualificationDate;
            this.Reason = reason;
            this.Relations = relations;
            this.Source = source;
            this.SourceCampaign = sourceCampaign;
            this.SpouseOrPartnerName = spouseOrPartnerName;
            this.Status = status;
            this.Synchronize = synchronize;
            this.Title = title;
            this.Type = type;
            this.UserInfo = userInfo;
            this.WebSite = webSite;
            this.Workgroup = workgroup;
            this.WorkgroupDescription = workgroupDescription;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public BooleanValue Active { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [DataMember(Name="Activities", EmitDefaultValue=false)]
        public List<ActivityDetail> Activities { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets AddressIsSameAsInAccount
        /// </summary>
        [DataMember(Name="AddressIsSameAsInAccount", EmitDefaultValue=false)]
        public BooleanValue AddressIsSameAsInAccount { get; set; }

        /// <summary>
        /// Gets or Sets AddressValidated
        /// </summary>
        [DataMember(Name="AddressValidated", EmitDefaultValue=false)]
        public BooleanValue AddressValidated { get; set; }

        /// <summary>
        /// Gets or Sets Attention
        /// </summary>
        [DataMember(Name="Attention", EmitDefaultValue=false)]
        public StringValue Attention { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<AttributeDetail> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets BusinessAccount
        /// </summary>
        [DataMember(Name="BusinessAccount", EmitDefaultValue=false)]
        public StringValue BusinessAccount { get; set; }

        /// <summary>
        /// Gets or Sets Campaigns
        /// </summary>
        [DataMember(Name="Campaigns", EmitDefaultValue=false)]
        public List<CampaignDetail> Campaigns { get; set; }

        /// <summary>
        /// Gets or Sets Cases
        /// </summary>
        [DataMember(Name="Cases", EmitDefaultValue=false)]
        public List<CaseDetail> Cases { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name="CompanyName", EmitDefaultValue=false)]
        public StringValue CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets ContactClass
        /// </summary>
        [DataMember(Name="ContactClass", EmitDefaultValue=false)]
        public StringValue ContactClass { get; set; }

        /// <summary>
        /// Gets or Sets ContactID
        /// </summary>
        [DataMember(Name="ContactID", EmitDefaultValue=false)]
        public IntValue ContactID { get; set; }

        /// <summary>
        /// Gets or Sets ContactMethod
        /// </summary>
        [DataMember(Name="ContactMethod", EmitDefaultValue=false)]
        public StringValue ContactMethod { get; set; }

        /// <summary>
        /// Gets or Sets ConvertedBy
        /// </summary>
        [DataMember(Name="ConvertedBy", EmitDefaultValue=false)]
        public StringValue ConvertedBy { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="DateOfBirth", EmitDefaultValue=false)]
        public DateTimeValue DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="DisplayName", EmitDefaultValue=false)]
        public StringValue DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DoNotCall
        /// </summary>
        [DataMember(Name="DoNotCall", EmitDefaultValue=false)]
        public BooleanValue DoNotCall { get; set; }

        /// <summary>
        /// Gets or Sets DoNotEmail
        /// </summary>
        [DataMember(Name="DoNotEmail", EmitDefaultValue=false)]
        public BooleanValue DoNotEmail { get; set; }

        /// <summary>
        /// Gets or Sets DoNotFax
        /// </summary>
        [DataMember(Name="DoNotFax", EmitDefaultValue=false)]
        public BooleanValue DoNotFax { get; set; }

        /// <summary>
        /// Gets or Sets DoNotMail
        /// </summary>
        [DataMember(Name="DoNotMail", EmitDefaultValue=false)]
        public BooleanValue DoNotMail { get; set; }

        /// <summary>
        /// Gets or Sets Duplicate
        /// </summary>
        [DataMember(Name="Duplicate", EmitDefaultValue=false)]
        public StringValue Duplicate { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateFound
        /// </summary>
        [DataMember(Name="DuplicateFound", EmitDefaultValue=false)]
        public BooleanValue DuplicateFound { get; set; }

        /// <summary>
        /// Gets or Sets Duplicates
        /// </summary>
        [DataMember(Name="Duplicates", EmitDefaultValue=false)]
        public List<ContactDuplicateDetail> Duplicates { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public StringValue Email { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="Fax", EmitDefaultValue=false)]
        public StringValue Fax { get; set; }

        /// <summary>
        /// Gets or Sets FaxType
        /// </summary>
        [DataMember(Name="FaxType", EmitDefaultValue=false)]
        public StringValue FaxType { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="FirstName", EmitDefaultValue=false)]
        public StringValue FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="Gender", EmitDefaultValue=false)]
        public StringValue Gender { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public StringValue Image { get; set; }

        /// <summary>
        /// Gets or Sets JobTitle
        /// </summary>
        [DataMember(Name="JobTitle", EmitDefaultValue=false)]
        public StringValue JobTitle { get; set; }

        /// <summary>
        /// Gets or Sets LanguageOrLocale
        /// </summary>
        [DataMember(Name="LanguageOrLocale", EmitDefaultValue=false)]
        public StringValue LanguageOrLocale { get; set; }

        /// <summary>
        /// Gets or Sets LastIncomingActivity
        /// </summary>
        [DataMember(Name="LastIncomingActivity", EmitDefaultValue=false)]
        public DateTimeValue LastIncomingActivity { get; set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="LastName", EmitDefaultValue=false)]
        public StringValue LastName { get; set; }

        /// <summary>
        /// Gets or Sets LastOutgoingActivity
        /// </summary>
        [DataMember(Name="LastOutgoingActivity", EmitDefaultValue=false)]
        public DateTimeValue LastOutgoingActivity { get; set; }

        /// <summary>
        /// Gets or Sets MaritalStatus
        /// </summary>
        [DataMember(Name="MaritalStatus", EmitDefaultValue=false)]
        public StringValue MaritalStatus { get; set; }

        /// <summary>
        /// Gets or Sets MarketingLists
        /// </summary>
        [DataMember(Name="MarketingLists", EmitDefaultValue=false)]
        public List<MarketingListDetail> MarketingLists { get; set; }

        /// <summary>
        /// Gets or Sets MiddleName
        /// </summary>
        [DataMember(Name="MiddleName", EmitDefaultValue=false)]
        public StringValue MiddleName { get; set; }

        /// <summary>
        /// Gets or Sets NoMarketing
        /// </summary>
        [DataMember(Name="NoMarketing", EmitDefaultValue=false)]
        public BooleanValue NoMarketing { get; set; }

        /// <summary>
        /// Gets or Sets NoMassMail
        /// </summary>
        [DataMember(Name="NoMassMail", EmitDefaultValue=false)]
        public BooleanValue NoMassMail { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="Notifications", EmitDefaultValue=false)]
        public List<ContactNotification> Notifications { get; set; }

        /// <summary>
        /// Gets or Sets Opportunities
        /// </summary>
        [DataMember(Name="Opportunities", EmitDefaultValue=false)]
        public List<OpportunityDetail> Opportunities { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public StringValue Owner { get; set; }

        /// <summary>
        /// Gets or Sets OwnerEmployeeName
        /// </summary>
        [DataMember(Name="OwnerEmployeeName", EmitDefaultValue=false)]
        public StringValue OwnerEmployeeName { get; set; }

        /// <summary>
        /// Gets or Sets ParentAccount
        /// </summary>
        [DataMember(Name="ParentAccount", EmitDefaultValue=false)]
        public StringValue ParentAccount { get; set; }

        /// <summary>
        /// Gets or Sets Phone1
        /// </summary>
        [DataMember(Name="Phone1", EmitDefaultValue=false)]
        public StringValue Phone1 { get; set; }

        /// <summary>
        /// Gets or Sets Phone1Type
        /// </summary>
        [DataMember(Name="Phone1Type", EmitDefaultValue=false)]
        public StringValue Phone1Type { get; set; }

        /// <summary>
        /// Gets or Sets Phone2
        /// </summary>
        [DataMember(Name="Phone2", EmitDefaultValue=false)]
        public StringValue Phone2 { get; set; }

        /// <summary>
        /// Gets or Sets Phone2Type
        /// </summary>
        [DataMember(Name="Phone2Type", EmitDefaultValue=false)]
        public StringValue Phone2Type { get; set; }

        /// <summary>
        /// Gets or Sets Phone3
        /// </summary>
        [DataMember(Name="Phone3", EmitDefaultValue=false)]
        public StringValue Phone3 { get; set; }

        /// <summary>
        /// Gets or Sets Phone3Type
        /// </summary>
        [DataMember(Name="Phone3Type", EmitDefaultValue=false)]
        public StringValue Phone3Type { get; set; }

        /// <summary>
        /// Gets or Sets QualificationDate
        /// </summary>
        [DataMember(Name="QualificationDate", EmitDefaultValue=false)]
        public DateTimeValue QualificationDate { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public StringValue Reason { get; set; }

        /// <summary>
        /// Gets or Sets Relations
        /// </summary>
        [DataMember(Name="Relations", EmitDefaultValue=false)]
        public List<RelationDetail> Relations { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="Source", EmitDefaultValue=false)]
        public StringValue Source { get; set; }

        /// <summary>
        /// Gets or Sets SourceCampaign
        /// </summary>
        [DataMember(Name="SourceCampaign", EmitDefaultValue=false)]
        public StringValue SourceCampaign { get; set; }

        /// <summary>
        /// Gets or Sets SpouseOrPartnerName
        /// </summary>
        [DataMember(Name="SpouseOrPartnerName", EmitDefaultValue=false)]
        public StringValue SpouseOrPartnerName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets Synchronize
        /// </summary>
        [DataMember(Name="Synchronize", EmitDefaultValue=false)]
        public BooleanValue Synchronize { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public StringValue Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public StringValue Type { get; set; }

        /// <summary>
        /// Gets or Sets UserInfo
        /// </summary>
        [DataMember(Name="UserInfo", EmitDefaultValue=false)]
        public ContactUserInfo UserInfo { get; set; }

        /// <summary>
        /// Gets or Sets WebSite
        /// </summary>
        [DataMember(Name="WebSite", EmitDefaultValue=false)]
        public StringValue WebSite { get; set; }

        /// <summary>
        /// Gets or Sets Workgroup
        /// </summary>
        [DataMember(Name="Workgroup", EmitDefaultValue=false)]
        public StringValue Workgroup { get; set; }

        /// <summary>
        /// Gets or Sets WorkgroupDescription
        /// </summary>
        [DataMember(Name="WorkgroupDescription", EmitDefaultValue=false)]
        public StringValue WorkgroupDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AddressIsSameAsInAccount: ").Append(AddressIsSameAsInAccount).Append("\n");
            sb.Append("  AddressValidated: ").Append(AddressValidated).Append("\n");
            sb.Append("  Attention: ").Append(Attention).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  BusinessAccount: ").Append(BusinessAccount).Append("\n");
            sb.Append("  Campaigns: ").Append(Campaigns).Append("\n");
            sb.Append("  Cases: ").Append(Cases).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  ContactClass: ").Append(ContactClass).Append("\n");
            sb.Append("  ContactID: ").Append(ContactID).Append("\n");
            sb.Append("  ContactMethod: ").Append(ContactMethod).Append("\n");
            sb.Append("  ConvertedBy: ").Append(ConvertedBy).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DoNotCall: ").Append(DoNotCall).Append("\n");
            sb.Append("  DoNotEmail: ").Append(DoNotEmail).Append("\n");
            sb.Append("  DoNotFax: ").Append(DoNotFax).Append("\n");
            sb.Append("  DoNotMail: ").Append(DoNotMail).Append("\n");
            sb.Append("  Duplicate: ").Append(Duplicate).Append("\n");
            sb.Append("  DuplicateFound: ").Append(DuplicateFound).Append("\n");
            sb.Append("  Duplicates: ").Append(Duplicates).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FaxType: ").Append(FaxType).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  LanguageOrLocale: ").Append(LanguageOrLocale).Append("\n");
            sb.Append("  LastIncomingActivity: ").Append(LastIncomingActivity).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LastOutgoingActivity: ").Append(LastOutgoingActivity).Append("\n");
            sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
            sb.Append("  MarketingLists: ").Append(MarketingLists).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  NoMarketing: ").Append(NoMarketing).Append("\n");
            sb.Append("  NoMassMail: ").Append(NoMassMail).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Opportunities: ").Append(Opportunities).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OwnerEmployeeName: ").Append(OwnerEmployeeName).Append("\n");
            sb.Append("  ParentAccount: ").Append(ParentAccount).Append("\n");
            sb.Append("  Phone1: ").Append(Phone1).Append("\n");
            sb.Append("  Phone1Type: ").Append(Phone1Type).Append("\n");
            sb.Append("  Phone2: ").Append(Phone2).Append("\n");
            sb.Append("  Phone2Type: ").Append(Phone2Type).Append("\n");
            sb.Append("  Phone3: ").Append(Phone3).Append("\n");
            sb.Append("  Phone3Type: ").Append(Phone3Type).Append("\n");
            sb.Append("  QualificationDate: ").Append(QualificationDate).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Relations: ").Append(Relations).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SourceCampaign: ").Append(SourceCampaign).Append("\n");
            sb.Append("  SpouseOrPartnerName: ").Append(SpouseOrPartnerName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Synchronize: ").Append(Synchronize).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserInfo: ").Append(UserInfo).Append("\n");
            sb.Append("  WebSite: ").Append(WebSite).Append("\n");
            sb.Append("  Workgroup: ").Append(Workgroup).Append("\n");
            sb.Append("  WorkgroupDescription: ").Append(WorkgroupDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Contact);
        }

        /// <summary>
        /// Returns true if Contact instances are equal
        /// </summary>
        /// <param name="input">Instance of Contact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contact input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && base.Equals(input) && 
                (
                    this.Activities == input.Activities ||
                    this.Activities != null &&
                    this.Activities.SequenceEqual(input.Activities)
                ) && base.Equals(input) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && base.Equals(input) && 
                (
                    this.AddressIsSameAsInAccount == input.AddressIsSameAsInAccount ||
                    (this.AddressIsSameAsInAccount != null &&
                    this.AddressIsSameAsInAccount.Equals(input.AddressIsSameAsInAccount))
                ) && base.Equals(input) && 
                (
                    this.AddressValidated == input.AddressValidated ||
                    (this.AddressValidated != null &&
                    this.AddressValidated.Equals(input.AddressValidated))
                ) && base.Equals(input) && 
                (
                    this.Attention == input.Attention ||
                    (this.Attention != null &&
                    this.Attention.Equals(input.Attention))
                ) && base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.BusinessAccount == input.BusinessAccount ||
                    (this.BusinessAccount != null &&
                    this.BusinessAccount.Equals(input.BusinessAccount))
                ) && base.Equals(input) && 
                (
                    this.Campaigns == input.Campaigns ||
                    this.Campaigns != null &&
                    this.Campaigns.SequenceEqual(input.Campaigns)
                ) && base.Equals(input) && 
                (
                    this.Cases == input.Cases ||
                    this.Cases != null &&
                    this.Cases.SequenceEqual(input.Cases)
                ) && base.Equals(input) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && base.Equals(input) && 
                (
                    this.ContactClass == input.ContactClass ||
                    (this.ContactClass != null &&
                    this.ContactClass.Equals(input.ContactClass))
                ) && base.Equals(input) && 
                (
                    this.ContactID == input.ContactID ||
                    (this.ContactID != null &&
                    this.ContactID.Equals(input.ContactID))
                ) && base.Equals(input) && 
                (
                    this.ContactMethod == input.ContactMethod ||
                    (this.ContactMethod != null &&
                    this.ContactMethod.Equals(input.ContactMethod))
                ) && base.Equals(input) && 
                (
                    this.ConvertedBy == input.ConvertedBy ||
                    (this.ConvertedBy != null &&
                    this.ConvertedBy.Equals(input.ConvertedBy))
                ) && base.Equals(input) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && base.Equals(input) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && base.Equals(input) && 
                (
                    this.DoNotCall == input.DoNotCall ||
                    (this.DoNotCall != null &&
                    this.DoNotCall.Equals(input.DoNotCall))
                ) && base.Equals(input) && 
                (
                    this.DoNotEmail == input.DoNotEmail ||
                    (this.DoNotEmail != null &&
                    this.DoNotEmail.Equals(input.DoNotEmail))
                ) && base.Equals(input) && 
                (
                    this.DoNotFax == input.DoNotFax ||
                    (this.DoNotFax != null &&
                    this.DoNotFax.Equals(input.DoNotFax))
                ) && base.Equals(input) && 
                (
                    this.DoNotMail == input.DoNotMail ||
                    (this.DoNotMail != null &&
                    this.DoNotMail.Equals(input.DoNotMail))
                ) && base.Equals(input) && 
                (
                    this.Duplicate == input.Duplicate ||
                    (this.Duplicate != null &&
                    this.Duplicate.Equals(input.Duplicate))
                ) && base.Equals(input) && 
                (
                    this.DuplicateFound == input.DuplicateFound ||
                    (this.DuplicateFound != null &&
                    this.DuplicateFound.Equals(input.DuplicateFound))
                ) && base.Equals(input) && 
                (
                    this.Duplicates == input.Duplicates ||
                    this.Duplicates != null &&
                    this.Duplicates.SequenceEqual(input.Duplicates)
                ) && base.Equals(input) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && base.Equals(input) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && base.Equals(input) && 
                (
                    this.FaxType == input.FaxType ||
                    (this.FaxType != null &&
                    this.FaxType.Equals(input.FaxType))
                ) && base.Equals(input) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && base.Equals(input) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && base.Equals(input) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && base.Equals(input) && 
                (
                    this.JobTitle == input.JobTitle ||
                    (this.JobTitle != null &&
                    this.JobTitle.Equals(input.JobTitle))
                ) && base.Equals(input) && 
                (
                    this.LanguageOrLocale == input.LanguageOrLocale ||
                    (this.LanguageOrLocale != null &&
                    this.LanguageOrLocale.Equals(input.LanguageOrLocale))
                ) && base.Equals(input) && 
                (
                    this.LastIncomingActivity == input.LastIncomingActivity ||
                    (this.LastIncomingActivity != null &&
                    this.LastIncomingActivity.Equals(input.LastIncomingActivity))
                ) && base.Equals(input) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && base.Equals(input) && 
                (
                    this.LastOutgoingActivity == input.LastOutgoingActivity ||
                    (this.LastOutgoingActivity != null &&
                    this.LastOutgoingActivity.Equals(input.LastOutgoingActivity))
                ) && base.Equals(input) && 
                (
                    this.MaritalStatus == input.MaritalStatus ||
                    (this.MaritalStatus != null &&
                    this.MaritalStatus.Equals(input.MaritalStatus))
                ) && base.Equals(input) && 
                (
                    this.MarketingLists == input.MarketingLists ||
                    this.MarketingLists != null &&
                    this.MarketingLists.SequenceEqual(input.MarketingLists)
                ) && base.Equals(input) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && base.Equals(input) && 
                (
                    this.NoMarketing == input.NoMarketing ||
                    (this.NoMarketing != null &&
                    this.NoMarketing.Equals(input.NoMarketing))
                ) && base.Equals(input) && 
                (
                    this.NoMassMail == input.NoMassMail ||
                    (this.NoMassMail != null &&
                    this.NoMassMail.Equals(input.NoMassMail))
                ) && base.Equals(input) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && base.Equals(input) && 
                (
                    this.Opportunities == input.Opportunities ||
                    this.Opportunities != null &&
                    this.Opportunities.SequenceEqual(input.Opportunities)
                ) && base.Equals(input) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && base.Equals(input) && 
                (
                    this.OwnerEmployeeName == input.OwnerEmployeeName ||
                    (this.OwnerEmployeeName != null &&
                    this.OwnerEmployeeName.Equals(input.OwnerEmployeeName))
                ) && base.Equals(input) && 
                (
                    this.ParentAccount == input.ParentAccount ||
                    (this.ParentAccount != null &&
                    this.ParentAccount.Equals(input.ParentAccount))
                ) && base.Equals(input) && 
                (
                    this.Phone1 == input.Phone1 ||
                    (this.Phone1 != null &&
                    this.Phone1.Equals(input.Phone1))
                ) && base.Equals(input) && 
                (
                    this.Phone1Type == input.Phone1Type ||
                    (this.Phone1Type != null &&
                    this.Phone1Type.Equals(input.Phone1Type))
                ) && base.Equals(input) && 
                (
                    this.Phone2 == input.Phone2 ||
                    (this.Phone2 != null &&
                    this.Phone2.Equals(input.Phone2))
                ) && base.Equals(input) && 
                (
                    this.Phone2Type == input.Phone2Type ||
                    (this.Phone2Type != null &&
                    this.Phone2Type.Equals(input.Phone2Type))
                ) && base.Equals(input) && 
                (
                    this.Phone3 == input.Phone3 ||
                    (this.Phone3 != null &&
                    this.Phone3.Equals(input.Phone3))
                ) && base.Equals(input) && 
                (
                    this.Phone3Type == input.Phone3Type ||
                    (this.Phone3Type != null &&
                    this.Phone3Type.Equals(input.Phone3Type))
                ) && base.Equals(input) && 
                (
                    this.QualificationDate == input.QualificationDate ||
                    (this.QualificationDate != null &&
                    this.QualificationDate.Equals(input.QualificationDate))
                ) && base.Equals(input) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && base.Equals(input) && 
                (
                    this.Relations == input.Relations ||
                    this.Relations != null &&
                    this.Relations.SequenceEqual(input.Relations)
                ) && base.Equals(input) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && base.Equals(input) && 
                (
                    this.SourceCampaign == input.SourceCampaign ||
                    (this.SourceCampaign != null &&
                    this.SourceCampaign.Equals(input.SourceCampaign))
                ) && base.Equals(input) && 
                (
                    this.SpouseOrPartnerName == input.SpouseOrPartnerName ||
                    (this.SpouseOrPartnerName != null &&
                    this.SpouseOrPartnerName.Equals(input.SpouseOrPartnerName))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.Synchronize == input.Synchronize ||
                    (this.Synchronize != null &&
                    this.Synchronize.Equals(input.Synchronize))
                ) && base.Equals(input) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.UserInfo == input.UserInfo ||
                    (this.UserInfo != null &&
                    this.UserInfo.Equals(input.UserInfo))
                ) && base.Equals(input) && 
                (
                    this.WebSite == input.WebSite ||
                    (this.WebSite != null &&
                    this.WebSite.Equals(input.WebSite))
                ) && base.Equals(input) && 
                (
                    this.Workgroup == input.Workgroup ||
                    (this.Workgroup != null &&
                    this.Workgroup.Equals(input.Workgroup))
                ) && base.Equals(input) && 
                (
                    this.WorkgroupDescription == input.WorkgroupDescription ||
                    (this.WorkgroupDescription != null &&
                    this.WorkgroupDescription.Equals(input.WorkgroupDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Activities != null)
                    hashCode = hashCode * 59 + this.Activities.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AddressIsSameAsInAccount != null)
                    hashCode = hashCode * 59 + this.AddressIsSameAsInAccount.GetHashCode();
                if (this.AddressValidated != null)
                    hashCode = hashCode * 59 + this.AddressValidated.GetHashCode();
                if (this.Attention != null)
                    hashCode = hashCode * 59 + this.Attention.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.BusinessAccount != null)
                    hashCode = hashCode * 59 + this.BusinessAccount.GetHashCode();
                if (this.Campaigns != null)
                    hashCode = hashCode * 59 + this.Campaigns.GetHashCode();
                if (this.Cases != null)
                    hashCode = hashCode * 59 + this.Cases.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.ContactClass != null)
                    hashCode = hashCode * 59 + this.ContactClass.GetHashCode();
                if (this.ContactID != null)
                    hashCode = hashCode * 59 + this.ContactID.GetHashCode();
                if (this.ContactMethod != null)
                    hashCode = hashCode * 59 + this.ContactMethod.GetHashCode();
                if (this.ConvertedBy != null)
                    hashCode = hashCode * 59 + this.ConvertedBy.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.DoNotCall != null)
                    hashCode = hashCode * 59 + this.DoNotCall.GetHashCode();
                if (this.DoNotEmail != null)
                    hashCode = hashCode * 59 + this.DoNotEmail.GetHashCode();
                if (this.DoNotFax != null)
                    hashCode = hashCode * 59 + this.DoNotFax.GetHashCode();
                if (this.DoNotMail != null)
                    hashCode = hashCode * 59 + this.DoNotMail.GetHashCode();
                if (this.Duplicate != null)
                    hashCode = hashCode * 59 + this.Duplicate.GetHashCode();
                if (this.DuplicateFound != null)
                    hashCode = hashCode * 59 + this.DuplicateFound.GetHashCode();
                if (this.Duplicates != null)
                    hashCode = hashCode * 59 + this.Duplicates.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.FaxType != null)
                    hashCode = hashCode * 59 + this.FaxType.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.JobTitle != null)
                    hashCode = hashCode * 59 + this.JobTitle.GetHashCode();
                if (this.LanguageOrLocale != null)
                    hashCode = hashCode * 59 + this.LanguageOrLocale.GetHashCode();
                if (this.LastIncomingActivity != null)
                    hashCode = hashCode * 59 + this.LastIncomingActivity.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LastOutgoingActivity != null)
                    hashCode = hashCode * 59 + this.LastOutgoingActivity.GetHashCode();
                if (this.MaritalStatus != null)
                    hashCode = hashCode * 59 + this.MaritalStatus.GetHashCode();
                if (this.MarketingLists != null)
                    hashCode = hashCode * 59 + this.MarketingLists.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.NoMarketing != null)
                    hashCode = hashCode * 59 + this.NoMarketing.GetHashCode();
                if (this.NoMassMail != null)
                    hashCode = hashCode * 59 + this.NoMassMail.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Opportunities != null)
                    hashCode = hashCode * 59 + this.Opportunities.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.OwnerEmployeeName != null)
                    hashCode = hashCode * 59 + this.OwnerEmployeeName.GetHashCode();
                if (this.ParentAccount != null)
                    hashCode = hashCode * 59 + this.ParentAccount.GetHashCode();
                if (this.Phone1 != null)
                    hashCode = hashCode * 59 + this.Phone1.GetHashCode();
                if (this.Phone1Type != null)
                    hashCode = hashCode * 59 + this.Phone1Type.GetHashCode();
                if (this.Phone2 != null)
                    hashCode = hashCode * 59 + this.Phone2.GetHashCode();
                if (this.Phone2Type != null)
                    hashCode = hashCode * 59 + this.Phone2Type.GetHashCode();
                if (this.Phone3 != null)
                    hashCode = hashCode * 59 + this.Phone3.GetHashCode();
                if (this.Phone3Type != null)
                    hashCode = hashCode * 59 + this.Phone3Type.GetHashCode();
                if (this.QualificationDate != null)
                    hashCode = hashCode * 59 + this.QualificationDate.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Relations != null)
                    hashCode = hashCode * 59 + this.Relations.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.SourceCampaign != null)
                    hashCode = hashCode * 59 + this.SourceCampaign.GetHashCode();
                if (this.SpouseOrPartnerName != null)
                    hashCode = hashCode * 59 + this.SpouseOrPartnerName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Synchronize != null)
                    hashCode = hashCode * 59 + this.Synchronize.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UserInfo != null)
                    hashCode = hashCode * 59 + this.UserInfo.GetHashCode();
                if (this.WebSite != null)
                    hashCode = hashCode * 59 + this.WebSite.GetHashCode();
                if (this.Workgroup != null)
                    hashCode = hashCode * 59 + this.Workgroup.GetHashCode();
                if (this.WorkgroupDescription != null)
                    hashCode = hashCode * 59 + this.WorkgroupDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
