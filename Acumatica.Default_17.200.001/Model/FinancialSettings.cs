/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// FinancialSettings
    /// </summary>
    [DataContract]
    public partial class FinancialSettings : Entity,  IEquatable<FinancialSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialSettings" /> class.
        /// </summary>
        /// <param name="billSeparately">billSeparately.</param>
        /// <param name="branch">branch.</param>
        /// <param name="cashDiscountDate">cashDiscountDate.</param>
        /// <param name="customerTaxZone">customerTaxZone.</param>
        /// <param name="dueDate">dueDate.</param>
        /// <param name="entityUsageType">entityUsageType.</param>
        /// <param name="invoiceDate">invoiceDate.</param>
        /// <param name="invoiceNbr">invoiceNbr.</param>
        /// <param name="originalOrderNbr">originalOrderNbr.</param>
        /// <param name="originalOrderType">originalOrderType.</param>
        /// <param name="overrideTaxZone">overrideTaxZone.</param>
        /// <param name="owner">owner.</param>
        /// <param name="postPeriod">postPeriod.</param>
        /// <param name="terms">terms.</param>
        public FinancialSettings(BooleanValue billSeparately = default(BooleanValue), StringValue branch = default(StringValue), DateTimeValue cashDiscountDate = default(DateTimeValue), StringValue customerTaxZone = default(StringValue), DateTimeValue dueDate = default(DateTimeValue), StringValue entityUsageType = default(StringValue), DateTimeValue invoiceDate = default(DateTimeValue), StringValue invoiceNbr = default(StringValue), StringValue originalOrderNbr = default(StringValue), StringValue originalOrderType = default(StringValue), BooleanValue overrideTaxZone = default(BooleanValue), StringValue owner = default(StringValue), StringValue postPeriod = default(StringValue), StringValue terms = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.BillSeparately = billSeparately;
            this.Branch = branch;
            this.CashDiscountDate = cashDiscountDate;
            this.CustomerTaxZone = customerTaxZone;
            this.DueDate = dueDate;
            this.EntityUsageType = entityUsageType;
            this.InvoiceDate = invoiceDate;
            this.InvoiceNbr = invoiceNbr;
            this.OriginalOrderNbr = originalOrderNbr;
            this.OriginalOrderType = originalOrderType;
            this.OverrideTaxZone = overrideTaxZone;
            this.Owner = owner;
            this.PostPeriod = postPeriod;
            this.Terms = terms;
        }
        
        /// <summary>
        /// Gets or Sets BillSeparately
        /// </summary>
        [DataMember(Name="BillSeparately", EmitDefaultValue=false)]
        public BooleanValue BillSeparately { get; set; }

        /// <summary>
        /// Gets or Sets Branch
        /// </summary>
        [DataMember(Name="Branch", EmitDefaultValue=false)]
        public StringValue Branch { get; set; }

        /// <summary>
        /// Gets or Sets CashDiscountDate
        /// </summary>
        [DataMember(Name="CashDiscountDate", EmitDefaultValue=false)]
        public DateTimeValue CashDiscountDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerTaxZone
        /// </summary>
        [DataMember(Name="CustomerTaxZone", EmitDefaultValue=false)]
        public StringValue CustomerTaxZone { get; set; }

        /// <summary>
        /// Gets or Sets DueDate
        /// </summary>
        [DataMember(Name="DueDate", EmitDefaultValue=false)]
        public DateTimeValue DueDate { get; set; }

        /// <summary>
        /// Gets or Sets EntityUsageType
        /// </summary>
        [DataMember(Name="EntityUsageType", EmitDefaultValue=false)]
        public StringValue EntityUsageType { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDate
        /// </summary>
        [DataMember(Name="InvoiceDate", EmitDefaultValue=false)]
        public DateTimeValue InvoiceDate { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNbr
        /// </summary>
        [DataMember(Name="InvoiceNbr", EmitDefaultValue=false)]
        public StringValue InvoiceNbr { get; set; }

        /// <summary>
        /// Gets or Sets OriginalOrderNbr
        /// </summary>
        [DataMember(Name="OriginalOrderNbr", EmitDefaultValue=false)]
        public StringValue OriginalOrderNbr { get; set; }

        /// <summary>
        /// Gets or Sets OriginalOrderType
        /// </summary>
        [DataMember(Name="OriginalOrderType", EmitDefaultValue=false)]
        public StringValue OriginalOrderType { get; set; }

        /// <summary>
        /// Gets or Sets OverrideTaxZone
        /// </summary>
        [DataMember(Name="OverrideTaxZone", EmitDefaultValue=false)]
        public BooleanValue OverrideTaxZone { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public StringValue Owner { get; set; }

        /// <summary>
        /// Gets or Sets PostPeriod
        /// </summary>
        [DataMember(Name="PostPeriod", EmitDefaultValue=false)]
        public StringValue PostPeriod { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public StringValue Terms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialSettings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BillSeparately: ").Append(BillSeparately).Append("\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  CashDiscountDate: ").Append(CashDiscountDate).Append("\n");
            sb.Append("  CustomerTaxZone: ").Append(CustomerTaxZone).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  EntityUsageType: ").Append(EntityUsageType).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  InvoiceNbr: ").Append(InvoiceNbr).Append("\n");
            sb.Append("  OriginalOrderNbr: ").Append(OriginalOrderNbr).Append("\n");
            sb.Append("  OriginalOrderType: ").Append(OriginalOrderType).Append("\n");
            sb.Append("  OverrideTaxZone: ").Append(OverrideTaxZone).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PostPeriod: ").Append(PostPeriod).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialSettings);
        }

        /// <summary>
        /// Returns true if FinancialSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialSettings input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.BillSeparately == input.BillSeparately ||
                    (this.BillSeparately != null &&
                    this.BillSeparately.Equals(input.BillSeparately))
                ) && base.Equals(input) && 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && base.Equals(input) && 
                (
                    this.CashDiscountDate == input.CashDiscountDate ||
                    (this.CashDiscountDate != null &&
                    this.CashDiscountDate.Equals(input.CashDiscountDate))
                ) && base.Equals(input) && 
                (
                    this.CustomerTaxZone == input.CustomerTaxZone ||
                    (this.CustomerTaxZone != null &&
                    this.CustomerTaxZone.Equals(input.CustomerTaxZone))
                ) && base.Equals(input) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && base.Equals(input) && 
                (
                    this.EntityUsageType == input.EntityUsageType ||
                    (this.EntityUsageType != null &&
                    this.EntityUsageType.Equals(input.EntityUsageType))
                ) && base.Equals(input) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && base.Equals(input) && 
                (
                    this.InvoiceNbr == input.InvoiceNbr ||
                    (this.InvoiceNbr != null &&
                    this.InvoiceNbr.Equals(input.InvoiceNbr))
                ) && base.Equals(input) && 
                (
                    this.OriginalOrderNbr == input.OriginalOrderNbr ||
                    (this.OriginalOrderNbr != null &&
                    this.OriginalOrderNbr.Equals(input.OriginalOrderNbr))
                ) && base.Equals(input) && 
                (
                    this.OriginalOrderType == input.OriginalOrderType ||
                    (this.OriginalOrderType != null &&
                    this.OriginalOrderType.Equals(input.OriginalOrderType))
                ) && base.Equals(input) && 
                (
                    this.OverrideTaxZone == input.OverrideTaxZone ||
                    (this.OverrideTaxZone != null &&
                    this.OverrideTaxZone.Equals(input.OverrideTaxZone))
                ) && base.Equals(input) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && base.Equals(input) && 
                (
                    this.PostPeriod == input.PostPeriod ||
                    (this.PostPeriod != null &&
                    this.PostPeriod.Equals(input.PostPeriod))
                ) && base.Equals(input) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BillSeparately != null)
                    hashCode = hashCode * 59 + this.BillSeparately.GetHashCode();
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.CashDiscountDate != null)
                    hashCode = hashCode * 59 + this.CashDiscountDate.GetHashCode();
                if (this.CustomerTaxZone != null)
                    hashCode = hashCode * 59 + this.CustomerTaxZone.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.EntityUsageType != null)
                    hashCode = hashCode * 59 + this.EntityUsageType.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.InvoiceNbr != null)
                    hashCode = hashCode * 59 + this.InvoiceNbr.GetHashCode();
                if (this.OriginalOrderNbr != null)
                    hashCode = hashCode * 59 + this.OriginalOrderNbr.GetHashCode();
                if (this.OriginalOrderType != null)
                    hashCode = hashCode * 59 + this.OriginalOrderType.GetHashCode();
                if (this.OverrideTaxZone != null)
                    hashCode = hashCode * 59 + this.OverrideTaxZone.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.PostPeriod != null)
                    hashCode = hashCode * 59 + this.PostPeriod.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
