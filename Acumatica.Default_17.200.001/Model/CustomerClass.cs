/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// CustomerClass
    /// </summary>
    [DataContract]
    public partial class CustomerClass : Entity,  IEquatable<CustomerClass>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerClass" /> class.
        /// </summary>
        /// <param name="applyOverdueCharges">applyOverdueCharges.</param>
        /// <param name="aRAccount">aRAccount.</param>
        /// <param name="aRSubaccount">aRSubaccount.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="autoApplyPayments">autoApplyPayments.</param>
        /// <param name="cashDiscountAccount">cashDiscountAccount.</param>
        /// <param name="cashDiscountSubaccount">cashDiscountSubaccount.</param>
        /// <param name="classID">classID.</param>
        /// <param name="cOGSAccount">cOGSAccount.</param>
        /// <param name="cOGSSubaccount">cOGSSubaccount.</param>
        /// <param name="country">country.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="creditDaysPastDue">creditDaysPastDue.</param>
        /// <param name="creditLimit">creditLimit.</param>
        /// <param name="creditVerification">creditVerification.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="currencyRateType">currencyRateType.</param>
        /// <param name="defaultLocationIDfromBranch">defaultLocationIDfromBranch.</param>
        /// <param name="defaultRestrictionGroup">defaultRestrictionGroup.</param>
        /// <param name="description">description.</param>
        /// <param name="discountAccount">discountAccount.</param>
        /// <param name="discountSubaccount">discountSubaccount.</param>
        /// <param name="enableCurrencyOverride">enableCurrencyOverride.</param>
        /// <param name="enableRateOverride">enableRateOverride.</param>
        /// <param name="enableWriteOffs">enableWriteOffs.</param>
        /// <param name="entityUsageType">entityUsageType.</param>
        /// <param name="freightAccount">freightAccount.</param>
        /// <param name="freightSubaccount">freightSubaccount.</param>
        /// <param name="groupDocumentDiscountLimit">groupDocumentDiscountLimit.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="miscAccount">miscAccount.</param>
        /// <param name="miscSubaccount">miscSubaccount.</param>
        /// <param name="multiCurrencyStatements">multiCurrencyStatements.</param>
        /// <param name="overdueChargeID">overdueChargeID.</param>
        /// <param name="overLimitAmount">overLimitAmount.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="prepaymentAccount">prepaymentAccount.</param>
        /// <param name="prepaymentSubaccount">prepaymentSubaccount.</param>
        /// <param name="printDunningLetters">printDunningLetters.</param>
        /// <param name="printInvoices">printInvoices.</param>
        /// <param name="printStatements">printStatements.</param>
        /// <param name="requireEntityUsageType">requireEntityUsageType.</param>
        /// <param name="requireTaxZone">requireTaxZone.</param>
        /// <param name="salesAccount">salesAccount.</param>
        /// <param name="salespersonID">salespersonID.</param>
        /// <param name="salesSubaccount">salesSubaccount.</param>
        /// <param name="sendDunningLettersbyEmail">sendDunningLettersbyEmail.</param>
        /// <param name="sendInvoicesbyEmail">sendInvoicesbyEmail.</param>
        /// <param name="sendStatementsByEmail">sendStatementsByEmail.</param>
        /// <param name="shippingRule">shippingRule.</param>
        /// <param name="shippingTerms">shippingTerms.</param>
        /// <param name="shipVia">shipVia.</param>
        /// <param name="statementCycleID">statementCycleID.</param>
        /// <param name="statementType">statementType.</param>
        /// <param name="taxZoneID">taxZoneID.</param>
        /// <param name="terms">terms.</param>
        /// <param name="unrealizedGainAccount">unrealizedGainAccount.</param>
        /// <param name="unrealizedGainSubaccount">unrealizedGainSubaccount.</param>
        /// <param name="unrealizedLossAccount">unrealizedLossAccount.</param>
        /// <param name="unrealizedLossSubaccount">unrealizedLossSubaccount.</param>
        /// <param name="writeOffLimit">writeOffLimit.</param>
        public CustomerClass(BooleanValue applyOverdueCharges = default(BooleanValue), StringValue aRAccount = default(StringValue), StringValue aRSubaccount = default(StringValue), List<BusinessAccountClassAttributeDetail> attributes = default(List<BusinessAccountClassAttributeDetail>), BooleanValue autoApplyPayments = default(BooleanValue), StringValue cashDiscountAccount = default(StringValue), StringValue cashDiscountSubaccount = default(StringValue), StringValue classID = default(StringValue), StringValue cOGSAccount = default(StringValue), StringValue cOGSSubaccount = default(StringValue), StringValue country = default(StringValue), DateTimeValue createdDateTime = default(DateTimeValue), ShortValue creditDaysPastDue = default(ShortValue), DecimalValue creditLimit = default(DecimalValue), StringValue creditVerification = default(StringValue), StringValue currencyID = default(StringValue), StringValue currencyRateType = default(StringValue), BooleanValue defaultLocationIDfromBranch = default(BooleanValue), StringValue defaultRestrictionGroup = default(StringValue), StringValue description = default(StringValue), StringValue discountAccount = default(StringValue), StringValue discountSubaccount = default(StringValue), BooleanValue enableCurrencyOverride = default(BooleanValue), BooleanValue enableRateOverride = default(BooleanValue), BooleanValue enableWriteOffs = default(BooleanValue), StringValue entityUsageType = default(StringValue), StringValue freightAccount = default(StringValue), StringValue freightSubaccount = default(StringValue), DecimalValue groupDocumentDiscountLimit = default(DecimalValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), StringValue miscAccount = default(StringValue), StringValue miscSubaccount = default(StringValue), BooleanValue multiCurrencyStatements = default(BooleanValue), StringValue overdueChargeID = default(StringValue), DecimalValue overLimitAmount = default(DecimalValue), StringValue paymentMethod = default(StringValue), StringValue prepaymentAccount = default(StringValue), StringValue prepaymentSubaccount = default(StringValue), BooleanValue printDunningLetters = default(BooleanValue), BooleanValue printInvoices = default(BooleanValue), BooleanValue printStatements = default(BooleanValue), BooleanValue requireEntityUsageType = default(BooleanValue), BooleanValue requireTaxZone = default(BooleanValue), StringValue salesAccount = default(StringValue), StringValue salespersonID = default(StringValue), StringValue salesSubaccount = default(StringValue), BooleanValue sendDunningLettersbyEmail = default(BooleanValue), BooleanValue sendInvoicesbyEmail = default(BooleanValue), BooleanValue sendStatementsByEmail = default(BooleanValue), StringValue shippingRule = default(StringValue), StringValue shippingTerms = default(StringValue), StringValue shipVia = default(StringValue), StringValue statementCycleID = default(StringValue), StringValue statementType = default(StringValue), StringValue taxZoneID = default(StringValue), StringValue terms = default(StringValue), StringValue unrealizedGainAccount = default(StringValue), StringValue unrealizedGainSubaccount = default(StringValue), StringValue unrealizedLossAccount = default(StringValue), StringValue unrealizedLossSubaccount = default(StringValue), DecimalValue writeOffLimit = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.ApplyOverdueCharges = applyOverdueCharges;
            this.ARAccount = aRAccount;
            this.ARSubaccount = aRSubaccount;
            this.Attributes = attributes;
            this.AutoApplyPayments = autoApplyPayments;
            this.CashDiscountAccount = cashDiscountAccount;
            this.CashDiscountSubaccount = cashDiscountSubaccount;
            this.ClassID = classID;
            this.COGSAccount = cOGSAccount;
            this.COGSSubaccount = cOGSSubaccount;
            this.Country = country;
            this.CreatedDateTime = createdDateTime;
            this.CreditDaysPastDue = creditDaysPastDue;
            this.CreditLimit = creditLimit;
            this.CreditVerification = creditVerification;
            this.CurrencyID = currencyID;
            this.CurrencyRateType = currencyRateType;
            this.DefaultLocationIDfromBranch = defaultLocationIDfromBranch;
            this.DefaultRestrictionGroup = defaultRestrictionGroup;
            this.Description = description;
            this.DiscountAccount = discountAccount;
            this.DiscountSubaccount = discountSubaccount;
            this.EnableCurrencyOverride = enableCurrencyOverride;
            this.EnableRateOverride = enableRateOverride;
            this.EnableWriteOffs = enableWriteOffs;
            this.EntityUsageType = entityUsageType;
            this.FreightAccount = freightAccount;
            this.FreightSubaccount = freightSubaccount;
            this.GroupDocumentDiscountLimit = groupDocumentDiscountLimit;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.MiscAccount = miscAccount;
            this.MiscSubaccount = miscSubaccount;
            this.MultiCurrencyStatements = multiCurrencyStatements;
            this.OverdueChargeID = overdueChargeID;
            this.OverLimitAmount = overLimitAmount;
            this.PaymentMethod = paymentMethod;
            this.PrepaymentAccount = prepaymentAccount;
            this.PrepaymentSubaccount = prepaymentSubaccount;
            this.PrintDunningLetters = printDunningLetters;
            this.PrintInvoices = printInvoices;
            this.PrintStatements = printStatements;
            this.RequireEntityUsageType = requireEntityUsageType;
            this.RequireTaxZone = requireTaxZone;
            this.SalesAccount = salesAccount;
            this.SalespersonID = salespersonID;
            this.SalesSubaccount = salesSubaccount;
            this.SendDunningLettersbyEmail = sendDunningLettersbyEmail;
            this.SendInvoicesbyEmail = sendInvoicesbyEmail;
            this.SendStatementsByEmail = sendStatementsByEmail;
            this.ShippingRule = shippingRule;
            this.ShippingTerms = shippingTerms;
            this.ShipVia = shipVia;
            this.StatementCycleID = statementCycleID;
            this.StatementType = statementType;
            this.TaxZoneID = taxZoneID;
            this.Terms = terms;
            this.UnrealizedGainAccount = unrealizedGainAccount;
            this.UnrealizedGainSubaccount = unrealizedGainSubaccount;
            this.UnrealizedLossAccount = unrealizedLossAccount;
            this.UnrealizedLossSubaccount = unrealizedLossSubaccount;
            this.WriteOffLimit = writeOffLimit;
        }
        
        /// <summary>
        /// Gets or Sets ApplyOverdueCharges
        /// </summary>
        [DataMember(Name="ApplyOverdueCharges", EmitDefaultValue=false)]
        public BooleanValue ApplyOverdueCharges { get; set; }

        /// <summary>
        /// Gets or Sets ARAccount
        /// </summary>
        [DataMember(Name="ARAccount", EmitDefaultValue=false)]
        public StringValue ARAccount { get; set; }

        /// <summary>
        /// Gets or Sets ARSubaccount
        /// </summary>
        [DataMember(Name="ARSubaccount", EmitDefaultValue=false)]
        public StringValue ARSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<BusinessAccountClassAttributeDetail> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets AutoApplyPayments
        /// </summary>
        [DataMember(Name="AutoApplyPayments", EmitDefaultValue=false)]
        public BooleanValue AutoApplyPayments { get; set; }

        /// <summary>
        /// Gets or Sets CashDiscountAccount
        /// </summary>
        [DataMember(Name="CashDiscountAccount", EmitDefaultValue=false)]
        public StringValue CashDiscountAccount { get; set; }

        /// <summary>
        /// Gets or Sets CashDiscountSubaccount
        /// </summary>
        [DataMember(Name="CashDiscountSubaccount", EmitDefaultValue=false)]
        public StringValue CashDiscountSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets ClassID
        /// </summary>
        [DataMember(Name="ClassID", EmitDefaultValue=false)]
        public StringValue ClassID { get; set; }

        /// <summary>
        /// Gets or Sets COGSAccount
        /// </summary>
        [DataMember(Name="COGSAccount", EmitDefaultValue=false)]
        public StringValue COGSAccount { get; set; }

        /// <summary>
        /// Gets or Sets COGSSubaccount
        /// </summary>
        [DataMember(Name="COGSSubaccount", EmitDefaultValue=false)]
        public StringValue COGSSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public StringValue Country { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreditDaysPastDue
        /// </summary>
        [DataMember(Name="CreditDaysPastDue", EmitDefaultValue=false)]
        public ShortValue CreditDaysPastDue { get; set; }

        /// <summary>
        /// Gets or Sets CreditLimit
        /// </summary>
        [DataMember(Name="CreditLimit", EmitDefaultValue=false)]
        public DecimalValue CreditLimit { get; set; }

        /// <summary>
        /// Gets or Sets CreditVerification
        /// </summary>
        [DataMember(Name="CreditVerification", EmitDefaultValue=false)]
        public StringValue CreditVerification { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyRateType
        /// </summary>
        [DataMember(Name="CurrencyRateType", EmitDefaultValue=false)]
        public StringValue CurrencyRateType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLocationIDfromBranch
        /// </summary>
        [DataMember(Name="DefaultLocationIDfromBranch", EmitDefaultValue=false)]
        public BooleanValue DefaultLocationIDfromBranch { get; set; }

        /// <summary>
        /// Gets or Sets DefaultRestrictionGroup
        /// </summary>
        [DataMember(Name="DefaultRestrictionGroup", EmitDefaultValue=false)]
        public StringValue DefaultRestrictionGroup { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets DiscountAccount
        /// </summary>
        [DataMember(Name="DiscountAccount", EmitDefaultValue=false)]
        public StringValue DiscountAccount { get; set; }

        /// <summary>
        /// Gets or Sets DiscountSubaccount
        /// </summary>
        [DataMember(Name="DiscountSubaccount", EmitDefaultValue=false)]
        public StringValue DiscountSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets EnableCurrencyOverride
        /// </summary>
        [DataMember(Name="EnableCurrencyOverride", EmitDefaultValue=false)]
        public BooleanValue EnableCurrencyOverride { get; set; }

        /// <summary>
        /// Gets or Sets EnableRateOverride
        /// </summary>
        [DataMember(Name="EnableRateOverride", EmitDefaultValue=false)]
        public BooleanValue EnableRateOverride { get; set; }

        /// <summary>
        /// Gets or Sets EnableWriteOffs
        /// </summary>
        [DataMember(Name="EnableWriteOffs", EmitDefaultValue=false)]
        public BooleanValue EnableWriteOffs { get; set; }

        /// <summary>
        /// Gets or Sets EntityUsageType
        /// </summary>
        [DataMember(Name="EntityUsageType", EmitDefaultValue=false)]
        public StringValue EntityUsageType { get; set; }

        /// <summary>
        /// Gets or Sets FreightAccount
        /// </summary>
        [DataMember(Name="FreightAccount", EmitDefaultValue=false)]
        public StringValue FreightAccount { get; set; }

        /// <summary>
        /// Gets or Sets FreightSubaccount
        /// </summary>
        [DataMember(Name="FreightSubaccount", EmitDefaultValue=false)]
        public StringValue FreightSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets GroupDocumentDiscountLimit
        /// </summary>
        [DataMember(Name="GroupDocumentDiscountLimit", EmitDefaultValue=false)]
        public DecimalValue GroupDocumentDiscountLimit { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets MiscAccount
        /// </summary>
        [DataMember(Name="MiscAccount", EmitDefaultValue=false)]
        public StringValue MiscAccount { get; set; }

        /// <summary>
        /// Gets or Sets MiscSubaccount
        /// </summary>
        [DataMember(Name="MiscSubaccount", EmitDefaultValue=false)]
        public StringValue MiscSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets MultiCurrencyStatements
        /// </summary>
        [DataMember(Name="MultiCurrencyStatements", EmitDefaultValue=false)]
        public BooleanValue MultiCurrencyStatements { get; set; }

        /// <summary>
        /// Gets or Sets OverdueChargeID
        /// </summary>
        [DataMember(Name="OverdueChargeID", EmitDefaultValue=false)]
        public StringValue OverdueChargeID { get; set; }

        /// <summary>
        /// Gets or Sets OverLimitAmount
        /// </summary>
        [DataMember(Name="OverLimitAmount", EmitDefaultValue=false)]
        public DecimalValue OverLimitAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name="PaymentMethod", EmitDefaultValue=false)]
        public StringValue PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets PrepaymentAccount
        /// </summary>
        [DataMember(Name="PrepaymentAccount", EmitDefaultValue=false)]
        public StringValue PrepaymentAccount { get; set; }

        /// <summary>
        /// Gets or Sets PrepaymentSubaccount
        /// </summary>
        [DataMember(Name="PrepaymentSubaccount", EmitDefaultValue=false)]
        public StringValue PrepaymentSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets PrintDunningLetters
        /// </summary>
        [DataMember(Name="PrintDunningLetters", EmitDefaultValue=false)]
        public BooleanValue PrintDunningLetters { get; set; }

        /// <summary>
        /// Gets or Sets PrintInvoices
        /// </summary>
        [DataMember(Name="PrintInvoices", EmitDefaultValue=false)]
        public BooleanValue PrintInvoices { get; set; }

        /// <summary>
        /// Gets or Sets PrintStatements
        /// </summary>
        [DataMember(Name="PrintStatements", EmitDefaultValue=false)]
        public BooleanValue PrintStatements { get; set; }

        /// <summary>
        /// Gets or Sets RequireEntityUsageType
        /// </summary>
        [DataMember(Name="RequireEntityUsageType", EmitDefaultValue=false)]
        public BooleanValue RequireEntityUsageType { get; set; }

        /// <summary>
        /// Gets or Sets RequireTaxZone
        /// </summary>
        [DataMember(Name="RequireTaxZone", EmitDefaultValue=false)]
        public BooleanValue RequireTaxZone { get; set; }

        /// <summary>
        /// Gets or Sets SalesAccount
        /// </summary>
        [DataMember(Name="SalesAccount", EmitDefaultValue=false)]
        public StringValue SalesAccount { get; set; }

        /// <summary>
        /// Gets or Sets SalespersonID
        /// </summary>
        [DataMember(Name="SalespersonID", EmitDefaultValue=false)]
        public StringValue SalespersonID { get; set; }

        /// <summary>
        /// Gets or Sets SalesSubaccount
        /// </summary>
        [DataMember(Name="SalesSubaccount", EmitDefaultValue=false)]
        public StringValue SalesSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets SendDunningLettersbyEmail
        /// </summary>
        [DataMember(Name="SendDunningLettersbyEmail", EmitDefaultValue=false)]
        public BooleanValue SendDunningLettersbyEmail { get; set; }

        /// <summary>
        /// Gets or Sets SendInvoicesbyEmail
        /// </summary>
        [DataMember(Name="SendInvoicesbyEmail", EmitDefaultValue=false)]
        public BooleanValue SendInvoicesbyEmail { get; set; }

        /// <summary>
        /// Gets or Sets SendStatementsByEmail
        /// </summary>
        [DataMember(Name="SendStatementsByEmail", EmitDefaultValue=false)]
        public BooleanValue SendStatementsByEmail { get; set; }

        /// <summary>
        /// Gets or Sets ShippingRule
        /// </summary>
        [DataMember(Name="ShippingRule", EmitDefaultValue=false)]
        public StringValue ShippingRule { get; set; }

        /// <summary>
        /// Gets or Sets ShippingTerms
        /// </summary>
        [DataMember(Name="ShippingTerms", EmitDefaultValue=false)]
        public StringValue ShippingTerms { get; set; }

        /// <summary>
        /// Gets or Sets ShipVia
        /// </summary>
        [DataMember(Name="ShipVia", EmitDefaultValue=false)]
        public StringValue ShipVia { get; set; }

        /// <summary>
        /// Gets or Sets StatementCycleID
        /// </summary>
        [DataMember(Name="StatementCycleID", EmitDefaultValue=false)]
        public StringValue StatementCycleID { get; set; }

        /// <summary>
        /// Gets or Sets StatementType
        /// </summary>
        [DataMember(Name="StatementType", EmitDefaultValue=false)]
        public StringValue StatementType { get; set; }

        /// <summary>
        /// Gets or Sets TaxZoneID
        /// </summary>
        [DataMember(Name="TaxZoneID", EmitDefaultValue=false)]
        public StringValue TaxZoneID { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public StringValue Terms { get; set; }

        /// <summary>
        /// Gets or Sets UnrealizedGainAccount
        /// </summary>
        [DataMember(Name="UnrealizedGainAccount", EmitDefaultValue=false)]
        public StringValue UnrealizedGainAccount { get; set; }

        /// <summary>
        /// Gets or Sets UnrealizedGainSubaccount
        /// </summary>
        [DataMember(Name="UnrealizedGainSubaccount", EmitDefaultValue=false)]
        public StringValue UnrealizedGainSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets UnrealizedLossAccount
        /// </summary>
        [DataMember(Name="UnrealizedLossAccount", EmitDefaultValue=false)]
        public StringValue UnrealizedLossAccount { get; set; }

        /// <summary>
        /// Gets or Sets UnrealizedLossSubaccount
        /// </summary>
        [DataMember(Name="UnrealizedLossSubaccount", EmitDefaultValue=false)]
        public StringValue UnrealizedLossSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets WriteOffLimit
        /// </summary>
        [DataMember(Name="WriteOffLimit", EmitDefaultValue=false)]
        public DecimalValue WriteOffLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerClass {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ApplyOverdueCharges: ").Append(ApplyOverdueCharges).Append("\n");
            sb.Append("  ARAccount: ").Append(ARAccount).Append("\n");
            sb.Append("  ARSubaccount: ").Append(ARSubaccount).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  AutoApplyPayments: ").Append(AutoApplyPayments).Append("\n");
            sb.Append("  CashDiscountAccount: ").Append(CashDiscountAccount).Append("\n");
            sb.Append("  CashDiscountSubaccount: ").Append(CashDiscountSubaccount).Append("\n");
            sb.Append("  ClassID: ").Append(ClassID).Append("\n");
            sb.Append("  COGSAccount: ").Append(COGSAccount).Append("\n");
            sb.Append("  COGSSubaccount: ").Append(COGSSubaccount).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CreditDaysPastDue: ").Append(CreditDaysPastDue).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  CreditVerification: ").Append(CreditVerification).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CurrencyRateType: ").Append(CurrencyRateType).Append("\n");
            sb.Append("  DefaultLocationIDfromBranch: ").Append(DefaultLocationIDfromBranch).Append("\n");
            sb.Append("  DefaultRestrictionGroup: ").Append(DefaultRestrictionGroup).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountAccount: ").Append(DiscountAccount).Append("\n");
            sb.Append("  DiscountSubaccount: ").Append(DiscountSubaccount).Append("\n");
            sb.Append("  EnableCurrencyOverride: ").Append(EnableCurrencyOverride).Append("\n");
            sb.Append("  EnableRateOverride: ").Append(EnableRateOverride).Append("\n");
            sb.Append("  EnableWriteOffs: ").Append(EnableWriteOffs).Append("\n");
            sb.Append("  EntityUsageType: ").Append(EntityUsageType).Append("\n");
            sb.Append("  FreightAccount: ").Append(FreightAccount).Append("\n");
            sb.Append("  FreightSubaccount: ").Append(FreightSubaccount).Append("\n");
            sb.Append("  GroupDocumentDiscountLimit: ").Append(GroupDocumentDiscountLimit).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  MiscAccount: ").Append(MiscAccount).Append("\n");
            sb.Append("  MiscSubaccount: ").Append(MiscSubaccount).Append("\n");
            sb.Append("  MultiCurrencyStatements: ").Append(MultiCurrencyStatements).Append("\n");
            sb.Append("  OverdueChargeID: ").Append(OverdueChargeID).Append("\n");
            sb.Append("  OverLimitAmount: ").Append(OverLimitAmount).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PrepaymentAccount: ").Append(PrepaymentAccount).Append("\n");
            sb.Append("  PrepaymentSubaccount: ").Append(PrepaymentSubaccount).Append("\n");
            sb.Append("  PrintDunningLetters: ").Append(PrintDunningLetters).Append("\n");
            sb.Append("  PrintInvoices: ").Append(PrintInvoices).Append("\n");
            sb.Append("  PrintStatements: ").Append(PrintStatements).Append("\n");
            sb.Append("  RequireEntityUsageType: ").Append(RequireEntityUsageType).Append("\n");
            sb.Append("  RequireTaxZone: ").Append(RequireTaxZone).Append("\n");
            sb.Append("  SalesAccount: ").Append(SalesAccount).Append("\n");
            sb.Append("  SalespersonID: ").Append(SalespersonID).Append("\n");
            sb.Append("  SalesSubaccount: ").Append(SalesSubaccount).Append("\n");
            sb.Append("  SendDunningLettersbyEmail: ").Append(SendDunningLettersbyEmail).Append("\n");
            sb.Append("  SendInvoicesbyEmail: ").Append(SendInvoicesbyEmail).Append("\n");
            sb.Append("  SendStatementsByEmail: ").Append(SendStatementsByEmail).Append("\n");
            sb.Append("  ShippingRule: ").Append(ShippingRule).Append("\n");
            sb.Append("  ShippingTerms: ").Append(ShippingTerms).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  StatementCycleID: ").Append(StatementCycleID).Append("\n");
            sb.Append("  StatementType: ").Append(StatementType).Append("\n");
            sb.Append("  TaxZoneID: ").Append(TaxZoneID).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  UnrealizedGainAccount: ").Append(UnrealizedGainAccount).Append("\n");
            sb.Append("  UnrealizedGainSubaccount: ").Append(UnrealizedGainSubaccount).Append("\n");
            sb.Append("  UnrealizedLossAccount: ").Append(UnrealizedLossAccount).Append("\n");
            sb.Append("  UnrealizedLossSubaccount: ").Append(UnrealizedLossSubaccount).Append("\n");
            sb.Append("  WriteOffLimit: ").Append(WriteOffLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerClass);
        }

        /// <summary>
        /// Returns true if CustomerClass instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerClass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerClass input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ApplyOverdueCharges == input.ApplyOverdueCharges ||
                    (this.ApplyOverdueCharges != null &&
                    this.ApplyOverdueCharges.Equals(input.ApplyOverdueCharges))
                ) && base.Equals(input) && 
                (
                    this.ARAccount == input.ARAccount ||
                    (this.ARAccount != null &&
                    this.ARAccount.Equals(input.ARAccount))
                ) && base.Equals(input) && 
                (
                    this.ARSubaccount == input.ARSubaccount ||
                    (this.ARSubaccount != null &&
                    this.ARSubaccount.Equals(input.ARSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.AutoApplyPayments == input.AutoApplyPayments ||
                    (this.AutoApplyPayments != null &&
                    this.AutoApplyPayments.Equals(input.AutoApplyPayments))
                ) && base.Equals(input) && 
                (
                    this.CashDiscountAccount == input.CashDiscountAccount ||
                    (this.CashDiscountAccount != null &&
                    this.CashDiscountAccount.Equals(input.CashDiscountAccount))
                ) && base.Equals(input) && 
                (
                    this.CashDiscountSubaccount == input.CashDiscountSubaccount ||
                    (this.CashDiscountSubaccount != null &&
                    this.CashDiscountSubaccount.Equals(input.CashDiscountSubaccount))
                ) && base.Equals(input) && 
                (
                    this.ClassID == input.ClassID ||
                    (this.ClassID != null &&
                    this.ClassID.Equals(input.ClassID))
                ) && base.Equals(input) && 
                (
                    this.COGSAccount == input.COGSAccount ||
                    (this.COGSAccount != null &&
                    this.COGSAccount.Equals(input.COGSAccount))
                ) && base.Equals(input) && 
                (
                    this.COGSSubaccount == input.COGSSubaccount ||
                    (this.COGSSubaccount != null &&
                    this.COGSSubaccount.Equals(input.COGSSubaccount))
                ) && base.Equals(input) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.CreditDaysPastDue == input.CreditDaysPastDue ||
                    (this.CreditDaysPastDue != null &&
                    this.CreditDaysPastDue.Equals(input.CreditDaysPastDue))
                ) && base.Equals(input) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    (this.CreditLimit != null &&
                    this.CreditLimit.Equals(input.CreditLimit))
                ) && base.Equals(input) && 
                (
                    this.CreditVerification == input.CreditVerification ||
                    (this.CreditVerification != null &&
                    this.CreditVerification.Equals(input.CreditVerification))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRateType == input.CurrencyRateType ||
                    (this.CurrencyRateType != null &&
                    this.CurrencyRateType.Equals(input.CurrencyRateType))
                ) && base.Equals(input) && 
                (
                    this.DefaultLocationIDfromBranch == input.DefaultLocationIDfromBranch ||
                    (this.DefaultLocationIDfromBranch != null &&
                    this.DefaultLocationIDfromBranch.Equals(input.DefaultLocationIDfromBranch))
                ) && base.Equals(input) && 
                (
                    this.DefaultRestrictionGroup == input.DefaultRestrictionGroup ||
                    (this.DefaultRestrictionGroup != null &&
                    this.DefaultRestrictionGroup.Equals(input.DefaultRestrictionGroup))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.DiscountAccount == input.DiscountAccount ||
                    (this.DiscountAccount != null &&
                    this.DiscountAccount.Equals(input.DiscountAccount))
                ) && base.Equals(input) && 
                (
                    this.DiscountSubaccount == input.DiscountSubaccount ||
                    (this.DiscountSubaccount != null &&
                    this.DiscountSubaccount.Equals(input.DiscountSubaccount))
                ) && base.Equals(input) && 
                (
                    this.EnableCurrencyOverride == input.EnableCurrencyOverride ||
                    (this.EnableCurrencyOverride != null &&
                    this.EnableCurrencyOverride.Equals(input.EnableCurrencyOverride))
                ) && base.Equals(input) && 
                (
                    this.EnableRateOverride == input.EnableRateOverride ||
                    (this.EnableRateOverride != null &&
                    this.EnableRateOverride.Equals(input.EnableRateOverride))
                ) && base.Equals(input) && 
                (
                    this.EnableWriteOffs == input.EnableWriteOffs ||
                    (this.EnableWriteOffs != null &&
                    this.EnableWriteOffs.Equals(input.EnableWriteOffs))
                ) && base.Equals(input) && 
                (
                    this.EntityUsageType == input.EntityUsageType ||
                    (this.EntityUsageType != null &&
                    this.EntityUsageType.Equals(input.EntityUsageType))
                ) && base.Equals(input) && 
                (
                    this.FreightAccount == input.FreightAccount ||
                    (this.FreightAccount != null &&
                    this.FreightAccount.Equals(input.FreightAccount))
                ) && base.Equals(input) && 
                (
                    this.FreightSubaccount == input.FreightSubaccount ||
                    (this.FreightSubaccount != null &&
                    this.FreightSubaccount.Equals(input.FreightSubaccount))
                ) && base.Equals(input) && 
                (
                    this.GroupDocumentDiscountLimit == input.GroupDocumentDiscountLimit ||
                    (this.GroupDocumentDiscountLimit != null &&
                    this.GroupDocumentDiscountLimit.Equals(input.GroupDocumentDiscountLimit))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.MiscAccount == input.MiscAccount ||
                    (this.MiscAccount != null &&
                    this.MiscAccount.Equals(input.MiscAccount))
                ) && base.Equals(input) && 
                (
                    this.MiscSubaccount == input.MiscSubaccount ||
                    (this.MiscSubaccount != null &&
                    this.MiscSubaccount.Equals(input.MiscSubaccount))
                ) && base.Equals(input) && 
                (
                    this.MultiCurrencyStatements == input.MultiCurrencyStatements ||
                    (this.MultiCurrencyStatements != null &&
                    this.MultiCurrencyStatements.Equals(input.MultiCurrencyStatements))
                ) && base.Equals(input) && 
                (
                    this.OverdueChargeID == input.OverdueChargeID ||
                    (this.OverdueChargeID != null &&
                    this.OverdueChargeID.Equals(input.OverdueChargeID))
                ) && base.Equals(input) && 
                (
                    this.OverLimitAmount == input.OverLimitAmount ||
                    (this.OverLimitAmount != null &&
                    this.OverLimitAmount.Equals(input.OverLimitAmount))
                ) && base.Equals(input) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && base.Equals(input) && 
                (
                    this.PrepaymentAccount == input.PrepaymentAccount ||
                    (this.PrepaymentAccount != null &&
                    this.PrepaymentAccount.Equals(input.PrepaymentAccount))
                ) && base.Equals(input) && 
                (
                    this.PrepaymentSubaccount == input.PrepaymentSubaccount ||
                    (this.PrepaymentSubaccount != null &&
                    this.PrepaymentSubaccount.Equals(input.PrepaymentSubaccount))
                ) && base.Equals(input) && 
                (
                    this.PrintDunningLetters == input.PrintDunningLetters ||
                    (this.PrintDunningLetters != null &&
                    this.PrintDunningLetters.Equals(input.PrintDunningLetters))
                ) && base.Equals(input) && 
                (
                    this.PrintInvoices == input.PrintInvoices ||
                    (this.PrintInvoices != null &&
                    this.PrintInvoices.Equals(input.PrintInvoices))
                ) && base.Equals(input) && 
                (
                    this.PrintStatements == input.PrintStatements ||
                    (this.PrintStatements != null &&
                    this.PrintStatements.Equals(input.PrintStatements))
                ) && base.Equals(input) && 
                (
                    this.RequireEntityUsageType == input.RequireEntityUsageType ||
                    (this.RequireEntityUsageType != null &&
                    this.RequireEntityUsageType.Equals(input.RequireEntityUsageType))
                ) && base.Equals(input) && 
                (
                    this.RequireTaxZone == input.RequireTaxZone ||
                    (this.RequireTaxZone != null &&
                    this.RequireTaxZone.Equals(input.RequireTaxZone))
                ) && base.Equals(input) && 
                (
                    this.SalesAccount == input.SalesAccount ||
                    (this.SalesAccount != null &&
                    this.SalesAccount.Equals(input.SalesAccount))
                ) && base.Equals(input) && 
                (
                    this.SalespersonID == input.SalespersonID ||
                    (this.SalespersonID != null &&
                    this.SalespersonID.Equals(input.SalespersonID))
                ) && base.Equals(input) && 
                (
                    this.SalesSubaccount == input.SalesSubaccount ||
                    (this.SalesSubaccount != null &&
                    this.SalesSubaccount.Equals(input.SalesSubaccount))
                ) && base.Equals(input) && 
                (
                    this.SendDunningLettersbyEmail == input.SendDunningLettersbyEmail ||
                    (this.SendDunningLettersbyEmail != null &&
                    this.SendDunningLettersbyEmail.Equals(input.SendDunningLettersbyEmail))
                ) && base.Equals(input) && 
                (
                    this.SendInvoicesbyEmail == input.SendInvoicesbyEmail ||
                    (this.SendInvoicesbyEmail != null &&
                    this.SendInvoicesbyEmail.Equals(input.SendInvoicesbyEmail))
                ) && base.Equals(input) && 
                (
                    this.SendStatementsByEmail == input.SendStatementsByEmail ||
                    (this.SendStatementsByEmail != null &&
                    this.SendStatementsByEmail.Equals(input.SendStatementsByEmail))
                ) && base.Equals(input) && 
                (
                    this.ShippingRule == input.ShippingRule ||
                    (this.ShippingRule != null &&
                    this.ShippingRule.Equals(input.ShippingRule))
                ) && base.Equals(input) && 
                (
                    this.ShippingTerms == input.ShippingTerms ||
                    (this.ShippingTerms != null &&
                    this.ShippingTerms.Equals(input.ShippingTerms))
                ) && base.Equals(input) && 
                (
                    this.ShipVia == input.ShipVia ||
                    (this.ShipVia != null &&
                    this.ShipVia.Equals(input.ShipVia))
                ) && base.Equals(input) && 
                (
                    this.StatementCycleID == input.StatementCycleID ||
                    (this.StatementCycleID != null &&
                    this.StatementCycleID.Equals(input.StatementCycleID))
                ) && base.Equals(input) && 
                (
                    this.StatementType == input.StatementType ||
                    (this.StatementType != null &&
                    this.StatementType.Equals(input.StatementType))
                ) && base.Equals(input) && 
                (
                    this.TaxZoneID == input.TaxZoneID ||
                    (this.TaxZoneID != null &&
                    this.TaxZoneID.Equals(input.TaxZoneID))
                ) && base.Equals(input) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && base.Equals(input) && 
                (
                    this.UnrealizedGainAccount == input.UnrealizedGainAccount ||
                    (this.UnrealizedGainAccount != null &&
                    this.UnrealizedGainAccount.Equals(input.UnrealizedGainAccount))
                ) && base.Equals(input) && 
                (
                    this.UnrealizedGainSubaccount == input.UnrealizedGainSubaccount ||
                    (this.UnrealizedGainSubaccount != null &&
                    this.UnrealizedGainSubaccount.Equals(input.UnrealizedGainSubaccount))
                ) && base.Equals(input) && 
                (
                    this.UnrealizedLossAccount == input.UnrealizedLossAccount ||
                    (this.UnrealizedLossAccount != null &&
                    this.UnrealizedLossAccount.Equals(input.UnrealizedLossAccount))
                ) && base.Equals(input) && 
                (
                    this.UnrealizedLossSubaccount == input.UnrealizedLossSubaccount ||
                    (this.UnrealizedLossSubaccount != null &&
                    this.UnrealizedLossSubaccount.Equals(input.UnrealizedLossSubaccount))
                ) && base.Equals(input) && 
                (
                    this.WriteOffLimit == input.WriteOffLimit ||
                    (this.WriteOffLimit != null &&
                    this.WriteOffLimit.Equals(input.WriteOffLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ApplyOverdueCharges != null)
                    hashCode = hashCode * 59 + this.ApplyOverdueCharges.GetHashCode();
                if (this.ARAccount != null)
                    hashCode = hashCode * 59 + this.ARAccount.GetHashCode();
                if (this.ARSubaccount != null)
                    hashCode = hashCode * 59 + this.ARSubaccount.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.AutoApplyPayments != null)
                    hashCode = hashCode * 59 + this.AutoApplyPayments.GetHashCode();
                if (this.CashDiscountAccount != null)
                    hashCode = hashCode * 59 + this.CashDiscountAccount.GetHashCode();
                if (this.CashDiscountSubaccount != null)
                    hashCode = hashCode * 59 + this.CashDiscountSubaccount.GetHashCode();
                if (this.ClassID != null)
                    hashCode = hashCode * 59 + this.ClassID.GetHashCode();
                if (this.COGSAccount != null)
                    hashCode = hashCode * 59 + this.COGSAccount.GetHashCode();
                if (this.COGSSubaccount != null)
                    hashCode = hashCode * 59 + this.COGSSubaccount.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CreditDaysPastDue != null)
                    hashCode = hashCode * 59 + this.CreditDaysPastDue.GetHashCode();
                if (this.CreditLimit != null)
                    hashCode = hashCode * 59 + this.CreditLimit.GetHashCode();
                if (this.CreditVerification != null)
                    hashCode = hashCode * 59 + this.CreditVerification.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CurrencyRateType != null)
                    hashCode = hashCode * 59 + this.CurrencyRateType.GetHashCode();
                if (this.DefaultLocationIDfromBranch != null)
                    hashCode = hashCode * 59 + this.DefaultLocationIDfromBranch.GetHashCode();
                if (this.DefaultRestrictionGroup != null)
                    hashCode = hashCode * 59 + this.DefaultRestrictionGroup.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DiscountAccount != null)
                    hashCode = hashCode * 59 + this.DiscountAccount.GetHashCode();
                if (this.DiscountSubaccount != null)
                    hashCode = hashCode * 59 + this.DiscountSubaccount.GetHashCode();
                if (this.EnableCurrencyOverride != null)
                    hashCode = hashCode * 59 + this.EnableCurrencyOverride.GetHashCode();
                if (this.EnableRateOverride != null)
                    hashCode = hashCode * 59 + this.EnableRateOverride.GetHashCode();
                if (this.EnableWriteOffs != null)
                    hashCode = hashCode * 59 + this.EnableWriteOffs.GetHashCode();
                if (this.EntityUsageType != null)
                    hashCode = hashCode * 59 + this.EntityUsageType.GetHashCode();
                if (this.FreightAccount != null)
                    hashCode = hashCode * 59 + this.FreightAccount.GetHashCode();
                if (this.FreightSubaccount != null)
                    hashCode = hashCode * 59 + this.FreightSubaccount.GetHashCode();
                if (this.GroupDocumentDiscountLimit != null)
                    hashCode = hashCode * 59 + this.GroupDocumentDiscountLimit.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.MiscAccount != null)
                    hashCode = hashCode * 59 + this.MiscAccount.GetHashCode();
                if (this.MiscSubaccount != null)
                    hashCode = hashCode * 59 + this.MiscSubaccount.GetHashCode();
                if (this.MultiCurrencyStatements != null)
                    hashCode = hashCode * 59 + this.MultiCurrencyStatements.GetHashCode();
                if (this.OverdueChargeID != null)
                    hashCode = hashCode * 59 + this.OverdueChargeID.GetHashCode();
                if (this.OverLimitAmount != null)
                    hashCode = hashCode * 59 + this.OverLimitAmount.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PrepaymentAccount != null)
                    hashCode = hashCode * 59 + this.PrepaymentAccount.GetHashCode();
                if (this.PrepaymentSubaccount != null)
                    hashCode = hashCode * 59 + this.PrepaymentSubaccount.GetHashCode();
                if (this.PrintDunningLetters != null)
                    hashCode = hashCode * 59 + this.PrintDunningLetters.GetHashCode();
                if (this.PrintInvoices != null)
                    hashCode = hashCode * 59 + this.PrintInvoices.GetHashCode();
                if (this.PrintStatements != null)
                    hashCode = hashCode * 59 + this.PrintStatements.GetHashCode();
                if (this.RequireEntityUsageType != null)
                    hashCode = hashCode * 59 + this.RequireEntityUsageType.GetHashCode();
                if (this.RequireTaxZone != null)
                    hashCode = hashCode * 59 + this.RequireTaxZone.GetHashCode();
                if (this.SalesAccount != null)
                    hashCode = hashCode * 59 + this.SalesAccount.GetHashCode();
                if (this.SalespersonID != null)
                    hashCode = hashCode * 59 + this.SalespersonID.GetHashCode();
                if (this.SalesSubaccount != null)
                    hashCode = hashCode * 59 + this.SalesSubaccount.GetHashCode();
                if (this.SendDunningLettersbyEmail != null)
                    hashCode = hashCode * 59 + this.SendDunningLettersbyEmail.GetHashCode();
                if (this.SendInvoicesbyEmail != null)
                    hashCode = hashCode * 59 + this.SendInvoicesbyEmail.GetHashCode();
                if (this.SendStatementsByEmail != null)
                    hashCode = hashCode * 59 + this.SendStatementsByEmail.GetHashCode();
                if (this.ShippingRule != null)
                    hashCode = hashCode * 59 + this.ShippingRule.GetHashCode();
                if (this.ShippingTerms != null)
                    hashCode = hashCode * 59 + this.ShippingTerms.GetHashCode();
                if (this.ShipVia != null)
                    hashCode = hashCode * 59 + this.ShipVia.GetHashCode();
                if (this.StatementCycleID != null)
                    hashCode = hashCode * 59 + this.StatementCycleID.GetHashCode();
                if (this.StatementType != null)
                    hashCode = hashCode * 59 + this.StatementType.GetHashCode();
                if (this.TaxZoneID != null)
                    hashCode = hashCode * 59 + this.TaxZoneID.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.UnrealizedGainAccount != null)
                    hashCode = hashCode * 59 + this.UnrealizedGainAccount.GetHashCode();
                if (this.UnrealizedGainSubaccount != null)
                    hashCode = hashCode * 59 + this.UnrealizedGainSubaccount.GetHashCode();
                if (this.UnrealizedLossAccount != null)
                    hashCode = hashCode * 59 + this.UnrealizedLossAccount.GetHashCode();
                if (this.UnrealizedLossSubaccount != null)
                    hashCode = hashCode * 59 + this.UnrealizedLossSubaccount.GetHashCode();
                if (this.WriteOffLimit != null)
                    hashCode = hashCode * 59 + this.WriteOffLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
