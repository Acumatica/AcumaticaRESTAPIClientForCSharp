/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// Customer
    /// </summary>
    [DataContract]
    public partial class Customer : Entity,  IEquatable<Customer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="accountRef">accountRef.</param>
        /// <param name="applyOverdueCharges">applyOverdueCharges.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="autoApplyPayments">autoApplyPayments.</param>
        /// <param name="billingAddressSameAsMain">billingAddressSameAsMain.</param>
        /// <param name="billingContact">billingContact.</param>
        /// <param name="billingContactSameAsMain">billingContactSameAsMain.</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="creditVerificationRules">creditVerificationRules.</param>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="currencyRateType">currencyRateType.</param>
        /// <param name="customerClass">customerClass.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="customerName">customerName.</param>
        /// <param name="enableCurrencyOverride">enableCurrencyOverride.</param>
        /// <param name="enableRateOverride">enableRateOverride.</param>
        /// <param name="enableWriteOffs">enableWriteOffs.</param>
        /// <param name="fOBPoint">fOBPoint.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="leadTimedays">leadTimedays.</param>
        /// <param name="locationName">locationName.</param>
        /// <param name="mainContact">mainContact.</param>
        /// <param name="multiCurrencyStatements">multiCurrencyStatements.</param>
        /// <param name="orderPriority">orderPriority.</param>
        /// <param name="parentRecord">parentRecord.</param>
        /// <param name="paymentInstructions">paymentInstructions.</param>
        /// <param name="priceClassID">priceClassID.</param>
        /// <param name="printDunningLetters">printDunningLetters.</param>
        /// <param name="printInvoices">printInvoices.</param>
        /// <param name="printStatements">printStatements.</param>
        /// <param name="residentialDelivery">residentialDelivery.</param>
        /// <param name="salespersons">salespersons.</param>
        /// <param name="saturdayDelivery">saturdayDelivery.</param>
        /// <param name="sendDunningLettersbyEmail">sendDunningLettersbyEmail.</param>
        /// <param name="sendInvoicesbyEmail">sendInvoicesbyEmail.</param>
        /// <param name="sendStatementsbyEmail">sendStatementsbyEmail.</param>
        /// <param name="shippingAddressSameAsMain">shippingAddressSameAsMain.</param>
        /// <param name="shippingBranch">shippingBranch.</param>
        /// <param name="shippingContact">shippingContact.</param>
        /// <param name="shippingContactSameAsMain">shippingContactSameAsMain.</param>
        /// <param name="shippingRule">shippingRule.</param>
        /// <param name="shippingTerms">shippingTerms.</param>
        /// <param name="shippingZoneID">shippingZoneID.</param>
        /// <param name="shipVia">shipVia.</param>
        /// <param name="statementCycleID">statementCycleID.</param>
        /// <param name="statementType">statementType.</param>
        /// <param name="status">status.</param>
        /// <param name="taxRegistrationID">taxRegistrationID.</param>
        /// <param name="taxZone">taxZone.</param>
        /// <param name="terms">terms.</param>
        /// <param name="warehouseID">warehouseID.</param>
        /// <param name="writeOffLimit">writeOffLimit.</param>
        public Customer(StringValue accountRef = default(StringValue), BooleanValue applyOverdueCharges = default(BooleanValue), List<AttributeDetail> attributes = default(List<AttributeDetail>), BooleanValue autoApplyPayments = default(BooleanValue), BooleanValue billingAddressSameAsMain = default(BooleanValue), Contact billingContact = default(Contact), BooleanValue billingContactSameAsMain = default(BooleanValue), List<CustomerContact> contacts = default(List<CustomerContact>), DateTimeValue createdDateTime = default(DateTimeValue), CreditVerificationRules creditVerificationRules = default(CreditVerificationRules), StringValue currencyID = default(StringValue), StringValue currencyRateType = default(StringValue), StringValue customerClass = default(StringValue), StringValue customerID = default(StringValue), StringValue customerName = default(StringValue), BooleanValue enableCurrencyOverride = default(BooleanValue), BooleanValue enableRateOverride = default(BooleanValue), BooleanValue enableWriteOffs = default(BooleanValue), StringValue fOBPoint = default(StringValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), ShortValue leadTimedays = default(ShortValue), StringValue locationName = default(StringValue), Contact mainContact = default(Contact), BooleanValue multiCurrencyStatements = default(BooleanValue), ShortValue orderPriority = default(ShortValue), StringValue parentRecord = default(StringValue), List<BusinessAccountPaymentInstructionDetail> paymentInstructions = default(List<BusinessAccountPaymentInstructionDetail>), StringValue priceClassID = default(StringValue), BooleanValue printDunningLetters = default(BooleanValue), BooleanValue printInvoices = default(BooleanValue), BooleanValue printStatements = default(BooleanValue), BooleanValue residentialDelivery = default(BooleanValue), List<CustomerSalesPerson> salespersons = default(List<CustomerSalesPerson>), BooleanValue saturdayDelivery = default(BooleanValue), BooleanValue sendDunningLettersbyEmail = default(BooleanValue), BooleanValue sendInvoicesbyEmail = default(BooleanValue), BooleanValue sendStatementsbyEmail = default(BooleanValue), BooleanValue shippingAddressSameAsMain = default(BooleanValue), StringValue shippingBranch = default(StringValue), Contact shippingContact = default(Contact), BooleanValue shippingContactSameAsMain = default(BooleanValue), StringValue shippingRule = default(StringValue), StringValue shippingTerms = default(StringValue), StringValue shippingZoneID = default(StringValue), StringValue shipVia = default(StringValue), StringValue statementCycleID = default(StringValue), StringValue statementType = default(StringValue), StringValue status = default(StringValue), StringValue taxRegistrationID = default(StringValue), StringValue taxZone = default(StringValue), StringValue terms = default(StringValue), StringValue warehouseID = default(StringValue), DecimalValue writeOffLimit = default(DecimalValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AccountRef = accountRef;
            this.ApplyOverdueCharges = applyOverdueCharges;
            this.Attributes = attributes;
            this.AutoApplyPayments = autoApplyPayments;
            this.BillingAddressSameAsMain = billingAddressSameAsMain;
            this.BillingContact = billingContact;
            this.BillingContactSameAsMain = billingContactSameAsMain;
            this.Contacts = contacts;
            this.CreatedDateTime = createdDateTime;
            this.CreditVerificationRules = creditVerificationRules;
            this.CurrencyID = currencyID;
            this.CurrencyRateType = currencyRateType;
            this.CustomerClass = customerClass;
            this.CustomerID = customerID;
            this.CustomerName = customerName;
            this.EnableCurrencyOverride = enableCurrencyOverride;
            this.EnableRateOverride = enableRateOverride;
            this.EnableWriteOffs = enableWriteOffs;
            this.FOBPoint = fOBPoint;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.LeadTimedays = leadTimedays;
            this.LocationName = locationName;
            this.MainContact = mainContact;
            this.MultiCurrencyStatements = multiCurrencyStatements;
            this.OrderPriority = orderPriority;
            this.ParentRecord = parentRecord;
            this.PaymentInstructions = paymentInstructions;
            this.PriceClassID = priceClassID;
            this.PrintDunningLetters = printDunningLetters;
            this.PrintInvoices = printInvoices;
            this.PrintStatements = printStatements;
            this.ResidentialDelivery = residentialDelivery;
            this.Salespersons = salespersons;
            this.SaturdayDelivery = saturdayDelivery;
            this.SendDunningLettersbyEmail = sendDunningLettersbyEmail;
            this.SendInvoicesbyEmail = sendInvoicesbyEmail;
            this.SendStatementsbyEmail = sendStatementsbyEmail;
            this.ShippingAddressSameAsMain = shippingAddressSameAsMain;
            this.ShippingBranch = shippingBranch;
            this.ShippingContact = shippingContact;
            this.ShippingContactSameAsMain = shippingContactSameAsMain;
            this.ShippingRule = shippingRule;
            this.ShippingTerms = shippingTerms;
            this.ShippingZoneID = shippingZoneID;
            this.ShipVia = shipVia;
            this.StatementCycleID = statementCycleID;
            this.StatementType = statementType;
            this.Status = status;
            this.TaxRegistrationID = taxRegistrationID;
            this.TaxZone = taxZone;
            this.Terms = terms;
            this.WarehouseID = warehouseID;
            this.WriteOffLimit = writeOffLimit;
        }
        
        /// <summary>
        /// Gets or Sets AccountRef
        /// </summary>
        [DataMember(Name="AccountRef", EmitDefaultValue=false)]
        public StringValue AccountRef { get; set; }

        /// <summary>
        /// Gets or Sets ApplyOverdueCharges
        /// </summary>
        [DataMember(Name="ApplyOverdueCharges", EmitDefaultValue=false)]
        public BooleanValue ApplyOverdueCharges { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<AttributeDetail> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets AutoApplyPayments
        /// </summary>
        [DataMember(Name="AutoApplyPayments", EmitDefaultValue=false)]
        public BooleanValue AutoApplyPayments { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressSameAsMain
        /// </summary>
        [DataMember(Name="BillingAddressSameAsMain", EmitDefaultValue=false)]
        public BooleanValue BillingAddressSameAsMain { get; set; }

        /// <summary>
        /// Gets or Sets BillingContact
        /// </summary>
        [DataMember(Name="BillingContact", EmitDefaultValue=false)]
        public Contact BillingContact { get; set; }

        /// <summary>
        /// Gets or Sets BillingContactSameAsMain
        /// </summary>
        [DataMember(Name="BillingContactSameAsMain", EmitDefaultValue=false)]
        public BooleanValue BillingContactSameAsMain { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name="Contacts", EmitDefaultValue=false)]
        public List<CustomerContact> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CreditVerificationRules
        /// </summary>
        [DataMember(Name="CreditVerificationRules", EmitDefaultValue=false)]
        public CreditVerificationRules CreditVerificationRules { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyRateType
        /// </summary>
        [DataMember(Name="CurrencyRateType", EmitDefaultValue=false)]
        public StringValue CurrencyRateType { get; set; }

        /// <summary>
        /// Gets or Sets CustomerClass
        /// </summary>
        [DataMember(Name="CustomerClass", EmitDefaultValue=false)]
        public StringValue CustomerClass { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="CustomerID", EmitDefaultValue=false)]
        public StringValue CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name="CustomerName", EmitDefaultValue=false)]
        public StringValue CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets EnableCurrencyOverride
        /// </summary>
        [DataMember(Name="EnableCurrencyOverride", EmitDefaultValue=false)]
        public BooleanValue EnableCurrencyOverride { get; set; }

        /// <summary>
        /// Gets or Sets EnableRateOverride
        /// </summary>
        [DataMember(Name="EnableRateOverride", EmitDefaultValue=false)]
        public BooleanValue EnableRateOverride { get; set; }

        /// <summary>
        /// Gets or Sets EnableWriteOffs
        /// </summary>
        [DataMember(Name="EnableWriteOffs", EmitDefaultValue=false)]
        public BooleanValue EnableWriteOffs { get; set; }

        /// <summary>
        /// Gets or Sets FOBPoint
        /// </summary>
        [DataMember(Name="FOBPoint", EmitDefaultValue=false)]
        public StringValue FOBPoint { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LeadTimedays
        /// </summary>
        [DataMember(Name="LeadTimedays", EmitDefaultValue=false)]
        public ShortValue LeadTimedays { get; set; }

        /// <summary>
        /// Gets or Sets LocationName
        /// </summary>
        [DataMember(Name="LocationName", EmitDefaultValue=false)]
        public StringValue LocationName { get; set; }

        /// <summary>
        /// Gets or Sets MainContact
        /// </summary>
        [DataMember(Name="MainContact", EmitDefaultValue=false)]
        public Contact MainContact { get; set; }

        /// <summary>
        /// Gets or Sets MultiCurrencyStatements
        /// </summary>
        [DataMember(Name="MultiCurrencyStatements", EmitDefaultValue=false)]
        public BooleanValue MultiCurrencyStatements { get; set; }

        /// <summary>
        /// Gets or Sets OrderPriority
        /// </summary>
        [DataMember(Name="OrderPriority", EmitDefaultValue=false)]
        public ShortValue OrderPriority { get; set; }

        /// <summary>
        /// Gets or Sets ParentRecord
        /// </summary>
        [DataMember(Name="ParentRecord", EmitDefaultValue=false)]
        public StringValue ParentRecord { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInstructions
        /// </summary>
        [DataMember(Name="PaymentInstructions", EmitDefaultValue=false)]
        public List<BusinessAccountPaymentInstructionDetail> PaymentInstructions { get; set; }

        /// <summary>
        /// Gets or Sets PriceClassID
        /// </summary>
        [DataMember(Name="PriceClassID", EmitDefaultValue=false)]
        public StringValue PriceClassID { get; set; }

        /// <summary>
        /// Gets or Sets PrintDunningLetters
        /// </summary>
        [DataMember(Name="PrintDunningLetters", EmitDefaultValue=false)]
        public BooleanValue PrintDunningLetters { get; set; }

        /// <summary>
        /// Gets or Sets PrintInvoices
        /// </summary>
        [DataMember(Name="PrintInvoices", EmitDefaultValue=false)]
        public BooleanValue PrintInvoices { get; set; }

        /// <summary>
        /// Gets or Sets PrintStatements
        /// </summary>
        [DataMember(Name="PrintStatements", EmitDefaultValue=false)]
        public BooleanValue PrintStatements { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialDelivery
        /// </summary>
        [DataMember(Name="ResidentialDelivery", EmitDefaultValue=false)]
        public BooleanValue ResidentialDelivery { get; set; }

        /// <summary>
        /// Gets or Sets Salespersons
        /// </summary>
        [DataMember(Name="Salespersons", EmitDefaultValue=false)]
        public List<CustomerSalesPerson> Salespersons { get; set; }

        /// <summary>
        /// Gets or Sets SaturdayDelivery
        /// </summary>
        [DataMember(Name="SaturdayDelivery", EmitDefaultValue=false)]
        public BooleanValue SaturdayDelivery { get; set; }

        /// <summary>
        /// Gets or Sets SendDunningLettersbyEmail
        /// </summary>
        [DataMember(Name="SendDunningLettersbyEmail", EmitDefaultValue=false)]
        public BooleanValue SendDunningLettersbyEmail { get; set; }

        /// <summary>
        /// Gets or Sets SendInvoicesbyEmail
        /// </summary>
        [DataMember(Name="SendInvoicesbyEmail", EmitDefaultValue=false)]
        public BooleanValue SendInvoicesbyEmail { get; set; }

        /// <summary>
        /// Gets or Sets SendStatementsbyEmail
        /// </summary>
        [DataMember(Name="SendStatementsbyEmail", EmitDefaultValue=false)]
        public BooleanValue SendStatementsbyEmail { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddressSameAsMain
        /// </summary>
        [DataMember(Name="ShippingAddressSameAsMain", EmitDefaultValue=false)]
        public BooleanValue ShippingAddressSameAsMain { get; set; }

        /// <summary>
        /// Gets or Sets ShippingBranch
        /// </summary>
        [DataMember(Name="ShippingBranch", EmitDefaultValue=false)]
        public StringValue ShippingBranch { get; set; }

        /// <summary>
        /// Gets or Sets ShippingContact
        /// </summary>
        [DataMember(Name="ShippingContact", EmitDefaultValue=false)]
        public Contact ShippingContact { get; set; }

        /// <summary>
        /// Gets or Sets ShippingContactSameAsMain
        /// </summary>
        [DataMember(Name="ShippingContactSameAsMain", EmitDefaultValue=false)]
        public BooleanValue ShippingContactSameAsMain { get; set; }

        /// <summary>
        /// Gets or Sets ShippingRule
        /// </summary>
        [DataMember(Name="ShippingRule", EmitDefaultValue=false)]
        public StringValue ShippingRule { get; set; }

        /// <summary>
        /// Gets or Sets ShippingTerms
        /// </summary>
        [DataMember(Name="ShippingTerms", EmitDefaultValue=false)]
        public StringValue ShippingTerms { get; set; }

        /// <summary>
        /// Gets or Sets ShippingZoneID
        /// </summary>
        [DataMember(Name="ShippingZoneID", EmitDefaultValue=false)]
        public StringValue ShippingZoneID { get; set; }

        /// <summary>
        /// Gets or Sets ShipVia
        /// </summary>
        [DataMember(Name="ShipVia", EmitDefaultValue=false)]
        public StringValue ShipVia { get; set; }

        /// <summary>
        /// Gets or Sets StatementCycleID
        /// </summary>
        [DataMember(Name="StatementCycleID", EmitDefaultValue=false)]
        public StringValue StatementCycleID { get; set; }

        /// <summary>
        /// Gets or Sets StatementType
        /// </summary>
        [DataMember(Name="StatementType", EmitDefaultValue=false)]
        public StringValue StatementType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets TaxRegistrationID
        /// </summary>
        [DataMember(Name="TaxRegistrationID", EmitDefaultValue=false)]
        public StringValue TaxRegistrationID { get; set; }

        /// <summary>
        /// Gets or Sets TaxZone
        /// </summary>
        [DataMember(Name="TaxZone", EmitDefaultValue=false)]
        public StringValue TaxZone { get; set; }

        /// <summary>
        /// Gets or Sets Terms
        /// </summary>
        [DataMember(Name="Terms", EmitDefaultValue=false)]
        public StringValue Terms { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseID
        /// </summary>
        [DataMember(Name="WarehouseID", EmitDefaultValue=false)]
        public StringValue WarehouseID { get; set; }

        /// <summary>
        /// Gets or Sets WriteOffLimit
        /// </summary>
        [DataMember(Name="WriteOffLimit", EmitDefaultValue=false)]
        public DecimalValue WriteOffLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountRef: ").Append(AccountRef).Append("\n");
            sb.Append("  ApplyOverdueCharges: ").Append(ApplyOverdueCharges).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  AutoApplyPayments: ").Append(AutoApplyPayments).Append("\n");
            sb.Append("  BillingAddressSameAsMain: ").Append(BillingAddressSameAsMain).Append("\n");
            sb.Append("  BillingContact: ").Append(BillingContact).Append("\n");
            sb.Append("  BillingContactSameAsMain: ").Append(BillingContactSameAsMain).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  CreditVerificationRules: ").Append(CreditVerificationRules).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CurrencyRateType: ").Append(CurrencyRateType).Append("\n");
            sb.Append("  CustomerClass: ").Append(CustomerClass).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  EnableCurrencyOverride: ").Append(EnableCurrencyOverride).Append("\n");
            sb.Append("  EnableRateOverride: ").Append(EnableRateOverride).Append("\n");
            sb.Append("  EnableWriteOffs: ").Append(EnableWriteOffs).Append("\n");
            sb.Append("  FOBPoint: ").Append(FOBPoint).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  LeadTimedays: ").Append(LeadTimedays).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  MainContact: ").Append(MainContact).Append("\n");
            sb.Append("  MultiCurrencyStatements: ").Append(MultiCurrencyStatements).Append("\n");
            sb.Append("  OrderPriority: ").Append(OrderPriority).Append("\n");
            sb.Append("  ParentRecord: ").Append(ParentRecord).Append("\n");
            sb.Append("  PaymentInstructions: ").Append(PaymentInstructions).Append("\n");
            sb.Append("  PriceClassID: ").Append(PriceClassID).Append("\n");
            sb.Append("  PrintDunningLetters: ").Append(PrintDunningLetters).Append("\n");
            sb.Append("  PrintInvoices: ").Append(PrintInvoices).Append("\n");
            sb.Append("  PrintStatements: ").Append(PrintStatements).Append("\n");
            sb.Append("  ResidentialDelivery: ").Append(ResidentialDelivery).Append("\n");
            sb.Append("  Salespersons: ").Append(Salespersons).Append("\n");
            sb.Append("  SaturdayDelivery: ").Append(SaturdayDelivery).Append("\n");
            sb.Append("  SendDunningLettersbyEmail: ").Append(SendDunningLettersbyEmail).Append("\n");
            sb.Append("  SendInvoicesbyEmail: ").Append(SendInvoicesbyEmail).Append("\n");
            sb.Append("  SendStatementsbyEmail: ").Append(SendStatementsbyEmail).Append("\n");
            sb.Append("  ShippingAddressSameAsMain: ").Append(ShippingAddressSameAsMain).Append("\n");
            sb.Append("  ShippingBranch: ").Append(ShippingBranch).Append("\n");
            sb.Append("  ShippingContact: ").Append(ShippingContact).Append("\n");
            sb.Append("  ShippingContactSameAsMain: ").Append(ShippingContactSameAsMain).Append("\n");
            sb.Append("  ShippingRule: ").Append(ShippingRule).Append("\n");
            sb.Append("  ShippingTerms: ").Append(ShippingTerms).Append("\n");
            sb.Append("  ShippingZoneID: ").Append(ShippingZoneID).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  StatementCycleID: ").Append(StatementCycleID).Append("\n");
            sb.Append("  StatementType: ").Append(StatementType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaxRegistrationID: ").Append(TaxRegistrationID).Append("\n");
            sb.Append("  TaxZone: ").Append(TaxZone).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  WarehouseID: ").Append(WarehouseID).Append("\n");
            sb.Append("  WriteOffLimit: ").Append(WriteOffLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Customer);
        }

        /// <summary>
        /// Returns true if Customer instances are equal
        /// </summary>
        /// <param name="input">Instance of Customer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customer input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AccountRef == input.AccountRef ||
                    (this.AccountRef != null &&
                    this.AccountRef.Equals(input.AccountRef))
                ) && base.Equals(input) && 
                (
                    this.ApplyOverdueCharges == input.ApplyOverdueCharges ||
                    (this.ApplyOverdueCharges != null &&
                    this.ApplyOverdueCharges.Equals(input.ApplyOverdueCharges))
                ) && base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.AutoApplyPayments == input.AutoApplyPayments ||
                    (this.AutoApplyPayments != null &&
                    this.AutoApplyPayments.Equals(input.AutoApplyPayments))
                ) && base.Equals(input) && 
                (
                    this.BillingAddressSameAsMain == input.BillingAddressSameAsMain ||
                    (this.BillingAddressSameAsMain != null &&
                    this.BillingAddressSameAsMain.Equals(input.BillingAddressSameAsMain))
                ) && base.Equals(input) && 
                (
                    this.BillingContact == input.BillingContact ||
                    (this.BillingContact != null &&
                    this.BillingContact.Equals(input.BillingContact))
                ) && base.Equals(input) && 
                (
                    this.BillingContactSameAsMain == input.BillingContactSameAsMain ||
                    (this.BillingContactSameAsMain != null &&
                    this.BillingContactSameAsMain.Equals(input.BillingContactSameAsMain))
                ) && base.Equals(input) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.CreditVerificationRules == input.CreditVerificationRules ||
                    (this.CreditVerificationRules != null &&
                    this.CreditVerificationRules.Equals(input.CreditVerificationRules))
                ) && base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CurrencyRateType == input.CurrencyRateType ||
                    (this.CurrencyRateType != null &&
                    this.CurrencyRateType.Equals(input.CurrencyRateType))
                ) && base.Equals(input) && 
                (
                    this.CustomerClass == input.CustomerClass ||
                    (this.CustomerClass != null &&
                    this.CustomerClass.Equals(input.CustomerClass))
                ) && base.Equals(input) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && base.Equals(input) && 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && base.Equals(input) && 
                (
                    this.EnableCurrencyOverride == input.EnableCurrencyOverride ||
                    (this.EnableCurrencyOverride != null &&
                    this.EnableCurrencyOverride.Equals(input.EnableCurrencyOverride))
                ) && base.Equals(input) && 
                (
                    this.EnableRateOverride == input.EnableRateOverride ||
                    (this.EnableRateOverride != null &&
                    this.EnableRateOverride.Equals(input.EnableRateOverride))
                ) && base.Equals(input) && 
                (
                    this.EnableWriteOffs == input.EnableWriteOffs ||
                    (this.EnableWriteOffs != null &&
                    this.EnableWriteOffs.Equals(input.EnableWriteOffs))
                ) && base.Equals(input) && 
                (
                    this.FOBPoint == input.FOBPoint ||
                    (this.FOBPoint != null &&
                    this.FOBPoint.Equals(input.FOBPoint))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.LeadTimedays == input.LeadTimedays ||
                    (this.LeadTimedays != null &&
                    this.LeadTimedays.Equals(input.LeadTimedays))
                ) && base.Equals(input) && 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && base.Equals(input) && 
                (
                    this.MainContact == input.MainContact ||
                    (this.MainContact != null &&
                    this.MainContact.Equals(input.MainContact))
                ) && base.Equals(input) && 
                (
                    this.MultiCurrencyStatements == input.MultiCurrencyStatements ||
                    (this.MultiCurrencyStatements != null &&
                    this.MultiCurrencyStatements.Equals(input.MultiCurrencyStatements))
                ) && base.Equals(input) && 
                (
                    this.OrderPriority == input.OrderPriority ||
                    (this.OrderPriority != null &&
                    this.OrderPriority.Equals(input.OrderPriority))
                ) && base.Equals(input) && 
                (
                    this.ParentRecord == input.ParentRecord ||
                    (this.ParentRecord != null &&
                    this.ParentRecord.Equals(input.ParentRecord))
                ) && base.Equals(input) && 
                (
                    this.PaymentInstructions == input.PaymentInstructions ||
                    this.PaymentInstructions != null &&
                    this.PaymentInstructions.SequenceEqual(input.PaymentInstructions)
                ) && base.Equals(input) && 
                (
                    this.PriceClassID == input.PriceClassID ||
                    (this.PriceClassID != null &&
                    this.PriceClassID.Equals(input.PriceClassID))
                ) && base.Equals(input) && 
                (
                    this.PrintDunningLetters == input.PrintDunningLetters ||
                    (this.PrintDunningLetters != null &&
                    this.PrintDunningLetters.Equals(input.PrintDunningLetters))
                ) && base.Equals(input) && 
                (
                    this.PrintInvoices == input.PrintInvoices ||
                    (this.PrintInvoices != null &&
                    this.PrintInvoices.Equals(input.PrintInvoices))
                ) && base.Equals(input) && 
                (
                    this.PrintStatements == input.PrintStatements ||
                    (this.PrintStatements != null &&
                    this.PrintStatements.Equals(input.PrintStatements))
                ) && base.Equals(input) && 
                (
                    this.ResidentialDelivery == input.ResidentialDelivery ||
                    (this.ResidentialDelivery != null &&
                    this.ResidentialDelivery.Equals(input.ResidentialDelivery))
                ) && base.Equals(input) && 
                (
                    this.Salespersons == input.Salespersons ||
                    this.Salespersons != null &&
                    this.Salespersons.SequenceEqual(input.Salespersons)
                ) && base.Equals(input) && 
                (
                    this.SaturdayDelivery == input.SaturdayDelivery ||
                    (this.SaturdayDelivery != null &&
                    this.SaturdayDelivery.Equals(input.SaturdayDelivery))
                ) && base.Equals(input) && 
                (
                    this.SendDunningLettersbyEmail == input.SendDunningLettersbyEmail ||
                    (this.SendDunningLettersbyEmail != null &&
                    this.SendDunningLettersbyEmail.Equals(input.SendDunningLettersbyEmail))
                ) && base.Equals(input) && 
                (
                    this.SendInvoicesbyEmail == input.SendInvoicesbyEmail ||
                    (this.SendInvoicesbyEmail != null &&
                    this.SendInvoicesbyEmail.Equals(input.SendInvoicesbyEmail))
                ) && base.Equals(input) && 
                (
                    this.SendStatementsbyEmail == input.SendStatementsbyEmail ||
                    (this.SendStatementsbyEmail != null &&
                    this.SendStatementsbyEmail.Equals(input.SendStatementsbyEmail))
                ) && base.Equals(input) && 
                (
                    this.ShippingAddressSameAsMain == input.ShippingAddressSameAsMain ||
                    (this.ShippingAddressSameAsMain != null &&
                    this.ShippingAddressSameAsMain.Equals(input.ShippingAddressSameAsMain))
                ) && base.Equals(input) && 
                (
                    this.ShippingBranch == input.ShippingBranch ||
                    (this.ShippingBranch != null &&
                    this.ShippingBranch.Equals(input.ShippingBranch))
                ) && base.Equals(input) && 
                (
                    this.ShippingContact == input.ShippingContact ||
                    (this.ShippingContact != null &&
                    this.ShippingContact.Equals(input.ShippingContact))
                ) && base.Equals(input) && 
                (
                    this.ShippingContactSameAsMain == input.ShippingContactSameAsMain ||
                    (this.ShippingContactSameAsMain != null &&
                    this.ShippingContactSameAsMain.Equals(input.ShippingContactSameAsMain))
                ) && base.Equals(input) && 
                (
                    this.ShippingRule == input.ShippingRule ||
                    (this.ShippingRule != null &&
                    this.ShippingRule.Equals(input.ShippingRule))
                ) && base.Equals(input) && 
                (
                    this.ShippingTerms == input.ShippingTerms ||
                    (this.ShippingTerms != null &&
                    this.ShippingTerms.Equals(input.ShippingTerms))
                ) && base.Equals(input) && 
                (
                    this.ShippingZoneID == input.ShippingZoneID ||
                    (this.ShippingZoneID != null &&
                    this.ShippingZoneID.Equals(input.ShippingZoneID))
                ) && base.Equals(input) && 
                (
                    this.ShipVia == input.ShipVia ||
                    (this.ShipVia != null &&
                    this.ShipVia.Equals(input.ShipVia))
                ) && base.Equals(input) && 
                (
                    this.StatementCycleID == input.StatementCycleID ||
                    (this.StatementCycleID != null &&
                    this.StatementCycleID.Equals(input.StatementCycleID))
                ) && base.Equals(input) && 
                (
                    this.StatementType == input.StatementType ||
                    (this.StatementType != null &&
                    this.StatementType.Equals(input.StatementType))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.TaxRegistrationID == input.TaxRegistrationID ||
                    (this.TaxRegistrationID != null &&
                    this.TaxRegistrationID.Equals(input.TaxRegistrationID))
                ) && base.Equals(input) && 
                (
                    this.TaxZone == input.TaxZone ||
                    (this.TaxZone != null &&
                    this.TaxZone.Equals(input.TaxZone))
                ) && base.Equals(input) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && base.Equals(input) && 
                (
                    this.WarehouseID == input.WarehouseID ||
                    (this.WarehouseID != null &&
                    this.WarehouseID.Equals(input.WarehouseID))
                ) && base.Equals(input) && 
                (
                    this.WriteOffLimit == input.WriteOffLimit ||
                    (this.WriteOffLimit != null &&
                    this.WriteOffLimit.Equals(input.WriteOffLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountRef != null)
                    hashCode = hashCode * 59 + this.AccountRef.GetHashCode();
                if (this.ApplyOverdueCharges != null)
                    hashCode = hashCode * 59 + this.ApplyOverdueCharges.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.AutoApplyPayments != null)
                    hashCode = hashCode * 59 + this.AutoApplyPayments.GetHashCode();
                if (this.BillingAddressSameAsMain != null)
                    hashCode = hashCode * 59 + this.BillingAddressSameAsMain.GetHashCode();
                if (this.BillingContact != null)
                    hashCode = hashCode * 59 + this.BillingContact.GetHashCode();
                if (this.BillingContactSameAsMain != null)
                    hashCode = hashCode * 59 + this.BillingContactSameAsMain.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.CreditVerificationRules != null)
                    hashCode = hashCode * 59 + this.CreditVerificationRules.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CurrencyRateType != null)
                    hashCode = hashCode * 59 + this.CurrencyRateType.GetHashCode();
                if (this.CustomerClass != null)
                    hashCode = hashCode * 59 + this.CustomerClass.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.CustomerName != null)
                    hashCode = hashCode * 59 + this.CustomerName.GetHashCode();
                if (this.EnableCurrencyOverride != null)
                    hashCode = hashCode * 59 + this.EnableCurrencyOverride.GetHashCode();
                if (this.EnableRateOverride != null)
                    hashCode = hashCode * 59 + this.EnableRateOverride.GetHashCode();
                if (this.EnableWriteOffs != null)
                    hashCode = hashCode * 59 + this.EnableWriteOffs.GetHashCode();
                if (this.FOBPoint != null)
                    hashCode = hashCode * 59 + this.FOBPoint.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.LeadTimedays != null)
                    hashCode = hashCode * 59 + this.LeadTimedays.GetHashCode();
                if (this.LocationName != null)
                    hashCode = hashCode * 59 + this.LocationName.GetHashCode();
                if (this.MainContact != null)
                    hashCode = hashCode * 59 + this.MainContact.GetHashCode();
                if (this.MultiCurrencyStatements != null)
                    hashCode = hashCode * 59 + this.MultiCurrencyStatements.GetHashCode();
                if (this.OrderPriority != null)
                    hashCode = hashCode * 59 + this.OrderPriority.GetHashCode();
                if (this.ParentRecord != null)
                    hashCode = hashCode * 59 + this.ParentRecord.GetHashCode();
                if (this.PaymentInstructions != null)
                    hashCode = hashCode * 59 + this.PaymentInstructions.GetHashCode();
                if (this.PriceClassID != null)
                    hashCode = hashCode * 59 + this.PriceClassID.GetHashCode();
                if (this.PrintDunningLetters != null)
                    hashCode = hashCode * 59 + this.PrintDunningLetters.GetHashCode();
                if (this.PrintInvoices != null)
                    hashCode = hashCode * 59 + this.PrintInvoices.GetHashCode();
                if (this.PrintStatements != null)
                    hashCode = hashCode * 59 + this.PrintStatements.GetHashCode();
                if (this.ResidentialDelivery != null)
                    hashCode = hashCode * 59 + this.ResidentialDelivery.GetHashCode();
                if (this.Salespersons != null)
                    hashCode = hashCode * 59 + this.Salespersons.GetHashCode();
                if (this.SaturdayDelivery != null)
                    hashCode = hashCode * 59 + this.SaturdayDelivery.GetHashCode();
                if (this.SendDunningLettersbyEmail != null)
                    hashCode = hashCode * 59 + this.SendDunningLettersbyEmail.GetHashCode();
                if (this.SendInvoicesbyEmail != null)
                    hashCode = hashCode * 59 + this.SendInvoicesbyEmail.GetHashCode();
                if (this.SendStatementsbyEmail != null)
                    hashCode = hashCode * 59 + this.SendStatementsbyEmail.GetHashCode();
                if (this.ShippingAddressSameAsMain != null)
                    hashCode = hashCode * 59 + this.ShippingAddressSameAsMain.GetHashCode();
                if (this.ShippingBranch != null)
                    hashCode = hashCode * 59 + this.ShippingBranch.GetHashCode();
                if (this.ShippingContact != null)
                    hashCode = hashCode * 59 + this.ShippingContact.GetHashCode();
                if (this.ShippingContactSameAsMain != null)
                    hashCode = hashCode * 59 + this.ShippingContactSameAsMain.GetHashCode();
                if (this.ShippingRule != null)
                    hashCode = hashCode * 59 + this.ShippingRule.GetHashCode();
                if (this.ShippingTerms != null)
                    hashCode = hashCode * 59 + this.ShippingTerms.GetHashCode();
                if (this.ShippingZoneID != null)
                    hashCode = hashCode * 59 + this.ShippingZoneID.GetHashCode();
                if (this.ShipVia != null)
                    hashCode = hashCode * 59 + this.ShipVia.GetHashCode();
                if (this.StatementCycleID != null)
                    hashCode = hashCode * 59 + this.StatementCycleID.GetHashCode();
                if (this.StatementType != null)
                    hashCode = hashCode * 59 + this.StatementType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaxRegistrationID != null)
                    hashCode = hashCode * 59 + this.TaxRegistrationID.GetHashCode();
                if (this.TaxZone != null)
                    hashCode = hashCode * 59 + this.TaxZone.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                if (this.WarehouseID != null)
                    hashCode = hashCode * 59 + this.WarehouseID.GetHashCode();
                if (this.WriteOffLimit != null)
                    hashCode = hashCode * 59 + this.WriteOffLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
