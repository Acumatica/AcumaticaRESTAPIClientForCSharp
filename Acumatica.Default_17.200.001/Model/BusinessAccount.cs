/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// BusinessAccount
    /// </summary>
    [DataContract]
    public partial class BusinessAccount : Entity,  IEquatable<BusinessAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccount" /> class.
        /// </summary>
        /// <param name="accountRef">accountRef.</param>
        /// <param name="activities">activities.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="businessAccountID">businessAccountID.</param>
        /// <param name="campaigns">campaigns.</param>
        /// <param name="cases">cases.</param>
        /// <param name="classID">classID.</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="contracts">contracts.</param>
        /// <param name="defaultLocationSettings">defaultLocationSettings.</param>
        /// <param name="duplicate">duplicate.</param>
        /// <param name="duplicates">duplicates.</param>
        /// <param name="lastIncomingActivity">lastIncomingActivity.</param>
        /// <param name="lastOutgoingActivity">lastOutgoingActivity.</param>
        /// <param name="locations">locations.</param>
        /// <param name="mainAddress">mainAddress.</param>
        /// <param name="mainAddressValidated">mainAddressValidated.</param>
        /// <param name="mainContact">mainContact.</param>
        /// <param name="marketingLists">marketingLists.</param>
        /// <param name="name">name.</param>
        /// <param name="opportunities">opportunities.</param>
        /// <param name="orders">orders.</param>
        /// <param name="owner">owner.</param>
        /// <param name="ownerEmployeeName">ownerEmployeeName.</param>
        /// <param name="parentAccount">parentAccount.</param>
        /// <param name="relations">relations.</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="shippingAddressSameAsMain">shippingAddressSameAsMain.</param>
        /// <param name="shippingAddressValidated">shippingAddressValidated.</param>
        /// <param name="shippingContact">shippingContact.</param>
        /// <param name="sourceCampaign">sourceCampaign.</param>
        /// <param name="status">status.</param>
        /// <param name="type">type.</param>
        /// <param name="workgroup">workgroup.</param>
        /// <param name="workgroupDescription">workgroupDescription.</param>
        public BusinessAccount(StringValue accountRef = default(StringValue), List<BusinessAccountActivityDetail> activities = default(List<BusinessAccountActivityDetail>), List<AttributeDetail> attributes = default(List<AttributeDetail>), StringValue businessAccountID = default(StringValue), List<CampaignDetail> campaigns = default(List<CampaignDetail>), List<BusinessAccountCaseDetail> cases = default(List<BusinessAccountCaseDetail>), StringValue classID = default(StringValue), List<BusinessAccountContact> contacts = default(List<BusinessAccountContact>), List<BusinessAccountContract> contracts = default(List<BusinessAccountContract>), BusinessAccountDefaultLocationSetting defaultLocationSettings = default(BusinessAccountDefaultLocationSetting), StringValue duplicate = default(StringValue), List<DuplicateDetail> duplicates = default(List<DuplicateDetail>), DateTimeValue lastIncomingActivity = default(DateTimeValue), DateTimeValue lastOutgoingActivity = default(DateTimeValue), List<BusinessAccountLocation> locations = default(List<BusinessAccountLocation>), Address mainAddress = default(Address), BooleanValue mainAddressValidated = default(BooleanValue), BusinessAccountMainContact mainContact = default(BusinessAccountMainContact), List<BusinessAccountMarketingListDetail> marketingLists = default(List<BusinessAccountMarketingListDetail>), StringValue name = default(StringValue), List<BusinessAccountOpportunityDetail> opportunities = default(List<BusinessAccountOpportunityDetail>), List<BusinessAccountOrder> orders = default(List<BusinessAccountOrder>), StringValue owner = default(StringValue), StringValue ownerEmployeeName = default(StringValue), StringValue parentAccount = default(StringValue), List<RelationDetail> relations = default(List<RelationDetail>), Address shippingAddress = default(Address), BooleanValue shippingAddressSameAsMain = default(BooleanValue), BooleanValue shippingAddressValidated = default(BooleanValue), BusinessAccountShippingContact shippingContact = default(BusinessAccountShippingContact), StringValue sourceCampaign = default(StringValue), StringValue status = default(StringValue), StringValue type = default(StringValue), StringValue workgroup = default(StringValue), StringValue workgroupDescription = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.AccountRef = accountRef;
            this.Activities = activities;
            this.Attributes = attributes;
            this.BusinessAccountID = businessAccountID;
            this.Campaigns = campaigns;
            this.Cases = cases;
            this.ClassID = classID;
            this.Contacts = contacts;
            this.Contracts = contracts;
            this.DefaultLocationSettings = defaultLocationSettings;
            this.Duplicate = duplicate;
            this.Duplicates = duplicates;
            this.LastIncomingActivity = lastIncomingActivity;
            this.LastOutgoingActivity = lastOutgoingActivity;
            this.Locations = locations;
            this.MainAddress = mainAddress;
            this.MainAddressValidated = mainAddressValidated;
            this.MainContact = mainContact;
            this.MarketingLists = marketingLists;
            this.Name = name;
            this.Opportunities = opportunities;
            this.Orders = orders;
            this.Owner = owner;
            this.OwnerEmployeeName = ownerEmployeeName;
            this.ParentAccount = parentAccount;
            this.Relations = relations;
            this.ShippingAddress = shippingAddress;
            this.ShippingAddressSameAsMain = shippingAddressSameAsMain;
            this.ShippingAddressValidated = shippingAddressValidated;
            this.ShippingContact = shippingContact;
            this.SourceCampaign = sourceCampaign;
            this.Status = status;
            this.Type = type;
            this.Workgroup = workgroup;
            this.WorkgroupDescription = workgroupDescription;
        }
        
        /// <summary>
        /// Gets or Sets AccountRef
        /// </summary>
        [DataMember(Name="AccountRef", EmitDefaultValue=false)]
        public StringValue AccountRef { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [DataMember(Name="Activities", EmitDefaultValue=false)]
        public List<BusinessAccountActivityDetail> Activities { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<AttributeDetail> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets BusinessAccountID
        /// </summary>
        [DataMember(Name="BusinessAccountID", EmitDefaultValue=false)]
        public StringValue BusinessAccountID { get; set; }

        /// <summary>
        /// Gets or Sets Campaigns
        /// </summary>
        [DataMember(Name="Campaigns", EmitDefaultValue=false)]
        public List<CampaignDetail> Campaigns { get; set; }

        /// <summary>
        /// Gets or Sets Cases
        /// </summary>
        [DataMember(Name="Cases", EmitDefaultValue=false)]
        public List<BusinessAccountCaseDetail> Cases { get; set; }

        /// <summary>
        /// Gets or Sets ClassID
        /// </summary>
        [DataMember(Name="ClassID", EmitDefaultValue=false)]
        public StringValue ClassID { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name="Contacts", EmitDefaultValue=false)]
        public List<BusinessAccountContact> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets Contracts
        /// </summary>
        [DataMember(Name="Contracts", EmitDefaultValue=false)]
        public List<BusinessAccountContract> Contracts { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLocationSettings
        /// </summary>
        [DataMember(Name="DefaultLocationSettings", EmitDefaultValue=false)]
        public BusinessAccountDefaultLocationSetting DefaultLocationSettings { get; set; }

        /// <summary>
        /// Gets or Sets Duplicate
        /// </summary>
        [DataMember(Name="Duplicate", EmitDefaultValue=false)]
        public StringValue Duplicate { get; set; }

        /// <summary>
        /// Gets or Sets Duplicates
        /// </summary>
        [DataMember(Name="Duplicates", EmitDefaultValue=false)]
        public List<DuplicateDetail> Duplicates { get; set; }

        /// <summary>
        /// Gets or Sets LastIncomingActivity
        /// </summary>
        [DataMember(Name="LastIncomingActivity", EmitDefaultValue=false)]
        public DateTimeValue LastIncomingActivity { get; set; }

        /// <summary>
        /// Gets or Sets LastOutgoingActivity
        /// </summary>
        [DataMember(Name="LastOutgoingActivity", EmitDefaultValue=false)]
        public DateTimeValue LastOutgoingActivity { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name="Locations", EmitDefaultValue=false)]
        public List<BusinessAccountLocation> Locations { get; set; }

        /// <summary>
        /// Gets or Sets MainAddress
        /// </summary>
        [DataMember(Name="MainAddress", EmitDefaultValue=false)]
        public Address MainAddress { get; set; }

        /// <summary>
        /// Gets or Sets MainAddressValidated
        /// </summary>
        [DataMember(Name="MainAddressValidated", EmitDefaultValue=false)]
        public BooleanValue MainAddressValidated { get; set; }

        /// <summary>
        /// Gets or Sets MainContact
        /// </summary>
        [DataMember(Name="MainContact", EmitDefaultValue=false)]
        public BusinessAccountMainContact MainContact { get; set; }

        /// <summary>
        /// Gets or Sets MarketingLists
        /// </summary>
        [DataMember(Name="MarketingLists", EmitDefaultValue=false)]
        public List<BusinessAccountMarketingListDetail> MarketingLists { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public StringValue Name { get; set; }

        /// <summary>
        /// Gets or Sets Opportunities
        /// </summary>
        [DataMember(Name="Opportunities", EmitDefaultValue=false)]
        public List<BusinessAccountOpportunityDetail> Opportunities { get; set; }

        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [DataMember(Name="Orders", EmitDefaultValue=false)]
        public List<BusinessAccountOrder> Orders { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public StringValue Owner { get; set; }

        /// <summary>
        /// Gets or Sets OwnerEmployeeName
        /// </summary>
        [DataMember(Name="OwnerEmployeeName", EmitDefaultValue=false)]
        public StringValue OwnerEmployeeName { get; set; }

        /// <summary>
        /// Gets or Sets ParentAccount
        /// </summary>
        [DataMember(Name="ParentAccount", EmitDefaultValue=false)]
        public StringValue ParentAccount { get; set; }

        /// <summary>
        /// Gets or Sets Relations
        /// </summary>
        [DataMember(Name="Relations", EmitDefaultValue=false)]
        public List<RelationDetail> Relations { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="ShippingAddress", EmitDefaultValue=false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddressSameAsMain
        /// </summary>
        [DataMember(Name="ShippingAddressSameAsMain", EmitDefaultValue=false)]
        public BooleanValue ShippingAddressSameAsMain { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddressValidated
        /// </summary>
        [DataMember(Name="ShippingAddressValidated", EmitDefaultValue=false)]
        public BooleanValue ShippingAddressValidated { get; set; }

        /// <summary>
        /// Gets or Sets ShippingContact
        /// </summary>
        [DataMember(Name="ShippingContact", EmitDefaultValue=false)]
        public BusinessAccountShippingContact ShippingContact { get; set; }

        /// <summary>
        /// Gets or Sets SourceCampaign
        /// </summary>
        [DataMember(Name="SourceCampaign", EmitDefaultValue=false)]
        public StringValue SourceCampaign { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public StringValue Type { get; set; }

        /// <summary>
        /// Gets or Sets Workgroup
        /// </summary>
        [DataMember(Name="Workgroup", EmitDefaultValue=false)]
        public StringValue Workgroup { get; set; }

        /// <summary>
        /// Gets or Sets WorkgroupDescription
        /// </summary>
        [DataMember(Name="WorkgroupDescription", EmitDefaultValue=false)]
        public StringValue WorkgroupDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessAccount {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  AccountRef: ").Append(AccountRef).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  BusinessAccountID: ").Append(BusinessAccountID).Append("\n");
            sb.Append("  Campaigns: ").Append(Campaigns).Append("\n");
            sb.Append("  Cases: ").Append(Cases).Append("\n");
            sb.Append("  ClassID: ").Append(ClassID).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("  DefaultLocationSettings: ").Append(DefaultLocationSettings).Append("\n");
            sb.Append("  Duplicate: ").Append(Duplicate).Append("\n");
            sb.Append("  Duplicates: ").Append(Duplicates).Append("\n");
            sb.Append("  LastIncomingActivity: ").Append(LastIncomingActivity).Append("\n");
            sb.Append("  LastOutgoingActivity: ").Append(LastOutgoingActivity).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  MainAddress: ").Append(MainAddress).Append("\n");
            sb.Append("  MainAddressValidated: ").Append(MainAddressValidated).Append("\n");
            sb.Append("  MainContact: ").Append(MainContact).Append("\n");
            sb.Append("  MarketingLists: ").Append(MarketingLists).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Opportunities: ").Append(Opportunities).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OwnerEmployeeName: ").Append(OwnerEmployeeName).Append("\n");
            sb.Append("  ParentAccount: ").Append(ParentAccount).Append("\n");
            sb.Append("  Relations: ").Append(Relations).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  ShippingAddressSameAsMain: ").Append(ShippingAddressSameAsMain).Append("\n");
            sb.Append("  ShippingAddressValidated: ").Append(ShippingAddressValidated).Append("\n");
            sb.Append("  ShippingContact: ").Append(ShippingContact).Append("\n");
            sb.Append("  SourceCampaign: ").Append(SourceCampaign).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Workgroup: ").Append(Workgroup).Append("\n");
            sb.Append("  WorkgroupDescription: ").Append(WorkgroupDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessAccount);
        }

        /// <summary>
        /// Returns true if BusinessAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessAccount input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.AccountRef == input.AccountRef ||
                    (this.AccountRef != null &&
                    this.AccountRef.Equals(input.AccountRef))
                ) && base.Equals(input) && 
                (
                    this.Activities == input.Activities ||
                    this.Activities != null &&
                    this.Activities.SequenceEqual(input.Activities)
                ) && base.Equals(input) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && base.Equals(input) && 
                (
                    this.BusinessAccountID == input.BusinessAccountID ||
                    (this.BusinessAccountID != null &&
                    this.BusinessAccountID.Equals(input.BusinessAccountID))
                ) && base.Equals(input) && 
                (
                    this.Campaigns == input.Campaigns ||
                    this.Campaigns != null &&
                    this.Campaigns.SequenceEqual(input.Campaigns)
                ) && base.Equals(input) && 
                (
                    this.Cases == input.Cases ||
                    this.Cases != null &&
                    this.Cases.SequenceEqual(input.Cases)
                ) && base.Equals(input) && 
                (
                    this.ClassID == input.ClassID ||
                    (this.ClassID != null &&
                    this.ClassID.Equals(input.ClassID))
                ) && base.Equals(input) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && base.Equals(input) && 
                (
                    this.Contracts == input.Contracts ||
                    this.Contracts != null &&
                    this.Contracts.SequenceEqual(input.Contracts)
                ) && base.Equals(input) && 
                (
                    this.DefaultLocationSettings == input.DefaultLocationSettings ||
                    (this.DefaultLocationSettings != null &&
                    this.DefaultLocationSettings.Equals(input.DefaultLocationSettings))
                ) && base.Equals(input) && 
                (
                    this.Duplicate == input.Duplicate ||
                    (this.Duplicate != null &&
                    this.Duplicate.Equals(input.Duplicate))
                ) && base.Equals(input) && 
                (
                    this.Duplicates == input.Duplicates ||
                    this.Duplicates != null &&
                    this.Duplicates.SequenceEqual(input.Duplicates)
                ) && base.Equals(input) && 
                (
                    this.LastIncomingActivity == input.LastIncomingActivity ||
                    (this.LastIncomingActivity != null &&
                    this.LastIncomingActivity.Equals(input.LastIncomingActivity))
                ) && base.Equals(input) && 
                (
                    this.LastOutgoingActivity == input.LastOutgoingActivity ||
                    (this.LastOutgoingActivity != null &&
                    this.LastOutgoingActivity.Equals(input.LastOutgoingActivity))
                ) && base.Equals(input) && 
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) && base.Equals(input) && 
                (
                    this.MainAddress == input.MainAddress ||
                    (this.MainAddress != null &&
                    this.MainAddress.Equals(input.MainAddress))
                ) && base.Equals(input) && 
                (
                    this.MainAddressValidated == input.MainAddressValidated ||
                    (this.MainAddressValidated != null &&
                    this.MainAddressValidated.Equals(input.MainAddressValidated))
                ) && base.Equals(input) && 
                (
                    this.MainContact == input.MainContact ||
                    (this.MainContact != null &&
                    this.MainContact.Equals(input.MainContact))
                ) && base.Equals(input) && 
                (
                    this.MarketingLists == input.MarketingLists ||
                    this.MarketingLists != null &&
                    this.MarketingLists.SequenceEqual(input.MarketingLists)
                ) && base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Opportunities == input.Opportunities ||
                    this.Opportunities != null &&
                    this.Opportunities.SequenceEqual(input.Opportunities)
                ) && base.Equals(input) && 
                (
                    this.Orders == input.Orders ||
                    this.Orders != null &&
                    this.Orders.SequenceEqual(input.Orders)
                ) && base.Equals(input) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && base.Equals(input) && 
                (
                    this.OwnerEmployeeName == input.OwnerEmployeeName ||
                    (this.OwnerEmployeeName != null &&
                    this.OwnerEmployeeName.Equals(input.OwnerEmployeeName))
                ) && base.Equals(input) && 
                (
                    this.ParentAccount == input.ParentAccount ||
                    (this.ParentAccount != null &&
                    this.ParentAccount.Equals(input.ParentAccount))
                ) && base.Equals(input) && 
                (
                    this.Relations == input.Relations ||
                    this.Relations != null &&
                    this.Relations.SequenceEqual(input.Relations)
                ) && base.Equals(input) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && base.Equals(input) && 
                (
                    this.ShippingAddressSameAsMain == input.ShippingAddressSameAsMain ||
                    (this.ShippingAddressSameAsMain != null &&
                    this.ShippingAddressSameAsMain.Equals(input.ShippingAddressSameAsMain))
                ) && base.Equals(input) && 
                (
                    this.ShippingAddressValidated == input.ShippingAddressValidated ||
                    (this.ShippingAddressValidated != null &&
                    this.ShippingAddressValidated.Equals(input.ShippingAddressValidated))
                ) && base.Equals(input) && 
                (
                    this.ShippingContact == input.ShippingContact ||
                    (this.ShippingContact != null &&
                    this.ShippingContact.Equals(input.ShippingContact))
                ) && base.Equals(input) && 
                (
                    this.SourceCampaign == input.SourceCampaign ||
                    (this.SourceCampaign != null &&
                    this.SourceCampaign.Equals(input.SourceCampaign))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.Workgroup == input.Workgroup ||
                    (this.Workgroup != null &&
                    this.Workgroup.Equals(input.Workgroup))
                ) && base.Equals(input) && 
                (
                    this.WorkgroupDescription == input.WorkgroupDescription ||
                    (this.WorkgroupDescription != null &&
                    this.WorkgroupDescription.Equals(input.WorkgroupDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.AccountRef != null)
                    hashCode = hashCode * 59 + this.AccountRef.GetHashCode();
                if (this.Activities != null)
                    hashCode = hashCode * 59 + this.Activities.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.BusinessAccountID != null)
                    hashCode = hashCode * 59 + this.BusinessAccountID.GetHashCode();
                if (this.Campaigns != null)
                    hashCode = hashCode * 59 + this.Campaigns.GetHashCode();
                if (this.Cases != null)
                    hashCode = hashCode * 59 + this.Cases.GetHashCode();
                if (this.ClassID != null)
                    hashCode = hashCode * 59 + this.ClassID.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.Contracts != null)
                    hashCode = hashCode * 59 + this.Contracts.GetHashCode();
                if (this.DefaultLocationSettings != null)
                    hashCode = hashCode * 59 + this.DefaultLocationSettings.GetHashCode();
                if (this.Duplicate != null)
                    hashCode = hashCode * 59 + this.Duplicate.GetHashCode();
                if (this.Duplicates != null)
                    hashCode = hashCode * 59 + this.Duplicates.GetHashCode();
                if (this.LastIncomingActivity != null)
                    hashCode = hashCode * 59 + this.LastIncomingActivity.GetHashCode();
                if (this.LastOutgoingActivity != null)
                    hashCode = hashCode * 59 + this.LastOutgoingActivity.GetHashCode();
                if (this.Locations != null)
                    hashCode = hashCode * 59 + this.Locations.GetHashCode();
                if (this.MainAddress != null)
                    hashCode = hashCode * 59 + this.MainAddress.GetHashCode();
                if (this.MainAddressValidated != null)
                    hashCode = hashCode * 59 + this.MainAddressValidated.GetHashCode();
                if (this.MainContact != null)
                    hashCode = hashCode * 59 + this.MainContact.GetHashCode();
                if (this.MarketingLists != null)
                    hashCode = hashCode * 59 + this.MarketingLists.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Opportunities != null)
                    hashCode = hashCode * 59 + this.Opportunities.GetHashCode();
                if (this.Orders != null)
                    hashCode = hashCode * 59 + this.Orders.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.OwnerEmployeeName != null)
                    hashCode = hashCode * 59 + this.OwnerEmployeeName.GetHashCode();
                if (this.ParentAccount != null)
                    hashCode = hashCode * 59 + this.ParentAccount.GetHashCode();
                if (this.Relations != null)
                    hashCode = hashCode * 59 + this.Relations.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.ShippingAddressSameAsMain != null)
                    hashCode = hashCode * 59 + this.ShippingAddressSameAsMain.GetHashCode();
                if (this.ShippingAddressValidated != null)
                    hashCode = hashCode * 59 + this.ShippingAddressValidated.GetHashCode();
                if (this.ShippingContact != null)
                    hashCode = hashCode * 59 + this.ShippingContact.GetHashCode();
                if (this.SourceCampaign != null)
                    hashCode = hashCode * 59 + this.SourceCampaign.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Workgroup != null)
                    hashCode = hashCode * 59 + this.Workgroup.GetHashCode();
                if (this.WorkgroupDescription != null)
                    hashCode = hashCode * 59 + this.WorkgroupDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
