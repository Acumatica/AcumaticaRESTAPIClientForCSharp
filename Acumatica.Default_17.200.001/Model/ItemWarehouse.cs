/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// ItemWarehouse
    /// </summary>
    [DataContract]
    public partial class ItemWarehouse : Entity,  IEquatable<ItemWarehouse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemWarehouse" /> class.
        /// </summary>
        /// <param name="createdDateTime">createdDateTime.</param>
        /// <param name="defaultIssueFrom">defaultIssueFrom.</param>
        /// <param name="defaultReceiptTo">defaultReceiptTo.</param>
        /// <param name="defaultSubitem">defaultSubitem.</param>
        /// <param name="inventoryAccount">inventoryAccount.</param>
        /// <param name="inventoryID">inventoryID.</param>
        /// <param name="inventorySubaccount">inventorySubaccount.</param>
        /// <param name="lastModifiedDateTime">lastModifiedDateTime.</param>
        /// <param name="mSRP">mSRP.</param>
        /// <param name="overrideInventoryAccountSubaccount">overrideInventoryAccountSubaccount.</param>
        /// <param name="overridePreferredVendor">overridePreferredVendor.</param>
        /// <param name="overridePrice">overridePrice.</param>
        /// <param name="overrideReplenishmentSettings">overrideReplenishmentSettings.</param>
        /// <param name="overrideServiceLevelOverride">overrideServiceLevelOverride.</param>
        /// <param name="overrideStandardCost">overrideStandardCost.</param>
        /// <param name="preferredLocation">preferredLocation.</param>
        /// <param name="preferredVendor">preferredVendor.</param>
        /// <param name="productManager">productManager.</param>
        /// <param name="productWorkgroup">productWorkgroup.</param>
        /// <param name="replenishmentClass">replenishmentClass.</param>
        /// <param name="replenishmentMethod">replenishmentMethod.</param>
        /// <param name="replenishmentSource">replenishmentSource.</param>
        /// <param name="replenishmentWarehouse">replenishmentWarehouse.</param>
        /// <param name="seasonality">seasonality.</param>
        /// <param name="serviceLevel">serviceLevel.</param>
        /// <param name="status">status.</param>
        /// <param name="warehouseID">warehouseID.</param>
        public ItemWarehouse(DateTimeValue createdDateTime = default(DateTimeValue), StringValue defaultIssueFrom = default(StringValue), StringValue defaultReceiptTo = default(StringValue), StringValue defaultSubitem = default(StringValue), StringValue inventoryAccount = default(StringValue), StringValue inventoryID = default(StringValue), StringValue inventorySubaccount = default(StringValue), DateTimeValue lastModifiedDateTime = default(DateTimeValue), DecimalValue mSRP = default(DecimalValue), BooleanValue overrideInventoryAccountSubaccount = default(BooleanValue), BooleanValue overridePreferredVendor = default(BooleanValue), BooleanValue overridePrice = default(BooleanValue), BooleanValue overrideReplenishmentSettings = default(BooleanValue), BooleanValue overrideServiceLevelOverride = default(BooleanValue), BooleanValue overrideStandardCost = default(BooleanValue), StringValue preferredLocation = default(StringValue), StringValue preferredVendor = default(StringValue), StringValue productManager = default(StringValue), StringValue productWorkgroup = default(StringValue), StringValue replenishmentClass = default(StringValue), StringValue replenishmentMethod = default(StringValue), StringValue replenishmentSource = default(StringValue), StringValue replenishmentWarehouse = default(StringValue), StringValue seasonality = default(StringValue), DecimalValue serviceLevel = default(DecimalValue), StringValue status = default(StringValue), StringValue warehouseID = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.CreatedDateTime = createdDateTime;
            this.DefaultIssueFrom = defaultIssueFrom;
            this.DefaultReceiptTo = defaultReceiptTo;
            this.DefaultSubitem = defaultSubitem;
            this.InventoryAccount = inventoryAccount;
            this.InventoryID = inventoryID;
            this.InventorySubaccount = inventorySubaccount;
            this.LastModifiedDateTime = lastModifiedDateTime;
            this.MSRP = mSRP;
            this.OverrideInventoryAccountSubaccount = overrideInventoryAccountSubaccount;
            this.OverridePreferredVendor = overridePreferredVendor;
            this.OverridePrice = overridePrice;
            this.OverrideReplenishmentSettings = overrideReplenishmentSettings;
            this.OverrideServiceLevelOverride = overrideServiceLevelOverride;
            this.OverrideStandardCost = overrideStandardCost;
            this.PreferredLocation = preferredLocation;
            this.PreferredVendor = preferredVendor;
            this.ProductManager = productManager;
            this.ProductWorkgroup = productWorkgroup;
            this.ReplenishmentClass = replenishmentClass;
            this.ReplenishmentMethod = replenishmentMethod;
            this.ReplenishmentSource = replenishmentSource;
            this.ReplenishmentWarehouse = replenishmentWarehouse;
            this.Seasonality = seasonality;
            this.ServiceLevel = serviceLevel;
            this.Status = status;
            this.WarehouseID = warehouseID;
        }
        
        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name="CreatedDateTime", EmitDefaultValue=false)]
        public DateTimeValue CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets DefaultIssueFrom
        /// </summary>
        [DataMember(Name="DefaultIssueFrom", EmitDefaultValue=false)]
        public StringValue DefaultIssueFrom { get; set; }

        /// <summary>
        /// Gets or Sets DefaultReceiptTo
        /// </summary>
        [DataMember(Name="DefaultReceiptTo", EmitDefaultValue=false)]
        public StringValue DefaultReceiptTo { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSubitem
        /// </summary>
        [DataMember(Name="DefaultSubitem", EmitDefaultValue=false)]
        public StringValue DefaultSubitem { get; set; }

        /// <summary>
        /// Gets or Sets InventoryAccount
        /// </summary>
        [DataMember(Name="InventoryAccount", EmitDefaultValue=false)]
        public StringValue InventoryAccount { get; set; }

        /// <summary>
        /// Gets or Sets InventoryID
        /// </summary>
        [DataMember(Name="InventoryID", EmitDefaultValue=false)]
        public StringValue InventoryID { get; set; }

        /// <summary>
        /// Gets or Sets InventorySubaccount
        /// </summary>
        [DataMember(Name="InventorySubaccount", EmitDefaultValue=false)]
        public StringValue InventorySubaccount { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDateTime
        /// </summary>
        [DataMember(Name="LastModifiedDateTime", EmitDefaultValue=false)]
        public DateTimeValue LastModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets MSRP
        /// </summary>
        [DataMember(Name="MSRP", EmitDefaultValue=false)]
        public DecimalValue MSRP { get; set; }

        /// <summary>
        /// Gets or Sets OverrideInventoryAccountSubaccount
        /// </summary>
        [DataMember(Name="OverrideInventoryAccountSubaccount", EmitDefaultValue=false)]
        public BooleanValue OverrideInventoryAccountSubaccount { get; set; }

        /// <summary>
        /// Gets or Sets OverridePreferredVendor
        /// </summary>
        [DataMember(Name="OverridePreferredVendor", EmitDefaultValue=false)]
        public BooleanValue OverridePreferredVendor { get; set; }

        /// <summary>
        /// Gets or Sets OverridePrice
        /// </summary>
        [DataMember(Name="OverridePrice", EmitDefaultValue=false)]
        public BooleanValue OverridePrice { get; set; }

        /// <summary>
        /// Gets or Sets OverrideReplenishmentSettings
        /// </summary>
        [DataMember(Name="OverrideReplenishmentSettings", EmitDefaultValue=false)]
        public BooleanValue OverrideReplenishmentSettings { get; set; }

        /// <summary>
        /// Gets or Sets OverrideServiceLevelOverride
        /// </summary>
        [DataMember(Name="OverrideServiceLevelOverride", EmitDefaultValue=false)]
        public BooleanValue OverrideServiceLevelOverride { get; set; }

        /// <summary>
        /// Gets or Sets OverrideStandardCost
        /// </summary>
        [DataMember(Name="OverrideStandardCost", EmitDefaultValue=false)]
        public BooleanValue OverrideStandardCost { get; set; }

        /// <summary>
        /// Gets or Sets PreferredLocation
        /// </summary>
        [DataMember(Name="PreferredLocation", EmitDefaultValue=false)]
        public StringValue PreferredLocation { get; set; }

        /// <summary>
        /// Gets or Sets PreferredVendor
        /// </summary>
        [DataMember(Name="PreferredVendor", EmitDefaultValue=false)]
        public StringValue PreferredVendor { get; set; }

        /// <summary>
        /// Gets or Sets ProductManager
        /// </summary>
        [DataMember(Name="ProductManager", EmitDefaultValue=false)]
        public StringValue ProductManager { get; set; }

        /// <summary>
        /// Gets or Sets ProductWorkgroup
        /// </summary>
        [DataMember(Name="ProductWorkgroup", EmitDefaultValue=false)]
        public StringValue ProductWorkgroup { get; set; }

        /// <summary>
        /// Gets or Sets ReplenishmentClass
        /// </summary>
        [DataMember(Name="ReplenishmentClass", EmitDefaultValue=false)]
        public StringValue ReplenishmentClass { get; set; }

        /// <summary>
        /// Gets or Sets ReplenishmentMethod
        /// </summary>
        [DataMember(Name="ReplenishmentMethod", EmitDefaultValue=false)]
        public StringValue ReplenishmentMethod { get; set; }

        /// <summary>
        /// Gets or Sets ReplenishmentSource
        /// </summary>
        [DataMember(Name="ReplenishmentSource", EmitDefaultValue=false)]
        public StringValue ReplenishmentSource { get; set; }

        /// <summary>
        /// Gets or Sets ReplenishmentWarehouse
        /// </summary>
        [DataMember(Name="ReplenishmentWarehouse", EmitDefaultValue=false)]
        public StringValue ReplenishmentWarehouse { get; set; }

        /// <summary>
        /// Gets or Sets Seasonality
        /// </summary>
        [DataMember(Name="Seasonality", EmitDefaultValue=false)]
        public StringValue Seasonality { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevel
        /// </summary>
        [DataMember(Name="ServiceLevel", EmitDefaultValue=false)]
        public DecimalValue ServiceLevel { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseID
        /// </summary>
        [DataMember(Name="WarehouseID", EmitDefaultValue=false)]
        public StringValue WarehouseID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemWarehouse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  DefaultIssueFrom: ").Append(DefaultIssueFrom).Append("\n");
            sb.Append("  DefaultReceiptTo: ").Append(DefaultReceiptTo).Append("\n");
            sb.Append("  DefaultSubitem: ").Append(DefaultSubitem).Append("\n");
            sb.Append("  InventoryAccount: ").Append(InventoryAccount).Append("\n");
            sb.Append("  InventoryID: ").Append(InventoryID).Append("\n");
            sb.Append("  InventorySubaccount: ").Append(InventorySubaccount).Append("\n");
            sb.Append("  LastModifiedDateTime: ").Append(LastModifiedDateTime).Append("\n");
            sb.Append("  MSRP: ").Append(MSRP).Append("\n");
            sb.Append("  OverrideInventoryAccountSubaccount: ").Append(OverrideInventoryAccountSubaccount).Append("\n");
            sb.Append("  OverridePreferredVendor: ").Append(OverridePreferredVendor).Append("\n");
            sb.Append("  OverridePrice: ").Append(OverridePrice).Append("\n");
            sb.Append("  OverrideReplenishmentSettings: ").Append(OverrideReplenishmentSettings).Append("\n");
            sb.Append("  OverrideServiceLevelOverride: ").Append(OverrideServiceLevelOverride).Append("\n");
            sb.Append("  OverrideStandardCost: ").Append(OverrideStandardCost).Append("\n");
            sb.Append("  PreferredLocation: ").Append(PreferredLocation).Append("\n");
            sb.Append("  PreferredVendor: ").Append(PreferredVendor).Append("\n");
            sb.Append("  ProductManager: ").Append(ProductManager).Append("\n");
            sb.Append("  ProductWorkgroup: ").Append(ProductWorkgroup).Append("\n");
            sb.Append("  ReplenishmentClass: ").Append(ReplenishmentClass).Append("\n");
            sb.Append("  ReplenishmentMethod: ").Append(ReplenishmentMethod).Append("\n");
            sb.Append("  ReplenishmentSource: ").Append(ReplenishmentSource).Append("\n");
            sb.Append("  ReplenishmentWarehouse: ").Append(ReplenishmentWarehouse).Append("\n");
            sb.Append("  Seasonality: ").Append(Seasonality).Append("\n");
            sb.Append("  ServiceLevel: ").Append(ServiceLevel).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WarehouseID: ").Append(WarehouseID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemWarehouse);
        }

        /// <summary>
        /// Returns true if ItemWarehouse instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemWarehouse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemWarehouse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && base.Equals(input) && 
                (
                    this.DefaultIssueFrom == input.DefaultIssueFrom ||
                    (this.DefaultIssueFrom != null &&
                    this.DefaultIssueFrom.Equals(input.DefaultIssueFrom))
                ) && base.Equals(input) && 
                (
                    this.DefaultReceiptTo == input.DefaultReceiptTo ||
                    (this.DefaultReceiptTo != null &&
                    this.DefaultReceiptTo.Equals(input.DefaultReceiptTo))
                ) && base.Equals(input) && 
                (
                    this.DefaultSubitem == input.DefaultSubitem ||
                    (this.DefaultSubitem != null &&
                    this.DefaultSubitem.Equals(input.DefaultSubitem))
                ) && base.Equals(input) && 
                (
                    this.InventoryAccount == input.InventoryAccount ||
                    (this.InventoryAccount != null &&
                    this.InventoryAccount.Equals(input.InventoryAccount))
                ) && base.Equals(input) && 
                (
                    this.InventoryID == input.InventoryID ||
                    (this.InventoryID != null &&
                    this.InventoryID.Equals(input.InventoryID))
                ) && base.Equals(input) && 
                (
                    this.InventorySubaccount == input.InventorySubaccount ||
                    (this.InventorySubaccount != null &&
                    this.InventorySubaccount.Equals(input.InventorySubaccount))
                ) && base.Equals(input) && 
                (
                    this.LastModifiedDateTime == input.LastModifiedDateTime ||
                    (this.LastModifiedDateTime != null &&
                    this.LastModifiedDateTime.Equals(input.LastModifiedDateTime))
                ) && base.Equals(input) && 
                (
                    this.MSRP == input.MSRP ||
                    (this.MSRP != null &&
                    this.MSRP.Equals(input.MSRP))
                ) && base.Equals(input) && 
                (
                    this.OverrideInventoryAccountSubaccount == input.OverrideInventoryAccountSubaccount ||
                    (this.OverrideInventoryAccountSubaccount != null &&
                    this.OverrideInventoryAccountSubaccount.Equals(input.OverrideInventoryAccountSubaccount))
                ) && base.Equals(input) && 
                (
                    this.OverridePreferredVendor == input.OverridePreferredVendor ||
                    (this.OverridePreferredVendor != null &&
                    this.OverridePreferredVendor.Equals(input.OverridePreferredVendor))
                ) && base.Equals(input) && 
                (
                    this.OverridePrice == input.OverridePrice ||
                    (this.OverridePrice != null &&
                    this.OverridePrice.Equals(input.OverridePrice))
                ) && base.Equals(input) && 
                (
                    this.OverrideReplenishmentSettings == input.OverrideReplenishmentSettings ||
                    (this.OverrideReplenishmentSettings != null &&
                    this.OverrideReplenishmentSettings.Equals(input.OverrideReplenishmentSettings))
                ) && base.Equals(input) && 
                (
                    this.OverrideServiceLevelOverride == input.OverrideServiceLevelOverride ||
                    (this.OverrideServiceLevelOverride != null &&
                    this.OverrideServiceLevelOverride.Equals(input.OverrideServiceLevelOverride))
                ) && base.Equals(input) && 
                (
                    this.OverrideStandardCost == input.OverrideStandardCost ||
                    (this.OverrideStandardCost != null &&
                    this.OverrideStandardCost.Equals(input.OverrideStandardCost))
                ) && base.Equals(input) && 
                (
                    this.PreferredLocation == input.PreferredLocation ||
                    (this.PreferredLocation != null &&
                    this.PreferredLocation.Equals(input.PreferredLocation))
                ) && base.Equals(input) && 
                (
                    this.PreferredVendor == input.PreferredVendor ||
                    (this.PreferredVendor != null &&
                    this.PreferredVendor.Equals(input.PreferredVendor))
                ) && base.Equals(input) && 
                (
                    this.ProductManager == input.ProductManager ||
                    (this.ProductManager != null &&
                    this.ProductManager.Equals(input.ProductManager))
                ) && base.Equals(input) && 
                (
                    this.ProductWorkgroup == input.ProductWorkgroup ||
                    (this.ProductWorkgroup != null &&
                    this.ProductWorkgroup.Equals(input.ProductWorkgroup))
                ) && base.Equals(input) && 
                (
                    this.ReplenishmentClass == input.ReplenishmentClass ||
                    (this.ReplenishmentClass != null &&
                    this.ReplenishmentClass.Equals(input.ReplenishmentClass))
                ) && base.Equals(input) && 
                (
                    this.ReplenishmentMethod == input.ReplenishmentMethod ||
                    (this.ReplenishmentMethod != null &&
                    this.ReplenishmentMethod.Equals(input.ReplenishmentMethod))
                ) && base.Equals(input) && 
                (
                    this.ReplenishmentSource == input.ReplenishmentSource ||
                    (this.ReplenishmentSource != null &&
                    this.ReplenishmentSource.Equals(input.ReplenishmentSource))
                ) && base.Equals(input) && 
                (
                    this.ReplenishmentWarehouse == input.ReplenishmentWarehouse ||
                    (this.ReplenishmentWarehouse != null &&
                    this.ReplenishmentWarehouse.Equals(input.ReplenishmentWarehouse))
                ) && base.Equals(input) && 
                (
                    this.Seasonality == input.Seasonality ||
                    (this.Seasonality != null &&
                    this.Seasonality.Equals(input.Seasonality))
                ) && base.Equals(input) && 
                (
                    this.ServiceLevel == input.ServiceLevel ||
                    (this.ServiceLevel != null &&
                    this.ServiceLevel.Equals(input.ServiceLevel))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && base.Equals(input) && 
                (
                    this.WarehouseID == input.WarehouseID ||
                    (this.WarehouseID != null &&
                    this.WarehouseID.Equals(input.WarehouseID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CreatedDateTime != null)
                    hashCode = hashCode * 59 + this.CreatedDateTime.GetHashCode();
                if (this.DefaultIssueFrom != null)
                    hashCode = hashCode * 59 + this.DefaultIssueFrom.GetHashCode();
                if (this.DefaultReceiptTo != null)
                    hashCode = hashCode * 59 + this.DefaultReceiptTo.GetHashCode();
                if (this.DefaultSubitem != null)
                    hashCode = hashCode * 59 + this.DefaultSubitem.GetHashCode();
                if (this.InventoryAccount != null)
                    hashCode = hashCode * 59 + this.InventoryAccount.GetHashCode();
                if (this.InventoryID != null)
                    hashCode = hashCode * 59 + this.InventoryID.GetHashCode();
                if (this.InventorySubaccount != null)
                    hashCode = hashCode * 59 + this.InventorySubaccount.GetHashCode();
                if (this.LastModifiedDateTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedDateTime.GetHashCode();
                if (this.MSRP != null)
                    hashCode = hashCode * 59 + this.MSRP.GetHashCode();
                if (this.OverrideInventoryAccountSubaccount != null)
                    hashCode = hashCode * 59 + this.OverrideInventoryAccountSubaccount.GetHashCode();
                if (this.OverridePreferredVendor != null)
                    hashCode = hashCode * 59 + this.OverridePreferredVendor.GetHashCode();
                if (this.OverridePrice != null)
                    hashCode = hashCode * 59 + this.OverridePrice.GetHashCode();
                if (this.OverrideReplenishmentSettings != null)
                    hashCode = hashCode * 59 + this.OverrideReplenishmentSettings.GetHashCode();
                if (this.OverrideServiceLevelOverride != null)
                    hashCode = hashCode * 59 + this.OverrideServiceLevelOverride.GetHashCode();
                if (this.OverrideStandardCost != null)
                    hashCode = hashCode * 59 + this.OverrideStandardCost.GetHashCode();
                if (this.PreferredLocation != null)
                    hashCode = hashCode * 59 + this.PreferredLocation.GetHashCode();
                if (this.PreferredVendor != null)
                    hashCode = hashCode * 59 + this.PreferredVendor.GetHashCode();
                if (this.ProductManager != null)
                    hashCode = hashCode * 59 + this.ProductManager.GetHashCode();
                if (this.ProductWorkgroup != null)
                    hashCode = hashCode * 59 + this.ProductWorkgroup.GetHashCode();
                if (this.ReplenishmentClass != null)
                    hashCode = hashCode * 59 + this.ReplenishmentClass.GetHashCode();
                if (this.ReplenishmentMethod != null)
                    hashCode = hashCode * 59 + this.ReplenishmentMethod.GetHashCode();
                if (this.ReplenishmentSource != null)
                    hashCode = hashCode * 59 + this.ReplenishmentSource.GetHashCode();
                if (this.ReplenishmentWarehouse != null)
                    hashCode = hashCode * 59 + this.ReplenishmentWarehouse.GetHashCode();
                if (this.Seasonality != null)
                    hashCode = hashCode * 59 + this.Seasonality.GetHashCode();
                if (this.ServiceLevel != null)
                    hashCode = hashCode * 59 + this.ServiceLevel.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.WarehouseID != null)
                    hashCode = hashCode * 59 + this.WarehouseID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
