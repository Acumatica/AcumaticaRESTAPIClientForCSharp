/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// FinancialPeriodDetail
    /// </summary>
    [DataContract]
    public partial class FinancialPeriodDetail : Entity,  IEquatable<FinancialPeriodDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialPeriodDetail" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="adjustmentPeriod">adjustmentPeriod.</param>
        /// <param name="closedInAP">closedInAP.</param>
        /// <param name="closedInAR">closedInAR.</param>
        /// <param name="closedInCA">closedInCA.</param>
        /// <param name="closedInFA">closedInFA.</param>
        /// <param name="closedInGL">closedInGL.</param>
        /// <param name="closedInIN">closedInIN.</param>
        /// <param name="closedInPR">closedInPR.</param>
        /// <param name="description">description.</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="financialPeriodID">financialPeriodID.</param>
        /// <param name="lengthInDays">lengthInDays.</param>
        /// <param name="periodNbr">periodNbr.</param>
        /// <param name="startDate">startDate.</param>
        public FinancialPeriodDetail(BooleanValue active = default(BooleanValue), BooleanValue adjustmentPeriod = default(BooleanValue), BooleanValue closedInAP = default(BooleanValue), BooleanValue closedInAR = default(BooleanValue), BooleanValue closedInCA = default(BooleanValue), BooleanValue closedInFA = default(BooleanValue), BooleanValue closedInGL = default(BooleanValue), BooleanValue closedInIN = default(BooleanValue), BooleanValue closedInPR = default(BooleanValue), StringValue description = default(StringValue), DateTimeValue endDate = default(DateTimeValue), StringValue financialPeriodID = default(StringValue), IntValue lengthInDays = default(IntValue), StringValue periodNbr = default(StringValue), DateTimeValue startDate = default(DateTimeValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.Active = active;
            this.AdjustmentPeriod = adjustmentPeriod;
            this.ClosedInAP = closedInAP;
            this.ClosedInAR = closedInAR;
            this.ClosedInCA = closedInCA;
            this.ClosedInFA = closedInFA;
            this.ClosedInGL = closedInGL;
            this.ClosedInIN = closedInIN;
            this.ClosedInPR = closedInPR;
            this.Description = description;
            this.EndDate = endDate;
            this.FinancialPeriodID = financialPeriodID;
            this.LengthInDays = lengthInDays;
            this.PeriodNbr = periodNbr;
            this.StartDate = startDate;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="Active", EmitDefaultValue=false)]
        public BooleanValue Active { get; set; }

        /// <summary>
        /// Gets or Sets AdjustmentPeriod
        /// </summary>
        [DataMember(Name="AdjustmentPeriod", EmitDefaultValue=false)]
        public BooleanValue AdjustmentPeriod { get; set; }

        /// <summary>
        /// Gets or Sets ClosedInAP
        /// </summary>
        [DataMember(Name="ClosedInAP", EmitDefaultValue=false)]
        public BooleanValue ClosedInAP { get; set; }

        /// <summary>
        /// Gets or Sets ClosedInAR
        /// </summary>
        [DataMember(Name="ClosedInAR", EmitDefaultValue=false)]
        public BooleanValue ClosedInAR { get; set; }

        /// <summary>
        /// Gets or Sets ClosedInCA
        /// </summary>
        [DataMember(Name="ClosedInCA", EmitDefaultValue=false)]
        public BooleanValue ClosedInCA { get; set; }

        /// <summary>
        /// Gets or Sets ClosedInFA
        /// </summary>
        [DataMember(Name="ClosedInFA", EmitDefaultValue=false)]
        public BooleanValue ClosedInFA { get; set; }

        /// <summary>
        /// Gets or Sets ClosedInGL
        /// </summary>
        [DataMember(Name="ClosedInGL", EmitDefaultValue=false)]
        public BooleanValue ClosedInGL { get; set; }

        /// <summary>
        /// Gets or Sets ClosedInIN
        /// </summary>
        [DataMember(Name="ClosedInIN", EmitDefaultValue=false)]
        public BooleanValue ClosedInIN { get; set; }

        /// <summary>
        /// Gets or Sets ClosedInPR
        /// </summary>
        [DataMember(Name="ClosedInPR", EmitDefaultValue=false)]
        public BooleanValue ClosedInPR { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="EndDate", EmitDefaultValue=false)]
        public DateTimeValue EndDate { get; set; }

        /// <summary>
        /// Gets or Sets FinancialPeriodID
        /// </summary>
        [DataMember(Name="FinancialPeriodID", EmitDefaultValue=false)]
        public StringValue FinancialPeriodID { get; set; }

        /// <summary>
        /// Gets or Sets LengthInDays
        /// </summary>
        [DataMember(Name="LengthInDays", EmitDefaultValue=false)]
        public IntValue LengthInDays { get; set; }

        /// <summary>
        /// Gets or Sets PeriodNbr
        /// </summary>
        [DataMember(Name="PeriodNbr", EmitDefaultValue=false)]
        public StringValue PeriodNbr { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=false)]
        public DateTimeValue StartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialPeriodDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AdjustmentPeriod: ").Append(AdjustmentPeriod).Append("\n");
            sb.Append("  ClosedInAP: ").Append(ClosedInAP).Append("\n");
            sb.Append("  ClosedInAR: ").Append(ClosedInAR).Append("\n");
            sb.Append("  ClosedInCA: ").Append(ClosedInCA).Append("\n");
            sb.Append("  ClosedInFA: ").Append(ClosedInFA).Append("\n");
            sb.Append("  ClosedInGL: ").Append(ClosedInGL).Append("\n");
            sb.Append("  ClosedInIN: ").Append(ClosedInIN).Append("\n");
            sb.Append("  ClosedInPR: ").Append(ClosedInPR).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  FinancialPeriodID: ").Append(FinancialPeriodID).Append("\n");
            sb.Append("  LengthInDays: ").Append(LengthInDays).Append("\n");
            sb.Append("  PeriodNbr: ").Append(PeriodNbr).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialPeriodDetail);
        }

        /// <summary>
        /// Returns true if FinancialPeriodDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialPeriodDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialPeriodDetail input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && base.Equals(input) && 
                (
                    this.AdjustmentPeriod == input.AdjustmentPeriod ||
                    (this.AdjustmentPeriod != null &&
                    this.AdjustmentPeriod.Equals(input.AdjustmentPeriod))
                ) && base.Equals(input) && 
                (
                    this.ClosedInAP == input.ClosedInAP ||
                    (this.ClosedInAP != null &&
                    this.ClosedInAP.Equals(input.ClosedInAP))
                ) && base.Equals(input) && 
                (
                    this.ClosedInAR == input.ClosedInAR ||
                    (this.ClosedInAR != null &&
                    this.ClosedInAR.Equals(input.ClosedInAR))
                ) && base.Equals(input) && 
                (
                    this.ClosedInCA == input.ClosedInCA ||
                    (this.ClosedInCA != null &&
                    this.ClosedInCA.Equals(input.ClosedInCA))
                ) && base.Equals(input) && 
                (
                    this.ClosedInFA == input.ClosedInFA ||
                    (this.ClosedInFA != null &&
                    this.ClosedInFA.Equals(input.ClosedInFA))
                ) && base.Equals(input) && 
                (
                    this.ClosedInGL == input.ClosedInGL ||
                    (this.ClosedInGL != null &&
                    this.ClosedInGL.Equals(input.ClosedInGL))
                ) && base.Equals(input) && 
                (
                    this.ClosedInIN == input.ClosedInIN ||
                    (this.ClosedInIN != null &&
                    this.ClosedInIN.Equals(input.ClosedInIN))
                ) && base.Equals(input) && 
                (
                    this.ClosedInPR == input.ClosedInPR ||
                    (this.ClosedInPR != null &&
                    this.ClosedInPR.Equals(input.ClosedInPR))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && base.Equals(input) && 
                (
                    this.FinancialPeriodID == input.FinancialPeriodID ||
                    (this.FinancialPeriodID != null &&
                    this.FinancialPeriodID.Equals(input.FinancialPeriodID))
                ) && base.Equals(input) && 
                (
                    this.LengthInDays == input.LengthInDays ||
                    (this.LengthInDays != null &&
                    this.LengthInDays.Equals(input.LengthInDays))
                ) && base.Equals(input) && 
                (
                    this.PeriodNbr == input.PeriodNbr ||
                    (this.PeriodNbr != null &&
                    this.PeriodNbr.Equals(input.PeriodNbr))
                ) && base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.AdjustmentPeriod != null)
                    hashCode = hashCode * 59 + this.AdjustmentPeriod.GetHashCode();
                if (this.ClosedInAP != null)
                    hashCode = hashCode * 59 + this.ClosedInAP.GetHashCode();
                if (this.ClosedInAR != null)
                    hashCode = hashCode * 59 + this.ClosedInAR.GetHashCode();
                if (this.ClosedInCA != null)
                    hashCode = hashCode * 59 + this.ClosedInCA.GetHashCode();
                if (this.ClosedInFA != null)
                    hashCode = hashCode * 59 + this.ClosedInFA.GetHashCode();
                if (this.ClosedInGL != null)
                    hashCode = hashCode * 59 + this.ClosedInGL.GetHashCode();
                if (this.ClosedInIN != null)
                    hashCode = hashCode * 59 + this.ClosedInIN.GetHashCode();
                if (this.ClosedInPR != null)
                    hashCode = hashCode * 59 + this.ClosedInPR.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.FinancialPeriodID != null)
                    hashCode = hashCode * 59 + this.FinancialPeriodID.GetHashCode();
                if (this.LengthInDays != null)
                    hashCode = hashCode * 59 + this.LengthInDays.GetHashCode();
                if (this.PeriodNbr != null)
                    hashCode = hashCode * 59 + this.PeriodNbr.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
