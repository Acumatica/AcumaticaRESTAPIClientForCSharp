/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// ShippingSettings
    /// </summary>
    [DataContract]
    public partial class ShippingSettings : Entity,  IEquatable<ShippingSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShippingSettings" /> class.
        /// </summary>
        /// <param name="cancelByDate">cancelByDate.</param>
        /// <param name="canceled">canceled.</param>
        /// <param name="fOBPoint">fOBPoint.</param>
        /// <param name="groundCollect">groundCollect.</param>
        /// <param name="insurance">insurance.</param>
        /// <param name="preferredWarehouseID">preferredWarehouseID.</param>
        /// <param name="priority">priority.</param>
        /// <param name="residentialDelivery">residentialDelivery.</param>
        /// <param name="saturdayDelivery">saturdayDelivery.</param>
        /// <param name="scheduledShipmentDate">scheduledShipmentDate.</param>
        /// <param name="shippingRule">shippingRule.</param>
        /// <param name="shippingTerms">shippingTerms.</param>
        /// <param name="shippingZone">shippingZone.</param>
        /// <param name="shipSeparately">shipSeparately.</param>
        /// <param name="shipVia">shipVia.</param>
        /// <param name="shopForRates">shopForRates.</param>
        /// <param name="useCustomersAccount">useCustomersAccount.</param>
        public ShippingSettings(DateTimeValue cancelByDate = default(DateTimeValue), BooleanValue canceled = default(BooleanValue), StringValue fOBPoint = default(StringValue), BooleanValue groundCollect = default(BooleanValue), BooleanValue insurance = default(BooleanValue), StringValue preferredWarehouseID = default(StringValue), ShortValue priority = default(ShortValue), BooleanValue residentialDelivery = default(BooleanValue), BooleanValue saturdayDelivery = default(BooleanValue), DateTimeValue scheduledShipmentDate = default(DateTimeValue), StringValue shippingRule = default(StringValue), StringValue shippingTerms = default(StringValue), StringValue shippingZone = default(StringValue), BooleanValue shipSeparately = default(BooleanValue), StringValue shipVia = default(StringValue), ShopForRates shopForRates = default(ShopForRates), BooleanValue useCustomersAccount = default(BooleanValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.CancelByDate = cancelByDate;
            this.Canceled = canceled;
            this.FOBPoint = fOBPoint;
            this.GroundCollect = groundCollect;
            this.Insurance = insurance;
            this.PreferredWarehouseID = preferredWarehouseID;
            this.Priority = priority;
            this.ResidentialDelivery = residentialDelivery;
            this.SaturdayDelivery = saturdayDelivery;
            this.ScheduledShipmentDate = scheduledShipmentDate;
            this.ShippingRule = shippingRule;
            this.ShippingTerms = shippingTerms;
            this.ShippingZone = shippingZone;
            this.ShipSeparately = shipSeparately;
            this.ShipVia = shipVia;
            this.ShopForRates = shopForRates;
            this.UseCustomersAccount = useCustomersAccount;
        }
        
        /// <summary>
        /// Gets or Sets CancelByDate
        /// </summary>
        [DataMember(Name="CancelByDate", EmitDefaultValue=false)]
        public DateTimeValue CancelByDate { get; set; }

        /// <summary>
        /// Gets or Sets Canceled
        /// </summary>
        [DataMember(Name="Canceled", EmitDefaultValue=false)]
        public BooleanValue Canceled { get; set; }

        /// <summary>
        /// Gets or Sets FOBPoint
        /// </summary>
        [DataMember(Name="FOBPoint", EmitDefaultValue=false)]
        public StringValue FOBPoint { get; set; }

        /// <summary>
        /// Gets or Sets GroundCollect
        /// </summary>
        [DataMember(Name="GroundCollect", EmitDefaultValue=false)]
        public BooleanValue GroundCollect { get; set; }

        /// <summary>
        /// Gets or Sets Insurance
        /// </summary>
        [DataMember(Name="Insurance", EmitDefaultValue=false)]
        public BooleanValue Insurance { get; set; }

        /// <summary>
        /// Gets or Sets PreferredWarehouseID
        /// </summary>
        [DataMember(Name="PreferredWarehouseID", EmitDefaultValue=false)]
        public StringValue PreferredWarehouseID { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public ShortValue Priority { get; set; }

        /// <summary>
        /// Gets or Sets ResidentialDelivery
        /// </summary>
        [DataMember(Name="ResidentialDelivery", EmitDefaultValue=false)]
        public BooleanValue ResidentialDelivery { get; set; }

        /// <summary>
        /// Gets or Sets SaturdayDelivery
        /// </summary>
        [DataMember(Name="SaturdayDelivery", EmitDefaultValue=false)]
        public BooleanValue SaturdayDelivery { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledShipmentDate
        /// </summary>
        [DataMember(Name="ScheduledShipmentDate", EmitDefaultValue=false)]
        public DateTimeValue ScheduledShipmentDate { get; set; }

        /// <summary>
        /// Gets or Sets ShippingRule
        /// </summary>
        [DataMember(Name="ShippingRule", EmitDefaultValue=false)]
        public StringValue ShippingRule { get; set; }

        /// <summary>
        /// Gets or Sets ShippingTerms
        /// </summary>
        [DataMember(Name="ShippingTerms", EmitDefaultValue=false)]
        public StringValue ShippingTerms { get; set; }

        /// <summary>
        /// Gets or Sets ShippingZone
        /// </summary>
        [DataMember(Name="ShippingZone", EmitDefaultValue=false)]
        public StringValue ShippingZone { get; set; }

        /// <summary>
        /// Gets or Sets ShipSeparately
        /// </summary>
        [DataMember(Name="ShipSeparately", EmitDefaultValue=false)]
        public BooleanValue ShipSeparately { get; set; }

        /// <summary>
        /// Gets or Sets ShipVia
        /// </summary>
        [DataMember(Name="ShipVia", EmitDefaultValue=false)]
        public StringValue ShipVia { get; set; }

        /// <summary>
        /// Gets or Sets ShopForRates
        /// </summary>
        [DataMember(Name="ShopForRates", EmitDefaultValue=false)]
        public ShopForRates ShopForRates { get; set; }

        /// <summary>
        /// Gets or Sets UseCustomersAccount
        /// </summary>
        [DataMember(Name="UseCustomersAccount", EmitDefaultValue=false)]
        public BooleanValue UseCustomersAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShippingSettings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CancelByDate: ").Append(CancelByDate).Append("\n");
            sb.Append("  Canceled: ").Append(Canceled).Append("\n");
            sb.Append("  FOBPoint: ").Append(FOBPoint).Append("\n");
            sb.Append("  GroundCollect: ").Append(GroundCollect).Append("\n");
            sb.Append("  Insurance: ").Append(Insurance).Append("\n");
            sb.Append("  PreferredWarehouseID: ").Append(PreferredWarehouseID).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ResidentialDelivery: ").Append(ResidentialDelivery).Append("\n");
            sb.Append("  SaturdayDelivery: ").Append(SaturdayDelivery).Append("\n");
            sb.Append("  ScheduledShipmentDate: ").Append(ScheduledShipmentDate).Append("\n");
            sb.Append("  ShippingRule: ").Append(ShippingRule).Append("\n");
            sb.Append("  ShippingTerms: ").Append(ShippingTerms).Append("\n");
            sb.Append("  ShippingZone: ").Append(ShippingZone).Append("\n");
            sb.Append("  ShipSeparately: ").Append(ShipSeparately).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  ShopForRates: ").Append(ShopForRates).Append("\n");
            sb.Append("  UseCustomersAccount: ").Append(UseCustomersAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShippingSettings);
        }

        /// <summary>
        /// Returns true if ShippingSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ShippingSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShippingSettings input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CancelByDate == input.CancelByDate ||
                    (this.CancelByDate != null &&
                    this.CancelByDate.Equals(input.CancelByDate))
                ) && base.Equals(input) && 
                (
                    this.Canceled == input.Canceled ||
                    (this.Canceled != null &&
                    this.Canceled.Equals(input.Canceled))
                ) && base.Equals(input) && 
                (
                    this.FOBPoint == input.FOBPoint ||
                    (this.FOBPoint != null &&
                    this.FOBPoint.Equals(input.FOBPoint))
                ) && base.Equals(input) && 
                (
                    this.GroundCollect == input.GroundCollect ||
                    (this.GroundCollect != null &&
                    this.GroundCollect.Equals(input.GroundCollect))
                ) && base.Equals(input) && 
                (
                    this.Insurance == input.Insurance ||
                    (this.Insurance != null &&
                    this.Insurance.Equals(input.Insurance))
                ) && base.Equals(input) && 
                (
                    this.PreferredWarehouseID == input.PreferredWarehouseID ||
                    (this.PreferredWarehouseID != null &&
                    this.PreferredWarehouseID.Equals(input.PreferredWarehouseID))
                ) && base.Equals(input) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && base.Equals(input) && 
                (
                    this.ResidentialDelivery == input.ResidentialDelivery ||
                    (this.ResidentialDelivery != null &&
                    this.ResidentialDelivery.Equals(input.ResidentialDelivery))
                ) && base.Equals(input) && 
                (
                    this.SaturdayDelivery == input.SaturdayDelivery ||
                    (this.SaturdayDelivery != null &&
                    this.SaturdayDelivery.Equals(input.SaturdayDelivery))
                ) && base.Equals(input) && 
                (
                    this.ScheduledShipmentDate == input.ScheduledShipmentDate ||
                    (this.ScheduledShipmentDate != null &&
                    this.ScheduledShipmentDate.Equals(input.ScheduledShipmentDate))
                ) && base.Equals(input) && 
                (
                    this.ShippingRule == input.ShippingRule ||
                    (this.ShippingRule != null &&
                    this.ShippingRule.Equals(input.ShippingRule))
                ) && base.Equals(input) && 
                (
                    this.ShippingTerms == input.ShippingTerms ||
                    (this.ShippingTerms != null &&
                    this.ShippingTerms.Equals(input.ShippingTerms))
                ) && base.Equals(input) && 
                (
                    this.ShippingZone == input.ShippingZone ||
                    (this.ShippingZone != null &&
                    this.ShippingZone.Equals(input.ShippingZone))
                ) && base.Equals(input) && 
                (
                    this.ShipSeparately == input.ShipSeparately ||
                    (this.ShipSeparately != null &&
                    this.ShipSeparately.Equals(input.ShipSeparately))
                ) && base.Equals(input) && 
                (
                    this.ShipVia == input.ShipVia ||
                    (this.ShipVia != null &&
                    this.ShipVia.Equals(input.ShipVia))
                ) && base.Equals(input) && 
                (
                    this.ShopForRates == input.ShopForRates ||
                    (this.ShopForRates != null &&
                    this.ShopForRates.Equals(input.ShopForRates))
                ) && base.Equals(input) && 
                (
                    this.UseCustomersAccount == input.UseCustomersAccount ||
                    (this.UseCustomersAccount != null &&
                    this.UseCustomersAccount.Equals(input.UseCustomersAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CancelByDate != null)
                    hashCode = hashCode * 59 + this.CancelByDate.GetHashCode();
                if (this.Canceled != null)
                    hashCode = hashCode * 59 + this.Canceled.GetHashCode();
                if (this.FOBPoint != null)
                    hashCode = hashCode * 59 + this.FOBPoint.GetHashCode();
                if (this.GroundCollect != null)
                    hashCode = hashCode * 59 + this.GroundCollect.GetHashCode();
                if (this.Insurance != null)
                    hashCode = hashCode * 59 + this.Insurance.GetHashCode();
                if (this.PreferredWarehouseID != null)
                    hashCode = hashCode * 59 + this.PreferredWarehouseID.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ResidentialDelivery != null)
                    hashCode = hashCode * 59 + this.ResidentialDelivery.GetHashCode();
                if (this.SaturdayDelivery != null)
                    hashCode = hashCode * 59 + this.SaturdayDelivery.GetHashCode();
                if (this.ScheduledShipmentDate != null)
                    hashCode = hashCode * 59 + this.ScheduledShipmentDate.GetHashCode();
                if (this.ShippingRule != null)
                    hashCode = hashCode * 59 + this.ShippingRule.GetHashCode();
                if (this.ShippingTerms != null)
                    hashCode = hashCode * 59 + this.ShippingTerms.GetHashCode();
                if (this.ShippingZone != null)
                    hashCode = hashCode * 59 + this.ShippingZone.GetHashCode();
                if (this.ShipSeparately != null)
                    hashCode = hashCode * 59 + this.ShipSeparately.GetHashCode();
                if (this.ShipVia != null)
                    hashCode = hashCode * 59 + this.ShipVia.GetHashCode();
                if (this.ShopForRates != null)
                    hashCode = hashCode * 59 + this.ShopForRates.GetHashCode();
                if (this.UseCustomersAccount != null)
                    hashCode = hashCode * 59 + this.UseCustomersAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
