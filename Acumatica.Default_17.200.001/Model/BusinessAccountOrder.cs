/* 
 * Default/17.200.001
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Acumatica.RESTClient.Model;
using System.ComponentModel.DataAnnotations;


namespace Acumatica.Default_17_200_001.Model
{
    /// <summary>
    /// BusinessAccountOrder
    /// </summary>
    [DataContract]
    public partial class BusinessAccountOrder : Entity,  IEquatable<BusinessAccountOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessAccountOrder" /> class.
        /// </summary>
        /// <param name="currencyID">currencyID.</param>
        /// <param name="customerOrder">customerOrder.</param>
        /// <param name="description">description.</param>
        /// <param name="orderedQty">orderedQty.</param>
        /// <param name="orderNbr">orderNbr.</param>
        /// <param name="orderTotal">orderTotal.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="orderVolume">orderVolume.</param>
        /// <param name="orderWeight">orderWeight.</param>
        /// <param name="requestedOn">requestedOn.</param>
        /// <param name="scheduledShipment">scheduledShipment.</param>
        /// <param name="shippingZone">shippingZone.</param>
        /// <param name="shipVia">shipVia.</param>
        /// <param name="status">status.</param>
        public BusinessAccountOrder(StringValue currencyID = default(StringValue), StringValue customerOrder = default(StringValue), StringValue description = default(StringValue), DecimalValue orderedQty = default(DecimalValue), StringValue orderNbr = default(StringValue), DecimalValue orderTotal = default(DecimalValue), StringValue orderType = default(StringValue), DecimalValue orderVolume = default(DecimalValue), DecimalValue orderWeight = default(DecimalValue), DateTimeValue requestedOn = default(DateTimeValue), DateTimeValue scheduledShipment = default(DateTimeValue), StringValue shippingZone = default(StringValue), StringValue shipVia = default(StringValue), StringValue status = default(StringValue), Guid? id = default(Guid?), long? rowNumber = default(long?), string note = default(string), Dictionary<string, Dictionary<string, CustomField>> custom = default(Dictionary<string, Dictionary<string, CustomField>>), List<FileLink> files = default(List<FileLink>)) : base(id, rowNumber, note, custom, files)
        {
            this.CurrencyID = currencyID;
            this.CustomerOrder = customerOrder;
            this.Description = description;
            this.OrderedQty = orderedQty;
            this.OrderNbr = orderNbr;
            this.OrderTotal = orderTotal;
            this.OrderType = orderType;
            this.OrderVolume = orderVolume;
            this.OrderWeight = orderWeight;
            this.RequestedOn = requestedOn;
            this.ScheduledShipment = scheduledShipment;
            this.ShippingZone = shippingZone;
            this.ShipVia = shipVia;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyID
        /// </summary>
        [DataMember(Name="CurrencyID", EmitDefaultValue=false)]
        public StringValue CurrencyID { get; set; }

        /// <summary>
        /// Gets or Sets CustomerOrder
        /// </summary>
        [DataMember(Name="CustomerOrder", EmitDefaultValue=false)]
        public StringValue CustomerOrder { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public StringValue Description { get; set; }

        /// <summary>
        /// Gets or Sets OrderedQty
        /// </summary>
        [DataMember(Name="OrderedQty", EmitDefaultValue=false)]
        public DecimalValue OrderedQty { get; set; }

        /// <summary>
        /// Gets or Sets OrderNbr
        /// </summary>
        [DataMember(Name="OrderNbr", EmitDefaultValue=false)]
        public StringValue OrderNbr { get; set; }

        /// <summary>
        /// Gets or Sets OrderTotal
        /// </summary>
        [DataMember(Name="OrderTotal", EmitDefaultValue=false)]
        public DecimalValue OrderTotal { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name="OrderType", EmitDefaultValue=false)]
        public StringValue OrderType { get; set; }

        /// <summary>
        /// Gets or Sets OrderVolume
        /// </summary>
        [DataMember(Name="OrderVolume", EmitDefaultValue=false)]
        public DecimalValue OrderVolume { get; set; }

        /// <summary>
        /// Gets or Sets OrderWeight
        /// </summary>
        [DataMember(Name="OrderWeight", EmitDefaultValue=false)]
        public DecimalValue OrderWeight { get; set; }

        /// <summary>
        /// Gets or Sets RequestedOn
        /// </summary>
        [DataMember(Name="RequestedOn", EmitDefaultValue=false)]
        public DateTimeValue RequestedOn { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledShipment
        /// </summary>
        [DataMember(Name="ScheduledShipment", EmitDefaultValue=false)]
        public DateTimeValue ScheduledShipment { get; set; }

        /// <summary>
        /// Gets or Sets ShippingZone
        /// </summary>
        [DataMember(Name="ShippingZone", EmitDefaultValue=false)]
        public StringValue ShippingZone { get; set; }

        /// <summary>
        /// Gets or Sets ShipVia
        /// </summary>
        [DataMember(Name="ShipVia", EmitDefaultValue=false)]
        public StringValue ShipVia { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public StringValue Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessAccountOrder {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CurrencyID: ").Append(CurrencyID).Append("\n");
            sb.Append("  CustomerOrder: ").Append(CustomerOrder).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OrderedQty: ").Append(OrderedQty).Append("\n");
            sb.Append("  OrderNbr: ").Append(OrderNbr).Append("\n");
            sb.Append("  OrderTotal: ").Append(OrderTotal).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  OrderVolume: ").Append(OrderVolume).Append("\n");
            sb.Append("  OrderWeight: ").Append(OrderWeight).Append("\n");
            sb.Append("  RequestedOn: ").Append(RequestedOn).Append("\n");
            sb.Append("  ScheduledShipment: ").Append(ScheduledShipment).Append("\n");
            sb.Append("  ShippingZone: ").Append(ShippingZone).Append("\n");
            sb.Append("  ShipVia: ").Append(ShipVia).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessAccountOrder);
        }

        /// <summary>
        /// Returns true if BusinessAccountOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessAccountOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessAccountOrder input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CurrencyID == input.CurrencyID ||
                    (this.CurrencyID != null &&
                    this.CurrencyID.Equals(input.CurrencyID))
                ) && base.Equals(input) && 
                (
                    this.CustomerOrder == input.CustomerOrder ||
                    (this.CustomerOrder != null &&
                    this.CustomerOrder.Equals(input.CustomerOrder))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.OrderedQty == input.OrderedQty ||
                    (this.OrderedQty != null &&
                    this.OrderedQty.Equals(input.OrderedQty))
                ) && base.Equals(input) && 
                (
                    this.OrderNbr == input.OrderNbr ||
                    (this.OrderNbr != null &&
                    this.OrderNbr.Equals(input.OrderNbr))
                ) && base.Equals(input) && 
                (
                    this.OrderTotal == input.OrderTotal ||
                    (this.OrderTotal != null &&
                    this.OrderTotal.Equals(input.OrderTotal))
                ) && base.Equals(input) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && base.Equals(input) && 
                (
                    this.OrderVolume == input.OrderVolume ||
                    (this.OrderVolume != null &&
                    this.OrderVolume.Equals(input.OrderVolume))
                ) && base.Equals(input) && 
                (
                    this.OrderWeight == input.OrderWeight ||
                    (this.OrderWeight != null &&
                    this.OrderWeight.Equals(input.OrderWeight))
                ) && base.Equals(input) && 
                (
                    this.RequestedOn == input.RequestedOn ||
                    (this.RequestedOn != null &&
                    this.RequestedOn.Equals(input.RequestedOn))
                ) && base.Equals(input) && 
                (
                    this.ScheduledShipment == input.ScheduledShipment ||
                    (this.ScheduledShipment != null &&
                    this.ScheduledShipment.Equals(input.ScheduledShipment))
                ) && base.Equals(input) && 
                (
                    this.ShippingZone == input.ShippingZone ||
                    (this.ShippingZone != null &&
                    this.ShippingZone.Equals(input.ShippingZone))
                ) && base.Equals(input) && 
                (
                    this.ShipVia == input.ShipVia ||
                    (this.ShipVia != null &&
                    this.ShipVia.Equals(input.ShipVia))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CurrencyID != null)
                    hashCode = hashCode * 59 + this.CurrencyID.GetHashCode();
                if (this.CustomerOrder != null)
                    hashCode = hashCode * 59 + this.CustomerOrder.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.OrderedQty != null)
                    hashCode = hashCode * 59 + this.OrderedQty.GetHashCode();
                if (this.OrderNbr != null)
                    hashCode = hashCode * 59 + this.OrderNbr.GetHashCode();
                if (this.OrderTotal != null)
                    hashCode = hashCode * 59 + this.OrderTotal.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.OrderVolume != null)
                    hashCode = hashCode * 59 + this.OrderVolume.GetHashCode();
                if (this.OrderWeight != null)
                    hashCode = hashCode * 59 + this.OrderWeight.GetHashCode();
                if (this.RequestedOn != null)
                    hashCode = hashCode * 59 + this.RequestedOn.GetHashCode();
                if (this.ScheduledShipment != null)
                    hashCode = hashCode * 59 + this.ScheduledShipment.GetHashCode();
                if (this.ShippingZone != null)
                    hashCode = hashCode * 59 + this.ShippingZone.GetHashCode();
                if (this.ShipVia != null)
                    hashCode = hashCode * 59 + this.ShipVia.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
